<?xml version="1.0" encoding="utf-8"?><book xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns5="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1998/Math/MathML" xmlns:ns3="http://www.w3.org/1999/xhtml" xmlns:ns="http://docbook.org/ns/docbook" revision="$Id: e0c2b3a8ceec5177ab0cc742600ad18da62856a1 $" version="5.0" xml:id="core.book">
  <info>
    <title>OSGi Core</title>

    <author>
      <orgname>OSGi Working Group</orgname>
    </author>

    <releaseinfo xml:id="core.book-release">Release 8</releaseinfo>

    <pubdate>October 2020</pubdate>

    <copyright><year>2000, 2021</year><holder>Eclipse Foundation</holder></copyright>
  </info>

  <preface revision="$Id: fad7b9fff6a0a774f6e8176003126ec46f4d7725 $" role="frontmatter" version="5.0" xml:base="../preface/eclipse.foundation.specification.license.1.0.xml">
  <?dbhtml filename="LICENSE.html" ?>

  <title>LICENSE</title>

  <section>
    <title>Eclipse Foundation Specification License – v1.0</title>

    <para>By using and/or copying this document, or the Eclipse Foundation
    document from which this statement is linked, you (the licensee) agree
    that you have read, understood, and will comply with the following terms
    and conditions:</para>

    <para>Permission to copy, and distribute the contents of this document, or
    the Eclipse Foundation document from which this statement is linked, in
    any medium for any purpose and without fee or royalty is hereby granted,
    provided that you include the following on ALL copies of the document, or
    portions thereof, that you use:</para>

    <itemizedlist>
      <listitem>
        <para>link or URL to the original Eclipse Foundation document.</para>
      </listitem>

      <listitem>
        <para>All existing copyright notices, or if one does not exist, a
        notice (hypertext is preferred, but a textual representation is
        permitted) of the form: "Copyright © [$date-of-document] Eclipse
        Foundation, Inc. &lt;&lt;url to this license&gt;&gt;"</para>
      </listitem>
    </itemizedlist>

    <para>Inclusion of the full text of this NOTICE must be provided. We
    request that authorship attribution be provided in any software,
    documents, or other items or products that you create pursuant to the
    implementation of the contents of this document, or any portion
    thereof.</para>

    <para>No right to create modifications or derivatives of Eclipse
    Foundation documents is granted pursuant to this license, except anyone
    may prepare and distribute derivative works and portions of this document
    in software that implements the specification, in supporting materials
    accompanying such software, and in documentation of such software,
    PROVIDED that all such works include the notice below. HOWEVER, the
    publication of derivative works of this document for use as a technical
    specification is expressly prohibited.</para>

    <para>The notice is:</para>

    <para>"Copyright © [$date-of-document] Eclipse Foundation. This software
    or document includes material copied from or derived from [title and URI
    of the Eclipse Foundation specification document]."</para>

    <section>
      <title>Disclaimers</title>

      <para>THIS DOCUMENT IS PROVIDED "AS IS," AND THE COPYRIGHT HOLDERS AND
      THE ECLIPSE FOUNDATION MAKE NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR
      IMPLIED, INCLUDING, BUT NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY,
      FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, OR TITLE; THAT THE
      CONTENTS OF THE DOCUMENT ARE SUITABLE FOR ANY PURPOSE; NOR THAT THE
      IMPLEMENTATION OF SUCH CONTENTS WILL NOT INFRINGE ANY THIRD PARTY
      PATENTS, COPYRIGHTS, TRADEMARKS OR OTHER RIGHTS.</para>

      <para>THE COPYRIGHT HOLDERS AND THE ECLIPSE FOUNDATION WILL NOT BE
      LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL OR CONSEQUENTIAL DAMAGES
      ARISING OUT OF ANY USE OF THE DOCUMENT OR THE PERFORMANCE OR
      IMPLEMENTATION OF THE CONTENTS THEREOF.</para>

      <para>The name and trademarks of the copyright holders or the Eclipse
      Foundation may NOT be used in advertising or publicity pertaining to
      this document or its contents without specific, written prior
      permission. Title to copyright in this document will at all times remain
      with copyright holders.</para>
    </section>
  </section>
</preface>

  <preface revision="$Id: 72d2865702bafeed781e129ebc1887f7a9367b19 $" role="frontmatter" version="5.0" xml:base="../preface/preface.xml">
  <?dbhtml filename="preface.html" ?>

  <title>Preface</title>

  <section>
    <title>Implementation Requirements</title>

    <para>An implementation of a Specification: (i) must fully implement the
    Specification including all its required interfaces and functionality;
    (ii) must not modify, subset, superset or otherwise extend the OSGi Name
    Space, or include any public or protected packages, classes, Java
    interfaces, fields or methods within the OSGi Name Space other than those
    required and authorized by the Specification. An implementation that does
    not satisfy limitations (i)-(ii) is not considered an implementation of
    the Specification and must not be described as an implementation of the
    Specification. "OSGi Name Space" shall mean the public class or interface
    declarations whose names begin with "org.osgi" or any recognized
    successors or replacements thereof. An implementation of a Specification
    must not claim to be a compatible implementation of the Specification
    unless it passes the Technology Compatibility Kit ("TCK") for the
    Specification.</para>
  </section>

  <section role="feedback">
    <title>Feedback</title>

    <para>This specification can be downloaded from the OSGi Documentation web
    site:</para>

    <para><code><link xlink:href="https://docs.osgi.org/specification/"/></code></para>

    <para>Comments about this specification can be raised at:</para>

    <para><code><link xlink:href="https://github.com/osgi/osgi/issues"/></code></para>
  </section>
</preface>

  <chapter label="1" revision="$Id: bae5db9128ba86a327f80f3559df66a368200940 $" version="5.0" xml:id="framework.introduction" xml:base="001/introduction.xml">
  <title>Introduction</title>

  <para>The OSGi™ Working Group's mission is to create
  open specifications for the network delivery of managed services to local
  networks and devices. The OSGi organization is the leading standard for
  next-generation Internet services to homes, cars, mobile phones, desktops,
  small offices, and other environments.</para>

  <para>The OSGi Core specification delivers an open, common architecture for
  service providers, developers, software vendors, gateway operators and
  equipment vendors to develop, deploy and manage services in a coordinated
  fashion. It enables an entirely new category of smart devices due to its
  flexible and managed deployment of services. OSGi specifications target
  set-top boxes, service gateways, cable modems, consumer electronics, PCs,
  industrial computers, cars, mobile phones, and more. Devices that implement
  the OSGi specifications will enable service providers like telcos, cable
  operators, utilities, and others to deliver differentiated and valuable
  services over their networks.</para>

  <para>This is the sixth release of the OSGi Core specification developed by
  representatives from OSGi member companies. The OSGi Core <xref endterm="core.book-release" linkend="core.book"/> mostly extends the
  existing APIs into new areas. The few modifications to existing APIs are
  backward compatible so that applications for previous releases should run
  unmodified on <xref endterm="core.book-release" linkend="core.book"/>
  Frameworks. The built-in version management mechanisms allow bundles written
  for the new release to adapt to the old Framework implementations, if
  necessary.</para>

  <section>
    <title>OSGi Framework Overview</title>

    <para>The Framework forms the core of the OSGi Specifications. It provides
    a general-purpose, secure, and managed Java framework that supports the
    deployment of extensible and downloadable applications known as
    <emphasis>bundles</emphasis>.</para>

    <para>OSGi-compliant devices can download and install OSGi bundles, and
    remove them when they are no longer required. The Framework manages the
    installation and update of bundles in an OSGi environment in a dynamic and
    scalable fashion. To achieve this, it manages the dependencies between
    bundles and services in detail.</para>

    <para>It provides the bundle developer with the resources necessary to
    take advantage of Java's platform independence and dynamic code-loading
    capability in order to easily develop services for small-memory devices
    that can be deployed on a large scale.</para>

    <para>The functionality of the Framework is divided in the following
    layers:</para>

    <itemizedlist>
      <listitem>
        <para>Security Layer</para>
      </listitem>

      <listitem>
        <para>Module Layer</para>
      </listitem>

      <listitem>
        <para>Life Cycle Layer</para>
      </listitem>

      <listitem>
        <para>Service Layer</para>
      </listitem>

      <listitem>
        <para>Actual Services</para>
      </listitem>
    </itemizedlist>

    <para>This layering is depicted in <xref linkend="i478414"/>.</para>

    <figure xml:id="i478414">
      <title>Layering</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="1.881in" contentwidth="4.816in" fileref="layering.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The Security Layer is based on Java security but adds a number of
    constraints and fills in some of the blanks that standard Java leaves
    open. It defines a secure packaging format as well as the runtime
    interaction with the Java security layer. The Security Layer is described
    in <xref linkend="framework.security"/>.</para>

    <para>The Module Layer defines a modularization model for Java. It
    addresses some of the shortcomings of Java's deployment model. The
    modularization layer has strict rules for sharing Java packages between
    bundles or hiding packages from other bundles. The Module Layer can be
    used without the life cycle and Service Layer. The Life Cycle Layer
    provides an API to manage the <emphasis>bundles</emphasis> in the Module
    Layer, while the Service Layer provides a communication model for the
    bundles. The Module Layer is described in <xref linkend="framework.module"/>.</para>

    <para>The Life Cycle Layer provides a life cycle API to bundles. This API
    provides a runtime model for bundles. It defines how bundles are started
    and stopped as well as how bundles are installed, updated and uninstalled.
    Additionally, it provides a comprehensive event API to allow a management
    bundle to control the operations of the OSGi framework. The Life Cycle
    Layer requires the Module Layer but the Security Layer is optional. A more
    extensive description of the Life Cycle layer can be found at <xref linkend="framework.lifecycle"/>.</para>

    <para>The Service Layer provides a dynamic, concise and consistent
    programming model for Java bundle developers, simplifying the development
    and deployment of service bundles by de-coupling the service's
    specification (Java interface) from its implementations. This model allows
    bundle developers to bind to services only using their interface
    specifications. The selection of a specific implementation, optimized for
    a specific need or from a specific vendor, can thus be deferred to
    run-time.</para>

    <para>The framework uses the service layer to provide an extension
    mechanism, called hooks. Hooks are services that are used by the framework
    to provide additional functionality.</para>

    <para>A consistent programming model helps bundle developers cope with
    scalability issues in many different dimensions - critical because the
    Framework is intended to run on a variety of devices whose differing
    hardware characteristics may affect many aspects of a service
    implementation. Consistent interfaces insure that the software components
    can be mixed and matched and still result in stable systems.</para>

    <para>The Framework allows bundles to select an available implementation
    at run-time through the Framework service registry. Bundles register new
    services, receive notifications about the state of services, or look up
    existing services to adapt to the current capabilities of the device. This
    aspect of the Framework makes an installed bundle extensible after
    deployment: new bundles can be installed for added features or existing
    bundles can be modified and updated without requiring the system to be
    restarted.</para>

    <para>The Service Layer is described in <xref linkend="framework.service"/>.</para>

    <para>The interactions between the layers is depicted in <xref linkend="i478247"/>.</para>

    <figure xml:id="i478247">
      <title>Interactions between layers</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="2.549in" contentwidth="4.775in" fileref="layer-interactions.svg"/>
        </imageobject>
      </mediaobject>
    </figure>
  </section>

  <section xml:id="i476430">
    <title>Reader Level</title>

    <para>This specification is written for the following audiences:</para>

    <itemizedlist>
      <listitem>
        <para>Application developers</para>
      </listitem>

      <listitem>
        <para>Framework and system service developers (system
        developers)</para>
      </listitem>

      <listitem>
        <para>Architects</para>
      </listitem>
    </itemizedlist>

    <para>The OSGi Specifications assume that the reader has at least one year
    of practical experience in writing Java programs. Experience with embedded
    systems and server environments is a plus. Application developers must be
    aware that the OSGi environment is significantly more dynamic than
    traditional desktop or server environments.</para>

    <para>System developers require a <emphasis>very</emphasis> deep
    understanding of Java. At least three years of Java coding experience in a
    system environment is recommended. A Framework implementation will use
    areas of Java that are not normally encountered in traditional
    applications. Detailed understanding is required of class loaders, garbage
    collection, Java security, and Java native library loading.</para>

    <para>Architects should focus on the introduction of each subject. This
    introduction contains a general overview of the subject, the requirements
    that influenced its design, and a short description of its operation as
    well as the entities that are used. The introductory sections require
    knowledge of Java concepts like classes and interfaces, but should not
    require coding experience.</para>

    <para>Most of these specifications are equally applicable to application
    developers and system developers.</para>
  </section>

  <section>
    <title>Conventions and Terms</title>

    <section>
      <title>Typography</title>

      <para>A fixed width, non-serif typeface (<code>sample</code>) indicates
      the term is a Java package, class, interface, or member name. Text
      written in this typeface is always related to coding.</para>

      <para>Emphasis (<emphasis>sample</emphasis>) is used the first time an
      important concept is introduced. Its explanation usually follows
      directly after the introduction.</para>

      <para>When an example contains a line that must be broken into multiple
      lines, the <code>«</code> character is used. Spaces must be ignored in
      this case. For example:</para>

      <programlisting>http://www.acme.com/sp/ «
file?abc=12</programlisting>

      <para>is equivalent to:</para>

      <programlisting>http://www.acme.com/sp/file?abc=12</programlisting>
    </section>

    <section xml:id="framework.general.syntax">
      <title>General Syntax Definitions</title>

      <para>In many cases in these specifications, a syntax must be described.
      This syntax is based on the following symbols:</para>

      <programlisting>*           Repetition of the previous element zero or
            more times, e.g. ( ',' element )*
+           Repetition one or more times
?           Previous element is optional
( ... )     Grouping
'...'       Literal
|           Or
[...]       Set (one of)
..          list, e.g. 1..5 is the list 1 2 3 4 5
&lt;...&gt;       Externally defined token
~           Not</programlisting>

      <para>The following terminals are pre defined and used throughout the
      specifications:</para>

      <programlisting>ws              ::= &lt;see Character.isWhitespace&gt;
digit           ::= [0..9]
alpha           ::= [a..zA..Z]
alphanum        ::= alpha | digit
token           ::= ( alphanum | '_' | '-' )+
number          ::= digit+
jletter         ::= &lt;see <xref linkend="framework.introduction-jls"/>
                     for JavaLetter&gt;
jletterordigit  ::= &lt;see <xref linkend="framework.introduction-jls"/>
                     for JavaLetterOrDigit&gt;

qname           ::= &lt;see <xref linkend="framework.introduction-jls"/>
                     for fully qualified class names&gt;
identifier      ::= jletter jletterordigit *
extended        ::= ( alphanum | '_' | '-' | '.' )+
quoted-string   ::= '"' ( ~["\#x0D#x0A#x00] | '\"' | '\\' )* '"'
argument        ::= extended  | quoted-string
parameter       ::= directive | attribute
directive       ::= extended ':=' argument
attribute       ::= extended '=' argument

unique-name     ::= identifier ( '.' identifier )*
symbolic-name   ::= token ( '.' token )*
package-name    ::= unique-name

path            ::= special-chars+ | quoted-string
special-chars   ::= ~["\#x0D#x0A#x00:=;,&lt;see
                     <xref linkend="framework.introduction-jls"/> for whitespace&gt;]</programlisting>

      <para>Whitespaces between terminals are ignored unless specifically
      noted. Any value that contains a space, a comma, colon, semi-colon,
      equal sign or any other character that is part of a terminal in the
      grammar must be quoted.</para>
    </section>

    <section>
      <title>Object Oriented Terminology</title>

      <para>Concepts like classes, interfaces, objects, and services are
      distinct but subtly different. For example, "LogService" could mean an
      instance of the class <code>LogService</code>, could refer to the class
      <code>LogService</code>, or could indicate the functionality of the
      overall Log Service. Experts usually understand the meaning from the
      context, but this understanding requires mental effort. To highlight
      these subtle differences, the following conventions are used.</para>

      <para>When the class is intended, its name is spelled exactly as in the
      Java source code and displayed in a fixed-width typeface: for example,
      the "<code>HttpService</code> class", "a method in the <code>HttpContext
      class</code>" or "a <code>javax.servlet.Servlet</code> object". A class
      name is used in its fully qualified form, like
      <code>javax.servlet.Servlet</code>, when the package is not obvious from
      the context, nor is it in one of the well known java packages like
      <code>java.lang</code>, <code>java.io</code>, <code>java.util</code> and
      <code>java.net</code>. Otherwise, the package is omitted like in
      <code>String</code>.</para>

      <para>In many cases, a type can be used as a scalar but also a
      collection of that type or an array of that type. In those cases, a
      simple + will be suffixed to the type. For example <code>String+</code>,
      indicates that a <code>String</code>, a <code>String[]</code>, and a
      <code>Collection&lt;String&gt;</code> are all valid forms.</para>

      <para>Exception and permission classes are not followed by the word
      "object". Readability is improved when the "object" suffix is avoided.
      For example, "to throw a Security Exception" and to "to have File
      Permission" is more readable then "to have a <code>FilePermission</code>
      object".</para>

      <para>Permissions can further be qualified with their actions.
      <code>ServicePermission[com.acme.*,GET|REGISTER]</code> means a
      <code>ServicePermission</code> with the action <code>GET</code> and
      <code>REGISTER</code> for all service names starting with
      <code>com.acme</code>. A <code>ServicePermission[Producer|Consumer,
      REGISTER]</code> means the <code>ServicePermission</code> for the
      <code>Producer</code> or <code>Consumer</code> class with
      <code>REGISTER</code> action.</para>

      <para>When discussing functionality of a class rather than the
      implementation details, the class name is written as normal text. This
      convention is often used when discussing services. For example, "the
      User Admin service" is more readable.</para>

      <para>Some services have the word "Service" embedded in their class
      name. In those cases, the word "service" is only used once but is
      written with an upper case S. For example, "the Log Service
      performs".</para>

      <para>Service objects are registered with the OSGi Framework.
      Registration consists of the service object, a set of properties, and a
      list of classes and interfaces implemented by this service object. The
      classes and interfaces are used for type safety <emphasis>and</emphasis>
      naming. Therefore, it is said that a service object is registered
      <emphasis>under</emphasis> a class/interface. For example, "This service
      object is registered under <code>PermissionAdmin</code>."</para>
    </section>

    <section>
      <title>Diagrams</title>

      <para>The diagrams in this document illustrate the specification and are
      not normative. Their purpose is to provide a high-level overview on a
      single page. The following paragraphs describe the symbols and
      conventions used in these diagrams.</para>

      <para>Classes or interfaces are depicted as rectangles, as in <xref linkend="i309274"/>. Interfaces are indicated with the qualifier
      <code>&lt;&lt;interface&gt;&gt;</code> as the first line. The name of
      the class/interface is indicated in bold when it is part of the
      specification. Implementation classes are sometimes shown to demonstrate
      a possible implementation. Implementation class names are shown in plain
      text. In certain cases class names are abbreviated. This is indicated by
      ending the abbreviation with a full stop.</para>

      <figure xml:id="i309274">
        <title>Class and interface symbol</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="0.697in" contentwidth="6.500in" fileref="type-symbols.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>If an interface or class is used as a service object, it will have
      a black triangle in the bottom right corner.</para>

      <figure>
        <title>Service symbol</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="0.500in" contentwidth="6.500in" fileref="service-symbol.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Service are crucial interaction elements and they can occur many
      times in diagrams describing services. Therefore, an alternative service
      symbol is the triangle. Triangles can be connected in different ways,
      representing different meanings:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Point</emphasis> - Connections to the point of a
          triangle indicate the registration. This makes the point of the
          triangle point to the object that receives the method calls from the
          service users.</para>
        </listitem>

        <listitem>
          <para><emphasis>Straight Side</emphasis> - Connections to the
          straight side indicate service clients. Clients call the methods of
          the service.</para>
        </listitem>

        <listitem>
          <para><emphasis>Angled Side</emphasis> - The angled side is reserved
          for service listeners.</para>
        </listitem>
      </itemizedlist>

      <figure>
        <title>Alternative Service symbol</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.214in" contentwidth="6.500in" fileref="service-symbol-alternative.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Inheritance (the <code>extends</code> or <code>implements</code>
      keyword in Java class definitions) is indicated with an arrow. <xref linkend="i313614"/> shows that the <code>AdminPermission</code> class
      implements or extends the <code>Permission</code> class.</para>

      <figure xml:id="i313614">
        <title>Inheritance (implements or extends) symbol</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="0.500in" contentwidth="6.500in" fileref="symbol-inheritance.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Relations are depicted with a line. The cardinality of the
      relation is given explicitly when relevant. <xref linkend="i309856"/>
      shows that each (1) <code>BundleContext</code> object is related to 0 or
      more <code>BundleListener</code> objects, and that each
      <code>BundleListener</code> object is related to a single
      <code>BundleContext</code> object. Relations usually have some
      description associated with them. This description should be read from
      left to right and top to bottom, and includes the classes on both sides.
      For example: "A <code>BundleContext</code> object delivers bundle events
      to zero or more <code>BundleListener</code> objects."</para>

      <figure xml:id="i309856">
        <title>Relations symbol</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="0.500in" contentwidth="6.500in" fileref="symbol-relations.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Associations are depicted with a dashed line. Associations are
      between classes, and an association can be placed on a relation. For
      example, "every <code>ServiceRegistration</code> object has an
      associated <code>ServiceReference</code> object." This association does
      not have to be a hard relationship, but could be derived in some
      way.</para>

      <para>When a relationship is qualified by a name or an object, it is
      indicated by drawing a dotted line perpendicular to the relation and
      connecting this line to a class box or a description. <xref linkend="i313192"/> shows that the relationship between a
      <code>UserAdmin</code> class and a <code>Role</code> class is qualified
      by a name. Such an association is usually implemented with a
      <code>Dictionary</code> or <code>Map</code> object.</para>

      <figure xml:id="i313192">
        <title>Associations symbol</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="0.819in" contentwidth="6.500in" fileref="symbol-associations.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Bundles are entities that are visible in normal application
      programming. For example, when a bundle is stopped, all its services
      will be unregistered. Therefore, the classes/interfaces that are grouped
      in bundles are shown on a grey rectangle as is shown in <xref linkend="i429419"/>.</para>

      <figure xml:id="i429419">
        <title>Bundles</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.572in" contentwidth="7.000in" fileref="bundles.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Key Words</title>

      <para>This specification consistently uses the words
      <emphasis>can</emphasis>, <emphasis>should,</emphasis> and
      <emphasis>must</emphasis>. Their meaning is well-defined in:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>must</emphasis> - An absolute requirement. Both the
          Framework implementation and bundles have obligations that are
          required to be fulfilled to conform to this specification.</para>
        </listitem>

        <listitem>
          <para><emphasis>should</emphasis> - Recommended. It is strongly
          recommended to follow the description, but reasons may exist to
          deviate from this recommendation.</para>
        </listitem>

        <listitem>
          <para><emphasis>may</emphasis> or <emphasis>can</emphasis> -
          Optional. Implementations must still be interoperable when these
          items are not implemented.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="framework.numbered.lists">
      <title>Numbered Lists</title>

      <para>When a specification uses a numbered list, unless otherwise
      specified, the intention is that the actions described by the items in
      the list happen in the numerical order of the items. From a Java
      concurrency point-of-view, this means that the actions described in
      lower numbered items <emphasis>happens-before</emphasis> the actions
      described in higher numbered items.</para>
    </section>
  </section>

  <section>
    <title>Version Information</title>

    <para>This document specifies OSGi Core <xref endterm="core.book-release" linkend="core.book"/>. This specification is backward compatible to all
    prior releases.</para>

    <para>This specification is based upon the <xref linkend="framework.introduction-jls"/>.</para>

    <para>All Security, Module, Life Cycle and Service Layers are part of the
    Framework Specification</para>

    <para>Components in this specification have their own specification
    version, independent of the document release number. The following table
    summarizes the packages and specification versions for the different
    subjects.</para>

    <para>When a component is represented in a bundle, a version is needed in
    the declaration of the Import-Package or Export-Package manifest
    headers.</para>

    <table pgwide="1">
      <title>Packages and versions OSGi Core</title>

      <tgroup cols="3">
        <colspec colnum="1" colwidth="3.5*"/>

        <colspec colnum="2" colwidth="3*"/>

        <colspec colnum="3" colwidth="1*"/>

        <thead>
          <row>
            <entry>Item</entry>

            <entry>Package</entry>

            <entry>Version</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>Framework Specification (all layers)</entry>

            <entry><code><xref linkend="org.osgi.framework"/></code></entry>

            <entry><code><xref endterm="org.osgi.framework-version" linkend="framework.api"/></code></entry>
          </row>

          <row>
            <entry><link linkend="framework.lifecycle-frameworks">Framework
            Launching</link></entry>

            <entry><code><xref linkend="org.osgi.framework.launch"/></code></entry>

            <entry><code><xref endterm="org.osgi.framework.launch-version" linkend="framework.lifecycle-frameworks"/></code></entry>
          </row>

          <row>
            <entry><xref linkend="framework.resource" xrefstyle="template:%n %t"/></entry>

            <entry><code><xref linkend="org.osgi.resource"/></code></entry>

            <entry><code><xref endterm="org.osgi.resource-version" linkend="framework.resource"/></code></entry>
          </row>

          <row>
            <entry><xref linkend="framework.wiring" xrefstyle="template:%n %t"/></entry>

            <entry><code><xref linkend="org.osgi.framework.wiring"/></code></entry>

            <entry><code><xref endterm="org.osgi.framework.wiring-version" linkend="framework.wiring"/></code></entry>
          </row>

          <row>
            <entry><xref linkend="framework.namespaces" xrefstyle="template:%n %t"/></entry>

            <entry><code><xref linkend="org.osgi.framework.namespace"/></code></entry>

            <entry><code><xref endterm="org.osgi.framework.namespace-version" linkend="framework.namespaces"/></code></entry>
          </row>

          <row>
            <entry><xref linkend="framework.startlevel" xrefstyle="template:%n %t"/></entry>

            <entry><code><xref linkend="org.osgi.framework.startlevel"/></code></entry>

            <entry><code><xref endterm="org.osgi.framework.startlevel-version" linkend="framework.startlevel"/></code></entry>
          </row>

          <row>
            <entry><xref linkend="service.condpermadmin" xrefstyle="template:%n %t"/></entry>

            <entry><code><xref linkend="org.osgi.service.condpermadmin"/></code></entry>

            <entry><code><xref endterm="org.osgi.service.condpermadmin-version" linkend="service.condpermadmin"/></code></entry>
          </row>

          <row>
            <entry><xref linkend="service.permissionadmin" xrefstyle="template:%n %t"/></entry>

            <entry><code><xref linkend="org.osgi.service.permissionadmin"/></code></entry>

            <entry><code><xref endterm="org.osgi.service.permissionadmin-version" linkend="service.permissionadmin"/></code></entry>
          </row>

          <row>
            <entry><xref linkend="service.url" xrefstyle="template:%n %t"/></entry>

            <entry><code><xref linkend="org.osgi.service.url"/></code></entry>

            <entry><code><xref endterm="org.osgi.service.url-version" linkend="service.url"/></code></entry>
          </row>

          <row>
            <entry><xref linkend="framework.resolverhooks" xrefstyle="template:%n %t"/></entry>

            <entry><code><xref linkend="org.osgi.framework.hooks.resolver"/></code></entry>

            <entry><code><xref endterm="org.osgi.framework.hooks.resolver-version" linkend="framework.resolverhooks"/></code></entry>
          </row>

          <row>
            <entry><xref linkend="framework.bundlehooks" xrefstyle="template:%n %t"/></entry>

            <entry><code><xref linkend="org.osgi.framework.hooks.bundle"/></code></entry>

            <entry><code><xref endterm="org.osgi.framework.hooks.bundle-version" linkend="framework.bundlehooks"/></code></entry>
          </row>

          <row>
            <entry><xref linkend="framework.servicehooks" xrefstyle="template:%n %t"/></entry>

            <entry><code><xref linkend="org.osgi.framework.hooks.service"/></code></entry>

            <entry><code><xref endterm="org.osgi.framework.hooks.service-version" linkend="framework.servicehooks"/></code></entry>
          </row>

          <row>
            <entry><xref linkend="framework.weavinghooks" xrefstyle="template:%n %t"/></entry>

            <entry><code><xref linkend="org.osgi.framework.hooks.weaving"/></code></entry>

            <entry><code><xref endterm="org.osgi.framework.hooks.weaving-version" linkend="framework.weavinghooks"/></code></entry>
          </row>

          <row>
            <entry><xref linkend="framework.dto" xrefstyle="template:%n %t"/></entry>

            <entry><para><code><xref linkend="org.osgi.dto"/></code></para><para><code><xref linkend="org.osgi.framework.dto"/></code></para><para><code><xref linkend="org.osgi.framework.startlevel.dto"/></code></para><para><code><xref linkend="org.osgi.framework.wiring.dto"/></code></para><para><code><xref linkend="org.osgi.resource.dto"/></code></para></entry>

            <entry><code><xref endterm="org.osgi.dto-version" linkend="framework.dto"/></code></entry>
          </row>

          <row>
            <entry><xref linkend="service.resolver" xrefstyle="template:%n %t"/></entry>

            <entry><code><xref linkend="org.osgi.service.resolver"/></code></entry>

            <entry><code><xref endterm="org.osgi.service.resolver-version" linkend="service.resolver"/></code></entry>
          </row>

          <row>
            <entry><xref linkend="service.condition" xrefstyle="template:%n %t"/></entry>

            <entry><code><xref linkend="org.osgi.service.condition"/></code></entry>

            <entry><code><xref endterm="org.osgi.service.condition-version" linkend="service.condition"/></code></entry>
          </row>

          <row>
            <entry><xref linkend="framework.connect" xrefstyle="template:%n %t"/></entry>

            <entry><code><xref linkend="org.osgi.framework.connect"/></code></entry>

            <entry><code><xref endterm="org.osgi.framework.connect-version" linkend="framework.connect"/></code></entry>
          </row>

          <row>
            <entry><xref linkend="service.log" xrefstyle="template:%n %t"/></entry>

            <entry><para><code><xref linkend="org.osgi.service.log"/></code></para><para><code><xref linkend="org.osgi.service.log.admin"/></code></para></entry>

            <entry><code><xref endterm="org.osgi.service.log-version" linkend="service.log"/></code></entry>
          </row>

          <row>
            <entry><xref linkend="util.tracker" xrefstyle="template:%n %t"/></entry>

            <entry><code><xref linkend="org.osgi.util.tracker"/></code></entry>

            <entry><code><xref endterm="org.osgi.util.tracker-version" linkend="util.tracker"/></code></entry>
          </row>

          <row>
            <entry><link linkend="org.osgi.annotation.versioning">Versioning
            Annotations</link></entry>

            <entry><code><xref linkend="org.osgi.annotation.versioning"/></code></entry>

            <entry><code><xref endterm="org.osgi.annotation.versioning-version" linkend="org.osgi.annotation.versioning"/></code></entry>
          </row>

          <row>
            <entry><link linkend="org.osgi.annotation.bundle">Bundle
            Annotations</link></entry>

            <entry><code><xref linkend="org.osgi.annotation.bundle"/></code></entry>

            <entry><code><xref endterm="org.osgi.annotation.bundle-version" linkend="org.osgi.annotation.bundle"/></code></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>A compliant framework implementation must implement all of the
    specifications in this document except as outlined below.</para>

    <para><itemizedlist>
        <listitem>
          <para><xref linkend="service.condpermadmin" xrefstyle="template:%n %t"/> and <xref linkend="service.permissionadmin" xrefstyle="template:%n %t"/> are
          mandatory only if <xref linkend="framework.security" xrefstyle="template:%n %t"/> is supported and a Security Manager is
          installed.</para>
        </listitem>

        <listitem>
          <para><xref linkend="service.url" xrefstyle="template:%n %t"/> is
          mandatory if the framework implementation system bundle exports the
          <xref linkend="org.osgi.service.url"/> package.</para>
        </listitem>

        <listitem>
          <para><xref linkend="service.log" xrefstyle="template:%n %t"/> is
          mandatory if the framework implementation system bundle exports the
          <xref linkend="org.osgi.service.log"/> package.</para>
        </listitem>

        <listitem>
          <para><xref linkend="util.tracker" xrefstyle="template:%n %t"/> is
          optional.</para>
        </listitem>
      </itemizedlist></para>
  </section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="framework.introduction-jls"><title>Java Language
      Specification: Java SE 8 Edition</title><biblioid class="uri"><link xlink:href="https://docs.oracle.com/javase/specs/jls/se8/html/index.html"/></biblioid></bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter label="2" revision="$Id: 41fb82b78b0ce38e8faee1a5cca0619ebd3e7e24 $" version="5.0" xml:id="framework.security" xml:base="002/framework.security.xml">
  <title>Security Layer</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.framework-version" linkend="org.osgi.framework"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>The OSGi Security Layer is an optional layer that underlies the OSGi
    framework. The layer is based on the Java security architecture. It
    provides the infrastructure to deploy and manage applications that must
    run in fine-grained controlled environments.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Fine-grained</emphasis> - The control of
          applications running in an OSGi Framework must allow for detailed
          control of those applications.</para>
        </listitem>

        <listitem>
          <para><emphasis>Manageable</emphasis> - The security layer itself
          does not define an API to control the applications. The management
          of the security layer is left to the life cycle layer.</para>
        </listitem>

        <listitem>
          <para><emphasis>Optional</emphasis> - The security layer is
          optional.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section xml:id="framework.security.securityoverview">
    <title>Security Overview</title>

    <para>The Framework security model is based on the Java specification. If
    security checks are performed, they must be done according to <xref linkend="i1488926"/>. It is assumed that the reader is familiar with this
    specification. The security layer is optional, see <xref linkend="i1526852"/>.</para>

    <section>
      <title>Code Authentication</title>

      <para>The OSGi framework can authenticate code in the following
      ways:</para>

      <itemizedlist>
        <listitem>
          <para>By location</para>
        </listitem>

        <listitem>
          <para>By signer</para>
        </listitem>
      </itemizedlist>

      <para>At higher layers there are defined services that can manage the
      permissions that are associated with the authenticated unit of code.
      These services are:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Permission Admin service</emphasis> - Manages the
          permission based on full location strings.</para>
        </listitem>

        <listitem>
          <para><emphasis>Conditional Permission Admin service</emphasis> -
          Manages the permissions based on a comprehensive conditional model,
          where the conditions can test for location or signer.</para>
        </listitem>
      </itemizedlist>

      <para>For signing, this requires the JAR files to be signed; this is
      described in <xref linkend="framework.security.digitallysignedjar"/>.</para>
    </section>

    <section xml:id="i1526852">
      <title>Optional Security</title>

      <para>The Java platform on which the Framework runs must provide the
      Java Security APIs necessary for Java permissions. On
      resource-constrained platforms, these Java Security APIs may be stubs
      that allow the bundle classes to be loaded and executed, but the stubs
      never actually perform the security checks. The behavior of these stubs
      must be as follows:</para>

      <itemizedlist>
        <listitem>
          <para><code>checkPermission</code> - Return without throwing a
          <code>SecurityException</code>.</para>
        </listitem>

        <listitem>
          <para><code>checkGuard</code> - Return without throwing a
          <code>SecurityException</code>.</para>
        </listitem>

        <listitem>
          <para><code>implies</code> - Return <code>true</code>.</para>
        </listitem>
      </itemizedlist>

      <para>This behavior allows code to run as if all bundles have
      <code>AllPermission</code>.</para>
    </section>
  </section>

  <section xml:id="framework.security.digitallysignedjar">
    <title>Digitally Signed JAR Files</title>

    <para>This section defines in detail how JAR files must be signed. This
    section therefore overlaps with the different JAR file specifications that
    are part of the different versions of Java. The reason for this
    duplication is that there are many aspects left as optional or not
    well-defined in these specifications. A reference was therefore
    insufficient.</para>

    <para>Digitally signing is a security feature that verifies the
    following:</para>

    <itemizedlist>
      <listitem>
        <para>Authenticates the signer</para>
      </listitem>

      <listitem>
        <para>Ensures that the content has not been modified after it was
        signed by the principal.</para>
      </listitem>
    </itemizedlist>

    <para>In an OSGi Framework, the principals that signed a JAR become
    associated with that JAR. This association is then used to:</para>

    <itemizedlist>
      <listitem>
        <para>Grant permissions to a JAR based on the authenticated
        principal</para>
      </listitem>

      <listitem>
        <para>Target a set of bundles by principal for a permission to operate
        on or with those bundles</para>
      </listitem>
    </itemizedlist>

    <para>For example, an Operator can grant the ACME company the right to use
    networking on their devices. The ACME company can then use networking in
    every bundle they digitally sign and deploy on the Operator's device.
    Also, a specific bundle can be granted permission to only manage the life
    cycle of bundles that are signed by the ACME company.</para>

    <para>Signing provides a powerful delegation model. It allows an Operator
    to grant a restricted set of permissions to a company, after which the
    company can create JARs that can use those permissions, without requiring
    any intervention of, or communication with, the Operator for each
    particular JAR. This delegation model is shown graphically in <xref linkend="i1505881"/>.</para>

    <figure xml:id="i1505881">
      <title>Delegation model</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="1.694in" contentwidth="4.694in" fileref="delegation-model.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>Digital signing is based on <emphasis>public key
    cryptography</emphasis>. Public key cryptography uses a system where there
    are two mathematically related keys: a public and a private key. The
    public key is shared with the world and can be dispersed freely, usually
    in the form of a certificate. The private key must be kept a
    secret.</para>

    <para>Messages signed with the private key can only be verified correctly
    with the public key. This can be used to authenticate the signer of a
    message (assuming the public key is trusted, this is discussed in <xref linkend="i1485854"/>).</para>

    <para>The digital signing process used is based on Java JAR signing. The
    process of signing is repeated, restricted and augmented here to improve
    the interoperability of OSGi bundles.</para>

    <section xml:id="i1517861">
      <title>JAR Structure and Manifest</title>

      <para>A JAR can be signed by multiple signers. Each signer must store
      two resources in the JAR file. These resources are:</para>

      <itemizedlist>
        <listitem>
          <para>A signature instruction resource that has a similar format
          like the Manifest. It must have a <code>.SF</code> extension. This
          file provides digests for the complete manifest file.</para>
        </listitem>

        <listitem>
          <para>A PKCS#7 resource that contains the digital signature of the
          signature instruction resource. See <xref linkend="i1485209"/> for
          information about its format.</para>
        </listitem>
      </itemizedlist>

      <para>These JAR file signing resources must be placed in the META-INF
      directory. For signing, the META-INF directory is special because files
      in there are not signed in the normal way. These signing resources must
      come directly after the <code>MANIFEST.MF</code> file, and before
      <emphasis>any</emphasis> other resources in a JAR stream. If this is not
      the case, then a Framework should not accept the signatures and must
      treat the bundle as unsigned. This ordering is important because it
      allows the receiver of the JAR file to stream the contents without
      buffering. All the security information is available before any
      resources are loaded. This model is shown in <xref linkend="i1502291"/>.</para>

      <figure xml:id="i1502291">
        <title>Signer files in JAR</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.162in" contentwidth="4.918in" fileref="signer-files.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The signature instruction resource contains digests of the
      Manifest resource, not the actual resource data itself. A digest is a
      one way function that computes a value from the bytes of a resource in
      such a way that it is very difficult to create a set of bytes that
      matches that digest value.</para>

      <para>The JAR Manifest must therefore contain one or more digests of the
      actual resources. These digests must be placed in their name section of
      the manifest. The name of the digest header is constructed with its
      algorithm followed by <code>-Digest</code>. An example is the
      <code>SHA-256-Digest</code>. It is recommended that OSGi Framework
      implementations support the following digest algorithms.</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>SHA-1</emphasis> - Delivers a 160 bit hash. It is
          defined in <xref linkend="i1483030"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>SHA-256</emphasis> - Delivers a 256 bit hash. It is
          defined in <xref linkend="i1483030"/>.</para>
        </listitem>
      </itemizedlist>

      <para>The hash must be encoded with a Base 64 encoding. Base 64 encoding
      is defined in <xref linkend="i1483385"/>.</para>

      <para>For example, a manifest could look like:</para>

      <programlisting>Manifest-Version: 1.0
Bundle-Name: DisplayManifest
<phrase role="symbol">↵</phrase>
Name: x/A.class
SHA-256-Digest: 7CCToQk6yvRusxNl0uSwrv37UY/fdz6aHou29mbswsM=
<phrase role="symbol">↵</phrase>
Name: x/B.class
SHA-256-Digest: C+0CG/cy13WD2sq8dRZm+dNWAHIjm4RQmUVeLLv7DVU=
<phrase role="symbol">↵</phrase></programlisting>

      <para>Graphically this looks like <xref linkend="i1506821"/>.</para>

      <figure xml:id="i1506821">
        <title>Signer files in JAR</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.389in" contentwidth="4.918in" fileref="signer-files-manifest.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>OSGi JARs must be signed by one or more signers that sign all
      resources except the ones in the <code>META-INF</code> directory; the
      default behavior of the jarsigner tool. This is a restriction with
      respect to standard Java JAR signing; there is no partial signing for an
      OSGi JAR. The OSGi specification only supports fully signed bundles. The
      reason for this restriction is because partially signing can break the
      protection of private packages. It also simplifies the security API
      because all code of a bundle is using the same protection domain.</para>

      <para>Signature files in nested JAR files (For example JARs on the
      <code>Bundle-ClassPath</code>) must be ignored. These nested JAR files
      must share the same protection domain as their containing bundle. They
      must be treated as if their resources were stored directly in the outer
      JAR.</para>

      <para>Each signature is based on two resources. The first file is the
      signature instruction file; this file must have a file name with an
      extension <code>.SF</code>. A signature file has the same syntax as the
      manifest, except that it starts with <code>Signature-Version: 1.0</code>
      instead of <code>Manifest-Version: 1.0</code>.</para>

      <para>The only relevant part of the signature resource is the digest of
      the Manifest resource. The name of the header must be the name algorithm
      (e.g. <code>SHA-256</code>) followed by <code>-Digest-Manifest</code>.
      For example:</para>

      <programlisting><code>Signature-Version: 1.0</code>
SHA-256-Digest-Manifest: HmK7445BA7n5UYYI9xZKfSdMAPci44Jn7ZcmoyoiWoM=</programlisting>

      <para>The signature resource can contain name sections as well. However,
      these name sections should be ignored.</para>

      <para>If there are multiple signers, then their signature instruction
      resources can be identical if they use the same digest algorithms.
      However, each signer must still have its own signature instruction file.
      That is, it is not allowed to share the signature resource between
      signers.</para>

      <para>The indirection of the signature instruction files digests is
      depicted in <xref linkend="i1484701"/> for two signers:
      <code>ACME</code> and <code>DAFFY</code>.</para>

      <figure pgwide="1" xml:id="i1484701">
        <title>Manifest, signature instruction files and digests in
        JAR</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.188in" contentwidth="4.918in" fileref="signature-instruction-files.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Java JAR File Restrictions</title>

      <para>OSGi bundles are always valid JAR files. However, there are a few
      restrictions that apply to bundles that do not apply to JAR
      files.</para>

      <itemizedlist>
        <listitem>
          <para>Bundles do not support partially signed bundles. The manifest
          must contain name sections for all resources but should not have
          entries for resources in the META-INF directory. Signed entries in
          the META-INF directory must be verified. Sub directories of META-INF
          must be treated like any other JAR directory.</para>
        </listitem>

        <listitem>
          <para>The name sections in the signature files are ignored. Only the
          Manifest digest is used.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Valid Signature</title>

      <para>A bundle can be signed with a <emphasis>signature</emphasis> by
      multiple signers. A signature contains a pair of a signature file, with
      a SF extension and a PKCS#7 resource that has the same name as the
      signature file but with either an RSA or DSA extension.</para>

      <para>Such a signature is valid when:</para>

      <itemizedlist>
        <listitem>
          <para>The signature file has an entry for the META-INF/MANIFEST.MF
          resource.</para>
        </listitem>

        <listitem>
          <para>The manifest entry must contain a SHA-256 and/or SHA-1 digest
          for the complete manifest.</para>
        </listitem>

        <listitem>
          <para>All listed digests match the manifest.</para>
        </listitem>

        <listitem>
          <para>The PKCS#7 resource is a valid signature (either signed using
          RSA or DSA as indicated by the extension) for the signature
          resource.</para>
        </listitem>
      </itemizedlist>

      <para>For a complete bundle to be validly signed it is necessary that
      all signatures are valid. That is, if one of the signatures is invalid,
      the whole bundle must be treated as unsigned.</para>
    </section>

    <section>
      <title>Signing Algorithms</title>

      <para>Several different available algorithms can perform digital
      signing. OSGi Framework implementations should support the following
      algorithms:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>DSA</emphasis> - The Digital Signature Algorithm.
          This standard is defined in <xref linkend="i1484747"/>. This is a
          USA government standard for Digital Signature Standard. The
          signature resource name must have an extension of
          <code>.DSA</code>.</para>
        </listitem>

        <listitem>
          <para><emphasis>RSA</emphasis> - Rivest, Shamir and Adleman. A
          public key algorithm that is very popular. It is defined in <xref linkend="i1484864"/>. The extension of the signature resource name
          must be <code>.RSA</code>.</para>
        </listitem>
      </itemizedlist>

      <para>The signature files for RSA and DSA are stored in a PKCS#7 format.
      This is a format that has a structure as defined in <xref linkend="i1485209"/>. The PKCS#7 standard provides access to the
      algorithm specific signing information as well as the certificate with
      the public key of the signer. The verification algorithm uses the public
      key to verify that:</para>

      <itemizedlist>
        <listitem>
          <para>The digital signature matches the signature instruction
          resource.</para>
        </listitem>

        <listitem>
          <para>The signature was created with the private key associated with
          the certificate.</para>
        </listitem>
      </itemizedlist>

      <para>The complete signing structure is shown in <xref linkend="i1484701"/>.</para>
    </section>

    <section xml:id="i1485854">
      <title>Certificates</title>

      <para>A certificate is a general term for a signed document containing a
      name and public key information. Such a certificate can take many forms
      but the OSGi JAR signing is based on the X.509 certificate format. It
      has been around for many years and is part of the OSI group of
      standards. X.509 is defined in <xref linkend="i1485767"/>.</para>

      <para>An X.509 certificate contains the following elements:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Subject Name</emphasis> - The subject name is a
          unique identifier for the object being certified. In the case of a
          person this might include the name, nationality and e-mail address,
          the organization, and the department within that organization. This
          identifier is a Distinguished Name, which is defined in <xref linkend="i1501834"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Issuer Name</emphasis> - The Issuer name is a
          Distinguished Name for the principal that signed this
          certificate.</para>
        </listitem>

        <listitem>
          <para><emphasis>Certificate Extensions</emphasis> - A certificate
          can also include pictures, codification of fingerprints, passport
          number, and other extensions.</para>
        </listitem>

        <listitem>
          <para><emphasis>Public Key Information</emphasis> - A public key can
          be used with an encryption technique that requires its private
          counterpart to decrypt, and vice versa. The public key can be shared
          freely, the private key must be kept secret. The public key
          information specifies an algorithm identifier (such as DSA or RSA)
          and the subject's public key.</para>
        </listitem>

        <listitem>
          <para><emphasis>Validity</emphasis> - A Certificate can be valid for
          only a limited time.</para>
        </listitem>

        <listitem>
          <para><emphasis>Certifying Authority Signature</emphasis> - The
          Certificate Authority signs the first elements and thereby adds
          credibility to the certificate. The receiver of a certificate can
          check the signature against a set of trusted certifying authorities.
          If the receiver trusts that certifying authority, it can trust the
          statement that the certificate makes.</para>
        </listitem>
      </itemizedlist>

      <para>The structure of a certificate is depicted in <xref linkend="i1504099"/>.</para>

      <figure xml:id="i1504099">
        <title>Structure of a certificate</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.295in" contentwidth="4.947in" fileref="certificate-structure.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Certificates can be freely dispersed; they do not contain any
      secret information. Therefore, the PKCS#7 resource contains the signing
      certificate. It cannot be trusted at face value because the certificate
      is carried in the bundle itself. A perpetrator can easily create its own
      certificate with any content. The receiver can only verify that the
      certificate was signed by the owner of the public key (the issuer) and
      that it has not been tampered with. However, before the statement in the
      certificate can be trusted, it is necessary to authenticate the
      certificate itself. It is therefore necessary to establish a
      <emphasis>trust model</emphasis>.</para>

      <para>One trust model, supported but not required by the OSGi
      specifications, is placing the signing certificate in a repository. Any
      certificate in this repository is treated as trusted by default.
      However, placing all possible certificates in this repository does not
      scale well. In an open model, a device would have to contain hundreds of
      thousands of certificates. The management of the certificates could
      easily become overwhelming.</para>

      <para>The solution is to sign a certificate by another certificate, and
      this process can be repeated several times. This delegation process
      forms a <emphasis>chain of certificates</emphasis>. All certificates for
      this chain are carried in the PKCS#7 file: if one of those certificates
      can be found in the trusted repository, the other dependent ones can be
      trusted, on the condition that all the certificates are valid. This
      model scales very well because only a few certificates of trusted
      signers need to be maintained. This is the model used in web browsers,
      as depicted in <xref linkend="i1507711"/>.</para>

      <figure xml:id="i1507711">
        <title>Certificate authorities fan out</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.716in" contentwidth="4.947in" fileref="ca-fan-out.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>This specification does not specify access to the trusted
      repository. It is implementation specific how this repository is
      populated and maintained.</para>
    </section>

    <section xml:id="i1501834">
      <title>Distinguished Names</title>

      <para>An X.509 name is a <emphasis>Distinguished Name</emphasis> (DN). A
      DN is a highly structured name, officially identifying a node in an
      hierarchical namespace. The DN concept was developed for the X.500
      directory service which envisioned a world wide namespace managed by
      PTTs. Today, the DN is used as an identifier in a local namespace, as in
      a namespace designed by an Operator. For example, given a namespace that
      looks like <xref linkend="i1497511"/>, the DN identifying Bugs looks
      like:</para>

      <programlisting>cn=Bug,o=ACME,c=US</programlisting>

      <figure xml:id="i1497511">
        <title>Country, Company, Person based namespace.</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.381in" contentwidth="4.973in" fileref="dn-namespace.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The traversal of the namespace is <emphasis>reversed</emphasis>
      from the order in the DN, the first part specifies the least significant
      but most specific part. That is, the order of the attribute assertions
      is significant. Two DNs with the same attributes but different order are
      different DNs.</para>

      <para>In the example, a node is searched in the root that has an
      attribute <code>c</code> (<code>countryName</code>) with a value that is
      <code>US</code>. This node is searched for a child that has an attribute
      <code>o</code> (<code>organizationName</code>) with a value of
      <code>ACME</code>. And the ACME node is searched for a child node with
      an attribute <code>cn</code> (<code>commonName</code>) that has a value
      <code>"Bugs Bunny"</code>.</para>

      <para>The tree based model is the official definition of a DN from the
      X.500 standards. However, in practice today, many DNs contain attributes
      that have no relation to a tree. For example, many DNs contain comments
      and copyrights in the <code>ou</code> (<code>organizationalUnit</code>)
      attribute.</para>

      <para>The DN from an X.509 certificate is expressed in a binary
      structure defined by ASN.1 (a type language defined by ISO). However,
      the Distinguished Name is often used in interaction with humans.
      Sometimes, users of a system have to acknowledge the use of a
      certificate or an employee of an Operator must grant permissions based
      on a Distinguished Name of a customer. It is therefore paramount that
      the Distinguished Name has a good human readable string representation.
      The expressiveness of the ASN.1 type language makes this non-trivial.
      This specification only uses DN strings as defined in <xref linkend="i1457637"/> with a number of extensions that are specified by
      the <code>javax.security.auth.x500.X500Principal</code> class in
      <code>CANONICAL</code> form.</para>

      <para>However, the complexity of the encoding/decoding is caused by the
      use of rarely used types and features (binary data, multi-valued RDNs,
      foreign alphabets, and attributes that have special matching rules).
      These features must be supported by a compliant implementation but
      should be avoided by users. In practice, these features are rarely used
      today.</para>

      <para>The format of a string DN is as follows:</para>

      <programlisting>dn          ::= rdn ( ',' rdn ) *
rdn         ::= attribute ( '+' attribute ) *
attribute   ::= name '=' value
name        ::= readable | oid
oid         ::= number ( '.' number ) *   // See <xref linkend="framework.general.syntax" xrefstyle="template:%n"/>
readable    ::= &lt;see attribute table&gt;
value       ::= &lt;escaped string&gt;</programlisting>

      <para>Spaces before and after the separators are ignored, spaces inside
      a value are significant but multiple embedded spaces are collapsed into
      a single space. Wildcard asterisks (<code>'*' \u002A</code>) are not
      allowed in a value part. The following characters must be escaped with a
      reverse solidus (<code>'\' \u005C</code>):</para>

      <programlisting>    comma               ','     \u002C
    plus                '+'     \u002B
    double quote        '"'     \u0022
    reverse solidus     '\'     \u005C
    less then           '&lt;'     \u003C
    greater then        '&gt;'     \u003E
    semicolon           ';'     \u003B</programlisting>

      <para>Reverse solidi (<code>'\' \u005C</code>) must already be escaped
      in Java strings, requiring 2 reverse solidi in Java source code. For
      example:</para>

      <programlisting>    DN:             cn = Bugs Bunny, o = ACME++, C=US
    Canonical form: cn=bugs bunny,o=acme\+\+,c=us
    Java String:    "cn=Bugs Bunny,o=ACME\\+\\+,c=US"</programlisting>

      <para>The full Unicode character set is available and can be used in
      DNs. String objects must be normalized and put in canonical form before
      being compared.</para>

      <programlisting>    DN:             cn = Bugs Bunny, o = Ð Þ, C=US
    Canonical form: cn=bugs bunny,o=ð þ,c=us
    Java String:    "cn = Bugs Bunny, o = Ð Þ, C=US"</programlisting>

      <para>The names of attributes (attributes types as they are also called)
      are actually translated into an Object IDentifier (OID). An OID is a
      dotted decimal number, like <code>2.5.4.3</code> for the <code>cn</code>
      (<code>commonName</code>) attribute name. It is therefore not possible
      to use any attribute name because the implementation must know the
      aliasing as well as the comparison rules. Therefore only the attributes
      that are listed in the following table are allowed (in short or long
      form):</para>

      <programlisting>commonName              cn          2.5.4.3     ITU X.520
surName                 sn          2.5.4.4
countryName             c           2.5.4.6
localityName            l           2.5.4.7
stateOrProvinceName     st          2.5.4.8
organizationName        o           2.5.4.10
organizationalUnitName  ou          2.5.4.11
title                               2.5.4.12
givenName                           2.5.4.42
initials                            2.5.4.43
generationQualifier                 2.5.4.44
dnQualifier                         2.5.4.46

streetAddress           street                  RFC 2256
domainComponent         dc                      RFC 1274
userid                  uid                     RFC 1274/2798?
emailAddress                                    RFC 2985
serialNumber                                    RFC 2985</programlisting>

      <para>The following DN:</para>

      <programlisting>2.5.4.3=Bugs Bunny,organizationName=ACME,2.5.4.6=US</programlisting>

      <para>Is therefore identical to:</para>

      <programlisting>cn=Bugs Bunny,o=ACME,c=US</programlisting>

      <para>The attribute types officially define a matching rule, potentially
      allowing cases sensitive and case insensitive. The attributes in the
      previous list all match case insensitive. Therefore, an OSGi DN must not
      depend on case sensitivity.</para>

      <para>The X.500 standard supports multi-valued RDNs, however, their use
      is not recommended. See <xref linkend="i1499281"/> for the rationale of
      this recommendation. Multi-valued RDNs separate their constituents with
      a plus sign (<code>'+' \u002B</code>). Their order is not significant.
      For example:</para>

      <programlisting>cn=Bugs Bunny+dc=x.com+title=Manager,o=ACME,c=US</programlisting>

      <para>Which is the same as</para>

      <programlisting>dc=x.com+cn=Bugs Bunny+title=Manager, o=ACME,c=US</programlisting>
    </section>

    <section xml:id="framework.security.certificate.matching">
      <title>Certificate Matching</title>

      <para>Certificates are matched by their Subject DN. Before matching,
      DNs, they must first be put in canonical form according to the algorithm
      specified in <code>javax.security.auth.x500.X500Principal</code>.</para>

      <para>DNs can also be compared using wildcards. A wildcard asterisk
      (<code>'*' \u002A</code>) replaces all possible values. Due to the
      structure of the DN, the comparison is more complicated than
      string-based wildcard matching.</para>

      <para>A wildcard can stand for a number of RDNs, or the value of a
      single RDN. DNs with a wildcard must be canonicalized before they are
      compared. This means, among other things, that spaces must be ignored,
      except in values.</para>

      <para>The format of a wildcard DN match is:</para>

      <programlisting>CertificateMatch    ::= dn-match ( ';' dn-match) *
dn-match            ::= ( '*' | rdn-match )
                            ( ',' rdn-match ) * | '-'
rdn-match           ::= name '=' value-match
value-match         ::= '*' | value-star
value-star          ::= &lt; value, requires escaped '*' and'-' &gt;</programlisting>

      <para>The most simple case is a single wildcard; it must match any DN. A
      wildcard can also replace the first list of RDNs of a DN. The first RDNs
      are the least significant. Such lists of matched RDNs can be
      empty.</para>

      <para>For example, a DN with a wildcard that matches all nodes
      descendant from the <code>ACME</code> node in <xref linkend="i1497511" xrefstyle="template:Figure %n on page %p"/>, looks like:</para>

      <programlisting>*, o=ACME, c=US</programlisting>

      <para>This wildcard DN matches the following DNs:</para>

      <programlisting>cn = Bugs Bunny, o = ACME, c = US
ou = Carots, cn=Daffy Duck, o=ACME, c=US
street = 9C\, Avenue St. Drézéry, o=ACME, c=US
dc=www, dc=acme, dc=com, o=ACME, c=US
o=ACME, c=US</programlisting>

      <para>The following DNs must not match:</para>

      <programlisting>street = 9C\, Avenue St. Drézéry, o=ACME,c=FR
dc=www, dc=acme, dc=com, c=US</programlisting>

      <para>If a wildcard is used for a <code>value</code> of an RDN, the
      value must be exactly <code>*</code>. The wildcard must match any value,
      and no substring matching must be done. For example:</para>

      <programlisting>cn=*,o=ACME,c=*</programlisting>

      <para>This DN with wildcard must match the following DNs:</para>

      <programlisting>cn=Bugs Bunny,o=ACME,c=US
cn = Daffy Duck , o = ACME , c = US
cn=Road Runner, o=ACME, c=NL</programlisting>

      <para>But not:</para>

      <programlisting>o=ACME, c=NL
dc=acme.com, cn=Bugs Bunny, o=ACME, c=US</programlisting>

      <para>Both forms of wildcard usage can be combined in a single matching
      DN. For example, to match any DN that is from the ACME company
      worldwide, use:</para>

      <programlisting>*, o=ACME, c=*</programlisting>

      <para>Matching of a DN takes place in the context of a certificate. This
      certificate is part of a <emphasis>certificate chain</emphasis>, see
      <xref linkend="i1485854"/>. Each certificate has a Subject DN and an
      Issuer DN. The Issuer DN is the Subject DN used to sign the first
      certificate of the chain. DN matching can therefore be extended to match
      the signer. The semicolon (<code>';' \u003B</code>) must be used to
      separate DNs in a chain.</para>

      <para>The following example matches a certificate signed by <code>Tweety
      Inc.</code> in the US.</para>

      <programlisting>* ; ou=S &amp; V, o=Tweety Inc., c=US</programlisting>

      <para>The wildcard matches zero or one certificates, however, sometimes
      it is necessary to match a longer chain. The minus sign (<code>'-'
      \u002D</code>) represents zero or more certificates, whereas the
      asterisk only represents a single certificate. For example, to match a
      certificate where the <code>Tweety Inc.</code> is in the certificate
      chain, use the following expression:</para>

      <programlisting>- ; *, o=Tweety Inc., c=US</programlisting>

      <para>The previous example matched if the <code>Tweety Inc.</code>
      certificate was trusted, or was signed by a trusted certificate. Certain
      certificates are trusted because they are known by the Framework, how
      they are known is implementation-defined.</para>
    </section>
  </section>

  <section>
    <title>Permissions</title>

    <para>The OSGi Framework uses Java permissions for securing bundles. Each
    bundle is associated with a set of permissions. During runtime, the
    permissions are queried when a permission is requested through the
    Security Manager. If a Framework uses postponed conditions, then it must
    install its own security manager, otherwise it can use any Security
    Manager.</para>

    <para>The management of the bundle's permissions is handled through
    Conditional Permission Admin, Permission Admin, or another security
    agent.</para>

    <section xml:id="framework.security.impliedpermissions">
      <title>Implied Permissions</title>

      <para>Implied permissions are permissions that the framework grants a
      bundle without any specific action. These permissions are necessary for
      normal operation. For example, each bundle gets permissions to read,
      write, and delete the bundle persistent storage area. The standard list
      of implied permissions is as follows:</para>

      <itemizedlist>
        <listitem>
          <para>File Permission for the bundle persistent storage area, for
          the <code>READ</code>, <code>WRITE</code>, and <code>DELETE</code>
          actions.</para>
        </listitem>

        <listitem>
          <para>Property Permission with the <code>READ</code> action for
          <code>org.osgi.framework.*</code>.</para>
        </listitem>

        <listitem>
          <para>Admin Permission with the <code>RESOURCE</code>,
          <code>METADATA</code>, <code>CLASS</code>, and <code>CONTEXT</code>
          actions for the bundle itself.</para>
        </listitem>

        <listitem>
          <para>Capability Permission <code>REQUIRE</code> for the
          <code>osgi.ee</code> namespace.</para>
        </listitem>

        <listitem>
          <para>Capability Permission <code>REQUIRE</code> for the
          <code>osgi.native</code> namespace.</para>
        </listitem>

        <listitem>
          <para>Package Permission <code>IMPORT</code> for
          <code>java.*</code>.</para>
        </listitem>

        <listitem>
          <para>Service Permission <code>GET</code> for
          <code>org.osgi.service.condition.Condition</code></para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="framework.security.filterbasedpermissions">
      <title>Filter Based Permissions</title>

      <para>OSGi supports a number of permissions that are granted when the
      target of the permissions is related to a bundle. For example, Admin
      Permission can grant a bundle the permission to manage other bundles.
      This is expressed by using a <emphasis>filter expression</emphasis> for
      the <emphasis>name</emphasis> of the permission. When the permission is
      checked, the filter is evaluated with specific permission attributes as
      well as attributes that describe the bundle's identity. For example, a
      bundle can get permission to get all services registered by bundles
      coming from a specific location:</para>

      <programlisting>ServicePermission("(location=https://www.acme.com/*)",GET )</programlisting>

      <para>This provides a very powerful model because it allows operators to
      let a group of bundles closely collaborate without requiring ad hoc
      namespaces for services, packages, and bundles. Using the signer or
      location as the target for a permission, will allow the maintenance of
      the permission management to be significantly reduced. It is not
      necessary to configure for individual bundles: the signer or location is
      effectively used as a grouping mechanism.</para>

      <para>The filter can contain the following keys:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>id</emphasis> - The bundle ID of a bundle. For
          example:</para>
        </listitem>
      </itemizedlist>

      <programlisting>    (id=256)</programlisting>

      <itemizedlist>
        <listitem>
          <para><emphasis>location</emphasis> - The location of a bundle.
          Filter wildcards for Strings are supported, allowing the value to
          specify a set of bundles. For example:</para>
        </listitem>
      </itemizedlist>

      <programlisting>    (location=https://www.acme.com/download/*)</programlisting>

      <itemizedlist>
        <listitem>
          <para><emphasis>signer</emphasis> - A Distinguished Name chain. See
          <xref linkend="framework.security.certificate.matching"/> for more
          information how Distinguished Names are matched. Wildcards in a DN
          are not matched according to the filter string rules, but according
          to the rules defined for a DN chain. The wildcard asterisk
          (<code>'*' \u002A</code>) must be escaped with a reverse solidus
          (<code>'\' \u005C</code>) to avoid being interpreted as a filter
          wildcard. For example:</para>
        </listitem>
      </itemizedlist>

      <programlisting>    (signer=\*,o=ACME,c=NL)</programlisting>

      <itemizedlist>
        <listitem>
          <para><emphasis>name</emphasis> - The symbolic name of a bundle.
          Filter wildcards for Strings are supported allowing the value to
          specify a set of bundles. A single symbolic name may also map to a
          set of bundles. For example:</para>
        </listitem>
      </itemizedlist>

      <programlisting>    (name=com.acme.*)</programlisting>

      <para>The name parameter of the permission can also be a single wildcard
      asterisk (<code>'*' \u002A</code>). In that case all bundles must
      match.</para>

      <section>
        <title>Multiple Signers</title>

        <para>A bundle can be signed by multiple signers, in that case the
        signer will match against any of the signers' DN. Using multiple
        signers is both a feature as well as it is a possible threat. From a
        management perspective it is beneficial to be able to use signatures
        to handle the grouping. However, it could also be used to maliciously
        manage a trusted bundle.</para>

        <para>For example a trusted bundle signed by <code>T</code>, could
        later have a signature added by an untrusted party <code>U</code>.
        This will grant the bundle the permissions of both T and U, which
        ordinarily is a desirable feature. However, If the permissions
        associated with signer <code>U</code> also allow the management of
        bundles signed by <code>U</code>, then <code>U</code> could
        unexpectedly gain the permission to manage this trusted bundle. For
        example, it could now <code>start</code> and <code>stop</code> this
        trusted bundle. This unexpected effect of becoming eligible to be
        managed should be carefully considered when multiple signers are used.
        The deny policies in Conditional Permission Admin can be used to
        prevent this case from causing harm.</para>
      </section>
    </section>
  </section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="i1457637"><title>RFC 2253Lightweight Directory
      Access Protocol (v3): UTF-8 String Representation of Distinguished
      Names</title><biblioid class="uri"><link xlink:href="http://www.ietf.org/rfc/rfc2253.txt"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i1485767"><title>X.509
      Certificates</title><biblioid class="uri"><link xlink:href="http://www.ietf.org/rfc/rfc2459.txt"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i1488926"><title>Java Security
      Architecture</title><biblioid class="uri"><link xlink:href="https://docs.oracle.com/javase/8/docs/technotes/guides/security/spec/security-spec.doc.html"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i1509711"><title>Java Package Versioning
      Specification</title><biblioid class="uri"><link xlink:href="https://docs.oracle.com/javase/8/docs/technotes/guides/versioning/index.html"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i1488938"><title>Manifest Format</title><biblioid class="uri"><link xlink:href="https://docs.oracle.com/javase/8/docs/technotes/guides/jar/jar.html#JAR_Manifest"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i1483030"><title>Secure Hash
      Standard</title><biblioid class="uri"><link xlink:href="http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i1483385"><title>RFC 1421 Privacy Enhancement for
      Internet Electronic Mail</title><biblioid class="uri"><link xlink:href="http://www.ietf.org/rfc/rfc1421.txt"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i1484747"><title>DSA</title><biblioid class="uri"><link xlink:href="http://www.itl.nist.gov/fipspubs/fip186.htm"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i1484864"><title>RSA</title><biblioid class="uri"><link xlink:href="http://www.ietf.org/rfc/rfc2313.txt"/>
      which is superseded by <link xlink:href="http://www.ietf.org/rfc/rfc2437.txt"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i1485209"><title>Public Key Cryptography Standard
      #7</title><biblioid class="uri"><link xlink:href="http://www.rsasecurity.com/rsalabs/node.asp?id=2129"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i1488889"><title>Unicode Normalization UAX #
      15</title><biblioid class="uri"><link xlink:href="http://www.unicode.org/reports/tr15/"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i1499281"><title>Understanding and Deploying LDAP
      Directory Services</title>ISBN 1-57870-070-1</bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter label="3" revision="$Id: 57861fe5aa714311e29bde551940db5ba9651e76 $" version="5.0" xml:id="framework.module" xml:base="003/framework.module.xml">
  <title>Module Layer</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.framework-version" linkend="org.osgi.framework"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>The standard Java platform provides only limited support for
    packaging, deploying, and validating Java-based applications and
    components. Because of this, many Java-based projects, such as JBoss and
    NetBeans, have resorted to creating custom module-oriented layers with
    specialized class loaders for packaging, deploying, and validating
    applications and components. The OSGi Framework provides a generic and
    standardized solution for Java modularization.</para>
  </section>

  <section>
    <title>Bundles</title>

    <para>The Framework defines a unit of modularization, called a
    <emphasis>bundle</emphasis>. A bundle is comprised of Java classes and
    other resources, which together can provide functions to end users.
    Bundles can share Java <emphasis>packages</emphasis> among an
    <emphasis>exporter</emphasis> bundle and an <emphasis>importer</emphasis>
    bundle in a well-defined way. In the OSGi framework, bundles are the only
    entities for deploying Java-based applications.</para>

    <para>A bundle is deployed as a Java ARchive (JAR) file. JAR files are
    used to store applications and their resources in a standard ZIP-based
    file format. This format is defined by <xref linkend="i3100827"/>. Bundles
    normally share the Java Archive extension of <code>.jar</code>. However,
    there is a special MIME type reserved for OSGi bundles that can be used to
    distinguish bundles from normal JAR files. This MIME type is:</para>

    <programlisting>application/vnd.osgi.bundle</programlisting>

    <para>The type is defined in <xref linkend="i3211606"/>.</para>

    <para>A bundle is a JAR file that:</para>

    <itemizedlist>
      <listitem>
        <para>Contains the resources necessary to provide some functionality.
        These resources may be class files for the Java programming language,
        as well as other data such as HTML files, help files, icons, and so
        on. A bundle JAR file can also embed additional JAR files that are
        available as resources and classes. This is however not
        recursive.</para>
      </listitem>

      <listitem>
        <para>Contains a manifest file describing the contents of the JAR file
        and providing information about the bundle. This file uses headers to
        specify information that the Framework needs to install correctly and
        activate a bundle. For example, it states dependencies on other
        resources, such as Java packages, that must be available to the bundle
        before it can run.</para>
      </listitem>

      <listitem>
        <para>Can contain optional documentation in the <code>OSGI-OPT</code>
        directory of the JAR file or one of its sub-directories. Any
        information in this directory is optional. For example, the
        <code>OSGI-OPT</code> directory is useful to store the source code of
        a bundle. Management systems may remove this information to save
        storage space in the OSGi framework.</para>
      </listitem>

      <listitem>
        <para>Can be a multi-release JAR. See <xref linkend="framework.module-multireleasejar"/>.</para>
      </listitem>
    </itemizedlist>

    <para>Once a bundle is resolved, its functionality is provided to other
    bundles installed in the OSGi framework.</para>

    <section xml:id="i2654895">
      <title>Bundle Manifest Headers</title>

      <para xml:id="i2654900">A bundle can carry descriptive information about
      itself in the manifest file that is contained in its JAR file under the
      name of <code>META-INF/MANIFEST.MF</code>.</para>

      <para xml:id="i3200116">The Framework defines OSGi manifest headers such
      as Export-Package and Bundle-ClassPath, which bundle developers use to
      supply descriptive information about a bundle. Manifest headers must
      strictly follow the rules for manifest headers as defined in <xref linkend="i3024211"/>.</para>

      <para>A Framework implementation must:</para>

      <itemizedlist xml:id="i2654913">
        <listitem>
          <para>Process the main section of the manifest. Individual sections
          of the manifest are only used during bundle signature
          verification.</para>
        </listitem>

        <listitem xml:id="i2654915">
          <para>Ignore unrecognized manifest headers. The bundle developer can
          define additional manifest headers as needed.</para>
        </listitem>

        <listitem>
          <para>Ignore unknown attributes and directives.</para>
        </listitem>
      </itemizedlist>

      <para>All specified manifest headers are listed in the following
      sections. All headers are optional, unless specifically
      indicated.</para>

      <section>
        <title>Bundle-ActivationPolicy: lazy</title>

        <para>The Bundle-ActivationPolicy specifies how the framework should
        activate the bundle once started. See <xref linkend="i3270439"/>.</para>
      </section>

      <section>
        <title>Bundle-Activator: com.acme.fw.Activator</title>

        <para>The Bundle-Activator header specifies the name of the class used
        to start and stop the bundle. See <xref linkend="i3270328"/>.</para>
      </section>

      <section>
        <title>Bundle-Category: osgi, test, nursery</title>

        <para>The Bundle-Category header holds a comma-separated list of
        category names.</para>
      </section>

      <section>
        <title>Bundle-ClassPath: /jar/http.jar,.</title>

        <para>The Bundle-ClassPath header defines a comma-separated list of
        JAR file path names or directories (inside the bundle) containing
        classes and resources. The full stop (<code>'.' \u002E</code>)
        specifies the root directory of the bundle's JAR. The full stop is
        also the default. See <xref linkend="framework.module.bundleclasspath"/>.</para>
      </section>

      <section>
        <title>Bundle-ContactAddress: 2400 Oswego Road, Austin, TX
        74563</title>

        <para>The Bundle-ContactAddress header provides the contact address of
        the vendor.</para>
      </section>

      <section>
        <title>Bundle-Copyright: OSGi (c) 2002</title>

        <para>The Bundle-Copyright header contains the copyright specification
        for this bundle.</para>
      </section>

      <section>
        <title>Bundle-Description: Network Firewall</title>

        <para>The Bundle-Description header defines a short description of
        this bundle.</para>
      </section>

      <section xml:id="framework.module-bundle-developers">
        <title>Bundle-Developers: pkriens; email=pkriens@osgi.org; name="Peter
        Kriens"; organization="OSGi Working Group"</title>

        <para>The Bundle-Developers header provides an optional machine
        readable form of information about the developers of the bundle. This
        header is purely informational and must not be processed by the OSGi
        Framework.</para>

        <para>The syntax for this header is as follows:</para>

        <programlisting>Bundle-Developers ::= developer ( ',' developer ) *
developer         ::= identifier ( ';' developer-attr ) *
identifier        ::= argument
developer-attr    ::= email | name | url | organization |
                        organization-url | roles | timezone
email             ::= 'email' '=' &lt;email&gt;
name              ::= 'name' '=' argument
url               ::= 'url' '=' &lt;url&gt;
organization      ::= 'organization' '=' argument
organization-url  ::= 'organizationUrl' '=' &lt;url&gt;
roles             ::= 'roles' '=' argument
timezone          ::= 'timezone' '=' argument</programlisting>

        <para>This header has the following attributes:</para>

        <itemizedlist>
          <listitem>
            <para><code>email</code> - (optional) The email address of the
            developer.</para>
          </listitem>

          <listitem>
            <para><code>name</code> - (optional) The name of the
            developer.</para>
          </listitem>

          <listitem>
            <para><code>url</code> - (optional) The URL of the
            developer.</para>
          </listitem>

          <listitem>
            <para><code>organization</code> - (optional) The name of the
            organization of the developer.</para>
          </listitem>

          <listitem>
            <para><code>organization-url</code> - (optional) The URL of the
            organization of the developer.</para>
          </listitem>

          <listitem>
            <para><code>roles</code> - (optional) The roles of the developer.
            This is a comma separated list of role names.</para>
          </listitem>

          <listitem>
            <para><code>timezone</code> - (optional) The time zone of where
            the developer resides. The time zone can be an id such as
            <code>America/New_York</code> or a numerical offset in hours from
            UTC.</para>
          </listitem>
        </itemizedlist>

        <para>See <xref linkend="framework.module-maven.pom.developers"/> for
        more information. Tools can use the information in this header for POM
        generation.</para>
      </section>

      <section>
        <title>Bundle-DocURL: http://www.example.com/Firewall/doc</title>

        <para>The Bundle-DocURL headers must contain a URL pointing to
        documentation about this bundle.</para>
      </section>

      <section xml:id="i3216245">
        <title>Bundle-Icon: /icons/acme-logo.png;size=64</title>

        <para>The optional Bundle-Icon header provides a list of URLs to icons
        representing this bundle in different sizes. The following attribute
        is permitted:</para>

        <itemizedlist>
          <listitem>
            <para><code>size</code> - (integer) Specifies the size of the icon
            in pixels horizontal. It is recommended to always include a 64x64
            icon.</para>
          </listitem>
        </itemizedlist>

        <para>The URLs are interpreted as relative to the bundle. That is, if
        a URL with a scheme is provided, then this is taken as an absolute
        URL. Otherwise, the path points to an entry in the JAR file, taking
        any attached fragments into account. Implementations that want to use
        this header should at least support the Portable Network Graphics
        (PNG) format, see <xref linkend="i3219167"/>.</para>
      </section>

      <section xml:id="framework.module-bundle-license">
        <title>Bundle-License: Apache-2.0;
        link="http://opensource.org/licenses/apache2.0.php"</title>

        <para>The Bundle-License header provides an optional machine readable
        form of license information. The purpose of this header is to automate
        some of the license processing required by many organizations like for
        example license acceptance before a bundle is used. The header is
        structured to provide the use of unique license naming to merge
        acceptance requests, as well as links to human readable information
        about the included licenses. This header is purely informational for
        management agents and must not be processed by the OSGi
        Framework.</para>

        <para>The syntax for this header is as follows:</para>

        <programlisting>Bundle-License ::= '&lt;&lt;EXTERNAL&gt;&gt;' |
                      ( license ( ',' license ) * )
license        ::= license-identifier ( ';' license-attr ) *
license-attr   ::= description | link
description    ::= 'description' '=' string
link           ::= 'link' '=' &lt;url&gt;</programlisting>

        <para>This header has the following attributes:</para>

        <itemizedlist>
          <listitem>
            <para><code>license-identifier</code> - Provides a globally unique
            identifier for this license, preferably world wide, but it should
            at least be unique with respect to the other clauses. The magic
            identifier <code>&lt;&lt;EXTERNAL&gt;&gt;</code> is used to
            indicate that this artifact does not specify any license
            information but that licensing information is provided in some
            other way. This is also the default value of this header.</para>

            <para>This identifier should be one of the identifiers defined by
            <xref linkend="framework.module-spdx.license.list"/>. Clients of
            this bundle can assume that licenses with the same identifier
            refer to the same license. This can for example be used to
            minimize the click through licenses.</para>

            <para>Alternatively, the identifier can be the canonical URL of
            the license, it must not be localized by the translator. This URL
            does not have to exist but must not be used for later versions of
            the license. It is recommended to use URLs from <xref linkend="i3222193"/>. Other licenses should use the following
            structure, but this is not mandated:</para>

            <programlisting>http://&lt;domain-name&gt;/licenses/
          &lt;license-name&gt;-&lt;version&gt;.&lt;extension&gt;</programlisting>
          </listitem>

          <listitem>
            <para><code>description</code> - (optional) Provide the
            description of the license. This is a short description that is
            usable in a list box on a UI to select more information about the
            license.</para>
          </listitem>

          <listitem>
            <para><code>link</code> - (optional) Provide a URL to a page that
            defines or explains the license. If this link is absent, the name
            field is used for this purpose. The URL is relative to the root of
            the bundle. That is, it is possible to refer to a file inside the
            bundle.</para>
          </listitem>
        </itemizedlist>

        <para>If the Bundle-License statement is absent, then this does not
        mean that the bundle is not licensed. Licensing could be handled
        outside the bundle and the <code>&lt;&lt;EXTERNAL&gt;&gt;</code> form
        should be assumed. This header is informational and may not have any
        legal bearing. Consult a lawyer before using this header to automate
        licensing processing.</para>
      </section>

      <section xml:id="i3189740">
        <title>Bundle-Localization: OSGI-INF/l10n/bundle</title>

        <para>The Bundle-Localization header contains the location in the
        bundle where localization files can be found. The default value is
        <code>OSGI-INF/l10n/bundle</code>. Translations are by default
        therefore <code>OSGI-INF/l10n/bundle_de.properties</code>,
        <code>OSGI-INF/l10n/bundle_nl.properties</code>, etc. See <xref linkend="i3189742"/>.</para>
      </section>

      <section>
        <title>Bundle-ManifestVersion: 2</title>

        <para>The Bundle-ManifestVersion header defines that the bundle
        follows the rules of this specification. The Bundle-ManifestVersion
        header determines whether the bundle follows the rules of this
        specification. It is 1 (the default) for Release 3 Bundles, 2 for
        Release 4 and later. Future version of the OSGi framework can define
        higher numbers for this header.</para>
      </section>

      <section>
        <title>Bundle-Name: Firewall</title>

        <para>The Bundle-Name header defines a readable name for this bundle.
        This should be a short, human-readable name that can contain
        spaces.</para>
      </section>

      <section>
        <title>Bundle-NativeCode: /lib/http.DLL; osname = QNX; osversion =
        3.1</title>

        <para>The Bundle-NativeCode header contains a specification of native
        code libraries contained in this bundle. See <xref linkend="framework.module-loading.native.code.libraries"/>.</para>
      </section>

      <section>
        <title>Bundle-RequiredExecutionEnvironment:
        CDC-1.0/Foundation-1.0</title>

        <para>The Bundle-RequiredExecutionEnvironment contains a
        comma-separated list of execution environments that must be present on
        the OSGi framework. See <xref linkend="framework.module-execution.environment"/>. This header is
        deprecated.</para>
      </section>

      <section xml:id="framework.module-bundle-scm">
        <title>Bundle-SCM: url=https://github.com/bndtools/bnd,
        connection=scm:git:https://github.com/bndtools/bnd.git,
        developerConnection=scm:git:git@github.com:bndtools/bnd.git</title>

        <para>The Bundle-SCM header provides an optional machine readable form
        of information about the source code of the bundle. This header is
        purely informational and must not be processed by the OSGi
        Framework.</para>

        <para>The syntax for this header is as follows:</para>

        <programlisting>Bundle-SCM           ::= scm-attr ( ',' scm-attr ) *
scm-attr             ::= url | connection | developer-connection | tag
url                  ::= 'url' '=' &lt;url&gt;
connection           ::= 'connection' '=' &lt;uri&gt;
developer-connection ::= 'developerConnection' '=' &lt;uri&gt;
tag                  ::= 'tag' '=' argument</programlisting>

        <para>This header has the following attributes:</para>

        <itemizedlist>
          <listitem>
            <para><code>url</code> - (optional) The URL to browse the source
            code repository.</para>
          </listitem>

          <listitem>
            <para><code>connection</code> - (optional) The <code>scm:</code>
            URI for read access to the source code repository.</para>
          </listitem>

          <listitem>
            <para><code>developer-connection</code> - (optional) The
            <code>scm:</code> URI for write access to the source code
            repository.</para>
          </listitem>

          <listitem>
            <para><code>tag</code> - (optional) The tag within the source code
            repository.</para>
          </listitem>
        </itemizedlist>

        <para>See <xref linkend="framework.module-maven.pom.scm"/> for more
        information. Tools can use the information in this header for POM
        generation.</para>
      </section>

      <section>
        <title>Bundle-SymbolicName: com.acme.daffy</title>

        <para>The Bundle-SymbolicName header specifies a non-localizable name
        for this bundle. The bundle symbolic name together with a version must
        identify a unique bundle though it can be installed multiple times in
        a framework. The bundle symbolic name should be based on the reverse
        domain name convention, see <xref linkend="framework.module.bsn"/>.
        This header must be set.</para>
      </section>

      <section>
        <title>Bundle-UpdateLocation:
        http://www.acme.com/Firewall/bundle.jar</title>

        <para>The Bundle-UpdateLocation header specifies a URL where an update
        for this bundle should come from. If the bundle is updated, this
        location should be used, if present, to retrieve the updated JAR
        file.</para>
      </section>

      <section>
        <title>Bundle-Vendor: OSGi Working Group</title>

        <para>The Bundle-Vendor header contains a human-readable description
        of the bundle vendor.</para>
      </section>

      <section>
        <title>Bundle-Version: 1.1</title>

        <para>The Bundle-Version header specifies the version of this bundle.
        See <xref linkend="i2655136"/>. The default value is
        <code>0.0.0</code></para>
      </section>

      <section>
        <title>DynamicImport-Package: com.acme.plugin.*</title>

        <para>The DynamicImport-Package header contains a comma-separated list
        of package names that should be dynamically imported when needed. See
        <xref linkend="framework.module.dynamicimportpackage"/>.</para>
      </section>

      <section>
        <title>Export-Package: org.osgi.util.tracker;version=1.3</title>

        <para>The Export-Package header contains a declaration of exported
        packages. See <xref linkend="framework.module.exportpackage"/>.</para>
      </section>

      <section>
        <title>Export-Service: org.osgi.service.log.LogService</title>

        <para>Deprecated.</para>
      </section>

      <section>
        <title>Fragment-Host: org.eclipse.swt;
        bundle-version="[3.0.0,4.0.0)"</title>

        <para>The Fragment-Host header defines the host bundles for this
        fragment. See <xref linkend="framework.module.fragmenthost"/></para>
      </section>

      <section>
        <title>Import-Package:
        org.osgi.util.tracker,org.osgi.service.log;version=1.4</title>

        <para>The Import-Package header declares the imported packages for
        this bundle. See <xref linkend="framework.module.importpackage"/>.</para>
      </section>

      <section>
        <title>Import-Service: org.osgi.service.log.LogService</title>

        <para>Deprecated</para>
      </section>

      <section>
        <title>Provide-Capability: com.acme.dict; from=nl; to=de;
        version:Version=1.2</title>

        <para>Specifies that a bundle provides a set of Capabilities, see
        <xref linkend="framework.module.dependencies"/>.</para>
      </section>

      <section>
        <title>Require-Bundle: com.acme.chess</title>

        <para>The Require-Bundle header specifies that all exported packages
        from another bundle must be imported, effectively requiring the public
        interface of another bundle. See <xref linkend="framework.module.requirebundle"/></para>
      </section>

      <section>
        <title>Require-Capability: osgi.ee;
        filter:="(&amp;(osgi.ee=AcmeMin)(version=1.1))"</title>

        <para>Specifies that a bundle requires other bundles to provide a
        capability, see <xref linkend="framework.module.dependencies"/>.</para>
      </section>
    </section>

    <section xml:id="i3224842">
      <title>Custom Headers</title>

      <para>The manifest is an excellent place to provide metadata belonging
      to a bundle. This is true for the OSGi Working Group but it is also valid for
      other organizations. For historic reasons, the OSGi Working Group claims the
      default namespace, specifically headers that indicate OSGi related
      matters like names that contain Bundle, Import, Export, etc.
      Organizations that want to use headers that do not clash with OSGi
      Working Group defined names or bundle header names from other organizations
      should prefix custom headers with <code>x-</code>, for example
      <code>x-LazyStart</code>.</para>

      <para>Organizations external to the OSGi Working Group can request header
      names in the OSGi namespace. The OSGi Working Group maintains a registry of
      such names at <xref linkend="i3215677"/>.</para>

      <para>The <xref linkend="org.osgi.annotation.bundle.Header" xrefstyle="hyperlink"/> annotation can be used on a class or package to
      specify a header for a bundle. This annotation can be processed by
      bundle assembly tools to generate the specified header information in
      the bundle's manifest.</para>
    </section>

    <section>
      <title>Header Value Syntax</title>

      <para>Each Manifest header has its own syntax. In all descriptions, the
      syntax is defined with <xref linkend="i3024215"/>. These following
      sections define a number of commonly used terminals.</para>
    </section>

    <section xml:id="framework.common.header.syntax">
      <title>Common Header Syntax</title>

      <para>Many Manifest header values share a common syntax. This syntax
      consists of:</para>

      <programlisting>header ::= clause ( ',' clause ) *
clause ::= path ( ';' path ) *
              ( ';' parameter ) *     // See <xref linkend="framework.general.syntax" xrefstyle="template:%n"/></programlisting>

      <para>A parameter can be either a <emphasis>directive</emphasis> or an
      <emphasis>attribute</emphasis>. A directive is an instruction that has
      some implied semantics for the Framework. An attribute is used for
      matching and comparison purposes.</para>
    </section>

    <section xml:id="i2655136">
      <title>Version</title>

      <para>Version specifications are used in several places. A version has
      the following grammar:</para>

      <programlisting>version     ::=
        major( '.' minor ( '.' micro ( '.' qualifier )? )? )?

major       ::= number                   // See <xref linkend="framework.general.syntax" xrefstyle="template:%n"/>
minor       ::= number
micro       ::= number
qualifier   ::= ( alphanum | '_' | '-' )+</programlisting>

      <para>A version must not contain any white space. The default value for
      a version is <code>0.0.0</code>.</para>

      <para>Versions are supported in the API with the <xref linkend="org.osgi.framework.Version" xrefstyle="hyperlink"/>
      class.</para>

      <para>The <xref linkend="org.osgi.annotation.versioning.Version" xrefstyle="hyperlink"/> annotation can be used in
      <code>package-info.java</code> source files to document the version of a
      package. This annotation can be processed by bundle assembly tools when
      generating the version information for a bundle's Export-Package
      manifest header.</para>
    </section>

    <section xml:id="i3189032">
      <title>Version Ranges</title>

      <para>A version range describes a range of versions using a mathematical
      interval notation. See <xref linkend="i3024221"/>. The syntax of a
      version range is:</para>

      <programlisting>version-range ::= interval | atleast
interval      ::= ( '[' | '(' ) floor ',' ceiling ( ']' | ')' )
atleast       ::= version
floor         ::= version
ceiling       ::= version</programlisting>

      <para>If a version range is specified as a single version, it must be
      interpreted as the range <code>[version,</code><phrase role="symbol">∞</phrase><code>)</code>. The default for a non-specified
      version range is 0, which maps to <code>[0.0.0,</code><phrase role="symbol">∞</phrase><code>)</code>.</para>

      <para>Note that the use of a comma in the version range requires it to
      be enclosed in double quotes. For example:</para>

      <programlisting>Import-Package: com.acme.foo;version="[1.23,2)", «
   com.acme.bar;version="[4.0, 5.0)"</programlisting>

      <para>In the following table, for each specified range in the left-hand
      column, a version <emphasis>x</emphasis> is considered to be a member of
      the range if the predicate in the right-hand column is true.</para>

      <table>
        <title>Examples of version ranges</title>

        <tgroup cols="2">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="4*"/>

          <thead>
            <row>
              <entry>Example</entry>

              <entry>Predicate</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><para><code>[1.2.3, 4.5.6)</code></para></entry>

              <entry><para><code>1.2.3 &lt;= x &lt;
              4.5.6</code></para></entry>
            </row>

            <row>
              <entry><para><code>[1.2.3, 4.5.6]</code></para></entry>

              <entry><para><code>1.2.3 &lt;= x &lt;=
              4.5.6</code></para></entry>
            </row>

            <row>
              <entry><para><code>(1.2.3, 4.5.6)</code></para></entry>

              <entry><para><code>1.2.3 &lt; x &lt; 4.5.6</code></para></entry>
            </row>

            <row>
              <entry><para><code>(1.2.3, 4.5.6]</code></para></entry>

              <entry><para><code>1.2.3 &lt; x &lt;=
              4.5.6</code></para></entry>
            </row>

            <row>
              <entry><para><code>1.2.3</code></para></entry>

              <entry><para><code>1.2.3 &lt;= x</code></para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>Version Ranges are supported in the API with the <xref linkend="org.osgi.framework.VersionRange" xrefstyle="hyperlink"/>
      class.</para>
    </section>

    <section xml:id="framework.module.filtersyntax">
      <title>Filter Syntax</title>

      <para>The OSGi specifications use filter expressions extensively. Filter
      expressions allow for a concise description of a
      <emphasis>constraint</emphasis>. The syntax of a filter string is based
      upon the string representation of LDAP search filters as defined in
      <xref linkend="i3024195"/>. It should be noted that RFC 2254: A String
      Representation of LDAP Search Filters supersedes RFC 1960, but only adds
      extensible matching and is not applicable to this OSGi Framework
      API.</para>

      <para>The string representation of an LDAP search filter uses a prefix
      format and is defined by the following grammar:</para>

      <programlisting>filter      ::= '(' filter-comp ')'
filter-comp ::= and | or | not | operation
and         ::= '&amp;' filter-list
or          ::= '|' filter-list
not         ::= '!' filter
filter-list ::= filter | filter filter-list
operation   ::= simple | present | substring
simple      ::= attr filter-type value
filter-type ::= equal | approx | greater-eq | less-eq
equal       ::= '='
approx      ::= '~='
greater-eq  ::= '&gt;='
less-eq     ::= '&lt;='
present     ::= attr '=*'
substring   ::= attr '=' initial any final
initial     ::= () | value
any         ::= '*' star-value
star-value  ::= () | value '*' star-value
final       ::= () | value
value       ::= &lt;see text&gt;
attr        ::= &lt;see text&gt;</programlisting>

      <para><code>attr</code> is a string representing an attribute key or
      name. Attribute names are not case sensitive; that is, <code>cn</code>
      and <code>CN</code> both refer to the same attribute. <code>attr</code>
      must not contain the characters '=', '&gt;', '&lt;', '~', '(' or ')'.
      <code>attr</code> may contain embedded spaces but leading and trailing
      spaces must be ignored.</para>

      <para><code>value</code> is a string representing the value, or part of
      one, which will be compared against a value in the filtered
      properties.</para>

      <para>If <code>value</code> must contain one of the characters reverse
      solidus (<code>'\' \u005C</code>), asterisk (<code>'*' \u002A</code>),
      parentheses open (<code>'(' \u0028</code>) or parentheses close
      (<code>')' \u0029</code>), then these characters should be preceded with
      the reverse solidus (<code>'\' \u005C</code>) character. Spaces are
      significant in <code>value</code>. Space characters are defined by
      <code>Character.isWhiteSpace()</code>.</para>

      <para>Although both the <code>substring</code> and <code>present</code>
      productions can produce the <code>attr=*</code> construct, this
      construct is used only to denote a presence filter.</para>

      <para>The <code>substring</code> production only works for attributes
      that are of type <code>String</code>, <code>Collection</code> of
      <code>String</code> or <code>String[]</code>. In all other cases the
      result must be <code>false</code>.</para>

      <para>The evaluation of the approximate match (<code>'~='</code>) filter
      type is implementation specific but should at least ignore case and
      white space differences. Codes such as Soundex or other smart
      <emphasis>closeness</emphasis> comparisons could be used.</para>

      <para>Values specified in the filter are compared to values in the
      properties against which the filter is evaluated. The comparison of
      these values is not straightforward. Strings compare differently than
      numbers, and it is also possible for a property to have multiple
      values.</para>

      <para>Property keys are case insensitive. The object class of the
      property's value defines the comparison type. The properties values
      should be of the following types:</para>

      <figure xml:id="i3217016">
        <title>Primary Property Types</title>

        <programlisting>type        ::=  scalar  | collection | array
scalar      ::=  String | Integer | Long | Float
                    | Double | Byte | Short
                    | Character | Boolean
primitive   ::= int | long | float | double | byte
                    | short | char | boolean
array       ::= &lt;Array of primitive&gt;
                    | &lt;Array of scalar&gt;
collection  ::= &lt;Collection of scalar&gt;</programlisting>
      </figure>

      <para>The following rules apply for comparison:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>String</emphasis> - Use String comparison</para>
        </listitem>

        <listitem>
          <para><emphasis>Integer, Long, Float, Double, Byte, Short, Character
          objects and primitives</emphasis> - Use numerical comparison. The
          <code>value</code> should be trimmed of any extraneous white space
          before the comparison.</para>
        </listitem>

        <listitem>
          <para><emphasis>Boolean objects</emphasis> - Use comparison defined
          by <code>Boolean.valueOf(value).booleanValue()</code>. The
          <code>value</code> should be trimmed of any extraneous white space
          before this conversion is applied.</para>
        </listitem>

        <listitem>
          <para><emphasis>Array or Collection elements</emphasis> - Comparison
          is determined by the object type of the element</para>
        </listitem>
      </itemizedlist>

      <para>Array and Collection elements may be a mix of scalar types. Array
      and Collection elements may also be <code>null</code>. If the type of
      the property value is not one of the above types, then it could be
      possible to create an instance of the above type. The following
      conversions must be tried in the given order:</para>

      <orderedlist>
        <listitem>
          <para>A public static method on the required type called
          <code>valueOf</code> that returns an instance of the given type and
          takes a single <code>String</code> argument.</para>
        </listitem>

        <listitem>
          <para>A public constructor taking a single <code>String</code>
          argument.</para>
        </listitem>
      </orderedlist>

      <para>If one of these methods is available then the Framework must
      construct a temporary object by passing the <code>value</code> as the
      <code>String</code> argument. If the constructor/function is not
      directly accessible then the invocation should use the
      <code>setAccessible</code> method to make it accessible.</para>

      <para>The resulting object must be used to compare with the property
      value according to the following comparison rules:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Comparable objects</emphasis> - Comparison through
          the <code>Comparable</code> interface</para>
        </listitem>

        <listitem>
          <para><emphasis>Other objects</emphasis> - Equality
          comparison</para>
        </listitem>
      </itemizedlist>

      <para>If none of the above comparison rules apply, then the result of
      the comparison is <code>false</code>.</para>

      <para>A filter matches a property with multiple values if it matches at
      least one of those values. For example:</para>

      <programlisting>Dictionary dict = new Hashtable();
dict.put( "cn", new String[] { "a", "b", "c" } );</programlisting>

      <para>The <code>dict</code> will match against a filter with
      <code>(cn=a)</code> as well as <code>(cn=b)</code>.</para>

      <para>Service properties are often defined to take a type, a collection
      of that type, or an array of that type. In those cases, a simple + will
      be suffixed to the type name. For example <code>String+</code>,
      indicates that a <code>String</code>, a <code>String[]</code>, and a
      <code>Collection&lt;String&gt;</code> are all valid forms.</para>

      <para>Filters are supported in the API with the <xref linkend="org.osgi.framework.Filter" xrefstyle="hyperlink"/> type.
      Filters can be created with the <xref linkend="org.osgi.framework.FrameworkUtil" xrefstyle="hyperlink"/>.<xref linkend="org.osgi.framework.FrameworkUtil.createFilter-String-" xrefstyle="hyperlink"/> method or the <xref linkend="org.osgi.framework.BundleContext" xrefstyle="hyperlink"/>.<xref linkend="org.osgi.framework.BundleContext.createFilter-String-" xrefstyle="hyperlink"/> method.</para>
    </section>

    <section xml:id="framework.module-multireleasejar">
      <title>Multi-release JAR</title>

      <para>A bundle JAR file can be a multi-release JAR. See <xref linkend="framework.module-ref.multireleasejar"/>. When a bundle is a
      multi-release JAR, that is, the manifest contains</para>

      <programlisting>Multi-Release: true</programlisting>

      <para>then the Framework must look for a supplemental manifest file,
      <code>OSGI-INF/MANIFEST.MF</code>, in the versioned directories. For
      example:</para>

      <programlisting>META-INF/versions/9/OSGI-INF/MANIFEST.MF</programlisting>

      <para>The Framework must first look in the versioned directory for the
      major version of the current Java platform and then prior versioned
      directories in descending order. The first supplemental manifest file
      found must be used and the Framework must replace the values of the
      following manifest headers in the manifest with the values of these
      headers, if present, in the supplemental manifest file.</para>

      <itemizedlist>
        <listitem>
          <para><code>Import-Package</code></para>
        </listitem>

        <listitem>
          <para><code>Require-Capability</code></para>
        </listitem>
      </itemizedlist>

      <para>Any other headers in the supplemental manifest file must be
      ignored.</para>

      <para>The Framework APIs which provide access to the bundle metadata,
      such as <xref linkend="org.osgi.framework.Bundle.getHeaders--" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.framework.wiring.BundleRevision" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.framework.wiring.BundleWiring" xrefstyle="hyperlink"/>, must present the supplemented manifest
      information. That is, the main manifest with the replacement values from
      a supplemental manifest, if any, for the running Java platform
      version.</para>

      <para>Both fragment bundles as well as non-fragment bundles can be
      multi-release JARs.</para>

      <para>Support for multi-release JARs must only be active on Java 9 and
      later. On Java 8 and earlier, the JAR must be treated as a
      non-multi-release JAR.</para>
    </section>
  </section>

  <section xml:id="framework.module.dependencies">
    <title>Dependencies</title>

    <para>OSGi dependency handling is based on a very general model that
    describes the dependency relationships. This model consists of a small
    number of primitive concepts:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Environment</emphasis> - A container or framework that
        installs Resources.</para>
      </listitem>

      <listitem>
        <para><emphasis>Resource</emphasis> - An abstraction for an artifact
        that needs to become installed in some way to provide its intended
        function. A Bundle is modeled by a Resource but for example a display
        or secure USB key store can also be Resources.</para>
      </listitem>

      <listitem>
        <para><emphasis>Namespace</emphasis> - Defines what it means for the
        Environment when a requirement and capability match in a given
        Namespace.</para>
      </listitem>

      <listitem>
        <para><emphasis>Capability</emphasis> - Describing a feature or
        function of the Resource when installed in the Environment. A
        capability has attributes and directives.</para>
      </listitem>

      <listitem>
        <para><emphasis>Requirement</emphasis> - An assertion on the
        availability of a capability in the Environment. A requirement has
        attributes and directives. The <code>filter</code> directive contains
        the filter to assert the attributes of the capability in the same
        Namespace.</para>
      </listitem>
    </itemizedlist>

    <para>The relations between these entities are depicted in <xref linkend="i3308531"/>.</para>

    <figure xml:id="i3308531">
      <title>Core Requirement/Capability model</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="2.326in" contentwidth="6.415in" fileref="core-req-cap-model.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>A Resource in general has dependencies on other Resources or can
    satisfy other Resource's dependencies. Dependency types can vary wildly, a
    Bundle can require packages from another Bundle (Import-Package), or a
    Fragment needs a host Bundle (Fragment-Host), or a Bundle requires access
    to a high resolution display. The OSGi Core specification demonstrates
    that it is possible to describe these varying types of dependencies with
    dedicated headers, optimized for each case. However, this model requires
    that every type of dependency will go through a specification process,
    limiting the usefulness for parties not participating in this process.
    Therefore, this specification provides a generic dependency model based on
    <emphasis>Namespaces</emphasis>. A Namespace is the
    <emphasis>type</emphasis> of a dependency. For example, the
    <code>osgi.wiring.package</code> Namespace defines the semantics for
    Import-Package and Export-Package headers by specifying a number of
    <emphasis>attributes</emphasis> and <emphasis>directives</emphasis>.
    Attributes are used for matching and directives provide information about
    the semantics of the Namespace. For example, in the case of the
    <code>osgi.wiring.host</code> Namespace (Fragments) the capability's
    attributes are:</para>

    <itemizedlist>
      <listitem>
        <para><code>osgi.wiring.host</code> - (<code>String</code>) The host's
        name.</para>
      </listitem>

      <listitem>
        <para><code>bundle-version</code> - (<code>Version</code>) The host's
        version.</para>
      </listitem>

      <listitem>
        <para><code>*</code> - Any other attributes are allowed.</para>
      </listitem>
    </itemizedlist>

    <para>The OSGi Framework Namespaces are defined in classes, see <xref linkend="framework.namespaces"/>.</para>

    <para>The purpose of a Namespace is to create an attribute/directive based
    language that describes a dependency in a generic way unrelated to the
    specific dependency type. A number of Namespaces have been defined by the
    OSGi Working Group in this and other specifications. OSGi namespaces start with
    the reserved <code>osgi.</code> prefix. For example, the
    <code>osgi.ee</code> namespace defines a capability for specifying an
    execution environment. A Namespace can also be defined by other
    organizations and individuals. To minimize name clashes it is recommended
    to use the reverse domain name rule used for packages and bundle symbolic
    names. It is also recommended to register these Namespaces with the OSGi
    Working Group, see <xref linkend="framework.module.namespace-registry"/> to
    prevent clashes.</para>

    <para>Given a Namespace, it is possible to declare a
    <emphasis>capability</emphasis> of that Namespace. A capability provides
    the values for the attributes and directives defined in the Namespace. For
    example, it is possible to translate the Export-Package header to a
    capability in the <code>osgi.wiring package</code> Namespace.</para>

    <para>Given a capability, it is possible to specify a
    <emphasis>requirement</emphasis>. A requirement has a filter that can
    match the attributes of the capability, if so, the requirement is
    <emphasis>satisfied</emphasis>. Requirements are always associated with a
    given Namespace, like the capability, and can therefore only be
    <emphasis>satisfied</emphasis> by Capabilities in the same Namespace. A
    requirement is satisfied when its filter, as specified with the
    <code>filter</code> directive, matches a capability's attributes. The
    filter language specification can be found in <xref linkend="framework.module.filtersyntax"/>. A requirement can be
    <emphasis>mandatory</emphasis> or <emphasis>optional</emphasis>, as set
    with its <code>resolution</code> directive. A requirement can have
    <code>single</code> or <code>multiple</code> cardinality, indicating it
    requires at least one or more Capabilities.</para>

    <para>A Resource that declares requirements can only provide its intended
    functionality when its mandatory requirements are satisfied by one or more
    Capabilities, which in general means they come from other Resources. A
    Resource that has all its mandatory requirements satisfied is said to be
    <emphasis>resolved</emphasis> and must provide the functionality described
    by its Capabilities. A capability can only satisfy a requirement if its
    Resource is resolved.</para>

    <para>The process of matching up requirements to capabilities is called
    <emphasis>resolving</emphasis>. In this process, the resolver must create
    <emphasis>Wires</emphasis> that link requirements to Capabilities. Both
    the Wire and the requirement/ Capability have a reference to a Resource.
    In certain cases the requirement/ capability can be declared in one
    Resource but wired from another Resource. Therefore, a requirement/
    capability can have a <emphasis>declared</emphasis> Resource, which is the
    Resource that declares it. However, when a Resource is
    <emphasis>wired</emphasis> the Wire has a <emphasis>provider</emphasis> or
    <emphasis>requirer</emphasis> Resource which can differ from the
    corresponding declared Resource. When the declared Resource differs from
    the provider/requirer it is called <emphasis>hosting</emphasis>. This
    separation is caused by Fragments; with Fragments some requirements and
    Capabilities are hosted and others remain part of the Fragment.</para>

    <para>Only requirements that are <emphasis>effective</emphasis> must be
    wired. Each requirement is intended for a certain state of the system. For
    example, the OSGi Framework only resolves requirements when the
    requirement has the <code>effective</code> directive set to
    <code>resolve</code>.</para>

    <para>Once a set of Resources are resolved the Environment, for example
    the OSGi Framework for bundles, creates a <emphasis>Wiring</emphasis> per
    Resource to hold the resolved state. This state includes the Wires as well
    as all Capabilities and requirements, regardless if they are wired or
    not.</para>

    <para>The Wires between a requirement and a capability must be created
    according to the semantics implied by their Namespace. The Wires coming
    out of a resolve operation can be used during run time as specified in
    their Namespace. For example, the <code>osgi.wiring.*</code> Namespaces
    are used to control the Class Loading, see <xref linkend="framework.wiring"/>. However, they can also serve other purposes
    as outlined by their Namespace. For example, a Wire could specify a
    Dependency Injection source and target.</para>

    <para>Interfaces for the generic model are defined in <xref linkend="framework.resource"/>. The <xref linkend="framework.wiring"/>
    chapter describes the Wiring API that is based on this generic package.
    The generic API is intended for other specifications that want to be
    compatible with the generic OSGi Core framework's Capability /Requirement
    model.</para>

    <section>
      <title>Bundles</title>

      <para>All bundles depend on one or more external entities and this is
      expressed as requirements and Capabilities. Once a bundle is resolved,
      it assumes that those dependencies are <emphasis>satisfied</emphasis>.
      The Require-Capability and Provide-Capability headers are manifest
      headers that <emphasis>declare</emphasis> generic requirements and
      Capabilities in any Namespace. However, a number of manifest headers in
      the OSGi specifications are actually requirements on Capabilities
      specified by other OSGi manifest headers. For example, an Import-Package
      clause is a requirement on the capability specified by an Export-Package
      clause. The attributes on an Import-Package clause are treated as
      assertions on the attributes of the corresponding Export-Package clause.
      This specification therefore contains a number of Namespaces for these
      OSGi manifest headers: <code>osgi.wiring.bundle</code>,
      <code>osgi.wiring.package</code>, and <code>osgi.wiring.host</code>.
      These namespaces influence the resolver and define the class loading
      process. For example, a Require-Bundle clause is a requirement that
      ensures that the exported packages of the required bundle are available
      to the requirer's class loader.</para>

      <para>The OSGi resolving process is described in <xref linkend="framework.module.resolvingprocess"/>. The diagramming technique
      of the Requirement/Capability model is depicted in <xref linkend="i3249403"/>, the details of the wiring are further explained in
      <xref linkend="framework.wiring"/>.</para>

      <figure pgwide="1" xml:id="i3249403">
        <title>Requirements and Capabilities and their Wiring</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.800in" contentwidth="6.199in" fileref="req-cap-wiring.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Example Use Case</title>

      <para>A bundle has Windows 7 specific Java code and requires a display
      that has a resolution of at least 1000x1000 pixels. It also relies on a
      bundle providing an IP-number-to-location table.</para>

      <para>These dependencies on the environment and another bundle can be
      expressed with the requirement header in the bundle as follows:</para>

      <programlisting>Require-Capability:
  com.microsoft;    filter:="(&amp;(api=win32)(version=7))",
  com.acme.display; filter:="(&amp;(width&gt;=1000)(height&gt;=1000))",
  com.acme.ip2loc</programlisting>

      <para>Each clause lives in a namespace, for example
      <code>com.microsoft</code>. A namespace defines the semantics of the
      attributes as well as optional rules.</para>

      <para>The deployer of the environment sets the following launching
      property when starting the framework:</para>

      <programlisting>org.osgi.framework.system.capabilities.extra= «
  com.acme.display; width:Long=1920; height:Long=1080; interlace=p, «
  com.microsoft; edition=home; version:Version=7; api=win32</programlisting>

      <para>The framework will be able to satisfy the display requirement but
      it cannot satisfy the <code>ip2loc</code> table requirement. The
      deployer can then install the bundle with the <code>ip2loc</code> table.
      This bundle specifies the following header:</para>

      <programlisting>Provide-Capability: com.acme.ip2loc; version:Version=1.2</programlisting>

      <para>After installing and resolving this bundle, the framework can
      resolve the original bundle because there is now a provider of the
      <code>ip2loc</code> table.</para>
    </section>

    <section>
      <title>Bundle Capabilities</title>

      <para>A generic capability for a Bundle is defined with the
      Provide-Capability header. This header has the following syntax:</para>

      <programlisting>Provide-Capability  ::= capability (',' capability )*
capability          ::= name-space
                            ( ';' directive | typed-attr )*
name-space          ::= symbolic-name
typed-attr          ::=  extended ( ':' type )? '=' argument
type                ::= scalar | list
scalar              ::= 'String' | 'Version' | 'Long'
                            |   'Double'
list                ::= 'List' ( '&lt;' scalar '&gt;' )?</programlisting>

      <para>The <xref linkend="org.osgi.annotation.bundle.Capability" xrefstyle="hyperlink"/> annotation can be used on a class or package to
      specify a capability to be provided by the bundle. This annotation can
      be processed by bundle assembly tools to add the capability to the
      Provide-Capability header in the bundle's manifest.</para>

      <para>The header has the following directives architected:</para>

      <itemizedlist>
        <listitem>
          <para><code>effective</code> - <code>(resolve)</code> Specifies the
          time a capability is available, either <code>resolve</code>
          (default) or another name. The OSGi framework resolver only
          considers Capabilities without an <code>effective</code> directive
          or <code>effective:=resolve</code>. Capabilities with other values
          for the <code>effective</code> directive can be considered by an
          external agent.</para>
        </listitem>

        <listitem>
          <para><code>uses</code> - The uses directive lists package names
          that are used by this capability. This information is intended to be
          used for uses constraints, see <xref linkend="i3127019"/>.</para>
        </listitem>
      </itemizedlist>

      <para>Namespaces can define additional directives and attributes.</para>
    </section>

    <section xml:id="i3306043">
      <title>Bundle Capability Attributes</title>

      <para>Attributes can be <emphasis>typed</emphasis>. Typing is important
      because it defines how attributes compare. Comparing two versions as
      strings does not provide the proper comparison semantics for versions.
      In similar vein, lexicographical ordering is different than numeric
      ordering.</para>

      <para>Types are specified between the attribute name and the equal sign
      (<code>'=' \u003D</code>), the separator is a colon (<code>':'
      \u003A</code>). For example:, for a <code>Long:</code></para>

      <programlisting>attr:Long=24</programlisting>

      <para>If no type is specified, the <code>String</code> type is
      assumed.</para>

      <para>The parsing rules of the corresponding type's <code>String</code>
      constructor are then used to create a new instance that is placed in the
      capability's map. Numeric types must trim white space around the value,
      for other types spaces around the argument are not ignored, however,
      white space is skipped by the manifest parsing rules. That is:</para>

      <programlisting>attr:Long=        23       ,            //ok
attr:Version="    23      ",            // error
attr:Long="       23      ",            // ok, because nummeric</programlisting>

      <para>Multi-valued attributes can be constructed with the
      <code>List</code> type. The <code>List</code> type can specify a
      <code>scalar</code> type for the list elements. If no element type is
      specified, <code>String</code> is assumed. Parsing of the corresponding
      <code>argument</code> list must be done according to the following
      rules:</para>

      <itemizedlist>
        <listitem>
          <para>Element values in the list are separated by commas (<code>','
          \u002C</code>).</para>
        </listitem>

        <listitem>
          <para>White space around an element value must be trimmed for
          non-<code>String</code> element types.</para>
        </listitem>

        <listitem>
          <para>Commas or reverse solidi (<code>'\' \u005C</code>) that are
          part of an element value must be escaped by prefixing them with a
          reverse solidus. In practice, this requires escaping with two
          reverse solidi because a reverse solidus must already be escaped in
          strings.</para>
        </listitem>
      </itemizedlist>

      <para>The whole <code>argument</code> must be surrounded by quotes
      because the comma is a significant token in the manifest grammar.</para>

      <para>The version attribute requires the Version type to be specified to
      be compared as a Version rather than as a String:</para>

      <programlisting>version:Version=1.23</programlisting>

      <para>For example:</para>

      <programlisting>Provide-Capability: «
   com.acme.dictionary; from:String=nl; to=de; version:Version=3.4, «
   com.acme.dictionary; from:String=de; to=nl; version:Version=4.1, «
   com.acme.ip2location;country:List="nl,be,fr,uk";version:Version=1.3, «
   com.acme.seps;       tokens:List&lt;String&gt;="\\,,;,\\\""</programlisting>
    </section>

    <section>
      <title>System Bundle Capabilities</title>

      <para>Capabilities can also be provided by the system bundle by
      specifying the following launch properties:</para>

      <programlisting>org.osgi.framework.system.capabilities
org.osgi.framework.system.capabilities.extra</programlisting>

      <para>The format for these system properties is identical to the
      Provide-Capability header. A framework must parse these properties and
      use them in the resolving process as if provided by the system
      bundle.</para>

      <para>There are two properties so that the framework can specify its
      default Capabilities in
      <code>org.osgi.framework.system.capabilities</code> while the deployer
      can specify specific deployment Capabilities in the
      <code>org.osgi.framework.system.capabilities.extra</code> system
      property. Frameworks can often deduce many Capabilities from their
      environment.</para>

      <para>The following is an example capability header for the system
      bundle as defined by the deployer:</para>

      <programlisting>map.put("org.osgi.framework.system.capabilities.extra",
    "com.acme.screen; width:Long=640; height:Long=480; card=GeForce");</programlisting>
    </section>

    <section>
      <title>Bundle Requirements</title>

      <para>The Bundle's Require-Capability header has the following
      grammar:</para>

      <programlisting>Require-Capability ::= requirement ( ',' requirement )*
requirement        ::= name-space ( ';' directive | typed-attr )*</programlisting>

      <para>Requirements have attributes that can be set with the
      Require-Capability header. The purpose of these attributes are to
      provide further information about the requirement; they are not
      assertions as they are in the Import-Package, Require-Bundle, and
      Fragment-Host headers. The attributes of these headers are mapped to the
      <code>filter</code> directive in their corresponding namespaces.</para>

      <para>The <xref linkend="org.osgi.annotation.bundle.Requirement" xrefstyle="hyperlink"/> annotation can be used on a class or package to
      specify a capability to be required by the bundle. This annotation can
      be processed by bundle assembly tools to add the requirement to the
      Require-Capability header in the bundle's manifest.</para>

      <para>The following directives are architected for the
      Require-Capability header:</para>

      <itemizedlist>
        <listitem>
          <para><code>effective</code> - <code>(resolve)</code> Specifies the
          time a requirement is considered, either <code>resolve</code>
          (default) or another name. The OSGi framework resolver only
          considers requirements without an <code>effective</code> directive
          or <code>effective:=resolve</code>. Other requirements can be
          considered by an external agent. Additional names for the
          <code>effective</code> directive should be registered with the OSGi
          Working Group.</para>
        </listitem>

        <listitem>
          <para><code>resolution</code> - (<code>mandatory|optional</code>) A
          mandatory requirement forbids the bundle to resolve when the
          requirement is not satisfied; an optional requirement allows a
          bundle to resolve even if the requirement is not satisfied. No
          wirings are created when this requirement cannot be resolved, this
          can result in Class Not Found Exceptions when the bundle attempts to
          use a package that was not resolved because it was
          <code>optional</code>. The default is <code>mandatory</code>.</para>
        </listitem>

        <listitem>
          <para><code>filter</code> - (<code>Filter</code>) A filter
          expression that is asserted on the Capabilities belonging to the
          given namespace. The matching of the filter against the capability
          is done on one capability at a time. A filter like
          <code>(&amp;(a=1)(b=2))</code> matches only a capability that
          specifies both attributes at the required value, not two
          capabilities that each specify one of the attributes correctly. A
          filter is optional, if no filter directive is specified the
          requirement always matches. The attribute names in the filter
          expression are used to locate capability attributes in a case
          sensitive manner.</para>
        </listitem>

        <listitem>
          <para><code>cardinality</code> - (<code>single|multiple</code>)
          Indicates if the requirement can be wired a single time or multiple
          times. The default is single.</para>
        </listitem>
      </itemizedlist>

      <para>Additional directives are ignored during resolving. Attributes on
      the <code>requirement</code> clause are also ignored.</para>
    </section>
  </section>

  <section xml:id="framework.module-execution.environment">
    <title>Execution Environment</title>

    <para>The Java environment provides all packages in the
    <code>java.*</code> namespace. Prior to Java SE 9, this namespace was not
    well defined and could be different for different runtime environments.
    For example, Java SE 5 is not equal to Java SE 7 and an Android
    environment has substantial differences to a Java SE environment. However,
    Java SE 6 is backward compatible for Java SE 5, Java SE 1.4, Java SE 1.3
    and Java SE 1.2. That is, applications written for Java SE 1.3 must run
    unchanged on a Java SE 5 environment.</para>

    <para>These differences and backward compatibilities can not be captured
    using versions because they are <emphasis>variations</emphasis>. For
    example, <xref linkend="i3246261"/> is a variation of a Java SE 5
    environment, as is <xref linkend="i3246276"/> and <xref linkend="i3246284"/>. All these variations have a different set of
    packages, types, and methods in the <code>java.*</code> namespace.</para>

    <para>Starting in Java SE 9, the platform has been modularized and its
    packages organized into a set of modules. Depending upon how the platform
    is configured for execution, some modules and their contained packages may
    not be present at runtime. However, Java SE 9 provides a standard way to
    interrogate the Java platform for the packages currently available at
    runtime. Therefore, the Framework must set the
    <code>org.osgi.framework.system.packages</code> launching property, see
    <xref linkend="framework.lifecycle.launchingproperties"/>, to the list of
    Java platform packages currently available at runtime.</para>

    <para>For Java platform versions prior to Java SE 9, the Framework must
    also set the <code>org.osgi.framework.system.packages</code> launching
    property to the list of Java platform packages generally known to be
    available at runtime. Since there is no standard way to interrogate the
    Java platform for the packages currently available at runtime, a Framework
    implementation may use a predefined list of packages for the Java platform
    version.</para>

    <para>In additional to specifying the version of the execution environment
    via an <code>osgi.ee</code> requirement, see <xref linkend="framework.namespaces.osgi.ee"/>, a Bundle may also import
    <code>java.*</code> packages using the Import-Package header. Imports of
    <code>java.*</code> packages by a bundle will be used during the
    resolution process, see <xref linkend="framework.module.resolvingprocess"/>, to ensure the bundle has
    visibility to the requested packages by wiring the bundle's import of a
    <code>java.*</code> package to the export of the <code>java.*</code>
    package by the Framework's system bundle. However, a bundle always loads
    classes in <code>java.*</code> packages via parent delegation. See <xref linkend="framework.module.parentdelegation"/>. Therefore, a bundle is not
    required to import a <code>java.*</code> package to have visibility to the
    classes in the package, if the package is present in the current runtime.
    It only needs to import a <code>java.*</code> package to have the
    resolution process ensure the package is available from the execution
    environment. This can avoid a <code>NoClassDefFoundError</code> during
    execution of the bundle due to a missing <code>java.*</code> package
    required by the bundle.</para>

    <section xml:id="framework.module.bree">
      <title>Bundle-RequiredExecutionEnvironment</title>

      <para>The Bundle-RequiredExecutionEnvironment manifest header provides
      the same function as the <xref linkend="framework.namespaces.osgi.ee"/>.
      It allows a bundle to depend on the execution environment. This header
      is deprecated but must be fully supported by a compliant framework.
      Bundles should not mix these headers but use either an
      <code>osgi.ee</code> requirement or this header. If both are used, both
      constraints must be met to resolve.</para>

      <para>The syntax of this header is a list of comma-separated names of
      execution environments.</para>

      <programlisting>Bundle-RequiredExecutionEnvironment ::= ee-name ( ',' ee-name )*

ee-name  ::= bree | &lt;ee name&gt;
bree     ::= token ( '-' version )? ( '/' token ( '-' version )? )?</programlisting>

      <para>For example:</para>

      <programlisting>Bundle-RequiredExecutionEnvironment: CDC-1.0/Foundation-1.0, «
  OSGi/Minimum-1.1</programlisting>

      <para>If a bundle includes this header in the manifest then the bundle
      must only use methods with signatures that are contained within a proper
      subset of all mentioned execution environments. Bundles should list all
      (known) execution environments on which it can run the bundle.</para>

      <para>A bundle can only resolve if the framework is running on a VM
      which implements one of the listed required execution environments.
      Frameworks should recognize that the current VM can implement multiple
      execution environments. For example, Java 6 is backward compatible with
      Java 5 and a bundle requiring the Java 6 execution environment must
      resolve on a Java 6 VM.</para>

      <para>The Bundle-RequiredExecutionEnvironment header can not prevent a
      bundle from installing.</para>

      <para>The <code>org.osgi.framework.executionenvironment</code> launching
      property defines the current execution environment with a comma
      separated list of execution environment names. If not set, the framework
      must provide an appropriate value. This property is also deprecated, its
      function is replaced with
      <code>org.osgi.framework.system.capabilities[.extra]</code>.</para>

      <para>An example:</para>

      <programlisting>org.osgi.framework.executionenvironment =
     JavaSE-1.5, J2SE-1.4, JavaSE-1.4, JavaSE-1.3, OSGi/Minimum-1.1</programlisting>

      <para>Frameworks must convert a Bundle-RequiredExecutionEnvironment
      header to a requirement in the <code>osgi.ee</code> namespace when used
      in the Wiring API, see <xref linkend="framework.wiring"/>. Since the
      header uses opaque names for the execution environments there is no
      guaranteed algorithm to map the <code>ee-name</code> to a
      Require-Capability header. However, the suggested names so far for
      popular execution environments do have a structure that can be used to
      create such a header, this pattern was reflected in the
      <code>bree</code> term. The structure of the <code>bree</code> term for
      the existing recommendations is:</para>

      <programlisting>n1 ( '-' v )? ( '/' n2 ( '-' v )? )?</programlisting>

      <para>For example:</para>

      <programlisting>CDC-1.0/Foundation-1.0
OSGi/Minimum-1.2
J2SE-1.4
JavaSE-1.4</programlisting>

      <para>Each <code>bree</code> term that matches this pattern can thus be
      converted into an equivalent <code>osgi.ee</code> Require-Capability
      filter. First variable <code>n1</code> must be replaced with
      <code>JavaSE</code> when it is <code>J2SE</code> since the
      Require-Capability header uses a single name for the Java Standard
      Edition. The <code>filter</code> directive can then be constructed from
      <code>n1</code>, <code>v</code>, and <code>n2</code>. If n2 is not
      defined or v is not defined then the parenthesized parts in which they
      participate are not used in the expansion.</para>

      <programlisting>bree-filter ::= '(&amp;(osgi.ee=' n1 ( '/' n2 )? ')' ( '(version=' v ')' )? ')'</programlisting>

      <para>If the <code>bree</code> term cannot be parsed into the given
      constituents then the filter must look like:</para>

      <programlisting>filter    ::= '(osgi.ee=' &lt;ee name&gt; ')'</programlisting>

      <para>Some examples:</para>

      <programlisting>CDC-1.0/Foundation-1.0      (&amp;(osgi.ee=CDC/Foundation)(version=1.0))
OSGi/Minimum-1.2            (&amp;(osgi.ee=OSGi/Minimum)(version=1.2))
J2SE-1.4                    (&amp;(osgi.ee=JavaSE)(version=1.4))
JavaSE-1.6                  (&amp;(osgi.ee=JavaSE)(version=1.6))
AA/BB-1.7                   (&amp;(osgi.ee=AA/BB)(version=1.7))
V1-1.5/V2-1.6               (osgi.ee=V1-1.5/V2-1.6)
MyEE-badVersion             (osgi.ee=MyEE-badVersion)</programlisting>

      <para>Each element of the Bundle-RequiredExecutionEnvironment is ORed
      together in the final <code>osgi.ee</code> requirement's
      <code>filter</code> directive. For example:</para>

      <programlisting>Bundle-RequiredExecutionEnvironment:
    CDC-1.0/Foundation-1.0,
    OSGi/Minimum-1.2,
    J2SE-1.4,
    JavaSE-1.6,
    AA/BB-1.7,
    V1-1.5/V2-1.6,
    MyEE-badVersion</programlisting>

      <para>This must be converted into the following
      Require-Capability:</para>

      <programlisting>Require-Capability:osgi.ee; filter:="(|
    (&amp;(osgi.ee=CDC/Foundation)(version=1.0))
    (&amp;(osgi.ee=OSGi/Minimum)(version=1.2))
    (&amp;(osgi.ee=JavaSE)(version=1.4))
    (&amp;(osgi.ee=JavaSE)(version=1.6))
    (&amp;(osgi.ee=AA/BB)(version=1.7))
    (osgi.ee=V1-1.5/V2-1.6)
    (osgi.ee=MyEE-badVersion)
 )"</programlisting>

      <para>Every <code>org.osgi.resource.Resource</code> representing a
      Bundle which has a Bundle-RequiredExecutionEnvironment header must have
      the converted <code>osgi.ee</code> requirement in the list returned by
      <xref linkend="org.osgi.resource.Resource.getRequirements-String-" xrefstyle="hyperlink"/> for the <code>osgi.ee</code> namespace. In cases
      where the bundle already has a requirement for the <code>osgi.ee</code>
      namespace no merging is done, the bundle will simply have an additional
      <code>osgi.ee</code> requirement added.</para>
    </section>
  </section>

  <section xml:id="i3174728">
    <title>Class Loading Architecture</title>

    <para>Many bundles can share a single virtual machine (VM), see <xref linkend="i3311293"/>. Within this VM, bundles can hide packages and
    classes from other bundles, as well as share packages with other
    bundles.</para>

    <para>The key mechanism to hide and share packages is the Java
    <emphasis>class loader</emphasis> that loads classes from a sub-set of the
    bundle-space using well-defined rules. Each bundle has a single class
    loader. That class loader forms a class loading delegation network with
    other bundles as shown in <xref linkend="i3119581"/>.</para>

    <figure pgwide="1" xml:id="i3119581">
      <title>Delegation model</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="2.570in" contentwidth="4.958in" fileref="classloader-delegation-model.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The class loader can load classes and resources from:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Boot class path</emphasis> - The boot class path
        contains the <code>java.*</code> packages and its implementation
        packages.</para>
      </listitem>

      <listitem>
        <para><emphasis>Framework class path</emphasis> - The Framework
        usually has a separate class loader for the Framework implementation
        classes as well as key service interface classes.</para>
      </listitem>

      <listitem>
        <para><emphasis>Bundle Space</emphasis> - The bundle space consists of
        the JAR file that is associated with the bundle, plus any additional
        JAR that are closely tied to the bundle, like
        <emphasis>fragments</emphasis>, see <xref linkend="framework.module.fragmentbundles"/>.</para>
      </listitem>
    </itemizedlist>

    <para>A <emphasis>class space</emphasis> is then all classes reachable
    from a given bundle's class loader. Thus, a class space for a given bundle
    can contain classes from:</para>

    <itemizedlist>
      <listitem>
        <para>The parent class loader (normally <code>java.*</code> packages
        from the boot class path)</para>
      </listitem>

      <listitem>
        <para>Imported packages</para>
      </listitem>

      <listitem>
        <para>Required bundles</para>
      </listitem>

      <listitem>
        <para>The bundle's class path (<emphasis>private
        packages</emphasis>)</para>
      </listitem>

      <listitem>
        <para>Attached fragments</para>
      </listitem>
    </itemizedlist>

    <para>A class space must be consistent, such that it
    <emphasis>never</emphasis> contains two classes with the same fully
    qualified name (to prevent Class Cast Exceptions). However, separate class
    spaces in an OSGi Platform may contain classes with the same fully
    qualified name. The modularization layer supports a model where multiple
    versions of the same class are loaded in the same VM.</para>

    <para><xref linkend="i3281668"/> shows the class space for a Bundle A. The
    right top of Bundle A is not in the class space because it illustrates
    that sometimes packages inside a bundle are not accessible to the Bundle
    itself when an export is substituted.</para>

    <figure xml:id="i3281668">
      <title>Class Space</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="2.836in" contentwidth="4.958in" fileref="class-space.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The Framework therefore has a number of responsibilities related to
    class loading. Before a bundle is used, it must resolve the constraints
    that a set of bundles place on the sharing of packages. Then select the
    best possibilities to create a <emphasis>wiring</emphasis>. See <xref linkend="framework.module.resolvingprocess"/> for further information. The
    runtime aspects are described in <xref linkend="i2570775"/>.</para>

    <section xml:id="framework.module-resolving">
      <title>Resolving</title>

      <para>The Framework must <emphasis>resolve</emphasis> bundles. Resolving
      is the process where any external dependencies are satisfied and then
      importers are <emphasis>wired</emphasis> to exporters. Resolving is a
      process of satisfying constraints; constraints that are provided by the
      <xref linkend="framework.module.dependencies"/> section and constraints
      by the different manifest headers like Import/Export Package,
      Require-Bundle, and Fragment-Host. The resolving process must take place
      before any code from a bundle can be loaded or executed.</para>

      <para>A <emphasis>wire</emphasis> is an actual connection between an
      <emphasis>exporter</emphasis> and an <emphasis>importer</emphasis>,
      which are both bundles. A wire is associated with a number of
      constraints that are defined by its importer's and exporter's manifest
      headers. A <emphasis>valid</emphasis> wire is a wire that has satisfied
      all its constraints. <xref linkend="i2545604"/> depicts the class
      structure of the wiring model. Not all constraints result in a
      wire.</para>

      <figure pgwide="1" xml:id="i2545604">
        <title>Example class structure of wiring</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.600in" contentwidth="7.418in" fileref="class-wiring-example.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section>
    <title>Resolving Metadata</title>

    <para>The following sections define the manifest headers that provide the
    metadata for the resolver.</para>

    <section xml:id="i3065034">
      <title>Bundle-ManifestVersion</title>

      <para>A bundle manifest must express the version of the OSGi manifest
      header syntax in the <code>Bundle-ManifestVersion</code> header. Bundles
      exploiting this version of the Framework specification (or later) must
      specify this header. The syntax of this header is as follows:</para>

      <programlisting>  Bundle-ManifestVersion ::= number     //See <xref linkend="framework.general.syntax" xrefstyle="template:%n"/></programlisting>

      <para>The Framework bundle manifest version must be '2'. Bundle
      manifests written to previous specifications' manifest syntax are taken
      to have a bundle manifest version of '1', although there is no way to
      express this in such manifests. Therefore, any other value than
      <code>2</code> for this header is invalid unless the Framework
      explicitly supports such a later version.</para>

      <para>OSGi Framework implementations should support bundle manifests
      without a Bundle-ManifestVersion header and assume Framework 1.2
      compatibility at the appropriate places.</para>

      <para>Version 2 bundle manifests must specify the bundle symbolic name.
      They need not specify the bundle version because the version header has
      a default value.</para>
    </section>

    <section xml:id="framework.module.bsn">
      <title>Bundle-SymbolicName</title>

      <para>The Bundle-SymbolicName manifest header is a mandatory header. The
      bundle symbolic name and bundle version identify a unique bundle. This
      does not always imply that this pair is unique in a framework, in
      certain cases the same bundle can be installed multiple times in the
      same framework, see <xref linkend="framework.lifecycle.bundleidentifiers"/>.</para>

      <para>A bundle gets its unique Bundle-SymbolicName from the developer.
      The Bundle-Name manifest header provides a human-readable name for a
      bundle and is therefore not replaced by this header.</para>

      <para>The Bundle-SymbolicName manifest header must conform to the
      following syntax:</para>

      <programlisting>Bundle-SymbolicName ::= symbolic-name
                        ( ';' parameter ) *    // See <xref linkend="framework.general.syntax" xrefstyle="template:%n"/></programlisting>

      <para>The framework must recognize the following directives for the
      Bundle-SymbolicName header:</para>

      <itemizedlist>
        <listitem>
          <para><code>singleton</code> - Indicates that the bundle can only
          have a single version resolved in an environment. A value of
          <code>true</code> indicates that the bundle is a <emphasis>singleton
          bundle</emphasis>. The default value is <code>false</code>. The
          Framework must resolve at most one bundle when multiple versions of
          a singleton bundle with the same symbolic name are installed.
          Singleton bundles do not affect the resolution of non-singleton
          bundles with the same symbolic name.</para>
        </listitem>

        <listitem>
          <para><code>fragment-attachment</code> - Defines how fragments are
          allowed to be attached, see the fragments in <xref linkend="framework.module.fragmentbundles"/>. The following values
          are valid for this directive:</para>

          <itemizedlist>
            <listitem>
              <para><code>always</code> - (Default) Fragments can attach at
              any time while the host is resolved or during the process of
              resolving.</para>
            </listitem>

            <listitem>
              <para><code>never</code> - No fragments are allowed.</para>
            </listitem>

            <listitem>
              <para><code>resolve-time</code> - Fragments must only be
              attached during resolving.</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para><code>mandatory</code> - Provide a list of mandatory
          attributes. If these attributes are not specifically used in the
          requirement (Require-Bundle, Fragment-Host) then this bundle must
          not match. See <xref linkend="i2515263"/>.</para>
        </listitem>
      </itemizedlist>

      <para>The header allows the use of arbitrary attributes that can be
      required by the Require-Bundle and Fragment-Host headers. The following
      attribute is predefined:</para>

      <itemizedlist>
        <listitem>
          <para><code>bundle-version</code> - The value of the Bundle-Version
          header or 0 if no such header is present. Explicitly setting this
          attribute is an error.</para>
        </listitem>
      </itemizedlist>

      <para>For example:</para>

      <programlisting>Bundle-SymbolicName: com.acme.foo;singleton:=true</programlisting>
    </section>

    <section>
      <title>Bundle-Version</title>

      <para>Bundle-Version is an optional header; the default value is
      <code>0.0.0</code>.</para>

      <programlisting>Bundle-Version ::= version  // See <xref linkend="i2655136" xrefstyle="template:%n"/></programlisting>

      <para>If the <code>minor</code> or <code>micro</code> version components
      are not specified, they have a default value of <code>0</code>. If the
      qualifier component is not specified, it has a default value of the
      empty string (<code>""</code>).</para>

      <para>Versions are comparable. Their comparison is done numerically and
      sequentially on the <code>major</code>, <code>minor</code>, and
      <code>micro</code> components and lastly using the String class
      <code>compareTo</code> method for the <code>qualifier</code>.</para>

      <para>A version is considered equal to another version if the major,
      minor, micro, and the qualifier components are equal (using
      <code>String</code> method <code>compareTo</code>).</para>

      <para>Example:</para>

      <programlisting>Bundle-Version: 22.3.58.build-345678</programlisting>
    </section>

    <section xml:id="framework.module.importpackage">
      <title>Import-Package</title>

      <para>The Import-Package header defines the constraints on the imports
      of shared packages. The syntax of the Import-Package header is:</para>

      <programlisting>Import-Package ::= import ( ',' import )*
import ::= package-names ( ';' parameter )*
package-names ::= package-name
                    ( ';' package-name )* // See <xref linkend="framework.general.syntax" xrefstyle="template:%n"/></programlisting>

      <para>The header allows many packages to be imported. An
      <emphasis>import definition</emphasis> is the description of a single
      package for a bundle. The syntax permits multiple package names,
      separated by semi-colons, to be described in a short form.</para>

      <para>Import package directives are:</para>

      <itemizedlist>
        <listitem>
          <para><code>resolution</code> - Indicates that the packages must be
          resolved if the value is mandatory, which is the default. If
          mandatory packages cannot be resolved, then the bundle must fail to
          resolve. A value of <code>optional</code> indicates that the
          packages are optional. See <xref linkend="i2548181"/>.</para>
        </listitem>
      </itemizedlist>

      <para>The developer can specify arbitrary matching attributes. See <xref linkend="i2480178"/>. The following arbitrary matching attributes are
      predefined:</para>

      <itemizedlist>
        <listitem>
          <para><code>version</code> - A <code>version-range</code> to select
          the exporter's package version. The syntax must follow <xref linkend="i3189032"/>. For more information on version selection, see
          <xref linkend="framework.module-semantic.versioning"/>. If this
          attribute is not specified, it is assumed to be <code>[0.0.0,</code>
          <phrase role="symbol">∞</phrase><code>)</code>.</para>
        </listitem>

        <listitem>
          <para><code>specification-version</code> - This attribute is an
          alias of the version attribute only to ease migration from earlier
          versions. If the <code>version</code> attribute is present, the
          values must be equal.</para>
        </listitem>

        <listitem>
          <para><code>bundle-symbolic-name</code> - The bundle symbolic name
          of the exporting bundle. In the case of a fragment bundle, this will
          be the host bundle's symbolic name.</para>
        </listitem>

        <listitem>
          <para><code>bundle-version</code> - A <code>version-range</code> to
          select the bundle version of the exporting bundle. The default value
          is <code>[0.0.0,</code> <phrase role="symbol">∞</phrase><code>)</code>. See <xref linkend="framework.module-semantic.versioning"/>. In the case of a
          fragment bundle, the version is from the host bundle.</para>
        </listitem>
      </itemizedlist>

      <para>In order to be allowed to import a package, a bundle must have
      <code>PackagePermission[&lt;package-name&gt;, IMPORT]</code>. See
      <code>PackagePermission</code> for more information.</para>

      <para>An error aborts an installation or update when:</para>

      <itemizedlist>
        <listitem>
          <para>A directive or attribute appears multiple times, or</para>
        </listitem>

        <listitem>
          <para>There are multiple import definitions for the same package,
          or</para>
        </listitem>

        <listitem>
          <para>The version and specification-version attributes do not
          match.</para>
        </listitem>
      </itemizedlist>

      <para>Example of a correct definition:</para>

      <programlisting>Import-Package: com.acme.foo;com.acme.bar; «
    version="[1.23,1.24]"; «
    resolution:=mandatory</programlisting>
    </section>

    <section xml:id="framework.module.exportpackage">
      <title>Export-Package</title>

      <para>The syntax of the Export-Package header is similar to the
      Import-Package header; only the directives and attributes are
      different.</para>

      <programlisting>Export-Package  ::= export ( ',' export)*
export          ::= package-names ( ';' parameter )*
package-names   ::= package-name                // See <xref linkend="framework.general.syntax" xrefstyle="template:%n"/>
                        ( ';' package-name )*</programlisting>

      <para>The header allows many packages to be exported. An
      <emphasis>export definition</emphasis> is the description of a single
      package export for a bundle. The syntax permits the declaration of
      multiple packages in one clause by separating the package names with a
      semi-colon. Multiple export definitions for the same package are allowed
      for example, when different attributes are needed for different
      importers. The <xref linkend="org.osgi.annotation.bundle.Export" xrefstyle="hyperlink"/> annotation can be applied to a package to
      specify the package is to be exported. This annotation can be processed
      by bundle assembly tools to add the annotated package to the
      Export-Package header in the bundle's manifest.</para>

      <para>Export directives are:</para>

      <itemizedlist>
        <listitem>
          <para><code>uses</code> - A comma-separated list of package names
          that are used by the exported package. Note that the use of a comma
          in the value requires it to be enclosed in double quotes. If this
          exported package is chosen as an export, then the resolver must
          ensure that importers of this package wire to the same versions of
          the package in this list. See <xref linkend="i3127019"/>.</para>
        </listitem>

        <listitem>
          <para><code>mandatory</code> - A comma-separated list of attribute
          names. Note that the use of a comma in the value requires it to be
          enclosed in double quotes. A bundle importing the package must
          specify the mandatory attributes, with a value that matches, to
          resolve to the exported package. See <xref linkend="i2515263"/>.</para>
        </listitem>

        <listitem>
          <para><code>include</code> - A comma-separated list of class names
          that must be visible to an importer. Note that the use of a comma in
          the value requires it to be enclosed in double quotes. For class
          filtering, see <xref linkend="i3106983"/>.</para>
        </listitem>

        <listitem>
          <para><code>exclude</code> -A comma-separated list of class names
          that must be invisible to an importer. Note that the use of a comma
          in the value requires it to be enclosed in double quotes. For class
          filtering, see <xref linkend="i3106983"/>.</para>
        </listitem>
      </itemizedlist>

      <para>The following attributes are part of this specification:</para>

      <itemizedlist>
        <listitem>
          <para><code>version</code> - The version of the named packages with
          syntax as defined in <xref linkend="i2655136"/>. It defines the
          version of the associated packages. The default value is
          <code>0.0.0</code>.</para>
        </listitem>

        <listitem>
          <para><code>specification-version</code> - An alias for the version
          attribute only to ease migration from earlier versions. If the
          <code>version</code> attribute is present, the values must be
          equal.</para>
        </listitem>
      </itemizedlist>

      <para>Additionally, arbitrary matching attributes may be specified. See
      <xref linkend="i2480178"/>.</para>

      <para>The Framework will automatically associate each package export
      definition with the following attributes:</para>

      <itemizedlist>
        <listitem>
          <para><code>bundle-symbolic-name</code> - The bundle symbolic name
          of the exporting bundle. In the case of a fragment bundle, this is
          the host bundle's symbolic name.</para>
        </listitem>

        <listitem>
          <para><code>bundle-version</code> - The bundle version of the
          exporting bundle. In the case of a fragment bundle, this is the host
          bundle's version.</para>
        </listitem>
      </itemizedlist>

      <para>An installation or update must be aborted when any of the
      following conditions is true:</para>

      <itemizedlist>
        <listitem>
          <para>a directive or attribute appears multiple times</para>
        </listitem>

        <listitem>
          <para>the <code>bundle-symbolic-name</code> or
          <code>bundle-version</code> attribute is specified in the
          Export-Package header.</para>
        </listitem>
      </itemizedlist>

      <para>An export definition does not imply an automatic import
      definition. A bundle that exports a package and does not import that
      package will get that package via its bundle class path. Such an
      exported only package can be used by other bundles, but the exporting
      bundle does not accept a substitution for this package from another
      bundle.</para>

      <para>In order to export a package, a bundle must have
      <code>PackagePermission[&lt;package&gt;, EXPORTONLY]</code>.</para>

      <para>Example:</para>

      <programlisting>Export-Package: com.acme.foo;com.acme.bar;version=1.23</programlisting>
    </section>

    <section xml:id="i3238802">
      <title>Importing Exported Packages</title>

      <para>Bundles that collaborate require the same class loader for types
      used in the collaboration. If multiple bundles export packages with
      collaboration types then they will have to be placed in disjoint
      class-spaces, making collaboration impossible. Collaboration is
      significantly improved when bundles are willing to import exported
      packages; these imports will allow a framework to
      <emphasis>substitute</emphasis> exports for imports.</para>

      <para>Though substitution is recommended to increase collaboration, it
      is not always possible. Importing exported packages can only work when
      those packages are pure API and not encumbered with implementation
      details. Import of exported packages should only be done when:</para>

      <itemizedlist>
        <listitem>
          <para>The exported package does not use private packages. If an
          exported package uses private packages then it might not be
          substitutable and is therefore not clean API.</para>
        </listitem>

        <listitem>
          <para>There is at least one private package that references the
          exported package. If no such reference exist, there is no purpose in
          importing it.</para>
        </listitem>
      </itemizedlist>

      <para>In practice, importing exported packages can only be done with
      clean API-implementation separation. OSGi services are carefully
      designed to be as standalone as possible. Many libraries intertwine API
      and implementation in the same package making it impossible to
      substitute the API packages.</para>

      <para>Importing an exported package must use a version range according
      to its compatibility requirements, being either a consumer or a provider
      of that API. See <xref linkend="framework.module-semantic.versioning"/>
      for more information.</para>
    </section>

    <section>
      <title>Interpretation of Legacy Bundles</title>

      <para>Bundles that are not marked with a Bundle-ManifestVersion that
      equals 2 or more must treat the headers according the definitions in the
      Release 3. More specifically, the Framework must map the Release 3
      headers to the appropriate Release 4 headers:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Import-Package</emphasis> - An import definition
          must change the <code>specification-version</code> attribute to the
          <code>version</code> attribute. An import definition without a
          specification version needs no replacement since the default version
          value of <code>0.0.0</code> gives the same semantics as Release
          3.</para>
        </listitem>

        <listitem>
          <para><emphasis>Export-Package</emphasis> - An export definition
          must change the <code>specification-version</code> attribute to the
          <code>version</code> attribute. The export definition must be
          appended with the <code>uses</code> directive. The uses directive
          must contain all imported and exported packages for the given
          bundle. Additionally, if there is no import definition for this
          package, then an import definition for this package with the package
          version must be added.</para>
        </listitem>

        <listitem>
          <para><emphasis>DynamicImport-Package</emphasis> - A dynamic import
          definition is unmodified.</para>
        </listitem>
      </itemizedlist>

      <para>A bundle manifest which mixes legacy syntax with bundle manifest
      version 2 syntax is in error and must cause the containing bundle to
      fail to install.</para>

      <para>The <code>specification-version</code> attribute is a deprecated
      synonym for the version attribute in bundle manifest version 2
      headers.</para>
    </section>
  </section>

  <section xml:id="framework.module.constraint.solving">
    <title>Constraint Solving</title>

    <para>The OSGi Framework package resolver provides a number of mechanisms
    to match imports to exports. The following sections describe these
    mechanisms in detail.</para>

    <section>
      <title>Diagrams and Syntax</title>

      <para>Wires create a graph of nodes. Both the wires as well as nodes
      (bundles) carry a significant amount of information. In the next
      sections, the following conventions are used to explain the many
      details.</para>

      <para>Bundles are named <code>A</code>, <code>B</code>,<code>
      C</code>,... That is, uppercase characters starting from the character
      <code>A</code>. Packages are named <code>p</code>, <code>q</code>,
      <code>r</code>, <code>s</code>, <code>t</code>,... In other words, lower
      case characters starting from <code>p</code>. If a version is important,
      it is indicated with a dash followed by the version: <code>q-1.0</code>.
      The syntax <code>A.p</code> means the package definition (either import
      or export) of package <code>p</code> by bundle <code>A</code>.</para>

      <para>Import definitions are graphically shown by a white box. Export
      definitions are displayed with a black box. Packages that are not
      exported or imported are called private packages. They are indicated
      with diagonal lines.</para>

      <para>Bundles are a set of connected boxes. Constraints are written on
      the wires, which are represented by lines.</para>

      <figure xml:id="i3069144">
        <title>Legend of wiring instance diagrams, and example</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.716in" contentwidth="7.418in" fileref="wiring-legend.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>For example:</para>

      <programlisting>A: Import-Package: p; version="[1,2)"
   Export-Package: q; version=2.2.2; uses:=p
   Require-Bundle: C
B: Export-Package: p; version=1.5.1
C: Export-Package: r</programlisting>

      <para><xref linkend="i3069187"/> shows the same setup
      graphically.</para>

      <figure xml:id="i3069187">
        <title>Example bundle diagram</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.389in" contentwidth="7.418in" fileref="bundle-example.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Version Constraints</title>

      <para>Version constraints are a mechanism whereby an import definition
      can declare a precise version or a version range for matching an export
      definition.</para>

      <para>An import definition must specify a version range as the value for
      its version attribute, and the exporter must specify a version as the
      value for its version attribute. Matching is done with the rules for
      version range matches as described in <xref linkend="i3189032"/>.</para>

      <para>For example, the following import and export definition resolve
      correctly because the version range in the import definition matches the
      version in the export definition:</para>

      <programlisting>A: Import-Package: p; version="[1,2)"
B: Export-Package: p; version=1.5.1</programlisting>

      <para><xref linkend="i3237947"/> graphically shows how a constraint can
      exclude an exporter.</para>

      <figure xml:id="i3237947">
        <title>Version Constrained</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.146in" contentwidth="7.418in" fileref="version-constrained.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section xml:id="framework.module-semantic.versioning">
      <title>Semantic Versioning</title>

      <para>Version ranges encode the assumptions about <emphasis>binary
      compatibility</emphasis>. Though the OSGi frameworks do not enforce a
      specific encoding for a compatibility policy, it is strongly recommended
      to use the following semantics.</para>

      <para>Traditionally, compatibility has always been between two parties.
      One is the consumer of the code and the other is the provider of the
      code. API based design introduces a third party in the compatibility
      policy:</para>

      <itemizedlist>
        <listitem>
          <para>The API itself</para>
        </listitem>

        <listitem>
          <para>The <emphasis>provider</emphasis> of the API</para>
        </listitem>

        <listitem>
          <para>The <emphasis>consumer</emphasis> of the API</para>
        </listitem>
      </itemizedlist>

      <para>A provider of an API is closely bound to that API. Virtually any
      change to that API makes a provider implementation incompatible with the
      new version of the API. However, API changes have more leeway from the
      perspective of a consumer of that API. Many API changes can be made
      backward compatible for consumers but hardly any API change can be made
      backward compatible for a provider of that API.</para>

      <para>A provider of an API should therefore import that API with a
      smaller range than a consumer of that API. This policy can be encoded in
      a version range. The rules are summarized as follows:</para>

      <itemizedlist>
        <listitem>
          <para><code>major</code> - Changes for an incompatible update for
          both a consumer and a provider of an API.</para>
        </listitem>

        <listitem>
          <para><code>minor</code> - Changes for a backward compatible update
          for a consumer but not for a provider.</para>
        </listitem>

        <listitem>
          <para><code>micro</code> - A change that does not affect the API,
          for example, a typo in a comment or a bug fix in an
          implementation.</para>
        </listitem>
      </itemizedlist>

      <para>Both consumers and providers should use the version they are
      compiled against as their base version. It is recommended to ignore the
      micro part of the version because systems tend to become very rigid if
      they require the latest bug fix to be deployed all the time. For
      example, when compiled against version <code>4.2.1.V201007221030</code>,
      the base version should be <code>4.2</code>.</para>

      <para>A consumer of an API should therefore import a range that starts
      with the base version and ends with the next major change, for example:
      <code>[4.2,5)</code>. A provider of an API should import a range that
      starts with the base version up to the next minor change, for example:
      <code>[4.2,4.3)</code>.</para>
    </section>

    <section xml:id="framework.module-semantic.versioning.type.roles">
      <title>Type Roles for Semantic Versioning</title>

      <para>As mentioned in <xref linkend="framework.module-semantic.versioning"/>, there are two roles
      for clients of an API package: API consumers and API providers. API
      consumers use the API and API providers implement the API. For the types
      in an API, it is important that the API clearly document which of those
      types are only to be implemented or extended by API providers and which
      of those types can be implemented or extended by API consumers. For
      example, listener interfaces are generally implemented by API consumers
      and instances of them passed to API providers.</para>

      <para>API providers are sensitive to changes in types implemented or
      extended by both API consumers and API providers. An API provider must
      implement any new changes in API provider types and must understand and
      likely invoke any new changes in API consumer types. An API consumer can
      generally ignore compatible changes in API provider types unless it
      wants to invoke the new function. But an API consumer is sensitive to
      changes in API consumer types and will probably need modification to
      implement the new function. For example, in the <xref linkend="org.osgi.framework" xrefstyle="hyperlink"/> package, the <xref linkend="org.osgi.framework.BundleContext" xrefstyle="hyperlink"/> type
      is implemented by the Framework which is the API provider. Adding a new
      method to <xref linkend="org.osgi.framework.BundleContext" xrefstyle="hyperlink"/> will require all Framework implementations to be
      updated to implement the new method. Bundles, which are the API
      consumers, do not have to change unless they wish to call the new
      method. However, the <xref linkend="org.osgi.framework.BundleActivator" xrefstyle="hyperlink"/> type is implemented by bundles and adding a new
      method to <xref linkend="org.osgi.framework.BundleActivator" xrefstyle="hyperlink"/> will require all bundles implementing this
      interface to be modified to implement the new method and will also
      require all Framework implementations to be modified to utilize the new
      method. Thus the <xref linkend="org.osgi.framework.BundleContext" xrefstyle="hyperlink"/> type has an API provider role and the <xref linkend="org.osgi.framework.BundleActivator" xrefstyle="hyperlink"/>
      type has an API consumer role in the <xref linkend="org.osgi.framework" xrefstyle="hyperlink"/> API package.</para>

      <para>Since there are generally many API consumer and few API providers,
      API evolution must be very careful when considering changes to API
      consumer types while being more relaxed about changes to API provider
      types. This is because you will need to change the few API providers to
      support an updated API but you do not want to require the many existing
      API consumers to change when an API is updated. API consumers should
      only need to change when the API consumer wants to take advantage of new
      API.</para>

      <para>The <xref linkend="org.osgi.annotation.versioning.ProviderType" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.annotation.versioning.ConsumerType" xrefstyle="hyperlink"/> annotations can be used in source files to
      document the roles of types in a package. API types marked <xref linkend="org.osgi.annotation.versioning.ProviderType" xrefstyle="hyperlink"/> must not be implemented or extended by API
      consumers. These annotations can be processed by bundle assembly tools
      that support Semantic Versioning when generating the version range
      information for a bundle's Import-Package manifest header.</para>
    </section>

    <section xml:id="i2548181">
      <title>Optional Packages</title>

      <para>A bundle can indicate that it does not require a package to
      resolve correctly, but it may use the package if it is available. For
      example, logging is important, but the absence of a log service should
      not prevent a bundle from running.</para>

      <para>Optional imports can be specified in the following ways:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Dynamic Imports</emphasis> - The
          DynamicImport-Package header is intended to look for an exported
          package when that package is needed. The key use case for dynamic
          import is the <code>Class forName</code> method when a bundle does
          not know in advance the class name it may be requested to
          load.</para>
        </listitem>

        <listitem>
          <para><emphasis>Resolution Directive</emphasis> - The resolution
          directive on an import definition specifying the value
          <code>optional</code>. A bundle may successfully resolve if a
          suitable optional package is not present.</para>
        </listitem>
      </itemizedlist>

      <para>The key difference between these two mechanisms is when the wires
      are made. An attempt is made to establish a wire for a dynamic import
      every time there is an attempt to load a class in that package, whereas
      the wire for a resolution <code>optional</code> package may only be
      established when the bundle is resolved.</para>

      <para>The <code>resolution</code> directive of the import definition can
      take the value <code>mandatory</code> or <code>optional</code>.</para>

      <itemizedlist>
        <listitem>
          <para><code>mandatory</code> - (Default) Indicates that the package
          must be wired for the bundle to resolve.</para>
        </listitem>

        <listitem>
          <para><code>optional</code> - Indicates that the importing bundle
          may resolve without the package being wired. If the package is not
          wired, the class loading will treat this package as if it is not
          imported.</para>
        </listitem>
      </itemizedlist>

      <para>The following example will resolve even though bundle
      <code>B</code> does not provide the correct version (the package will
      <emphasis>not</emphasis> be available to the code when bundle
      <code>A</code> is resolved).</para>

      <programlisting>A: Import-Package: p; «
        resolution:=optional; «
        version=1.6
B: Export-Package: p; «
        q; «
        version=1.5.0</programlisting>

      <figure>
        <title>Optional import</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="0.751in" contentwidth="7.418in" fileref="optional-import.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The implementation of a bundle that uses optional packages must be
      prepared to handle the fact that the packages may not be available: that
      is, an exception can be thrown when there is a reference to a class from
      a missing package. This can be prevented by including a fallback package
      on the bundle's class path. When an optional package cannot be resolved,
      any attempts by the bundle to load classes from it will follow normal
      bundle class loading search order as if the import never existed. It
      will load it from the bundle's class path or in the end through dynamic
      class loading when set for that bundle and package.</para>
    </section>

    <section xml:id="i3127019">
      <title>Package Constraints</title>

      <para>Classes can depend on classes in other packages. For example, when
      they extend classes from another package, or these other classes appear
      in method signatures. It can therefore be said that a package
      <emphasis>uses</emphasis> other packages. These inter-package
      dependencies are modeled with the <code>uses</code> directive on the
      Export-Package header.</para>

      <para>For example, <code>org.osgi.service.http</code> depends on the
      package <code>javax.servlet</code> because it is used in the API. The
      export definition of the <code>org.osgi.service.http</code> must
      therefore contain the <code>uses</code> directive with the
      <code>javax.servlet</code> package as its value.</para>

      <para>Class space consistency can only be ensured if a bundle has only
      one exporter for each package. For example, the Http Service
      implementation requires servlets to extend the
      <code>javax.servlet.http.HttpServlet</code> base class. If the Http
      Service bundle would import version 2.4 and the client bundle would
      import version 2.1 then a class cast exception is bound to happen. This
      is depicted in <xref linkend="i2648668"/>.</para>

      <figure xml:id="i2648668">
        <title>Uses directive in B, forces A to use javax.servlet from
        D</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.639in" contentwidth="7.418in" fileref="uses-directive-servlet.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>If a bundle imports a package from an exporter then the export
      definition of that package can imply constraints on a number of other
      packages through the <code>uses</code> directive. The <code>uses</code>
      directive lists the packages that the exporter depends upon and
      therefore constrains the resolver for imports. These constraints ensure
      that a set of bundles share the same class loader for the same
      package.</para>

      <para>When an importer imports a package with uses constraints, the
      resolver must wire the import to the exporter named in the uses
      constraint. This exporter may in turn imply additional constraints, and
      so on. The act of wiring a single import of a package to an exporter can
      therefore imply a large set of constraints. The term <emphasis>implied
      package constraints</emphasis> refers to the complete set of constraints
      constructed from recursively traversing the wires. Implied package
      constraints are not automatic imports; rather, implied package
      constraints only constrain how an import definition must be
      wired.</para>

      <para>For example, in <xref linkend="i3024345"/>, bundle <code>A</code>
      imports package <code>p</code>. Assume this import definition is wired
      to bundle <code>B</code>. Due to the <code>uses</code> directive (the
      ellipse symbols indicates the <code>uses</code> directive) this implies
      a constraint on package <code>q</code>.</para>

      <para>Further, assuming that the import for package <code>q</code> is
      wired to bundle <code>C</code>, then this implies a constraint on the
      import of package <code>r</code> and <code>s</code>. Continuing,
      assuming <code>C.s</code> and <code>C.r</code> are wired to bundle
      <code>D</code> and E respectively. These bundles both add package
      <code>t</code> to the set of implied packages for bundle A.</para>

      <figure pgwide="1" xml:id="i3024345">
        <title>Implied Packages</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.492in" contentwidth="7.418in" fileref="implied-packages.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>To maintain class space consistency, the Framework must ensure
      that none of its bundle imports conflicts with any of that bundle's
      implied packages.</para>

      <para>For the example, this means that the Framework must ensure that
      the import definition of A.<code>t</code> is wired to package
      <code>D.t</code>. Wiring this import definition to package
      <code>F.t</code> violates the class space consistency. This violation
      occurs because bundle A could be confronted with objects with the same
      class name but from the class loaders of bundle <code>D</code> and
      <code>F</code>. This would potentially create
      <code>ClassCastExceptions</code>. Alternatively, if all bundles are
      wired to <code>F.t</code>, then the problem also goes away.</para>

      <para>Another scenario with this case is depicted in <xref linkend="i2648668"/>. Bundle <code>A</code> imports the Http Service
      classes from bundle <code>B</code>. Bundle <code>B</code> has grouped
      the <code>org.osgi.service.http</code> and the
      <code>javax.servlet</code> and bundle <code>A</code> is therefore
      constrained to wire <code>javax.servlet</code> to the same exporter as
      bundle <code>B</code>.</para>

      <para>As an example of a situation where the <code>uses</code> directive
      makes resolving impossible consider the following setup that is
      correctly resolved:</para>

      <programlisting>A: Import-Package: q; version="[1.0,1.0]"
   Export-Package: p; uses:="q,r",r
B: Export-Package: q; version=1.0
C: Export-Package: q; version=2.0</programlisting>

      <para>These specific constraints can be resolved because the import
      <code>A.q</code> can be wired to the export <code>B.q</code> but not
      <code>C.q</code> due to the version constraint.</para>

      <para>Adding a bundle <code>D</code> will now not be possible:</para>

      <programlisting>D: Import-Package: p, q; version=2.0</programlisting>

      <para>Package <code>D.p</code> must be wired to package <code>A.p</code>
      because bundle <code>A</code> is the only exporter. However, this
      implies the use of package <code>q</code> due the <code>uses</code>
      directive in the package <code>A.q</code> import. Package
      <code>A.q</code> is wired to <code>B.q-1.0</code>. However, import
      package <code>D.q</code> requires version 2.0 and can therefore not be
      resolved without violating the class space constraint.</para>

      <para>This scenario is depicted in <xref linkend="i3127819"/>.</para>

      <figure xml:id="i3127819">
        <title>Uses directive and resolving</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.017in" contentwidth="7.418in" fileref="uses-directive-resolving.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section xml:id="i2480178">
      <title>Attribute Matching</title>

      <para>Attribute matching is a generic mechanism to allow the importer
      and exporter to influence the matching process in a declarative way. In
      order for an import definition to be resolved to an export definition,
      the values of the attributes specified by the import definition must
      match the values of the attributes of the export definition. By default,
      a match is not prevented if the export definition contains attributes
      that do not occur in the import definition. The <code>mandatory</code>
      directive in the export definition can reverse this by listing all
      attributes that the Framework must match in the import definition. Any
      attributes specified in the DynamicImport-Package is ignored during the
      resolve phase but can influence runtime class loading.</para>

      <para>For example, the following statements will match.</para>

      <programlisting>A: Import-Package: com.acme.foo;company=ACME
B: Export-Package: com.acme.foo; «
          company="ACME"; «
          security=false</programlisting>

      <para>Attribute values are compared string wise except for the version
      and bundle-version attributes which use version range comparisons.
      Leading and trailing white space in attribute values must be
      ignored.</para>

      <para>Attribute matching also works for the Require-Bundle and
      Fragment-Host headers; the attributes to be matched are specified on the
      Bundle-SymbolicName header.</para>
    </section>

    <section xml:id="i2515263">
      <title>Mandatory Attributes</title>

      <para>There are two types of attributes: <emphasis>mandatory</emphasis>
      and <emphasis>optional</emphasis>. Mandatory attributes must be
      specified in the import definition to match. Optional attributes are
      ignored when they are not referenced by the importer. Attributes are
      optional by default.</para>

      <para>The exporter can specify mandatory attributes with the
      <code>mandatory</code> directive in the export definition. This
      directive contains a comma-separated list of attribute names that must
      be specified by the importer to match.</para>

      <para>For example, the following import definition must not match the
      export definition because <code>security</code> is a mandatory
      attribute:</para>

      <programlisting>A: Import-Package: com.acme.foo;company=ACME

B: Export-Package: com.acme.foo; «
          company="ACME"; «
          security=false; «
          mandatory:=security</programlisting>
    </section>

    <section xml:id="i3106983">
      <title>Class Filtering</title>

      <para>An exporter can limit the visibility of the classes in a package
      with the <code>include</code> and <code>exclude</code> directives on the
      export definition. The value of each of these directives is a
      comma-separated list of class names. Note that the use of a comma in the
      value requires it to be enclosed in double quotes.</para>

      <para>Class names must not include their package name and do not end
      with <code>.class</code>. That is, the class
      <code>com.acme.foo.Daffy</code> is named <code>Daffy</code> in either
      list. The class name can include multiple wildcard asterisks (<code>'*'
      \u002A</code>).</para>

      <para>The default for the <code>include</code> directive is an asterisk
      (<code>'*' \u002A</code>) (wildcard matching all names), and for the
      <code>exclude</code> directive, so that no classes are excluded, an
      empty list that matches no names. If <code>include</code> or
      <code>exclude</code> directive are specified, the corresponding default
      is overridden.</para>

      <para>A class is only visible if it is:</para>

      <itemizedlist>
        <listitem>
          <para>Matched with an entry in the <code>included</code> list,
          <emphasis>and</emphasis></para>
        </listitem>

        <listitem>
          <para>Not matched with an entry in the <code>excluded</code>
          list.</para>
        </listitem>
      </itemizedlist>

      <para>In all other cases, loading or finding fails, and a Class Not
      Found Exception is thrown for a class load. The ordering of
      <code>include</code> and <code>exclude</code> is not significant.</para>

      <para>The following example shows an export statement, and a list of
      files with their visibility status.</para>

      <programlisting>Export-Package: com.acme.foo; include:="Qux*,BarImpl"; «
        exclude:=QuxImpl

com/acme/foo
   QuxFoo            visible
   QuxBar            visible
   QuxImpl           excluded
   BarImpl           visible</programlisting>

      <para>Care must be taken when using filters. For example, a new version
      of a module that is intended to be backward compatible with an earlier
      version should not filter out classes that were not filtered out by the
      earlier version. In addition, when modularizing existing code, filtering
      out classes from an exported package may break users of the
      package.</para>

      <para>For example, packages defined by standard bodies often require an
      implementation class in the standardized package to have package access
      to the specification classes.</para>

      <programlisting>package org.acme.open;
public class Specified {
    static Specified implementation;
    public void foo() { implementation.foo(); }
}

package org.acme.open;
public class Implementation {
    public void initialize(Specified implementation) {
        Specified.implementation = implementation;
    }
}</programlisting>

      <para>The <code>Implementation</code> class must not be available to
      external bundles because it allows the implementation to be set. By
      excluding the <code>Implementation</code> class, only the exporting
      bundle can see this class. The export definition for this header could
      look like:</para>

      <programlisting>Export-Package: org.acme.open; exclude:=Implementation</programlisting>
    </section>

    <section xml:id="i3259465">
      <title>Provider Selection</title>

      <para>Provider selection allows the importer to select which bundles can
      be considered as exporters. Provider selection is used when there is no
      specification contract between the importer and the exporter. The
      importer tightly couples itself to a specific exporter, typically the
      bundle that was used for testing. To make the wiring less brittle, the
      importer can optionally specify a range of bundle versions that will
      match.</para>

      <para>An importer can select an exporter with the import attributes
      <code>bundle-symbolic-name</code> and <code>bundle-version</code>. The
      Framework automatically provides these attributes for each export
      definition. These attributes must not be specified in an export
      definition.</para>

      <para>The export definition <code>bundle-symbolic-name</code> attribute
      will contain the bundle symbolic name as specified in the
      <code>Bundle-SymbolicName</code> header without any parameters. The
      export definition bundle-<code>version</code> attribute is set to the
      value of the <code>Bundle-Version</code> header or its default of 0.0.0
      when absent.</para>

      <para>The <code>bundle-symbolic-name</code> is matched as an attribute.
      The <code>bundle-version</code> attribute is matched using the version
      range rules as defined in <xref linkend="i3189032"/>. The import
      definition must be a version range and the export definition is a
      version.</para>

      <para>For example, the following definitions will match:</para>

      <programlisting>A: Bundle-SymbolicName: A
   Import-Package: com.acme.foo; «
        bundle-symbolic-name=B; «
        bundle-version="[1.41,2.0.0)"

B: Bundle-SymbolicName: B
   Bundle-Version: 1.41
   Export-Package: com.acme.foo</programlisting>

      <para>The following statements will not match because bundle B does not
      specify a version and thus defaults to 0.0.0:</para>

      <programlisting>A: Bundle-SymbolicName: A
   Import-Package: com.acme.foo; «
          bundle-symbolic-name=B; «
          bundle-version="[1.41,2.0.0)"

B: Bundle-SymbolicName: B
   Export-Package: com.acme.foo;version=1.42</programlisting>

      <para>Selecting an exporter by symbolic name can result in brittleness
      because of hard coupling of the package to the bundle. For example, if
      the exporter eventually needs to be refactored into multiple separate
      bundles, all importers must be changed. Other arbitrary matching
      attributes do not have this disadvantage as they can be specified
      independently of the exporting bundle.</para>

      <para>The brittleness problem of the bundle symbolic name in bundle
      refactoring can be partly overcome by writing a façade bundle using the
      same bundle symbolic name as the original bundle.</para>
    </section>
  </section>

  <section xml:id="framework.module.resolvingprocess">
    <title>Resolving Process</title>

    <para>Resolving is the process that creates a wiring between bundles.
    Constraints on the wires are statically defined by:</para>

    <itemizedlist>
      <listitem>
        <para>Any mandatory requirement must be matched to at least one
        capability in the same namespace provided by any of the resolved
        bundles, including itself and the system bundle.</para>
      </listitem>

      <listitem>
        <para>The required execution environments as defined by the
        Bundle-RequiredExecutionEnvironment header.</para>
      </listitem>

      <listitem>
        <para>Native code</para>
      </listitem>

      <listitem>
        <para>Import and export packages (the DynamicImport-Package header is
        ignored in this phase)</para>
      </listitem>

      <listitem>
        <para>Required bundles, which import all exported packages from a
        bundle as defined in <xref linkend="framework.module.requiringbundles"/>.</para>
      </listitem>

      <listitem>
        <para>Fragments, which provide their contents and definitions to the
        host as defined in <xref linkend="framework.module.fragmentbundles"/></para>
      </listitem>
    </itemizedlist>

    <para>A bundle can only be resolved when a number of constraints are
    satisfied:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Execution Environment</emphasis> - The underlying VM
        implements at least one of the execution environments listed in the
        Bundle-RequiredExecutionEnvironment header. See <xref linkend="framework.namespaces.osgi.ee"/>.</para>
      </listitem>

      <listitem>
        <para><emphasis>Native code</emphasis> - The native code dependencies
        specified in the Bundle-NativeCode header must be resolved. See <xref linkend="framework.module-loading.native.code.libraries"/>.</para>
      </listitem>
    </itemizedlist>

    <para>The resolving process is then a constraint-solving algorithm that
    can be described in terms of requirements on wiring relations. The
    resolving process is an iterative process that searches through the
    solution space.</para>

    <para>A bundle can be resolved if the following conditions are met:</para>

    <itemizedlist>
      <listitem>
        <para>All its mandatory requirements are satisfied</para>
      </listitem>

      <listitem>
        <para>All its mandatory imports are wired</para>
      </listitem>

      <listitem>
        <para>All its mandatory required bundles are available and their
        exports wired</para>
      </listitem>
    </itemizedlist>

    <para>A wire is only created when the following conditions are met:</para>

    <itemizedlist>
      <listitem>
        <para>The importer's version range matches the exporter's version. See
        <xref linkend="framework.module-semantic.versioning"/>.</para>
      </listitem>

      <listitem>
        <para>The importer specifies all mandatory attributes from the
        exporter. See <xref linkend="i2515263"/>.</para>
      </listitem>

      <listitem>
        <para>All the importer's attributes match the attributes of the
        corresponding exporter. See <xref linkend="i2480178"/></para>
      </listitem>

      <listitem>
        <para>Implied packages referring to the same package as the wire are
        wired to the same exporter. See <xref linkend="i3127019"/>.</para>
      </listitem>

      <listitem>
        <para>The wire is connected to a valid exporter.</para>
      </listitem>
    </itemizedlist>

    <para>The following list defines the preferences, if multiple choices are
    possible, in order of decreasing priority:</para>

    <itemizedlist>
      <listitem>
        <para>A resolved exporter must be preferred over an unresolved
        exporter.</para>
      </listitem>

      <listitem>
        <para>An exporter with a higher version is preferred over an exporter
        with a lower version.</para>
      </listitem>

      <listitem>
        <para>An exporter with a lower bundle ID is preferred over a bundle
        with a higher ID.</para>
      </listitem>
    </itemizedlist>

    <section xml:id="framework.module-import.export.same.package">
      <title>Importing and Exporting the Same Package</title>

      <para>If a bundle has both import and export definitions for the
      <emphasis>same</emphasis> package, then the Framework needs to decide
      which to choose.</para>

      <para>It must first try to resolve the overlapping import definition.
      The following outcomes are possible:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>External</emphasis> - If this resolves to an export
          statement in another bundle, then the overlapping export definition
          in this bundle is discarded.</para>
        </listitem>

        <listitem>
          <para><emphasis>Internal</emphasis> - If it is resolved to an export
          statement in this bundle, then the overlapping import definition in
          this bundle is discarded.</para>
        </listitem>

        <listitem>
          <para><emphasis>Unresolved</emphasis> - There is no matching export
          definition. In this case the framework is free to discard either the
          overlapping export definition or overlapping import definition in
          this bundle. If the export definition is discarded and the import
          definition is not optional then the bundle will fail to
          resolve.</para>
        </listitem>
      </itemizedlist>

      <para>The above only applies to the import and export package
      definitions of a bundle. For namespaces other than
      <code>osgi.wiring.package</code>, a requirement definition of a bundle
      may be wired to a capability definition of that same bundle.</para>
    </section>
  </section>

  <section xml:id="i2570775">
    <title>Runtime Class Loading</title>

    <para>Each bundle installed in the Framework must not have an associated
    class loader until after it is resolved. After a bundle is resolved, the
    Framework must create one class loader for each bundle that is not a
    fragment. The framework may delay creation of the class loader until it is
    actually needed.</para>

    <para>One class loader per bundle allows all resources within a bundle to
    have package level access to all other resources in the bundle within the
    same package. This class loader provides each bundle with its own
    namespace, to avoid name conflicts, and allows resource sharing with other
    bundles.</para>

    <para>This class loader must use the wiring as calculated in the resolving
    process to find the appropriate exporters. If a class is not found in the
    imports, additional headers in the manifest can control the searching of
    classes and resources in additional places.</para>

    <para>The following sections define the factors that influence the runtime
    class loading and then define the exact search order the Framework must
    follow when a class or resource is loaded.</para>

    <section xml:id="framework.module.bundleclasspath">
      <title>Bundle Class Path</title>

      <para>JAR, ZIP, directories, etc. are called
      <emphasis>containers</emphasis>. Containers contain
      <emphasis>entries</emphasis> organized in hierarchical paths. During
      runtime, an entry from a bundle can actually come from different
      containers because of attached fragments. The order in which an entry
      can be found is significant because it can shadow other entries. For a
      bundle, the search order for a named entry is:</para>

      <itemizedlist>
        <listitem>
          <para>First the container of the (host) bundle</para>
        </listitem>

        <listitem>
          <para>Then the (optional) fragment containers in ascending id
          order</para>
        </listitem>
      </itemizedlist>

      <para>This search order is called the <emphasis>entry path</emphasis>. A
      <emphasis>resource</emphasis> (or class) is not loaded via the entry
      path, but it is loaded through the <emphasis>bundle class
      path</emphasis>. The bundle class path provides an additional
      indirection on top of the entry path. It defines an ordered list of
      <emphasis>container paths</emphasis>. Each container path can be found
      on the entry path.</para>

      <para>Each container, independent of any other containers, can be a
      multi-release container. See <xref linkend="framework.module-multireleasecontainer"/>.</para>

      <para>The full stop (<code>'.' \u002E</code>) container path is a
      synonym for the solidus (<code>'/' \u002F</code>) or the root of a
      container. The full stop is the default value for a bundle or fragment
      if no Bundle-ClassPath header is specified.</para>

      <para>The Bundle-ClassPath manifest header must conform to the following
      syntax:</para>

      <programlisting>Bundle-ClassPath ::= entry ( ',' entry )*
entry            ::= target ( ';' target )* ( ';' parameter ) *
target           ::= path | '.'     // See <xref linkend="framework.general.syntax" xrefstyle="template:%n"/></programlisting>

      <para>The Framework must ignore any unrecognized parameters.</para>

      <para>The content of the <emphasis>effective</emphasis> bundle class
      path is constructed from the bundle's Bundle-ClassPath header,
      concatenated with the Bundle-ClassPath headers of any fragments, in
      ascending bundle id order. The effective Bundle-ClassPath is calculated
      during resolve time, however, a dynamically attached fragment can append
      elements at the end if the Framework supports dynamically attached
      fragments.</para>

      <para>An element from the bundle's Bundle-ClassPath header refers to the
      first match when searched through the entry path, while a fragment's
      Bundle-ClassPath can refer only to an entry in its own container.</para>

      <para>An example can illustrate this:</para>

      <programlisting>A: Bundle-ClassPath: .,resource.jar
B: Fragment-Host: A</programlisting>

      <para>The previous example uses an effective bundle class path
      of:</para>

      <programlisting>/, resource.jar, B:/</programlisting>

      <para>The first element / is the root of a container. The bundle always
      has a root and can therefore always be found in the (host) bundle. The
      second element is first looked up in the host bundle's container, and if
      not found, the entry is looked up in the container of <code>B</code>.
      The Framework must use the first entry that matches. The last element in
      the effective bundle class path is the / from fragment <code>B</code>;
      the / is the default because there is no Bundle-ClassPath specified.
      However, a fragment can only refer to an internal entry. This full stop
      therefore refers to the root of the container of fragment
      <code>B</code>. Assuming, fragment <code>B</code> contains an entry for
      <code>resource.jar</code> and bundle <code>A</code> does not, then the
      search order must be:</para>

      <programlisting>A:/
B:resource.jar
B:/</programlisting>

      <para>The Framework must ignore a container path in the bundle
      class-path if the container cannot be located when it is needed, which
      can happen at any time after the bundle is resolved. However, the
      Framework should publish a Framework Event of type <code>INFO</code>
      once with an appropriate message for each entry that cannot be located
      at all.</para>

      <para>An entry on the Bundle-ClassPath can refer to a directory in the
      container. However, it is not always possible to establish the
      directory's existence. For example, directories can be omitted in
      JAR/ZIP files. In such a case, a Framework must probe the directory to
      see if any resources can be found in this directory. That is, even if
      the directory construct is absent in the container, if resources can be
      found assuming this directory, than it must still be chosen for the
      Bundle-ClassPath.</para>

      <para>A host bundle can allow a fragment to insert code ahead of its own
      code by naming a container in its Bundle-ClassPath that will be provided
      by a fragment. Fragments can never unilaterally insert code ahead of
      their host's bundle class path. The following example illustrates the
      possibilities of the bundle class path in more detail:</para>

      <programlisting>A: Bundle-SymbolicName: A
   Bundle-ClassPath: /,required.jar,optional,default.jar
   <emphasis>content ...</emphasis>
   required.jar
   default.jar
B: Bundle-SymbolicName: B
   Bundle-ClassPath: fragment.jar
   Fragment-Host: A
   <emphasis>content ...</emphasis>
   optional/
            <emphasis>content ...</emphasis>
   fragment.jar</programlisting>

      <para>The names of the bundle class path elements indicate their
      intention. The <code>required.jar</code> is a container that provides
      mandatory functionality, it is packaged in bundle A. The
      <code>optional</code> container is a directory containing optional
      classes, and the <code>default.jar</code> is a JAR entry with backup
      code. In this example, the effective bundle class path is:</para>

      <programlisting>A:/
A:required.jar
B:optional
A:default.jar
B:fragment.jar</programlisting>

      <para>This will expand to the following (logical) search order for a
      resource <code>X.class</code>:</para>

      <programlisting>    A:/X.class
    A:required.jar!X.class
    B:optional/X.class
    A:default.jar!X.class
    B:fragment.jar!X.class</programlisting>

      <para>The exclamation mark (!) indicates a load from a JAR
      resource.</para>

      <section xml:id="framework.module-multireleasecontainer">
        <title>Multi-release Container</title>

        <para>A container can be a <emphasis>multi-release
        container</emphasis> . A multi-release container supports versioned
        directories as specified in <xref linkend="framework.module-ref.multireleasejar"/>. When a container is
        a multi-release container, that is, the container has a
        <code>META-INF/MANIFEST.MF</code> manifest which specifies</para>

        <programlisting>Multi-Release: true</programlisting>

        <para>then the Framework must search the container's versioned
        directories when attempting to locate an entry in the
        container.</para>

        <para>Support for multi-release containers must only be active on Java
        9 and later. On Java 8 and earlier, the container must be treated as a
        non-multi-release container.</para>
      </section>
    </section>

    <section xml:id="framework.module.dynamicimportpackage">
      <title>Dynamic Import Package</title>

      <para>Dynamic imports are matched to export definitions (to form package
      wirings) during class loading, and therefore do not affect module
      resolution. Dynamic imports apply only to packages for which no wire has
      been established and no definition could be found in any other way.
      Dynamic import is used as a last resort.</para>

      <programlisting>DynamicImport-Package ::= dynamic-description
           ( ',' dynamic-description )*
dynamic-description ::= wildcard-names ( ';' parameter )*
wildcard-names      ::= wildcard-name ( ';' wildcard-name )*
wildcard-name       ::= package-name
            | ( package-name '.*' )   // See <xref linkend="framework.general.syntax" xrefstyle="template:%n"/>
            | '*' </programlisting>

      <para>No directives are architected by the Framework for
      DynamicImport-Package. Arbitrary matching attributes may be specified.
      The following matching attributes are architected by the
      Framework:</para>

      <itemizedlist>
        <listitem>
          <para><code>version</code> -- A version range to select the version
          of an export definition. The default value is 0.0.0 .</para>
        </listitem>

        <listitem>
          <para><code>bundle-symbolic-name</code> - The bundle symbolic name
          of the exporting bundle.</para>
        </listitem>

        <listitem>
          <para><code>bundle-version</code> - a version range to select the
          bundle version of the exporting bundle. The default value is
          <code>0.0.0</code>.</para>
        </listitem>
      </itemizedlist>

      <para>Packages may be named explicitly or by using wild-carded
      expressions such as <code>org.foo.*</code> and <code>*</code>. The
      wildcard can stand for any suffix, including multiple sub-packages. If a
      wildcard is used, then the package identified by the prefix must
      <emphasis>not</emphasis> be included. That is, <code>org.foo.*</code>
      will include all sub-packages of <code>org.foo</code> but it must not
      include package <code>org.foo</code> itself.</para>

      <para>Dynamic imports must be searched in the order in which they are
      specified. The order is particularly important when package names with
      wildcards are used. The order will then determine the order in which
      matching occurs. This means that the more specific package
      specifications should appear before the broader specifications. For
      example, the following DynamicImport-Package header indicates a
      preference for packages supplied by ACME:</para>

      <programlisting>DynamicImport-Package: *;vendor=acme, *</programlisting>

      <para>If multiple packages need to be dynamically imported with
      identical parameters, the syntax permits a list of packages, separated
      by semicolons, to be specified before the parameters.</para>

      <para>During class loading, the package of the class being loaded is
      compared against the specified list of (possibly wild-carded) package
      names. Each matching package name is used in turn to attempt to wire to
      an export using the same rules as Import-Package. If a wiring attempt is
      successful (taking any <code>uses</code> constraints into account), the
      search is forwarded to the exporter's class loader where class loading
      continues. The wiring must not subsequently be modified, even if the
      class cannot be loaded. This implies that once a package is dynamically
      resolved, subsequent attempts to load classes or resources from that
      package are treated as normal imports.</para>

      <para>In order for a DynamicImport-Package to be resolved to an export
      statement, all attributes of the dynamic import definition must match
      the attributes of the export statement. All mandatory arbitrary
      attributes (as specified by the exporter, see <xref linkend="i2515263"/>
      ) must be specified in the dynamic import definition and match.</para>

      <para>Once a wire is established, any <code>uses</code> constraints from
      the exporter must be obeyed for further dynamic imports.</para>

      <para>Dynamic imports are very similar to optional packages, see <xref linkend="i2548181"/>, but differ in the fact that they are handled after
      the bundle is resolved.</para>
    </section>

    <section xml:id="framework.module.parentdelegation">
      <title>Parent Delegation</title>

      <para>The Framework must always delegate any package that starts with
      <code>java.</code> to the parent class loader.</para>

      <para>Certain Java virtual machines, also Oracle's VMs, appear to make
      the erroneous assumption that the delegation to the parent class loader
      always occurs. This implicit assumption of strictly hierarchical class
      loader delegation can result in <code>NoClassDefFoundErrors</code>. This
      happens if the virtual machine implementation expects to find its own
      implementation classes from any arbitrary class loader, requiring that
      packages loaded from the boot class loader not be restricted to only the
      <code>java.*</code> packages.</para>

      <para>Other packages that must be loaded from the boot class loader can
      therefore be specified with the System property:</para>

      <programlisting>org.osgi.framework.bootdelegation</programlisting>

      <para>This property must contain a list with the following
      format:</para>

      <programlisting>org.osgi.framework.bootdelegation ::= boot-description
            ( ',' boot-description )*
boot-description    ::= package-name        // See <xref linkend="framework.general.syntax" xrefstyle="template:%n"/>
            | ( package-name '.*' )
            | '*' </programlisting>

      <para>The <code>.*</code> wildcard means deep matching, that is,
      <code>com.acme.*</code>, matches any sub-package of package
      <code>com.acme</code>, however, it does not match <code>com.acme</code>.
      Packages that match this list must be loaded from the parent class
      loader. The <code>java.*</code> prefix is always implied; it does not
      have to be specified.</para>

      <para>The single wildcard means that the Framework must always delegate
      to the parent class loader first, which is the same as the Release 3
      behavior.</para>

      <para>For example, when running on an OpenJDK, it may be necessary to
      specify a value like:</para>

      <programlisting>org.osgi.framework.bootdelegation=sun.*,com.sun.*</programlisting>

      <para>With such a property value, the Framework must delegate all
      <code>java.*</code>, <code>sun.*</code>, and <code>com.sun.*</code>
      packages to the parent class loader.</para>
    </section>

    <section xml:id="framework.module.overallsearchorder">
      <title>Overall Search Order</title>

      <para>Frameworks must adhere to the following rules for class or
      resource loading. When a bundle's class loader is requested to load a
      class or find a resource, the search must be performed in the following
      order:</para>

      <orderedlist>
        <listitem>
          <para>If the class or resource is in a <code>java.*</code> package,
          the request is delegated to the parent class loader; otherwise, the
          search continues with the next step. If the request is delegated to
          the parent class loader and the class or resource is not found, then
          the search terminates and the request fails.</para>
        </listitem>

        <listitem>
          <para>If the class or resource is from a package included in the
          boot delegation list
          (<code>org.osgi.framework.bootdelegation</code>), then the request
          is delegated to the parent class loader. If the class or resource is
          found there, the search ends.</para>
        </listitem>

        <listitem xml:id="i3128823">
          <para>If the class or resource is in a package that is imported
          using Import-Package or was imported dynamically in a previous load,
          then the request is delegated to the exporting bundle's class
          loader; otherwise the search continues with the next step. If the
          request is delegated to an exporting class loader and the class or
          resource is not found, then the search terminates and the request
          fails.</para>
        </listitem>

        <listitem xml:id="i3187927">
          <para>If the class or resource is in a package that is imported from
          one or more other bundles using Require-Bundle, the request is
          delegated to the class loaders of the other bundles, in the order in
          which they are specified in this bundle's manifest. This entails a
          depth-first strategy; all required bundles are searched before the
          bundle class path is used. If the class or resource is not found,
          then the search continues with the next step.</para>
        </listitem>

        <listitem>
          <para>Search the bundle's embedded class path, see <xref linkend="framework.module.bundleclasspath"/>. If the class or
          resource is not found, then continue with the next step.</para>
        </listitem>

        <listitem>
          <para>If the class or resource is in a package that is exported by
          the bundle or the package is imported by the bundle (using
          Import-Package or Require-Bundle), then the search ends and the
          class or resource is not found.</para>
        </listitem>

        <listitem>
          <para>Otherwise, if the class or resource is in a package that is
          imported using DynamicImport-Package, then a dynamic import of the
          package is now attempted. An exporter must conform to any implied
          package constraints. If an appropriate exporter is found, a wire is
          established so that future loads of the package are handled in step
          <xref linkend="i3128823"/>. If a dynamic wire is not established,
          then the request fails.</para>
        </listitem>

        <listitem>
          <para>If the dynamic import of the package is established, the
          request is delegated to the exporting bundle's class loader. If the
          request is delegated to an exporting class loader and the class or
          resource is not found, then the search terminates and the request
          fails.</para>
        </listitem>
      </orderedlist>

      <para>When delegating to another bundle class loader, the delegated
      request enters this algorithm at step <xref linkend="i3187927"/>.</para>

      <para>The following non-normative flow chart illustrates the search
      order described above:</para>

      <figure pgwide="1">
        <title>Flow chart for class loading (non-normative)</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="7.508in" contentwidth="7.418in" fileref="class-loading-flowchart.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section xml:id="framework.module.parentclassloader">
      <title>Parent Class Loader</title>

      <para>The set of implicitly visible packages are all <code>java.*</code>
      packages, since these packages are required by the Java runtime, and
      using multiple versions at the same time is not easy. For example, all
      objects must extend the same Object class.</para>

      <para>A bundle must not declare exports for <code>java.*</code>
      packages; doing so is an error and any such bundle must fail to install
      or update. A bundle may declare imports for <code>java.*</code>
      packages; but this is for resolution purposes only. All other packages
      visible through the parent class loader must be hidden from executing
      bundles.</para>

      <para>However, the Framework must explicitly export relevant packages
      from the parent class loader. The system property</para>

      <programlisting><code>org.osgi.framework.system.packages</code> </programlisting>

      <para>contains the export packages descriptions for the system bundle.
      This property employs the standard Export-Package manifest header
      syntax:</para>

      <programlisting>org.osgi.framework.system.packages ::= package-description
                                       ( ',' package-description )*</programlisting>

      <para>Some classes on the boot class path assume that they can use any
      class loader to load other classes on the boot class path, which is not
      true for a bundle class loader. Framework implementations should attempt
      to load these classes from the boot class path.</para>

      <para>The system bundle (bundle ID zero) is used to export packages from
      the parent class loader. Export definitions from the system bundle are
      treated like normal exports, meaning that they can have version numbers,
      and are used to resolve import definitions as part of the normal bundle
      resolving process. Other bundles may provide alternative implementations
      of the same packages.</para>

      <para>The set of export definitions for the parent class loader can
      either be set by this property or calculated by the Framework. The
      export definitions must have the <code>bundle-symbolic-name</code> and
      <code>bundle-version</code> attributes with the implementation-specific
      bundle symbolic name and bundle version value of the system
      bundle.</para>

      <para>Exposing packages from the parent class loader in this fashion
      must also take into account any <code>uses</code> directives of the
      underlying packages. For example, the definition of
      <code>javax.crypto.spec</code> must declare its usage of
      <code>javax.crypto.interfaces</code> and
      <code>javax.crypto</code>.</para>
    </section>

    <section xml:id="i3178562">
      <title>Resource Loading</title>

      <para>A resource in a bundle can be accessed through the class loader of
      that bundle but it can also be accessed with the <xref linkend="org.osgi.framework.Bundle.getResource-String-" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.framework.Bundle.getEntry-String-" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.framework.Bundle.findEntries-String-String-boolean-" xrefstyle="hyperlink"/> and other methods or the methods on the <xref linkend="framework.wiring"/>. All these methods return a
      <code>URL</code> object or an <code>Enumeration</code> object of
      <code>URL</code> objects. The URLs are called <emphasis>bundle entry
      URLs</emphasis>. The schemes for the URLs returned by these methods can
      differ and are implementation dependent.</para>

      <para>Bundle entry URLs are normally created by the Framework, however,
      in certain cases bundles need to manipulate the URL to find related
      resources. The Framework is therefore required to ensure that:</para>

      <itemizedlist>
        <listitem>
          <para>Bundle entry URLs must be hierarchical (See <xref linkend="i3086040"/> )</para>
        </listitem>

        <listitem>
          <para>Usable as a context for constructing another URL.</para>
        </listitem>

        <listitem>
          <para>The <code>java.net.URLStreamHandler</code> class used for a
          bundle entry URL must be available to the <code>java.net.URL</code>
          class to setup a URL that uses the protocol scheme defined by the
          Framework.</para>
        </listitem>

        <listitem>
          <para>The <code>getPath</code> method for a bundle entry URL must
          return an absolute path (a path that starts with '/') to a resource
          or entry in a bundle. For example, the URL returned from
          <code>getEntry("myimages/test.gif")</code> must have a path of
          <code>/myimages/test.gif</code>.</para>
        </listitem>
      </itemizedlist>

      <para>For example, a class can take a URL to an <code>index.html</code>
      bundle resource and map URLs in this resource to other files in the same
      JAR directory.</para>

      <programlisting>public class BundleResource implements HttpContext{
    URL  root;  // to index.html in bundle
    URL getResource( String resource ) {
        return new URL( root, resource );
    }
    ...
}</programlisting>
    </section>

    <section xml:id="i2581530">
      <title>Bundle Cycles</title>

      <para>Multiple required bundles can export the same package. Bundles
      which export the same package involved in a require bundle cycle can
      lead to lookup cycles when searching for classes and resources from the
      package. Consider the following definitions:</para>

      <programlisting>A: Require-Bundle: B, C
C: Require-Bundle: D</programlisting>

      <para>These definitions are depicted in <xref linkend="i2650348"/>.</para>

      <figure xml:id="i2650348">
        <title>Depth First search with Require Bundle</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.743in" contentwidth="7.418in" fileref="require-bundle-depth-first.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Each of the bundles exports the package <code>p</code>. In this
      example, bundle <code>A</code> requires bundle <code>B</code>, and
      bundle <code>C</code> requires bundle <code>D</code>. When bundle
      <code>A</code> loads a class or resource from package <code>p</code>,
      then the required bundle search order is the following: <code>B</code>,
      <code>D</code>, <code>C</code>, <code>A</code>. This is a depth first
      search order because required bundles are searched before the bundle
      class path is searched (see step <xref linkend="i3187927"/> ). The
      required bundles are searched in the order that they appear in the
      Require-Bundle header. The depth first search order can introduce
      endless search cycles if the dependency graph has a cycle in it.</para>

      <para>Using the previous setup, a cycle can be introduced if bundle
      <code>D</code> requires bundle <code>A</code> as depicted in <xref linkend="i3024353"/>.</para>

      <programlisting>D: Require-Bundle: A</programlisting>

      <figure xml:id="i3024353">
        <title>Cycles</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.743in" contentwidth="7.418in" fileref="bundle-cycles.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>When the class loader for bundle <code>A</code> loads a class or
      resource from package <code>p</code> then the bundle search order would
      be the following: B, B, B,... if cycles were not taken into
      account.</para>

      <para>Since a cycle was introduced each time bundle D is reached the
      search will recurs back to A and start over. The framework must prevent
      such dependency cycles from causing endless recursive lookups.</para>

      <para>To avoid endless looping, the Framework must mark each bundle upon
      first visiting it and not explore the required bundles of a previously
      visited bundle. Using the visited pattern on the dependency graph above
      will result in the following bundle search order: <code>B</code>,
      <code>D</code>, <code>C</code>, <code>A</code>.</para>
    </section>

    <section>
      <title>Code Executed Before Started</title>

      <para>Packages exported from a bundle are exposed to other bundles as
      soon as the bundle has been resolved. This condition could mean that
      another bundle could call methods in an exported package
      <emphasis>before</emphasis> the bundle exporting the package is
      started.</para>
    </section>

    <section xml:id="framework.module-finding-a-bundle">
      <title>Finding a Bundle</title>

      <para>There are scenarios where a bundle is required in code that has no
      access to a Bundle Context. For this reason, the framework provides the
      following <emphasis>Framework Util</emphasis> methods:</para>

      <itemizedlist>
        <listitem>
          <para><code>getBundle(Class)</code> - The <xref linkend="org.osgi.framework.FrameworkUtil.getBundle-Class-"/> method
          allows code to find the bundle of a class. The method returns
          <code>null</code> when the class does not originate from a
          bundle.</para>
        </listitem>

        <listitem>
          <para><code>getBundle(ClassLoader)</code> - The <xref linkend="org.osgi.framework.FrameworkUtil.getBundle-ClassLoader-"/>
          method allows code to find the bundle of a class loader. The method
          returns an empty Optional when the class loader is not associated
          with a specific bundle.</para>
        </listitem>
      </itemizedlist>

      <para>In an OSGi system, not all objects belong to types loaded from a
      bundle class loader. For example, the boot class path loader.</para>
    </section>
  </section>

  <section xml:id="framework.module-loading.native.code.libraries">
    <title>Loading Native Code Libraries</title>

    <para>Dependency on native code is expressed in the Bundle-NativeCode
    header. The framework must verify this header and satisfy its dependencies
    before it attempts to resolve the bundle. However, a bundle can be
    installed without an exception if the header is properly formatted
    according to its syntax. If the header contains invalid information, or
    can not be satisfied, errors will be reported during resolving.</para>

    <para>A Java VM has a special way of handling native code. When a class
    loaded by a bundle's class loader attempts to load a native library, by
    calling <code>System.loadLibrary</code>, the <code>findLibrary</code>
    method of the bundle's class loader must be called to return the file path
    in which the Framework has made the requested native library available.
    The parameter to the <code>findLibrary</code> method is the name of the
    library in operating system independent form, like <code>http</code>. The
    bundle class loader can use the <code>mapLibraryName</code> method from
    the VM to map this name to an operating system dependent name, like
    <code>libhttp.so</code>.</para>

    <para>The bundle's class loader must attempt to find the native library by
    examining the selected native code clauses, if any, of the bundle
    associated with the class loader and each attached fragment. Fragments are
    examined in ascending bundle ID order. If the library is not referenced in
    any of the selected native code clauses then <code>null</code> must be
    returned which allows the parent class loader to search for the native
    library.</para>

    <para xml:id="i2623559">The bundle must have the required
    <code>RuntimePermission</code>[<code>loadLibrary.</code> &lt;
    <code>library name</code>&gt;] in order to load native code in the OSGi
    framework.</para>

    <para>The Bundle-NativeCode manifest header must conform to the following
    syntax:</para>

    <programlisting>Bundle-NativeCode   ::= nativecode
        ( ',' nativecode )* ( ',' optional ) ?
nativecode          ::= path ( ';' path )*    // See <xref linkend="framework.general.syntax" xrefstyle="template:%n"/>
                        ( ';' parameter )*
optional            ::= '*'</programlisting>

    <para>When locating a path in a bundle the Framework must attempt to
    locate the path relative to the root of the bundle that contains the
    corresponding native code clause in its manifest header.</para>

    <para>The following attributes are architected:</para>

    <itemizedlist>
      <listitem>
        <para><code>osname</code> - Name of the operating system. The value of
        this attribute must be the name of the operating system upon which the
        native libraries run. A number of canonical names are defined in <xref linkend="framework.module.os-names"/>.</para>
      </listitem>

      <listitem>
        <para><code>osversion</code> - The operating system version. The value
        of this attribute must be a version range as defined in <xref linkend="i3189032"/>.</para>
      </listitem>

      <listitem>
        <para><code>processor</code> - The processor architecture. The value
        of this attribute must be the name of the processor architecture upon
        which the native libraries run. A number of canonical names are
        defined in <xref linkend="framework.module.processor-names"/>.</para>
      </listitem>

      <listitem>
        <para><code>language</code> - The ISO code for a language. The value
        of this attribute must be the name of the language for which the
        native libraries have been localized.</para>
      </listitem>

      <listitem>
        <para><code>selection-filter</code> - A selection filter. The value of
        this attribute must be a filter expression that indicates if the
        native code clause should be selected or not.</para>
      </listitem>
    </itemizedlist>

    <para>If a selection-filter attribute contains an invalid filter, then the
    bundle must fail to install with a Bundle Exception of type <xref linkend="org.osgi.framework.BundleException.NATIVECODE_ERROR" xrefstyle="hyperlink"/>. The following is a typical example of a native
    code declaration in a bundle's manifest:</para>

    <programlisting>Bundle-NativeCode: lib/http.dll ; lib/zlib.dll; «
        osname = Windows95 ; «
        osname = Windows98 ; «
        osname = WindowsNT ; «
        processor = x86 ; «
        selection-filter = «
            "(com.acme.windowing=win32)"; «
        language = en ; «
        language = se , «
    lib/solaris/libhttp.so ; «
        osname = Solaris ; «
        osname = SunOS ; «
        processor = sparc, «
    lib/linux/libhttp.so ; «
        osname = Linux ; «
        processor = mips; «
        selection-filter = «
            "(com.acme.windowing=gtk)"</programlisting>

    <para>If multiple native code libraries need to be installed on one
    platform, they must all be specified in the same clause for that
    platform.</para>

    <para>If a Bundle-NativeCode clause contains duplicate parameter entries,
    the corresponding values must be <code>OR</code>'ed together. This feature
    must be carefully used because the result is not always obvious. This is
    highlighted by the following example:</para>

    <programlisting>// The effect of this header has probably
// not the intended effect!
Bundle-NativeCode: lib/http.DLL ; «
    osname = Windows95 ; «
    osversion = "3.1" ; «
    osname = WindowsXP ; «
    osversion = "5.1" ; «
    processor = x86</programlisting>

    <para>The above example implies that the native library will load on
    Windows XP 3.1 and later, which was probably not intended. The single
    clause should be split in two clauses:</para>

    <programlisting>Bundle-NativeCode: lib/http.DLL ; «
        osname = Windows95 ; «
        osversion = 3.1; «
        processor = x86, «
    lib/http.DLL ; «
        osname = WindowsXP ; «
        osversion = 5.1; «
        processor = x86</programlisting>

    <para>Any paths specified in the matching clause must be present in the
    bundle or any of its attached fragments for a bundle to resolve. The
    framework must report a Bundle Exception with the
    <code>NATIVECODE_ERROR</code> as error code when the bundle can not be
    resolved due to a native code problem.</para>

    <para>If the optional '*' is specified at the end of the Bundle-NativeCode
    manifest header, the bundle will still resolve even if the
    Bundle-NativeCode header has no matching clauses.</para>

    <para>The following is a typical example of a native code declaration in a
    bundle's manifest with an optional clause:</para>

    <programlisting>Bundle-NativeCode: lib/win32/winxp/optimized.dll; «
        lib/win32/native.dll ; «
        osname = WindowsXP ; «
        processor = x86 , «
    lib/win32/native.dll ; «
        osname = Windows95 ; «
        osname = Windows98 ; «
        osname = WindowsNT ; «
        osname = Windows2000; «
        processor = x86 , «
        *</programlisting>

    <para>Frameworks must convert a Bundle-NativeCode header to a requirement
    in the <code>osgi.native</code> namespace when used in the Wiring API, see
    <xref linkend="framework.wiring"/>. Each native code clause specified in a
    Bundle-NativeCode header is converted into a filter component for the
    <code>osgi.native</code> requirement filter directive using the following
    architected matching attributes:</para>

    <itemizedlist>
      <listitem>
        <para><code>osgi.native.osname</code> - Uses the approximate equals
        (~=) filter type to evaluate the value specified by the
        <code>osname</code> Bundle-NativeCode attribute.</para>
      </listitem>

      <listitem>
        <para><code>osgi.native.osversion</code> - Create a
        <code>VersionRange</code> using the value specified by the osversion
        Bundle-NativeCode attribute and then create a filter string out of the
        <code>VersionRange</code>.</para>
      </listitem>

      <listitem>
        <para><code>osgi.native.processor</code> - Uses the approximate equals
        (~=) filter type to evaluate the value specified by the
        <code>processor</code> Bundle-NativeCode attribute.</para>
      </listitem>

      <listitem>
        <para><code>osgi.native.language</code> - Uses the approximate equals
        (~=) filter type to evaluate the value specified by the
        <code>language</code> Bundle-NativeCode attribute.</para>
      </listitem>
    </itemizedlist>

    <para>In cases where the same Bundle-NativeCode attribute is specified
    multiple times within the same clause then the filter components for each
    value for that attribute are ORed together. For example, if osname
    attribute is specified as both "Windows95" and "Windows7" then the
    resulting filter will contain:</para>

    <programlisting>(|
        (osgi.native.osname~=Windows95)
        (osgi.native.osname~=Windows7)
)</programlisting>

    <para>If the <code>selection-filter</code> Bundle-NativeCode attribute is
    specified then the specified filter is included as a component of the
    native code clauses AND filter type. Consider the following
    Bundle-NativeCode header which contains a single clause:</para>

    <programlisting>Bundle-NativeCode: «
      lib/http.dll; lib/zlib.dll; «
      osname=Windows95; «
      osname=Windows98; «
      osname=WindowsNT; «
      processor=x86; «
      selection-filter="(com.acme.windowing=win32)";  «
      language=en; «
      language=se</programlisting>

    <para>This clause would get translated into the following AND filter
    type:</para>

    <programlisting>Require-Capability: «
      osgi.native; «
      filter:=" «
        (&amp; «
          (| «
            (osgi.native.osname~=Windows95) «
            (osgi.native.osname~=Windows98) «
            (osgi.native.osname~=WindowsNT) «
          ) «
          (osgi.native.processor~=x86) «
          (| «
            (osgi.native.language~=en) «
            (osgi.native.language~=se) «
          ) «
          (com.acme.windowing=win32) «
        )"</programlisting>

    <para>The Bundle-NativeCode header may specify multiple clauses, each
    having their own list of native code paths and set of matching attributes.
    Instead of using a separate <code>osgi.native</code> requirement for each
    Bundle-NativeCode clause, the complete Bundle-NativeCode header is
    specified as a single <code>osgi.native</code> requirement. This is done
    by using an OR filter type using all of the individual Bundle-NativeCode
    clause filter components (as specified above) as components of a single
    filter directive. Consider the following Bundle-NativeCode header which
    contains three clauses:</para>

    <programlisting>Bundle-NativeCode: «
      lib/http.dll; lib/zlib.dll; «
        osname=Windows95; «
        osname=Windows98; «
        osname=WindowsNT; «
        processor=x86; «
        selection-filter = "(com.acme.windowing=win32)"; «
        language=en; «
        language=se, «
      lib/solaris/libhttp.so; «
        osname=Solaris; «
        osname=SunOS; «
        processor=sparc, «
      lib/linux/libhttp.so; «
        osname=Linux; «
        processor=mips; «
        selection-filter="(com.acme.windowing=gtk)"</programlisting>

    <para>This Bundle-NativeCode header would get translated into the
    following <code>osgi.native</code> filter directive:</para>

    <programlisting>(|
  (&amp;
    (|
      (osgi.native.osname~=Windows95)
      (osgi.native.osname~=Windows98)
      (osgi.native.osname~=WindowsNT)
    )
    (osgi.native.processor~=x86)
    (|
      (osgi.native.language~=en)
      (osgi.native.language~=se)
    )
    (com.acme.windowing=win32)
  )
  (&amp;
    (|
      (osgi.native.osname~=Solaris)
      (osgi.native.osname~=SunOs)
    )
    (osgi.native.processor~=sparc)
  )
  (&amp;
    (osgi.native.osname~=Linux)
    (osgi.native.processor~=mips)
    (com.acme.windowing=gtk)
  )
)</programlisting>

    <para>If the optional '*' is specified at the end of the Bundle-NativeCode
    manifest header, then the native code for the bundle is considered to be
    optional. When the Framework converts a Bundle-NativeCode header into an
    <code>osgi.native</code> requirement which is designated as optional then
    the requirement resolution directive must be set to
    <code>optional</code></para>

    <section xml:id="framework.module.nativecodealgorithm">
      <title>Native Code Algorithm</title>

      <para>In the description of this algorithm, [x] represents the value of
      the launching property x (see <xref linkend="framework.lifecycle.launchingproperties"/>) and ~= represents
      the match operation. The match operation is a case insensitive
      comparison. Certain properties can be aliased. In those cases, the
      manifest header should contain the generic name for that property but
      the Framework should attempt to include aliases when it matches.</para>

      <para>The Framework must select the native code clause using the
      following algorithm:</para>

      <orderedlist>
        <listitem xml:id="framework.module-nativecodealg1">
          <para>Only select the native code clauses for which the following
          expressions all evaluate to true.</para>

          <itemizedlist>
            <listitem>
              <para><code>osname ~= [org.osgi.framework.os.name]</code> or
              <code>osname</code> is not specified</para>
            </listitem>

            <listitem>
              <para><code>processor ~= [org.osgi.framework.processor]</code>
              or <code>processor</code> is not specified</para>
            </listitem>

            <listitem>
              <para><code>osversion</code> range includes
              <code>[org.osgi.framework.os.version]</code> or
              <code>osversion</code> is not specified</para>
            </listitem>

            <listitem>
              <para><code>language ~= [org.osgi.framework.language]</code> or
              <code>language</code> is not specified</para>
            </listitem>

            <listitem>
              <para><code>selection-filter</code> evaluates to
              <code>true</code> when using the values of the launching
              properties or <code>selection-filter</code> is not
              specified</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>If no native clauses were selected in step <xref linkend="framework.module-nativecodealg1"/>, this algorithm is
          terminated. A Bundle Exception is thrown if the optional clause is
          not present.</para>
        </listitem>

        <listitem xml:id="framework.module-nativecodealg3">
          <para>The selected clauses are now sorted in the following priority
          order:</para>

          <itemizedlist>
            <listitem>
              <para><code>osversion</code>: floor of the
              <code>osversion</code> range in descending order,
              <code>osversion</code> not specified</para>
            </listitem>

            <listitem>
              <para><code>language</code>: language specified, language not
              specified</para>
            </listitem>

            <listitem>
              <para>Position in the Bundle-NativeCode manifest header: lexical
              left to right.</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>The first clause of the sorted clauses from step <xref linkend="framework.module-nativecodealg3"/> must be used as the
          selected native code clause.</para>
        </listitem>
      </orderedlist>

      <para>If a native code library in a selected native code clause cannot
      be found within the bundle then the bundle is still allowed to resolve.
      A missing native code library will result in an error being thrown at
      runtime when the bundle attempts to load the native code (for example,
      by invoking the method <code>System.loadLibrary</code>).</para>

      <para>If the selected clause contains multiple libraries with the same
      base file name then only the lexically left most library with that base
      file name will be used. For example, if the selected clause contains the
      libraries <code>lib1/http.dll; lib2/http.dll; lib3/foo.dll;
      a/b/c/http.dll</code> then only <code>http.dll</code> in
      <code>lib1</code> and <code>foo.dll</code> will be used.</para>

      <para>Designing a bundle native code header can become quickly
      complicated when different operating systems, libraries, and languages
      are used. The best practice for designing the header is to place all
      parameters in a table. Every targeted environment is then a row in that
      table. See <xref linkend="framework.module.nativecode.table"/> for an
      example.</para>

      <table xml:id="framework.module.nativecode.table">
        <title>Native code table</title>

        <tgroup cols="6">
          <colspec colnum="1" colwidth="3.2*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="0.8*"/>

          <colspec colnum="4" colwidth="0.8*"/>

          <colspec colnum="5" colwidth="0.8*"/>

          <colspec colnum="6" colwidth="3*"/>

          <thead>
            <row>
              <?dbfo rotated-width="0.5in"?>

              <entry valign="bottom">Libraries</entry>

              <entry rotate="1"><?dbfo orientation="90"?>osname</entry>

              <entry rotate="1"><?dbfo orientation="90"?>osversion</entry>

              <entry rotate="1"><?dbfo orientation="90"?>processor</entry>

              <entry rotate="1"><?dbfo orientation="90"?>language</entry>

              <entry rotate="1"><?dbfo orientation="90"?>filter</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><para>nativecodewin32.dll, delta.dll</para></entry>

              <entry><para><code>win32</code></para></entry>

              <entry><para/></entry>

              <entry><para><code>x86</code></para></entry>

              <entry><para><code>en</code></para></entry>

              <entry><para/></entry>
            </row>

            <row>
              <entry><para>nativecodegtk.so</para></entry>

              <entry><para><code>linux</code></para></entry>

              <entry><para/></entry>

              <entry><para><code>x86</code></para></entry>

              <entry><para><code>en</code></para></entry>

              <entry><para><code>(com.acme.windowing=gtk)</code></para></entry>
            </row>

            <row>
              <entry><para>nativecodeqt.so</para></entry>

              <entry><para><code>linux</code></para></entry>

              <entry><para/></entry>

              <entry><para><code>x86</code></para></entry>

              <entry><para><code>en</code></para></entry>

              <entry><para><code>(com.acme.windowing=qt)</code></para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>This table makes it easier to detect missing combinations. This
      table is then mapped to the Bundle-NativeCode header in the following
      code example.</para>

      <programlisting>Bundle-NativeCode:  nativecodewin32.dll; «
        delta.dll; «
        osname=win32; «
        processor=x86; «
        language=en, «
    nativecodegtk.so; «
        osname=linux; «
        processor=x86; «
        language=en; «
        selection-filter= «
            "(com.acme.windowing=gtk)", «
    nativecodeqt.so; «
        osname=linux; «
        processor=x86; «
        language=en; «
        selection-filter = «
            "(com.acme.windowing=qt)"</programlisting>
    </section>

    <section>
      <title>Considerations Using Native Libraries</title>

      <para>There are some restrictions on loading native libraries due to the
      nature of class loaders. In order to preserve namespace separation in
      class loaders, only one class loader can load a native library as
      specified by an absolute path. Loading of a native library file by
      multiple class loaders (from multiple bundles, for example) will result
      in a linkage error.</para>

      <para>Care should be taken to use multiple libraries with the same file
      name but in a different directory in the JAR. For example,
      <code>foo/http.dll</code> and <code>bar/http.dll</code>. The Framework
      must only use the first library and ignore later defined libraries with
      the same name. In the example, only <code>foo/http.dll</code> will be
      visible.</para>

      <para>A native library is unloaded only when the class loader that
      loaded it has been garbage collected.</para>

      <para>When a bundle is uninstalled or updated, any native libraries
      loaded by the bundle remain in memory until the bundle's class loader is
      garbage collected. The garbage collection will not happen until all
      references to objects in the bundle have been garbage collected, and all
      bundles importing packages from the updated or uninstalled bundle are
      refreshed. This implies that native libraries loaded from the system
      class loader always remain in memory because the system class loader is
      never garbage collected.</para>

      <para>It is not uncommon that native code libraries have dependencies on
      other native code libraries. This specification does not support these
      dependencies, it is assumed that native libraries delivered in bundles
      should not rely on other native libraries.</para>
    </section>
  </section>

  <section xml:id="framework.module.localization">
    <title>Localization</title>

    <para>A bundle contains a significant amount of information that is
    human-readable. Some of this information may require different
    translations depending on the user's language, country, and any special
    variant preferences, a.k.a. the <emphasis>locale</emphasis>. This section
    describes how a bundle can provide common translations for the manifest
    and other configuration resources depending on a locale.</para>

    <para>Bundle localization entries share a common base name. To find a
    potential localization entry, an underscore (<code>'_' \u005F</code>) is
    added plus a number of suffixes, separated by another underscore, and
    finally appended with the suffix <code>.properties</code> . The suffixes
    are defined in <code>java.util.Locale</code>. The order for the suffixes
    this must be:</para>

    <itemizedlist>
      <listitem>
        <para>language</para>
      </listitem>

      <listitem>
        <para>country</para>
      </listitem>

      <listitem>
        <para>variant</para>
      </listitem>
    </itemizedlist>

    <para>For example, the following files provide manifest translations for
    English, Dutch (Belgium and the Netherlands) and Swedish.</para>

    <programlisting>OSGI-INF/l10n/bundle_en.properties
OSGI-INF/l10n/bundle_nl_BE.properties
OSGI-INF/l10n/bundle_nl_NL.properties
OSGI-INF/l10n/bundle_sv.properties</programlisting>

    <para>The Framework searches for localization entries by appending
    suffixes to the localization base name according to a specified locale and
    finally appending the <code>.properties</code> suffix. If a translation is
    not found, the locale must be made more generic by first removing the
    variant, then the country and finally the language until an entry is found
    that contains a valid translation. For example, looking up a translation
    for the locale <code>en_GB_welsh</code> will search in the following
    order:</para>

    <programlisting>OSGI-INF/l10n/bundle_en_GB_welsh.properties
OSGI-INF/l10n/bundle_en_GB.properties
OSGI-INF/l10n/bundle_en.properties
OSGI-INF/l10n/bundle.properties</programlisting>

    <para>This allows localization files for more specific locales to override
    localizations from less specific localization files.</para>

    <section xml:id="i3212953">
      <title>Finding Localization Entries</title>

      <para>Localization entries can be contained in the bundle or delivered
      in fragments. The framework must search for localization entries using
      the following search rules based on the bundle type:</para>

      <itemizedlist>
        <listitem>
          <para><code>fragment bundle</code> - If the bundle is a
          <emphasis>resolved</emphasis> fragment, then the search for
          localization data must delegate to the attached host bundle with the
          highest version. If the fragment is not resolved, then the framework
          must search the fragment's JAR for the localization entry.</para>
        </listitem>

        <listitem>
          <para><code>other bundle</code> - The framework must first search in
          the bundle's JAR for the localization entry. If the entry is not
          found and the bundle has fragments, then the attached fragment JARs
          must be searched for the localization entry.</para>
        </listitem>
      </itemizedlist>

      <para>The bundle's class loader is not used to search for localization
      entries. Only the contents of the bundle and its attached fragments are
      searched. The bundle will still be searched for localization entries
      even if the full stop (<code>'.' \u002E</code>) is not in the bundle
      class path.</para>
    </section>

    <section xml:id="i3189742">
      <title>Manifest Localization</title>

      <para>Localized values are stored in property resources within the
      bundle. The default base name of the bundle localization property files
      is <code>OSGI-INF/l10n/bundle</code>. The Bundle-Localization manifest
      header can be used to override the default base name for the
      localization files. This location is relative to the root of the bundle
      and bundle fragments.</para>

      <para>A localization entry contains key/value entries for localized
      information. All headers in a bundle's manifest can be localized.
      However, the Framework must always use the non-localized versions of
      headers that have Framework semantics.</para>

      <para>A localization key can be specified as the value of a bundle's
      manifest header using the following syntax:</para>

      <programlisting>header-value ::= '%'text
text ::= &lt; any value which is both a valid manifest headervalue
   and a valid property key name &gt;</programlisting>

      <para>For example, consider the following bundle manifest
      entries:</para>

      <programlisting>Bundle-Name: %acme bundle
Bundle-Vendor: %acme corporation
Bundle-Description: %acme description
Bundle-Activator: com.acme.bundle.Activator
Acme-Defined-Header: %acme special header</programlisting>

      <para>User-defined headers can also be localized. Spaces in the
      localization keys are explicitly allowed.</para>

      <para>The previous example manifest entries could be localized by the
      following entries in the manifest localization entry
      OSGI-INF/l10n/bundle.properties.</para>

      <programlisting># bundle.properties
acme\ bundle=The ACME Bundle
acme\ corporation=The ACME Corporation
acme\ description=The ACME Bundle provides all of the ACME\ services
acme\ special\ header=user-defined Acme Data</programlisting>

      <para>The above manifest entries could also have French localizations in
      the manifest localization entry
      <code>OSGI-INF/l10n/bundle_fr_FR.properties</code>.</para>
    </section>
  </section>

  <section xml:id="framework.module.bundle.validity">
    <title>Bundle Validity</title>

    <para>If the Bundle-ManifestVersion is not specified, then the bundle
    manifest version defaults to 1, and certain Release 4 syntax, such as a
    new manifest header, is ignored rather than causing an error. Release 3
    bundles must be treated according to the Release 3 specification.</para>

    <para>The following (non-exhaustive) list of errors causes a bundle to
    fail to install:</para>

    <itemizedlist>
      <listitem>
        <para>Missing Bundle-SymbolicName.</para>
      </listitem>

      <listitem>
        <para>Duplicate attribute or duplicate directive (except in the
        Bundle-Native code clause).</para>
      </listitem>

      <listitem>
        <para>Multiple imports of a given package.</para>
      </listitem>

      <listitem>
        <para>Export of <code>java.*</code> packages.</para>
      </listitem>

      <listitem>
        <para>Export-Package, Bundle-SymbolicName, or Fragment-Host with a
        mandatory attribute that is not defined.</para>
      </listitem>

      <listitem>
        <para>Installing or updating a bundle to a bundle that has the same
        symbolic name and version as another installed bundle (unless this is
        allowed, see <xref linkend="framework.lifecycle.bundleidentifiers"/>).</para>
      </listitem>

      <listitem>
        <para>Any syntactic error (for example, improperly formatted version
        or bundle symbolic name, unrecognized directive value, etc.).</para>
      </listitem>

      <listitem>
        <para>Specification-version and version specified together (for the
        same package(s)) but with different values on manifest headers that
        treat them as synonyms. For example:</para>

        <programlisting>    Import-Package p;specification-version=1;version=2</programlisting>

        <para>would fail to install, but:</para>

        <programlisting>    Import-Package p;specification-version=1,q;version=2</programlisting>

        <para>would not be an error.</para>
      </listitem>

      <listitem>
        <para>The manifest lists a <code>OSGI-INF/permissions.perm</code> file
        but no such file is present.</para>
      </listitem>

      <listitem>
        <para>Bundle-ManifestVersion value not equal to 2, unless the
        Framework specifically recognizes the semantics of a later
        release.</para>
      </listitem>

      <listitem>
        <para>Requiring the same bundle symbolic name more than once.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="framework.module.requiringbundles">
    <title>Requiring Bundles</title>

    <para>The Framework supports a mechanism where bundles can be directly
    wired to other bundles. The following sections define the relevant headers
    and then discuss the possible scenarios. At the end, some of the
    (sometimes unexpected) consequences of using Require-Bundle are
    discussed.</para>

    <section xml:id="framework.module.requirebundle">
      <title>Require-Bundle</title>

      <para>The Require-Bundle manifest header contains a list of required
      bundle symbolic names, with optional attribute assertions. These bundles
      are searched after the imports are searched but before the bundle's
      class path is searched. Fragment or extension bundles cannot be
      required.</para>

      <para>The framework must take <emphasis>all</emphasis> exported packages
      from a required bundle, including any packages exported by attached
      fragments, and wire these packages to the requiring bundle.</para>

      <para>The Require-Bundle manifest header must conform to the following
      syntax:</para>

      <programlisting>Require-Bundle      ::= bundle-description
    ( ',' bundle-description )*
bundle-description  ::= symbolic-name       // See <xref linkend="framework.general.syntax" xrefstyle="template:%n"/>
    (';' parameter )*</programlisting>

      <para>The following directives can be used in the Require-Bundle
      header:</para>

      <itemizedlist>
        <listitem>
          <para><code>visibility</code> - If the value is <code>private</code>
          (default), then all visible packages from the required bundles are
          not re-exported. If the value is <code>reexport</code> then bundles
          that require this bundle will transitively have access to these
          required bundle's exported packages. That is, if bundle
          <code>A</code> requires bundle <code>B</code>, and bundle
          <code>B</code> requires bundle <code>C</code> with
          <code>visibility:=reexport</code> then bundle <code>A</code> will
          have access to all bundle <code>C</code>'s exported packages as if
          bundle <code>A</code> had required bundle <code>C</code>.</para>
        </listitem>

        <listitem>
          <para><code>resolution</code> - If the value is
          <code>mandatory</code> (default) then the required bundle must exist
          for this bundle to resolve. If the value is <code>optional</code>,
          the bundle will resolve even if the required bundle does not
          exist.</para>
        </listitem>
      </itemizedlist>

      <para>The following matching attribute is architected by the
      Framework:</para>

      <itemizedlist>
        <listitem>
          <para><code>bundle-version</code> - The value of this attribute is a
          version range to select the bundle version of the required bundle.
          See <xref linkend="i3189032"/>. The default value is
          <code>[0.0.0,</code><phrase role="symbol">∞</phrase><code>)</code>.</para>
        </listitem>
      </itemizedlist>

      <para>The Bundle-SymbolicName header can specify further arbitrary
      attributes that must be matched before a bundle is eligible.</para>

      <para>A specific symbolic name can only be required once, listing the
      same symbolic name multiple times must be regarded as an install
      error.</para>

      <para>Requiring bundles must get wired to all exported packages of all
      their required bundles including exported packages from their attached
      fragments. This means that any mandatory attributes on these exports
      must be ignored. However, if a required bundle's exported package is
      substituted for an imported package, then the requiring bundles must get
      wired to the same exported package that the required bundle is wired to
      ensure class space consistency.</para>

      <para>For example, assume that bundle <code>A</code> exports and imports
      package <code>p</code> and bundle <code>B</code> requires bundle
      <code>A</code>:</para>

      <programlisting>Bundle A
Export-Package: p;x=1;mandatory:=x
Import-Package: p

Bundle B
Require-Bundle: A</programlisting>

      <para>In this constellation, bundle <code>B</code> will get package
      <code>p</code> from the same source as bundle A. Bundle <code>A</code>
      can get the package from itself if it is chosen as an exporter for p,
      but it can also get the package from another bundle because it also
      imports it. In all cases, bundle <code>B</code> must use exactly the
      same exporter for package <code>p</code> as bundle
      <code>A</code>.</para>

      <para>A given package may be available from more than one of the
      required bundles. Such packages are named <emphasis>split
      packages</emphasis> because they derive their contents from different
      bundles. If these different bundles provide the same classes
      unpredictable shadowing of classes can arise, see <xref linkend="i3198951"/>. However, split packages without shadowing are
      explicitly permitted.</para>

      <para>For example, take the following setup:</para>

      <programlisting>A:  Require-Bundle: B
    Export-Package: p
B:  Export-Package: p;partial=true;mandatory:=partial</programlisting>

      <para>If bundle <code>C</code> imports package <code>p</code>, it will
      be wired to package <code>A.p</code>, however the contents will come
      from <code>B.p</code> &gt; <code>A.p</code>. The mandatory attribute on
      bundle <code>B</code>'s export definition ensures that bundle
      <code>B</code> is not accidentally selected as exporter for package
      <code>p</code>. Split packages have a number of drawbacks that are
      discussed in <xref linkend="i3198951"/>.</para>

      <para>Resources and classes from a split package must be searched in the
      order in which the required bundles are specified in the
      <code>Require-Bundle</code> header.</para>

      <para>As an example, assume that a bundle requires a number of required
      bundles and a number of language resources (also bundles) that are
      optional.</para>

      <programlisting>Require-Bundle: com.acme.facade;visibility:=reexport, «
 com.acme.bar.one;visibility:=reexport, «
 com.acme.bar.two;visibility:=reexport, «
 com.acme.bar._nl;visibility:=reexport;resolution:=optional, «
 com.acme.bar._en;visibility:=reexport;resolution:=optional</programlisting>

      <para>A bundle may both import packages (via Import-Package) and require
      one or more bundles (via Require-Bundle), but if a package is imported
      via Import-Package, it is not also visible via Require-Bundle:
      Import-Package takes priority over Require-Bundle, and packages which
      are exported by a required bundle and imported via Import-Package must
      <emphasis>not</emphasis> be treated as split packages.</para>

      <para>In order to be allowed to require a named bundle, the requiring
      bundle must have <code>BundlePermission[&lt;bundle symbolic name&gt;,
      REQUIRE]</code>, where the bundle symbolic name is the name of the
      bundle that is required. The required bundle must be able to provide the
      bundle and must therefore have <code>BundlePermission[&lt;bundle
      symbolic name&gt;, PROVIDE]</code>, where the name designates the
      requiring bundle. In the case a fragment bundle requires another bundle,
      the Bundle Permission must be checked against the fragment bundle's
      Protection Domain.</para>
    </section>

    <section>
      <title>Split Package Compatibility</title>

      <para>A package is a split package whenever there are multiple
      <emphasis>sources</emphasis> for the package; only bundles using the
      Require-Bundle header can have split packages.</para>

      <para>A source is a bundle that provides the given package. Both the
      required bundles as well as the requiring bundle can act as a source.
      The required bundles and the requiring bundle can only contribute their
      exported packages.</para>

      <para>Exported split packages from two bundles are compatible if the
      package sources for one are a subset of the other.</para>
    </section>

    <section xml:id="i3198951">
      <title>Issues With Requiring Bundles</title>

      <para>The preferred way of wiring bundles is to use the
      <code>Import-Package</code> and <code>Export-Package</code> headers
      because they couple the importer and exporter to a much lesser extent.
      Bundles can be refactored to have a different package composition
      without causing other bundles to fail.</para>

      <para>The Require-Bundle header provides a way for a bundle to bind to
      all the exports of another bundle, regardless of what those exports are.
      Though this can seem convenient at first, it has a number of
      drawbacks:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Split Packages</emphasis> - Classes from the same
          package can come from different bundles with Require bundle, such a
          package is called a split package. Split packages have the following
          drawbacks:</para>

          <itemizedlist>
            <listitem>
              <para><emphasis>Completeness</emphasis> - Split packages are
              open ended, it is difficult to guarantee that all the intended
              pieces of a split package have actually been included.</para>
            </listitem>

            <listitem>
              <para><emphasis>Ordering</emphasis> - If the same classes are
              present in more than one required bundle, then the ordering of
              Require-Bundle is significant. A wrong ordering can cause hard
              to trace errors, similar to the traditional class path model of
              Java.</para>
            </listitem>

            <listitem>
              <para><emphasis>Performance</emphasis> - A class must be
              searched in all providers when packages are split. This
              potentially increases the number of times that a
              <code>ClassNotFoundException</code> must be thrown which can
              potentially introduce a significant overhead.</para>
            </listitem>

            <listitem>
              <para><emphasis>Confusing</emphasis> - It is easy to find a
              setup where there is lots of potential for confusion. For
              example, the following setup is non-intuitive.</para>

              <programlisting>   A: Export-Package: p;uses:=q
      Import-Package: q
   B: Export-Package: q
   C: Export-Package: q
   D: Require-Bundle: B, C
      Import-Package: p</programlisting>
            </listitem>
          </itemizedlist>

          <figure>
            <title>Split packages and package constraints</title>

            <mediaobject>
              <imageobject>
                <imagedata align="center" contentdepth="1.561in" contentwidth="7.418in" fileref="split-packages.svg"/>
              </imageobject>
            </mediaobject>
          </figure>

          <para>In this example, bundle <code>D</code> merges the split
          package <code>q</code> from bundles <code>B</code> and bundle
          <code>C</code>, however, importing package <code>p</code> from
          bundle <code>A</code> puts a uses constraint on package
          <code>p</code> for package <code>q</code>. This implies that bundle
          <code>D</code> can see the valid package <code>q</code> from bundle
          <code>B</code> but also the invalid package <code>q</code> from
          bundle <code>C</code>. This wiring is allowed because in almost all
          cases there will be no problem. However, the consistency can be
          violated in the rare case when package <code>C.q</code> contains
          classes that are also in package <code>B.q</code>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Mutable Exports</emphasis> - The feature of
          <code>visibility:=reexport</code> that the export signature of the
          requiring bundle can unexpectedly change depending on the export
          signature of the required bundle.</para>
        </listitem>

        <listitem>
          <para><emphasis>Shadowing</emphasis> - The classes in the requiring
          bundle that are shadowed by those in a required bundle depend on the
          export signature of the required bundle and the classes the required
          bundle contains. (By contrast, Import-Package, except with
          <code>resolution:=optional</code>, shadows whole packages regardless
          of the exporter.)</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section xml:id="framework.module.fragmentbundles">
    <title>Fragment Bundles</title>

    <para>Fragments are bundles that can be <emphasis>attached</emphasis> to
    one or more <emphasis>host bundles</emphasis> by the Framework. Attaching
    is done as part of resolving: the Framework appends the relevant
    definitions of the fragment bundles to the host's definitions before the
    host is resolved. Fragments are therefore treated as part of the host,
    including any permitted headers; they must not have their own class loader
    though fragments must have their own Protection Domain.</para>

    <para>Fragments can be attached to multiple hosts with the same symbolic
    name but different versions. If multiple fragments with the same symbolic
    name match the same host, then the Framework must only select one
    fragment, this must be the fragment with the highest version.</para>

    <para>A key use case for fragments is providing translation files for
    different locales. This allows the translation files to be treated and
    shipped independently from the main application bundle.</para>

    <para>When an attached fragment is updated, the content of the previous
    fragment must remain attached to its host bundles. The new content of the
    updated fragment must not be allowed to attach to the host bundles until
    the Framework is restarted or the host bundle is refreshed. During this
    time, an attached fragment will have two versions: the old version,
    attached to the old version of the host, and a new fragment bundle that
    can get attached to a new version or to a different host bundle. The exact
    configuration can be discovered with the <xref linkend="framework.wiring"/>.</para>

    <para>When attaching a fragment bundle to a host bundle the Framework must
    perform the following steps:</para>

    <orderedlist>
      <listitem>
        <para>Append the import definitions for the Fragment bundle that do
        not <emphasis>conflict</emphasis> with an import definition of the
        host to the import definitions of the host bundle. A Fragment can
        provide an import statement for a private package of the host. The
        private package in the host is hidden in that case.</para>
      </listitem>

      <listitem>
        <para>Append the Require-Bundle entries of the fragment bundle that do
        not conflict with a Require-Bundle entry of the host to the
        Require-Bundle entries of the host bundle.</para>
      </listitem>

      <listitem>
        <para>Append the export definitions of a Fragment bundle to the export
        definitions of the host bundle unless the exact definition (directives
        and attributes must match) is already present in the host. Fragment
        bundles can therefore add additional exports for the same package
        name.</para>
      </listitem>

      <listitem>
        <para>Append the Provide-Capability clauses of the fragment to the
        Provide-Capability clauses of the host</para>
      </listitem>

      <listitem>
        <para>Append the Require-Capability clauses of the fragment to the
        Require-Capability clauses of the host</para>
      </listitem>
    </orderedlist>

    <para>A host and a fragment conflict when they cannot resolve to provide a
    consistent class space. If a conflict is found, the Fragment bundle is not
    attached to the host bundle.</para>

    <para>A Fragment bundle must enter the resolved state only if it has been
    successfully attached to at least one host bundle.</para>

    <para>During runtime, the fragment's JAR is searched after the host's
    bundle class path as described in <xref linkend="i3076126"/>.</para>

    <para>A Fragment bundle can not be required by another bundle with the
    Require-Bundle header.</para>

    <section xml:id="framework.module.fragmenthost">
      <title>Fragment-Host</title>

      <para>The Fragment-Host manifest header links the fragment to its
      potential hosts. It must conform to the following syntax:</para>

      <programlisting>Fragment-Host       ::= bundle-description
bundle-description  ::= symbolic-name
                            ( ';' parameter )* // See <xref linkend="framework.general.syntax" xrefstyle="template:%n"/></programlisting>

      <para>The following directives are architected by the Framework for
      Fragment-Host:</para>

      <itemizedlist>
        <listitem>
          <para><code>extension</code> - Indicates this extension is a system
          or boot class path extension. It is only applicable when the
          Fragment-Host is the System Bundle. This is discussed in <xref linkend="framework.module.extensionbundles"/>. The following values
          are supported:</para>

          <itemizedlist>
            <listitem>
              <para><code>framework</code> - The fragment bundle is a
              Framework extension bundle.</para>
            </listitem>
          </itemizedlist>

          <para>The fragment must be the bundle symbolic name of the
          implementation specific system bundle or the alias
          <code>system.bundle</code>. The Framework should fail to install an
          extension bundle when the bundle symbolic name is not referring to
          the system bundle.</para>
        </listitem>
      </itemizedlist>

      <para>The following attributes are architected by the Framework for
      Fragment-Host:</para>

      <itemizedlist>
        <listitem>
          <para><code>bundle-version</code> - The version range to select the
          host bundle. If a range is used, then the fragment can attach to
          multiple hosts. See <xref linkend="framework.module-semantic.versioning"/>. The default value
          is <code>[0.0.0,</code><phrase role="symbol">∞</phrase><code>)</code>.</para>
        </listitem>
      </itemizedlist>

      <para>The Fragment-Host header can assert arbitrary attributes that must
      be matched before a host is eligible.</para>

      <para>When a fragment bundle is attached to a host bundle, it logically
      becomes part of it. All classes and resources within the fragment bundle
      must be loaded using the class loader (or <code>Bunde</code> object) of
      its host bundle. The fragment bundles of a host bundle must be attached
      to a host bundle in the order that the fragment bundles are installed,
      which is in ascending bundle ID order. If an error occurs during the
      attachment of a fragment bundle then the fragment bundle must not be
      attached to the host. A fragment bundle must enter the resolved state
      only if it has been successfully attached to one or more host
      bundles.</para>

      <para>In order for a host bundle to allow fragments to attach, the host
      bundle must have <code>BundlePermission[&lt;bundle symbolic
      name&gt;,HOST]</code>. In order to be allowed to attach to a host
      bundle, a fragment bundle must have <code>BundlePermission[&lt;bundle
      symbolic name&gt;,FRAGMENT]</code>.</para>
    </section>

    <section xml:id="i3076126">
      <title>Fragments During Runtime</title>

      <para>All class or resource loading of a fragment is handled through the
      host's class loader or <code>Bundle</code> object, a fragment must never
      have its own class loader, it therefore fails the class and resource
      loading methods of the <code>Bundle</code> object. Fragment bundles are
      treated as if they are an intrinsic part of their hosts.</para>

      <para>Though a fragment bundle does not have its own class loader, it
      still must have a separate Protection Domain when it is not an extension
      fragment. Each fragment can have its own permissions linked to the
      fragment bundle's location and signer.</para>

      <para>A host bundle's class path is searched before a fragment's class
      path. This implies that packages can be split over the host and any of
      its fragments. Searching the fragments must be done in ascending bundle
      ID order. This is the order that the fragment bundles were
      installed.</para>

      <figure xml:id="i3076132">
        <title>Resource/class searching with fragments</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.455in" contentwidth="7.418in" fileref="fragment-resource-searching.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para><xref linkend="i3076132"/> shows a setup with two fragments.
      Bundle <code>B</code> is installed before bundle <code>C</code> and both
      bundle <code>B</code> and bundle <code>C</code> attach to bundle
      <code>A</code>. The following table shows where different packages
      originate in this setup. Note that the order of the append (&gt;) is
      significant.</para>

      <table>
        <title>Effect of fragments on searching</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="2.5*"/>

          <thead>
            <row>
              <entry>Package Requested</entry>

              <entry>From</entry>

              <entry>Remark</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>p</code></entry>

              <entry><code>A.p &gt; B.p</code></entry>

              <entry><para>Bundle <code>A</code> exports package
              <code>p</code>, therefore, it will search its class path for
              <code>p</code>. This class path consists of the JAR and then its
              Fragment bundles.</para></entry>
            </row>

            <row>
              <entry><code>q</code></entry>

              <entry><code>D.q</code></entry>

              <entry><para>The import does not handle split packages and
              package <code>q</code> is imported from bundle <code>D</code>.
              Therefore, <code>C.q</code> is not found.</para></entry>
            </row>

            <row>
              <entry><code>r</code></entry>

              <entry><code>A.r &gt; B.r</code></entry>

              <entry><para>Package <code>r</code> is not imported and
              therefore comes from the class path.</para></entry>
            </row>

            <row>
              <entry><code>s</code></entry>

              <entry><code>C.s</code></entry>

              <entry><para/></entry>
            </row>

            <row>
              <entry><code>t</code></entry>

              <entry><code>B.t &gt; C.t</code></entry>

              <entry><para/></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>In the example above, if package <code>p</code> had been imported
      from bundle <code>D</code>, the table would have looked quite different.
      Package p would have come from bundle <code>D</code>, and bundle
      <code>A</code>'s own contents as well as the contents of bundle
      <code>B</code> would have been ignored.</para>

      <para>If package <code>q</code> had bundle <code>D</code>, then the
      class path would have to be searched, and <code>A.q</code> would have
      consisted of <code>A.q &gt; C.q</code>.</para>

      <para>Fragments must remain attached to a host as long as the host
      remains resolved. When a host bundle becomes unresolved, then all its
      attached Fragment bundles must be detached from the host bundle. When a
      fragment bundle becomes unresolved the Framework must:</para>

      <itemizedlist>
        <listitem>
          <para>Detach it from the host</para>
        </listitem>

        <listitem>
          <para>Re-resolve the host bundles</para>
        </listitem>

        <listitem>
          <para>Reattach the remaining attached fragment bundles.</para>
        </listitem>
      </itemizedlist>

      <para>A Fragment bundle can become unresolved by calling the <xref linkend="org.osgi.framework.wiring.FrameworkWiring.refreshBundles-Collection-FrameworkListener...-" xrefstyle="hyperlink"/> method.</para>
    </section>

    <section>
      <title>Illegal Manifest Header for Fragment Bundles</title>

      <para>The following list contains the headers that must not be used in a
      fragment bundle:</para>

      <itemizedlist>
        <listitem>
          <para><code>Bundle-Activator</code></para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section xml:id="framework.module.extensionbundles">
    <title>Extension Bundles</title>

    <para>Extension bundles can deliver optional parts of the Framework
    implementation. The contents of extension bundles cannot be provided by
    the normal bundles because they need to be loaded by the framework
    implementation.</para>

    <para>Framework extensions are necessary to provide implementation aspects
    of the Framework. For example, a Framework vendor could supply the
    optional services like Permission Admin service and Start Level API with
    Framework extension bundles.</para>

    <para>An extension bundle should use the bundle symbolic name of the
    implementation system bundle, or it can use the alias of the system
    bundle, which is <code>system.bundle</code>.</para>

    <para>The following example uses the Fragment-Host manifest header to
    specify an extension bundle for any Framework implementation.</para>

    <programlisting>Fragment-Host: system.bundle</programlisting>

    <para>The following example uses the Fragment-Host manifest header to
    specify an extension bundle for a specific Framework
    implementation.</para>

    <programlisting>Fragment-Host: com.acme.impl.framework</programlisting>

    <para>The following describe the life cycle of an extension bundle:</para>

    <orderedlist>
      <listitem>
        <para>When an extension bundle is installed it enters the
        <code>INSTALLED</code> state.</para>
      </listitem>

      <listitem>
        <para>The extension bundle is allowed to enter the
        <code>RESOLVED</code> state at the frameworks discretion. For example,
        a framework may choose to immediately resolve the extension after it
        has entered the <code>INSTALLED</code> state. If all requirements of
        an extension bundle are satisfied then resolving the extension bundle
        must not require a framework restart.</para>
      </listitem>

      <listitem>
        <para>If a <code>RESOLVED</code> extension bundle is refreshed then
        the framework must shutdown and the framework must be re-launched. In
        this case a Framework Event is fired of type <xref linkend="org.osgi.framework.FrameworkEvent.STOPPED_SYSTEM_REFRESHED" xrefstyle="hyperlink"/>.</para>
      </listitem>

      <listitem>
        <para>When a <code>RESOLVED</code> extension bundle is updated or
        <code>UNINSTALLED</code>, it is not allowed to re-enter the
        <code>RESOLVED</code> state. If the extension bundle is refreshed then
        the Framework must shutdown and the framework must be re-launched. In
        this case a Framework Event is fired of type <xref linkend="org.osgi.framework.FrameworkEvent.STOPPED_SYSTEM_REFRESHED" xrefstyle="hyperlink"/>.</para>
      </listitem>
    </orderedlist>

    <para>It is valid to update an extension bundle to a bundle of another
    type. If the old extension bundle is resolved then it must be attached as
    a fragment to the system bundle. When this bundle is updated the old
    content of the bundle must remain attached to the system bundle until the
    system bundle is refreshed or the extension bundle is refreshed (using the
    Wiring API). This must initiate and Framework shutdown and restart. When
    the framework comes back up the new content of the bundle may be
    resolved.</para>

    <para>All Bundle events should be dispatched for extension bundles as for
    ordinary bundles.</para>

    <section>
      <title>Illegal Manifest Headers for Extension Bundles</title>

      <para>An extension bundle must throw a Bundle Exception if it is
      installed or updated and it specifies any of the following
      headers.</para>

      <itemizedlist>
        <listitem>
          <para><code>Require-Bundle</code></para>
        </listitem>

        <listitem>
          <para><code>Bundle-NativeCode</code></para>
        </listitem>

        <listitem>
          <para><code>DynamicImport-Package</code></para>
        </listitem>

        <listitem>
          <para><code>Bundle-Activator</code></para>
        </listitem>
      </itemizedlist>

      <para>Extension bundles are permitted to specify an Export-Package
      header. Any exported packages specified by an extension bundle must be
      hosted (exported) by the System Bundle when the extension bundle is
      resolved.</para>

      <para>Extension bundles are permitted to specify Import-Package and
      Require-Capability headers to declare dependencies on packages and
      capabilities.</para>
    </section>

    <section>
      <title>Resolving Extensions</title>

      <para>Extension bundles may specify requirements on packages
      (Import-Package) and capabilities (Require-Capability). An extension
      bundle is allowed to become resolved when all of its mandatory
      requirements are wired to valid packages or capabilities.</para>

      <para>Extension bundle requirements may only be wired to packages and
      capabilities provided by the system bundle or another extension bundle
      that is also attached to the system bundle. All other capabilities are
      considered invalid for resolving an extension bundle. This ensures that
      the system bundle wiring never hosts a requirement from an extension
      bundle which is wired to a capability hosted by another bundle other
      than the system bundle.</para>
    </section>

    <section xml:id="framework.module.extensionClassPath">
      <title>Class Path Treatment</title>

      <para>A extension bundle's JAR is appended to the class path of the
      Framework. Extension bundles that are resolved together must have their
      JAR appended in the order in which the extension bundles are installed:
      that is, ascending bundle ID order.</para>
    </section>

    <section xml:id="framework.module.extensionActivator">
      <title>Extension Bundle Activator</title>

      <para>A extension may hook into the Framework initialization and
      shutdown process by specifying an Extension Bundle Activator. The <xref linkend="org.osgi.framework.BundleActivator" xrefstyle="hyperlink"/>
      interface defines methods that the Framework invokes when the Framework
      is initialized and shutdown.</para>

      <para>To inform the OSGi environment of a fully qualified class name
      serving as its Extension Bundle Activator, a framework extension
      developer must declare an <code>ExtensionBundle-Activator</code>
      manifest header in the framework extension bundle's manifest file. The
      following is an example of an ExtensionBundle-Activator:</para>

      <programlisting>ExtensionBundle-Activator: com.acme.Activator</programlisting>

      <para>The class acting as an Extension Bundle Activator must implement
      the <code>BundleActivator</code> interface, be declared public, and have
      a public default constructor so an instance of it may be created with
      <code>Class.newInstance</code>.</para>

      <para>Supplying an Extension Bundle Activator is optional and only valid
      for Extension Bundles. For normal Bundles and Fragments, the
      <code>ExtensionBundle-Activator</code> must be ignored.</para>

      <section>
        <title>Framework Initialization and Shutdown</title>

        <para>An Extension Bundle Activator allows a framework extension to
        hook into the Framework initialization and shutdown process. <xref linkend="framework.lifecycle.initializing"/> describes how the
        <code>start</code> method for Extension Bundle Activators is called
        during Framework initialization. <xref linkend="framework.lifecycle.stopping"/> describes how the
        <code>stop</code> method for Extension Bundle Activators is called
        during Framework shutdown.</para>
      </section>

      <section>
        <title>Installing</title>

        <para>When an extension bundle is installed, the Framework must allow
        the extension to become resolved dynamically, without a Framework
        restart. When an extension bundle is resolved dynamically after
        Framework initialization, then the Extension Bundle Activator start
        method must be called as soon as the extension bundle is resolved.
        This must happen before the Bundle Event of type <code>RESOLVED</code>
        is fired for the extension bundle.</para>
      </section>

      <section>
        <title>Update and Uninstall</title>

        <para>Unlike normal bundles, updating or uninstalling an extension
        bundle does not take effect until the Framework is shutdown and
        restarted. The original content of the extension bundle must remain
        attached to the system bundle and the Extension Bundle Activator must
        not have its stop method called until the Framework is
        shutdown.</para>
      </section>
    </section>

    <section>
      <title>Support Properties</title>

      <para>Frameworks must implement fragments, require bundle, and
      extensions. They must therefore set the following properties to
      <code>true</code>.</para>

      <itemizedlist>
        <listitem>
          <para><code>org.osgi.supports.framework.requirebundle</code></para>
        </listitem>

        <listitem>
          <para><code>org.osgi.supports.framework.fragments</code></para>
        </listitem>

        <listitem>
          <para><code>org.osgi.supports.framework.extension</code></para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section>
    <title>Security</title>

    <section>
      <title>Extension Bundles</title>

      <para>In an environment that has Java security enabled the Framework
      must perform an additional security check before allowing an extension
      bundle to be installed. In order for an extension bundle to successfully
      install, the Framework must check that the extension bundle has All
      Permission assigned to it. This means that the permissions of an
      extension bundle must be setup before the extension bundle is
      installed.</para>

      <para>All Permission must be granted to extension bundles because they
      will be loaded under the Protection Domain of either the boot class path
      or the Framework implementation. Both of these Protection Domains have
      All Permission granted to them. Attempting to install an extension
      bundle that has not already been granted All Permission must result in a
      Bundle Exception.</para>

      <para>The installer of an extension bundle must have
      <code>AdminPermission[&lt;extension
      bundle&gt;,EXTENSIONLIFECYCLE]</code> to install an extension
      bundle.</para>
    </section>

    <section xml:id="i3174729">
      <title>Bundle Permission</title>

      <para>Most package sharing permissions are based on Package Permission.
      However, fragments and required bundles use the bundle symbolic name to
      handle sharing. The Bundle Permission is used to control this type of
      package sharing.</para>

      <para>The name parameter of the Bundle Permission is a bundle symbolic
      name. The symbolic name is used as the identifier for the
      <emphasis>target bundle</emphasis>. A wild card (<code>".*"
      \u002E,\u002A</code>) is permitted at the end of the name.</para>

      <para>For example, for fragment bundle A to attach to its host bundle
      <code>B</code> then fragment bundle A requires
      <code>BundlePermission("B", "fragment")</code> so that A is permitted to
      target host bundle <code>B</code>. The direction of the actions is
      depicted in <xref linkend="i2970717"/>.</para>

      <figure xml:id="i2970717">
        <title>Permissions and bundle sharing</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="0.825in" contentwidth="4.811in" fileref="permissions-bundle-sharing.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The following actions are architected:</para>

      <itemizedlist>
        <listitem>
          <para><code>provide</code> - Permission to provide packages to the
          target bundle.</para>
        </listitem>

        <listitem>
          <para><code>require</code> - Permission to require packages from the
          target bundle.</para>
        </listitem>

        <listitem>
          <para><code>host</code> - Permission to attach to the target
          fragment bundle.</para>
        </listitem>

        <listitem>
          <para><code>fragment</code> - Permission to attach as a fragment to
          the target host bundle.</para>
        </listitem>
      </itemizedlist>

      <para>When a fragment contains a Require-Bundle header, the Framework
      must check the permission against the domain of the fragment.</para>
    </section>

    <section xml:id="i3119557">
      <title>Package Permission</title>

      <para>Bundles can only import and export packages for which they have
      the required permission. A <code>PackagePermission</code> must be valid
      across all versions of a package.</para>

      <para>A <code>PackagePermission</code> has two parameters:</para>

      <itemizedlist>
        <listitem>
          <para>The name, either the name of the target package (with a
          possible wildcard character at the end) or a filter expression that
          can verify the exporting bundle. A filter expression can test for
          the package name with the <code>package.name</code> key. A filter
          can only be used for an <code>IMPORT</code> action. Filters are
          described in <xref linkend="framework.security.filterbasedpermissions"/>.</para>
        </listitem>

        <listitem>
          <para>The action, either <code>IMPORT</code> or
          <code>EXPORTONLY</code>.</para>
        </listitem>
      </itemizedlist>

      <para>For example, the following Package Permission permits to import
      any package from a bundle downloaded from ACME:</para>

      <programlisting>PackagePermission("(location=http://www.acme.com/*",IMPORT)</programlisting>

      <para>When a fragment adds imports and exports to the host, the
      framework must check the protection domain of the fragment and not of
      the related host.</para>
    </section>

    <section xml:id="i3188274">
      <title>Resource Permissions</title>

      <para>A Framework must always give a bundle the <code>RESOURCE,
      METADATA, and CLASS AdminPermission</code> actions to access the
      resources contained within:</para>

      <itemizedlist>
        <listitem>
          <para>Itself</para>
        </listitem>

        <listitem>
          <para>Any attached fragments</para>
        </listitem>

        <listitem>
          <para>Any resources from imported packages</para>
        </listitem>
      </itemizedlist>

      <para>A resource in a bundle may also be accessed by using certain
      methods on <code>Bundle</code>. The caller of these methods must have
      <code>AdminPermission[bundle, RESOURCE]</code>.</para>

      <para>If the caller does not have the necessary permission, a resource
      is not accessible and <code>null</code> must be returned. Otherwise, a
      <code>URL</code> object to the resource must be returned. These URLs are
      called <emphasis>bundle resource URLs</emphasis>. Once the
      <code>URL</code> object is returned, no further permission checks are
      performed when the contents of the resource are accessed. The
      <code>URL</code> object must use a scheme defined by the Framework
      implementation.</para>

      <para>Bundle resource URLs are normally created by the Framework,
      however, in certain cases bundles need to manipulate the URL to find
      related resources. For example, a URL can be constructed to a resource
      that is in the same directory as a given resource.</para>

      <para>URLs that are not constructed by the Framework must follow
      slightly different security rules due to the design of the
      <code>java.net.URL</code> class. Not all constructors of the URL class
      interact with the URL Stream Handler classes (the implementation
      specific part). Other constructors call at least the
      <code>parseURL</code> method in the URL Stream Handler where the
      security check can take place. This design makes it impossible for the
      Framework check the permissions during construction of a bundle resource
      URL.</para>

      <para>The following constructors use the <code>parseURL</code> method
      and are therefore checked when a bundle resource URL is
      constructed.</para>

      <programlisting>URL(String spec)
URL(URL context, String spec)
URL(URL context, String spec, URLStreamHandler handler)</programlisting>

      <para>When one of these constructors is called for a bundle resource
      URL, the implementation of the Framework must check the caller for the
      necessary permissions in the <code>parseURL</code> method. If the caller
      does not have the necessary permissions then the <code>parseURL</code>
      method must throw a Security Exception. This will cause a Malformed URL
      Exception to be thrown by the URL constructor. If the caller has the
      necessary permissions, then the URL object is setup to access the bundle
      resource without further checks.</para>

      <para>The following java.net.URL constructors do not call the
      <code>parseURL</code> method in the URL Stream Handler, making it
      impossible for the Framework to verify the permission during
      construction.</para>

      <programlisting>URL(String protocol, String host, int port,String file)
URL(String protocol, String host, int port, String file, URLStreamHandlerhandler)
URL(String protocol, String host, String file)</programlisting>

      <para>Bundle resource URLs that are created with these constructors
      cannot perform the permission check during creation and must therefore
      delay the permission check. When the content of the URL is accessed, the
      Framework must throw a Security Exception if the caller does not have
      <code>AdminPermission[bundle, RESOURCE]</code> for the bundle referenced
      by the URL.</para>
    </section>

    <section>
      <title>Capability Permission</title>

      <para>The Capability Permission provides a means to limit access to
      certain Capabilities when security is on. A Capability Permission is a
      Filter based Permission, as described in <xref linkend="framework.security.filterbasedpermissions"/>, giving access to
      the following additional property:</para>

      <itemizedlist>
        <listitem>
          <para><code>capability.namespace</code> - The namespace of the
          requirement or provided capability.</para>
        </listitem>
      </itemizedlist>

      <para>The filter can also assert information from the
      <emphasis>target</emphasis> bundle. The target bundle is always the
      bundle that provides the capability. This means that a requirer can be
      restricted to receive a capability from a specific bundle.</para>

      <para>Capabilities in a namespace for which the resolving bundle has no
      permission are not available to other bundles. Requirements in a
      namespace for which a bundle has no permission can never be
      satisfied.</para>

      <para>The Capability Permission has the following actions:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.framework.CapabilityPermission.REQUIRE" xrefstyle="hyperlink"/> - Imply permission to require the given
          namespace. The target bundle that can be asserted in the filter is
          the bundle providing the capability.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.framework.CapabilityPermission.PROVIDE" xrefstyle="hyperlink"/> - Imply permission to provide a capability
          in the given namespace, the target bundle is the bundle that is
          checked for the permission.</para>
        </listitem>
      </itemizedlist>

      <para>The Capability Permission has the following constructors:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.framework.CapabilityPermission.CapabilityPermission-String-String-" xrefstyle="hyperlink"/> - Constructor to set the filter and actions.
          This constructor is also used to verify the <code>provide</code>
          action.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.framework.CapabilityPermission.CapabilityPermission-String-Map-Bundle-String-" xrefstyle="hyperlink"/> - Special constructor to verify the
          permission against the namespace. The bundle is the bundle providing
          the capability.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Permission Checks</title>

      <para>Since multiple bundles can export permission classes with the same
      class name, the Framework must make sure that permission checks are
      performed using the correct class. For example, a bundle that calls the
      checkPermission method provides an instance of the Permission
      class:</para>

      <programlisting>void foo(String name) {
   checkPermission(new FooPermission(name,"foo"));
}</programlisting>

      <para>This class of this Permission instance comes from a particular
      source. Permissions can only be tested against instances that come from
      the same source.</para>

      <para>Therefore, the Framework needs to look up permissions based on
      <emphasis>class</emphasis> rather than <emphasis>class name</emphasis>.
      When it needs to instantiate a permission it must use the class of the
      permission being checked to do the instantiation. This is a complication
      for Framework implementers; bundle programmers are not affected.</para>

      <para>Consider the following example:</para>

      <programlisting>  Bundle A
        Import-Package: p
       Export-Package: q
  Bundle B
        Import-Package: p</programlisting>

      <itemizedlist>
        <listitem>
          <para>Bundle <code>A</code> uses a <code>p.FooService</code>. Usage
          of this class checks <code>q.FooPermission</code> whenever one of
          its methods is invoked.</para>
        </listitem>

        <listitem>
          <para>Bundle <code>B</code> has a <code>FooPermission</code> in its
          Protection Domain in a (Conditional) Permission Info object.</para>
        </listitem>

        <listitem>
          <para>Bundle <code>B</code> invokes a method in the
          <code>FooService</code> that was given by bundle
          <code>A</code>.</para>
        </listitem>

        <listitem>
          <para>The <code>FooService</code> calls the
          <code>checkPermission</code> method with a new
          <code>FooPermission</code> instance.</para>
        </listitem>

        <listitem>
          <para>The Framework must use a <code>FooPermission</code> object
          that is from the same class loader as the given
          <code>FooPermission</code> object before it can call the
          <code>implies</code> method. In this case, the
          <code>FooPermission</code> class comes from package
          <code>A.q</code>.</para>
        </listitem>
      </itemizedlist>

      <para>After the permission check, bundle <code>B</code> will have a
      <code>FooPermission</code> instantiated using a class from a package it
      does not import. It is therefore possible that the Framework has to
      instantiate multiple variations of the <code>FooPermission</code> class
      to satisfy the needs of different bundles.</para>
    </section>
  </section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="i3311293"><title>Java Virtual Machine
      Specification</title><biblioid class="uri"><link xlink:href="https://docs.oracle.com/javase/specs/"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i3024180"><title>The Standard for the Format of
      ARPA Internet Text Messages</title>STD 11, RFC 822, UDEL, August
      1982<?line-break?><biblioid class="uri"><link xlink:href="http://www.ietf.org/rfc/rfc822.txt"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i3024184"><title>The Hypertext Transfer Protocol -
      HTTP/1.1</title>RFC 2068 DEC, MIT/LCS, UC Irvine, January
      1997<?line-break?><biblioid class="uri"><link xlink:href="http://www.ietf.org/rfc/rfc2068.txt"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i3024191"><title>Java Language Specification: Java
      SE 8 Edition</title><biblioid class="uri"><link xlink:href="https://docs.oracle.com/javase/specs/jls/se8/html/index.html"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i3024195"><title>A String Representation of LDAP
      Search Filters</title>RFC 1960, UMich, 1996<?line-break?><biblioid class="uri"><link xlink:href="http://www.ietf.org/rfc/rfc1960.txt"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i3024199"><title>Java Security
      Architecture</title><biblioid class="uri"><link xlink:href="https://docs.oracle.com/javase/8/docs/technotes/guides/security/spec/security-spec.doc.html"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i3024203"><title>Java Package Versioning
      Specification</title><biblioid class="uri"><link xlink:href="https://docs.oracle.com/javase/8/docs/technotes/guides/versioning/index.html"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i3024206"><title>Codes for the Representation of
      Names of Languages</title>ISO 639, International Standards
      Organization<?line-break?><biblioid class="uri"><link xlink:href="http://lcweb.loc.gov/standards/iso639-2/langhome.html"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i3100827"><title>Zip File Format</title>The Zip
      file format as defined by the java.util.zip package.</bibliomixed>

      <bibliomixed xml:id="i3024211"><title>Manifest Format</title><biblioid class="uri"><link xlink:href="https://docs.oracle.com/javase/8/docs/technotes/guides/jar/jar.html#JAR_Manifest"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i3024215"><title>W3C EBNF</title><biblioid class="uri"><link xlink:href="http://www.w3c.org/TR/REC-xml#sec-notation"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i3024221"><title>Interval
      (Mathematics)</title><biblioid class="uri"><link xlink:href="https://en.wikipedia.org/wiki/Interval_(mathematics)"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i3086040"><title>RFC 2396 Uniform Resource
      Identifiers URI: Generic Syntax</title><biblioid class="uri"><link xlink:href="http://www.ietf.org/rfc/rfc2396.txt"/></biblioid></bibliomixed>

      <bibliomixed><title>Codes for the Representation of Names of
      Languages</title>ISO 639, International Standards
      Organization<?line-break?><biblioid class="uri"><link xlink:href="http://lcweb.loc.gov/standards/iso639-2/langhome.html"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i3211606"><title>OSGi IANA Mime
      Type</title><biblioid class="uri"><link xlink:href="http://www.iana.org/assignments/media-types/application/vnd.osgi.bundle"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i3215677"><title>OSGi Header
      Registry</title><biblioid class="uri"><link xlink:href="https://docs.osgi.org/reference/bundle-headers.html"/></biblioid></bibliomixed>

      <bibliomixed xml:id="framework.module.namespace-registry"><title>OSGi
      Namespace Registry</title><biblioid class="uri"><link xlink:href="https://docs.osgi.org/reference/capability-namespaces.html"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i3219167"><title>Portable Network Graphics (PNG)
      Specification (Second Edition)</title><biblioid class="uri"><link xlink:href="http://www.w3.org/TR/2003/REC-PNG-20031110/"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i3222193"><title>Open Source
      Initiative</title><biblioid class="uri"><link xlink:href="http://www.opensource.org/"/></biblioid></bibliomixed>

      <bibliomixed><title>OSGi Semantic Versioning</title><biblioid class="uri"><link xlink:href="https://docs.osgi.org/whitepaper/semantic-versioning/"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i3242547"><title>Specification
      References</title><biblioid class="uri"><link xlink:href="https://docs.osgi.org/reference/"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i3246261"><title>Google Android</title><biblioid class="uri"><link xlink:href="http://developer.android.com/"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i3246276"><title>Google App Engine</title><biblioid class="uri"><link xlink:href="https://cloud.google.com/appengine/docs/standard/java"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i3246284"><title>Google Web
      Toolkit</title><biblioid class="uri"><link xlink:href="http://www.gwtproject.org/"/></biblioid></bibliomixed>

      <bibliomixed xml:id="framework.module-spdx.license.list"><title>Software
      Package Data Exchange (SPDX) License List</title><biblioid class="uri"><link xlink:href="https://spdx.org/licenses/"/></biblioid></bibliomixed>

      <bibliomixed xml:id="framework.module-maven.pom.developers"><title>Maven
      POM Reference, Developers</title><biblioid class="uri"><link xlink:href="https://maven.apache.org/pom.html#Developers"/></biblioid></bibliomixed>

      <bibliomixed xml:id="framework.module-maven.pom.scm"><title>Maven POM
      Reference, SCM</title><biblioid class="uri"><link xlink:href="https://maven.apache.org/pom.html#SCM"/></biblioid></bibliomixed>

      <bibliomixed xml:id="framework.module-ref.multireleasejar"><title>Multi-release JAR
      File</title><biblioid class="uri"><link xlink:href="https://docs.oracle.com/javase/9/docs/specs/jar/jar.html#Multi-release"/></biblioid></bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter label="4" revision="$Id: 84d282b6c40ea8095ac478a5b9e4992967ca9764 $" version="5.0" xml:id="framework.lifecycle" xml:base="004/framework.lifecycle.xml">
  <title>Life Cycle Layer</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.framework-version" linkend="org.osgi.framework"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>The Life Cycle Layer provides an API to control the security and
    life cycle operations of bundles. The layer is based on the module and
    security layer.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Complete</emphasis> - The Life Cycle layer must
          implement an API that fully covers the installation, starting,
          stopping, updating, uninstallation, and monitoring of
          bundles.</para>
        </listitem>

        <listitem>
          <para><emphasis>Reflective</emphasis> - The API must provide full
          insight into the actual state of the Framework.</para>
        </listitem>

        <listitem>
          <para><emphasis>Secure</emphasis> - It must be possible to use the
          API in a secure environment using fine-grained permissions. However,
          security must be optional.</para>
        </listitem>

        <listitem>
          <para><emphasis>Manageable</emphasis> - It must be possible to
          manage a OSGi framework remotely.</para>
        </listitem>

        <listitem>
          <para><emphasis>Launching</emphasis> - It must be able to launch an
          implementation of a framework in a standardized way.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Bundle</emphasis> - Represents an installed bundle
          in the Framework.</para>
        </listitem>

        <listitem>
          <para><emphasis>Bundle Context</emphasis> - A bundle's execution
          context within the Framework. The Framework passes this to a Bundle
          Activator when a bundle is started or stopped.</para>
        </listitem>

        <listitem>
          <para><emphasis>Bundle Activator</emphasis> - An interface
          implemented by a class in a bundle that is used to start and stop
          that bundle.</para>
        </listitem>

        <listitem>
          <para><emphasis>Bundle Event</emphasis> - An event that signals a
          life cycle operation on a bundle. This event is received via a
          (Synchronous) Bundle Listener.</para>
        </listitem>

        <listitem>
          <para><emphasis>Framework Event</emphasis> - An event that signals
          an error or Framework state change. The event is received via a
          Framework Listener.</para>
        </listitem>

        <listitem>
          <para><emphasis>Bundle Listener</emphasis> - A listener to Bundle
          Events.</para>
        </listitem>

        <listitem>
          <para><emphasis>Synchronous Bundle Listener</emphasis> - A listener
          to synchronously delivered Bundle Events.</para>
        </listitem>

        <listitem>
          <para><emphasis>Framework Listener</emphasis> - A listener to
          Framework events.</para>
        </listitem>

        <listitem>
          <para><emphasis>Bundle Exception</emphasis> - An Exception thrown
          when Framework operations fail.</para>
        </listitem>

        <listitem>
          <para><emphasis>System Bundle</emphasis> - A bundle that represents
          the Framework.</para>
        </listitem>

        <listitem>
          <para><emphasis>Framework</emphasis> - An interface implemented by
          an object that represents the actual framework. It allows external
          management of a Framework.</para>
        </listitem>

        <listitem>
          <para><emphasis>Framework Factory</emphasis> - An interface
          implemented by Framework providers that allows the creation of a
          framework object.</para>
        </listitem>
      </itemizedlist>

      <figure>
        <title>Class diagram <code>org.osgi.framework</code> Life Cycle
        Layer</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="5.227in" contentwidth="6.190in" fileref="lifecycle-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section xml:id="framework.lifecycle-frameworks">
    <title>Frameworks</title>

    <para>This section outlines how a <emphasis>launcher</emphasis> can launch
    a framework implementation and then manage it, regardless of the
    implementation type of the framework. This allows a launcher to embed an
    OSGi framework without having to provide code that differs between
    different implementations.</para>

    <section>
      <title>Launching and Controlling a Framework</title>

      <para>Code that wants to use one of the OSGi Framework implementations
      must provide the chosen framework implementation on the class path, or
      create a special class loader that loads the code and resources from
      that implementation. How this is achieved, is outside this
      specification.</para>

      <para>A framework implementation must provide a
      <emphasis>factory</emphasis> class. A factory class is an indirection to
      create a framework implementation object. The implementation factory
      class must implement the <xref linkend="org.osgi.framework.launch.FrameworkFactory" xrefstyle="hyperlink"/> interface. The launcher can use the following
      ways to get this class name:</para>

      <itemizedlist>
        <listitem>
          <para>Service Provider Configuration model, see <xref linkend="i3309166"/>,</para>
        </listitem>

        <listitem>
          <para>Get it from some configuration and use
          <code>Class.forName</code>, or</para>
        </listitem>

        <listitem>
          <para>Hardcode the name.</para>
        </listitem>
      </itemizedlist>

      <para>The <xref linkend="org.osgi.framework.launch.FrameworkFactory" xrefstyle="hyperlink"/> interface has a single method: <xref linkend="org.osgi.framework.launch.FrameworkFactory.newFramework-Map-" xrefstyle="hyperlink"/>. The map provides the sole configuration
      properties for the framework object. The result of this method is a
      <emphasis>framework object</emphasis>, this object implements the <xref linkend="org.osgi.framework.launch.Framework" xrefstyle="hyperlink"/>
      interface. The <xref linkend="org.osgi.framework.launch.Framework" xrefstyle="hyperlink"/> interface extends the <xref linkend="org.osgi.framework.Bundle" xrefstyle="hyperlink"/> interface
      and adds methods to handle the issues unique to launching a framework.
      The framework object can be seen as the system bundle, though the
      framework object and the system bundle do not have to be identical,
      implementations are allowed to implement them in different
      objects.</para>

      <para>Before the framework object can be used, the launcher must first
      <emphasis>initialize</emphasis> it by calling the <code>init</code>
      method. After initialization, the framework object can provide a valid
      Bundle Context and has registered any framework services, but any
      installed bundles must be in the <code>INSTALLED</code> state. The
      launcher can then configure the framework object by installing bundles,
      interacting with the framework services, or registering launcher
      services. The launcher can also start bundles, but these bundles will
      not be started until the framework object becomes
      <code>ACTIVE</code>.</para>

      <para>After the framework object is properly configured, the launcher
      can <emphasis>start</emphasis> it by calling the <code>start</code>
      method. The framework object will become ACTIVE, and it will move the
      startlevel (if present) to the configured start level. This can then
      resolve and start any installed bundle. After a framework has become
      <code>ACTIVE</code>, it can be stopped from the framework object, or
      through the system bundle.</para>

      <para>The launcher can wait for a framework object to be stopped with
      the <code>waitForStop</code> method. This method will block until the
      framework is completely stopped and return a Framework event indicating
      the cause of the stop. After the framework object has been shutdown, and
      the <code>waitForStop</code> method has returned, all installed bundles
      will be in the <code>INSTALLED</code> state. The same framework object
      can be re-initialized, and started again, any number of times.</para>

      <para>The action diagram in <xref linkend="i3308801"/> shows a typical
      session. A new framework is created and initialized. The launcher then
      gets the Bundle Context, installs a bundle and starts the framework. It
      then gets a service, calls a method and then waits for the framework to
      stop. The service waits some time and calls stop on the System Bundle.
      The dotted lines indicate some non-specified interactions that are
      implementation dependent.</para>

      <figure xml:id="i3308801">
        <title>Action Diagram for Framework Launching</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="3.058in" contentwidth="4.585in" fileref="launching-actions.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>If security is enabled, then the launcher and the framework
      require All Permission. If All Permission is not available, then the
      framework must throw a Security Exception.</para>

      <para>The following code shows how a framework can be launched.</para>

      <programlisting>void launch( String factoryName, File[] bundles)
            throws Exception {
    Map p = new HashMap();
    p.put( "org.osgi.framework.storage",
            System.getProperty("user.home")
        +   File.separator+"osgi");

    FrameworkFactory factory =
        (FrameworkFactory) Class.forName( factoryName )
                                            .newInstance();
    Framework framework = factory.newFramework(p);
    framework.init();

    BundleContext context = framework.getBundleContext();

    for ( File bundle : bundles )
        context.installBundle( bundle.toURL().toString() );

    framework.start();
    framework.waitForStop(0);
}</programlisting>
    </section>

    <section xml:id="framework.lifecycle.launchingproperties">
      <title>Launching Properties</title>

      <para>The <code>Map</code> object given as a parameter to the
      <code>newFramework</code> method provides the <emphasis>configuration
      properties</emphasis> to the framework. This parameter may be
      <code>null</code>, in that case the framework must be started with
      reasonable defaults for the environment it is started in. For example,
      the framework should export the JRE packages as system packages and it
      should store its bundles in an appropriate place. The framework must not
      look in the System properties for configuration properties, the
      specified configuration properties are complete.</para>

      <para>The configuration properties may contain any implementation
      specific properties. The properties in <xref linkend="framework.lifecycle-framework.launching.properties"/> must be
      supported by all conformant frameworks.</para>

      <para>The configuration properties plus any defaults set by the
      framework and the fixed properties set by the framework all together
      form the <emphasis>launching properties</emphasis> for the
      framework.</para>

      <table xml:id="framework.lifecycle-framework.launching.properties">
        <title>Framework Launching Properties</title>

        <tgroup cols="2">
          <colspec colnum="1" colwidth="1.1*"/>

          <colspec colnum="2" colwidth="2*"/>

          <thead>
            <row>
              <entry>Property Name</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><para><code>org.osgi.framework.«</code></para><para><code> bootdelegation</code></para></entry>

              <entry><para>Set the boot delegation mask, see <xref linkend="framework.module.parentdelegation"/>.</para></entry>
            </row>

            <row>
              <entry><para><code>org.osgi.framework.«</code></para><para><code> bsnversion</code></para></entry>

              <entry><para>Allow installation of multiple bundles with the
              same bundle symbolic name or restrict this. The property can
              have the following values:</para><itemizedlist>
                  <listitem>
                    <para><code>single</code> - A combination of equal bundle
                    symbolic name and equal version is unique in the
                    framework. Installing a second bundle with the same bundle
                    symbolic name and version is an error.</para>
                  </listitem>

                  <listitem>
                    <para><code>multiple</code> - The combination of bundle
                    symbolic name and version is not unique in the
                    framework.</para>
                  </listitem>

                  <listitem>
                    <para><code>managed</code> - (Default) Using a Bundle
                    Collision Hook to filter any non-colliding bundles, see
                    <xref linkend="framework.bundlehooks"/>.</para>
                  </listitem>
                </itemizedlist></entry>
            </row>

            <row>
              <entry><para><code>org.osgi.framework.«</code></para><para><code> bundle.parent</code></para></entry>

              <entry><para>This property is used to specify what class loader
              is used for boot delegation. That is, <code>java.*</code> and
              the packages specified on the
              <code>org.osgi.framework.bootdelegation</code>. All other
              packages must be accessed through a wire. </para><para>This
              property can have the following values:</para><itemizedlist>
                  <listitem>
                    <para><code>boot</code> - The boot class loader of the VM.
                    This is the default.</para>
                  </listitem>

                  <listitem>
                    <para><code>app</code> - The application class
                    loader</para>
                  </listitem>

                  <listitem>
                    <para><code>ext</code> - The extension class loader</para>
                  </listitem>

                  <listitem>
                    <para><code>framework</code> - The class loader of the
                    framework</para>
                  </listitem>
                </itemizedlist></entry>
            </row>

            <row>
              <entry><para><code>org.osgi.framework.«</code></para><para><code> command.execpermission</code></para></entry>

              <entry><para>Specifies an optional OS specific command to set
              file permissions on a bundle's native code. This is required on
              some operating systems to use native libraries. For example, on
              a UNIX style OS you could have the following value:
              </para><programlisting>org.osgi.framework.command.execpermission=«
   "chmod +rx ${abspath}"</programlisting><para>The <code>${abspath}</code>
              macro will be substituted for the actual file
              path.</para></entry>
            </row>

            <row>
              <entry><para><code>org.osgi.framework.«</code></para><para><code> executionenvironment</code></para></entry>

              <entry><para>A comma-separated list of provided execution
              environments (EE). All methods of each listed EE must be present
              on the OSGi framework. For example, this property could
              contain:</para><programlisting>CDC-1.1/Foundation-1.1,OSGi/Minimum-1.2</programlisting><para>A
              OSGi framework implementation must provide
              <emphasis>all</emphasis> the signatures that are defined in the
              mentioned EEs. Thus, the execution environment for a specific
              OSGi framework Server must be the combined set of all signatures
              of all EEs in the
              <code>org.osgi.framework.executionenvironment</code>
              property.</para><para>This property is deprecated; its function
              is replaced with
              <code>org.osgi.framework.system.capabilities[.extra]</code>.</para></entry>
            </row>

            <row>
              <entry><code>org.osgi.framework.language</code></entry>

              <entry><para>The language used by the framework for the
              selection of native code. If not set, the framework must provide
              a value. See <xref linkend="i1304871"/> for valid
              values.</para></entry>
            </row>

            <row>
              <entry><para><code>org.osgi.framework.library.«</code></para><para><code> extensions</code></para></entry>

              <entry><para>A comma separated list of additional library file
              extensions that must be used when searching for native code. If
              not set, then only the library name returned by
              <code>System.mapLibraryName(String)</code> will be used. This
              list of extensions is needed for certain operating systems which
              allow more than one extension for native libraries. For example,
              the AIX operating system allows library extensions of
              <code>.a</code> and <code>.so</code>, but
              <code>System.mapLibraryName(String)</code> will only return
              names with the <code>.a</code> extension. For
              example:</para><programlisting>org.osgi.framework.library.extensions= a,so,dll</programlisting></entry>
            </row>

            <row>
              <entry><code>org.osgi.framework.os.name</code></entry>

              <entry><para>The name of the operating system as used in the
              native code clause. If not set, then the framework must provide
              a default value. <xref linkend="framework.module.os-names"/>
              defines a list of operating system names. New operating system
              names are made available on the OSGi web site, see <xref linkend="i3287541"/>. Names should be matched case
              insensitive.</para></entry>
            </row>

            <row>
              <entry><code>org.osgi.framework.os.version</code></entry>

              <entry><para>The version of the operating system as used in the
              native code clause. If not set, then the framework must provide
              a default value. If the operating system reported version does
              not fit the standard version syntax (<emphasis>e.g.</emphasis>
              <code>2.4.32-kwt</code>), then the launcher should define this
              launching property with a valid version value.</para></entry>
            </row>

            <row>
              <entry><code>org.osgi.framework.processor</code></entry>

              <entry><para>The name of the processor as used in the native
              code clause. If not set, then the framework must provide a
              value. <xref linkend="framework.module.processor-names"/>
              defines a list of processor names. New processors are made
              available on the OSGi web site, see <xref linkend="i3287541"/>.
              Names should be matched case insensitive.</para></entry>
            </row>

            <row>
              <entry><code>org.osgi.framework.security</code></entry>

              <entry><para>Specifies the type of security manager the
              framework must use. If not specified then the framework will not
              set the VM security manager. The following type is
              architected:</para><itemizedlist>
                  <listitem>
                    <para><code>osgi</code> - Enables a security manager that
                    supports all security aspects of the OSGi Core
                    specifications (including postponed conditions).</para>
                  </listitem>
                </itemizedlist><para>If specified, and there is a security
              manager already installed, then a SecurityException must be
              thrown when the Framework is initialized. </para><para>For
              example:</para><programlisting>org.osgi.framework.security = osgi</programlisting></entry>
            </row>

            <row>
              <entry><para><code>org.osgi.framework.startlevel.«</code></para><para><code> beginning</code></para></entry>

              <entry><para>Specifies the beginning start level of the
              framework. See <xref linkend="framework.startlevel"/> for more
              information.</para><programlisting>org.osgi.framework.startlevel.beginning = 3</programlisting></entry>
            </row>

            <row>
              <entry><code>org.osgi.framework.storage</code></entry>

              <entry><para>A valid file path in the file system to a
              directory. If the specified directory does not exist then the
              framework must create the directory. If the specified path
              exists, but is not a directory, or if the framework fails to
              create the storage directory, then the framework initialization
              must fail with an exception being thrown. The framework is free
              to use this directory as it sees fit, for example, completely
              erase all files and directories in it. If this property is not
              set, the framework must set this property to a reasonable
              platform default.</para></entry>
            </row>

            <row>
              <entry><para><code>org.osgi.framework.storage.«</code></para><para><code> clean</code></para></entry>

              <entry><para>Specifies if and when the storage area for the
              framework should be cleaned. If no value is specified, the
              framework storage area will not be cleaned. The possible values
              is:</para><itemizedlist>
                  <listitem>
                    <para><code>onFirstInit</code> - The framework storage
                    area will be cleaned before the Framework bundle is
                    initialized for the first time. Subsequent inits, starts
                    or updates of the Framework bundle will not result in
                    cleaning the framework storage area.</para>
                  </listitem>
                </itemizedlist><para>For example:</para><programlisting>org.osgi.framework.storage.clean = onFirstInit</programlisting><para>It
              could seem logical to provide delete on exit and clean at
              initialization. However, restrictions in common Java VM
              implementations make it impossible to provide this functionality
              reliably.</para></entry>
            </row>

            <row>
              <entry><para><code>org.osgi.framework.system.«</code></para><para><code> capabilities</code></para></entry>

              <entry><para>Specifies the capabilities of the environment in
              the grammar specified for the <code>Provide-Capability</code>
              header, see <xref linkend="framework.module.dependencies"/>.
              These capabilities must be provided from the system bundle. If
              this property is not set, the framework must calculate this
              header based on the environment. It should at least set the
              following namespaces:</para><itemizedlist>
                  <listitem>
                    <para><code>osgi.ee</code></para>
                  </listitem>

                  <listitem>
                    <para><code>osgi.native</code></para>
                  </listitem>
                </itemizedlist><para>Deployers should use the
              <code>org.osgi.framework.system.capabilities.extra</code>
              property.</para></entry>
            </row>

            <row>
              <entry><para><code>org.osgi.framework.system.«</code></para><para><code> capabilities.extra</code></para></entry>

              <entry><para>Capabilities defined in this property are added to
              the <code>org.osgi.framework.system.capabilities</code>
              property. The purpose of the extra property is to be set by the
              deployer. The grammar for this property is identical to the
              other capabilities property.</para></entry>
            </row>

            <row>
              <entry><para><code>org.osgi.framework.system.«</code></para><para><code> packages</code></para></entry>

              <entry><para>The packages that must be exported from the System
              Bundle. If not set, the framework must provide a reasonable
              default for the current execution environment. See <xref linkend="framework.module-execution.environment"/>.</para></entry>
            </row>

            <row>
              <entry><para><code>org.osgi.framework.system.«</code></para><para><code> packages.extra</code></para></entry>

              <entry><para>Packages specified in this property are added to
              the <code>org.osgi.framework.system.packages</code> property and
              therefore have the same syntax. This allows the configurator to
              only define the additional packages and leave the standard
              execution environment packages to be defined by the framework.
              For example:</para><programlisting>org.osgi.framework.system.packages.extra=«
   org.acme.foo; version=1.2, org.acme.foo.impl</programlisting></entry>
            </row>

            <row>
              <entry><para><code>org.osgi.framework.trust.«</code></para><para><code> repositories</code></para></entry>

              <entry><para>This property is used to configure trust
              repositories for the framework. The value is path of files. The
              file paths are separated by the <code>pathSeparator</code>
              defined in the <code>File</code> class. Each file path should
              point to a key store. The Framework must support the JKS type
              but can support other key store types. The framework will use
              the key stores as trust repositories to authenticate
              certificates of trusted signers. The key stores must only be
              used as read-only trust repositories to access public keys. The
              keystore must not have a password. For
              example:</para><programlisting>org.osgi.framework.trust.repositories = «
   /var/trust/keystore.jks:~/.cert/certs.jks</programlisting></entry>
            </row>

            <row>
              <entry><para><code>org.osgi.framework.«</code></para><para><code> windowsystem</code></para></entry>

              <entry><para>Provide the name of the current window system. This
              can be used by the native code clause, <xref linkend="framework.module.nativecodealgorithm"/>. If not set,
              the framework should provide a value that depends on the current
              environment.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <table xml:id="framework.module.processor-names">
        <title>Processor Names</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="2*"/>

          <colspec colnum="2" colwidth="3*"/>

          <colspec colnum="3" colwidth="3*"/>

          <thead>
            <row>
              <entry>Name</entry>

              <entry>Aliases</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>68k</code></entry>

              <entry/>

              <entry>Motorola 68000</entry>
            </row>

            <row>
              <entry><code>AArch64</code></entry>

              <entry><code>ARM64</code></entry>

              <entry>64-bit extension of the ARM architecture</entry>
            </row>

            <row>
              <entry><code>ARM</code></entry>

              <entry/>

              <entry><para><emphasis>Intel Strong ARM. Deprecated because it
              does not specify the endianness. See the following two
              rows.</emphasis></para></entry>
            </row>

            <row>
              <entry><code>arm_le</code></entry>

              <entry/>

              <entry>Intel Strong ARM Little Endian mode</entry>
            </row>

            <row>
              <entry><code>arm_be</code></entry>

              <entry/>

              <entry>Intel String ARM Big Endian mode</entry>
            </row>

            <row>
              <entry><code>Alpha</code></entry>

              <entry/>

              <entry>Compaq (ex DEC)</entry>
            </row>

            <row>
              <entry><code>ia64n</code></entry>

              <entry/>

              <entry>Hewlett Packard 32 bit</entry>
            </row>

            <row>
              <entry><code>ia64w</code></entry>

              <entry/>

              <entry>Hewlett Packard 64 bit mode</entry>
            </row>

            <row>
              <entry><code>Ignite</code></entry>

              <entry><code>psc1k</code></entry>

              <entry>PTSC</entry>
            </row>

            <row>
              <entry><code>Mips</code></entry>

              <entry/>

              <entry>SGI</entry>
            </row>

            <row>
              <entry><code>PArisc</code></entry>

              <entry/>

              <entry>Hewlett Packard</entry>
            </row>

            <row>
              <entry><code>PowerPC</code></entry>

              <entry><code>power ppc</code></entry>

              <entry>Motorola/IBM Power PC</entry>
            </row>

            <row>
              <entry><code>PowerPC-64</code></entry>

              <entry><code>ppc64</code></entry>

              <entry>IBM Power PC 64-bit Big Endian mode</entry>
            </row>

            <row>
              <entry><code>PowerPC-64-LE</code></entry>

              <entry><code>ppc64le</code></entry>

              <entry>IBM Power PC 64-bit Little Endian mode</entry>
            </row>

            <row>
              <entry><code>Sh4</code></entry>

              <entry/>

              <entry>Hitachi</entry>
            </row>

            <row>
              <entry><code>Sparc</code></entry>

              <entry/>

              <entry>Sun Microsystems</entry>
            </row>

            <row>
              <entry><code>Sparcv9</code></entry>

              <entry/>

              <entry>Sun Microsystems</entry>
            </row>

            <row>
              <entry><code>S390</code></entry>

              <entry/>

              <entry>IBM Mainframe 31 bit</entry>
            </row>

            <row>
              <entry><code>S390x</code></entry>

              <entry/>

              <entry>IBM Mainframe 64-bit</entry>
            </row>

            <row>
              <entry><code>V850E</code></entry>

              <entry/>

              <entry>NEC V850E</entry>
            </row>

            <row>
              <entry><code>x86</code></entry>

              <entry><code>pentium i386 i486 i586 i686</code></entry>

              <entry>Intel &amp; AMD 32 bit</entry>
            </row>

            <row>
              <entry><code>x86-64</code></entry>

              <entry><code>amd64 em64t x86_64</code></entry>

              <entry>AMD/Intel 64 bit x86 architecture</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <table xml:id="framework.module.os-names">
        <title>Operating System Names</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="2*"/>

          <colspec colnum="2" colwidth="3*"/>

          <colspec colnum="3" colwidth="3*"/>

          <thead>
            <row>
              <entry>Name</entry>

              <entry>Aliases</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>AIX</code></entry>

              <entry/>

              <entry><para>IBM</para></entry>
            </row>

            <row>
              <entry><code>DigitalUnix</code></entry>

              <entry/>

              <entry><para>Compaq</para></entry>
            </row>

            <row>
              <entry><code>Embos</code></entry>

              <entry/>

              <entry><para>Segger Embedded Software Solutions</para></entry>
            </row>

            <row>
              <entry><code>Epoc32</code></entry>

              <entry><code>SymbianOS</code></entry>

              <entry><para>Symbian OS</para></entry>
            </row>

            <row>
              <entry><code>FreeBSD</code></entry>

              <entry/>

              <entry><para>Free BSD</para></entry>
            </row>

            <row>
              <entry><code>HPUX</code></entry>

              <entry><code>hp-ux</code></entry>

              <entry><para>Hewlett Packard</para></entry>
            </row>

            <row>
              <entry><code>IRIX</code></entry>

              <entry/>

              <entry><para>Silicon Graphics</para></entry>
            </row>

            <row>
              <entry><code>Linux</code></entry>

              <entry/>

              <entry><para>Open source</para></entry>
            </row>

            <row>
              <entry><code>MacOS</code></entry>

              <entry><code>"Mac OS"</code></entry>

              <entry><para>Apple</para></entry>
            </row>

            <row>
              <entry><code>MacOSX</code></entry>

              <entry><code>"Mac OS X"</code></entry>

              <entry><para>Apple</para></entry>
            </row>

            <row>
              <entry><code>NetBSD</code></entry>

              <entry/>

              <entry><para>Open source</para></entry>
            </row>

            <row>
              <entry><code>Netware</code></entry>

              <entry/>

              <entry><para>Novell</para></entry>
            </row>

            <row>
              <entry><code>OpenBSD</code></entry>

              <entry/>

              <entry><para>Open source</para></entry>
            </row>

            <row>
              <entry><code>OS2</code></entry>

              <entry><code>OS/2</code></entry>

              <entry><para>IBM</para></entry>
            </row>

            <row>
              <entry><code>QNX</code></entry>

              <entry><code>procnto</code></entry>

              <entry><para>QNX</para></entry>
            </row>

            <row>
              <entry><code>Solaris</code></entry>

              <entry><code>SunOS</code></entry>

              <entry><para>Sun Microsystems</para></entry>
            </row>

            <row>
              <entry><code>VxWorks</code></entry>

              <entry/>

              <entry><para>WindRiver Systems</para></entry>
            </row>

            <row>
              <entry><code>Windows95</code></entry>

              <entry><code>Win95</code> <code>"Windows 95"</code>
              <code>Win32</code></entry>

              <entry><para>Microsoft</para></entry>
            </row>

            <row>
              <entry><code>Windows98</code></entry>

              <entry><code>Win98</code> <code>"Windows 98"</code>
              <code>Win32</code></entry>

              <entry><para>Microsoft</para></entry>
            </row>

            <row>
              <entry><code>WindowsNT</code></entry>

              <entry><code>WinNT</code> <code>"Windows NT"</code>
              <code>"Windows NT (unknown)"</code> <code>Win32</code></entry>

              <entry><para>Microsoft</para></entry>
            </row>

            <row>
              <entry><code>WindowsCE</code></entry>

              <entry><code>WinCE</code> <code>"Windows CE"</code></entry>

              <entry><para>Microsoft</para></entry>
            </row>

            <row>
              <entry><code>Windows2000</code></entry>

              <entry><code>Win2000</code> <code>"Windows 2000"</code>
              <code>Win32</code></entry>

              <entry><para>Microsoft</para></entry>
            </row>

            <row>
              <entry><code>Windows2003</code></entry>

              <entry><code>Win2003</code> <code>"Windows 2003"</code>
              <code>Win32</code> <code>"Windows Server 2003"</code></entry>

              <entry><para>Microsoft</para></entry>
            </row>

            <row>
              <entry><code>WindowsXP</code></entry>

              <entry><code>WinXP</code> <code>"Windows XP"</code>
              <code>Win32</code></entry>

              <entry><para>Microsoft</para></entry>
            </row>

            <row>
              <entry><code>WindowsVista</code></entry>

              <entry><code>WinVista</code> <code>"Windows Vista"</code>
              <code>Win32</code></entry>

              <entry><para>Microsoft</para></entry>
            </row>

            <row>
              <entry><code>Windows7</code></entry>

              <entry><code>Win7</code> <code>"Windows 7"</code>
              <code>Win32</code></entry>

              <entry><para>Microsoft</para></entry>
            </row>

            <row>
              <entry><code>Windows8</code></entry>

              <entry><code>Win8</code> <code>"Windows 8"</code> <code>"Windows
              8.1"</code> <code>"Windows 8.2"</code> <code>"Windows
              8.3"</code> <code>Win32</code></entry>

              <entry><para>Microsoft</para></entry>
            </row>

            <row>
              <entry><code>Windows10</code></entry>

              <entry><code>Win10</code> <code>"Windows 10"</code>
              <code>Win32</code></entry>

              <entry><para>Microsoft</para></entry>
            </row>

            <row>
              <entry><code>WindowsServer2008</code></entry>

              <entry><code>"Windows Server 2008"</code> <code>"Windows
              2008"</code> <code>Windows2008</code> <code>Win2008</code>
              <code>Win32</code></entry>

              <entry><para>Microsoft</para></entry>
            </row>

            <row>
              <entry><code>WindowsServer2008R2</code></entry>

              <entry><code>"Windows Server 2008 R2"</code> <code>"Windows 2008
              R2"</code> <code>Windows2008R2</code> <code>Win2008R2</code>
              <code>Win32</code></entry>

              <entry><para>Microsoft</para></entry>
            </row>

            <row>
              <entry><code>WindowsServer2012</code></entry>

              <entry><code>"Windows Server 2012"</code> <code>"Windows
              2012"</code> <code>Windows2012</code> <code>Win2012</code>
              <code>Win32</code></entry>

              <entry><para>Microsoft</para></entry>
            </row>

            <row>
              <entry><code>WindowsServer2012R2</code></entry>

              <entry><code>"Windows Server 2012 R2"</code> <code>"Windows 2012
              R2"</code> <code>Windows2012R2</code> <code>Win2012R2</code>
              <code>Win32</code></entry>

              <entry><para>Microsoft</para></entry>
            </row>

            <row>
              <entry><code>WindowsServer2015</code></entry>

              <entry><code>"Windows Server 2015"</code> <code>"Windows
              2015"</code> <code>Windows2015</code> <code>Win2015</code>
              <code>Win32</code></entry>

              <entry><para>Microsoft</para></entry>
            </row>

            <row>
              <entry><code>WindowsServer2015R2</code></entry>

              <entry><code>"Windows Server 2015 R2"</code> <code>"Windows 2015
              R2"</code> <code>Windows2015R2</code> <code>Win2015R2</code>
              <code>Win32</code></entry>

              <entry><para>Microsoft</para></entry>
            </row>

            <row>
              <entry><code>WindowsServer2016</code></entry>

              <entry><code>"Windows Server 2016"</code> <code>"Windows
              2016"</code> <code>Windows2016</code> <code>Win2016</code>
              <code>Win32</code></entry>

              <entry><para>Microsoft</para></entry>
            </row>

            <row>
              <entry><code>z/OS</code></entry>

              <entry><code/></entry>

              <entry><para>IBM</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>The properties in the following table are the fixed properties of
      the framework. The values of these properties are established by the
      framework implementation and added to the launching properties. If these
      properties are set in the configuration properties, the framework must
      ignore them.</para>

      <table xml:id="framework.lifecycle-fixed.property.names">
        <title>Fixed Framework Launching Properties</title>

        <tgroup cols="2">
          <colspec colname="col1" colnum="1" colwidth="1*"/>

          <colspec colname="col2" colnum="2" colwidth="2*"/>

          <thead>
            <row>
              <entry>Property name</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>org.osgi.framework.version</code></entry>

              <entry><para>The specification version number implemented by the
              Framework implementation. The specification version number of
              this specification is <xref endterm="org.osgi.framework-version.number" linkend="org.osgi.framework"/>.</para></entry>
            </row>

            <row>
              <entry><code>org.osgi.framework.vendor</code></entry>

              <entry><para>The vendor of the Framework implementation.
              </para></entry>
            </row>

            <row>
              <entry><code>org.osgi.framework.uuid</code></entry>

              <entry><para>Unique id for the framework instance, see <xref linkend="i3324345"/>.</para></entry>
            </row>

            <row>
              <entry><para><code>org.osgi.supports.«</code></para><para><code> framework.extension</code></para></entry>

              <entry><para>Support for framework extensions is mandatory, must
              therefore be set to <code>true</code>, see <xref linkend="framework.module.extensionbundles"/>.</para></entry>
            </row>

            <row>
              <entry><para><code>org.osgi.supports.«</code></para><para><code> framework.fragment</code></para></entry>

              <entry><para>Support for fragment bundles is mandatory, must
              therefore be set to <code>true</code>, see <xref linkend="framework.module.fragmentbundles"/>.</para></entry>
            </row>

            <row>
              <entry><para><code>org.osgi.supports.«</code></para><para><code> framework.requirebundle</code></para></entry>

              <entry><para>Support for Require Bundle is mandatory, must
              therefore be set to <code>true</code>, see <xref linkend="framework.module.requiringbundles"/>.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>All launching properties are available through the <xref linkend="org.osgi.framework.BundleContext.getProperty-String-" xrefstyle="hyperlink"/> method. See <xref linkend="i2068690"/>.</para>
    </section>

    <section>
      <title>Life Cycle of a Framework</title>

      <para>Once the frameworks is created, it must be in the
      <code>INSTALLED</code> state. In this state, the framework is not active
      and there is no valid Bundle Context. From this point on, the framework
      object can go through its life cycle with the following methods.</para>

      <itemizedlist>
        <listitem>
          <para><code>init</code> - If the framework object is not active,
          then this method moves the framework object into the
          <code>STARTING</code> state.</para>
        </listitem>

        <listitem>
          <para><code>start</code> - Ensure that the framework is in the
          <code>ACTIVE</code> state. This method can be called only on the
          framework because there are no bundles running yet.</para>
        </listitem>

        <listitem>
          <para><code>update</code> - Stop the framework. This returns the
          Framework event <xref linkend="org.osgi.framework.FrameworkEvent.STOPPED_UPDATE" xrefstyle="hyperlink"/> to the <code>waitForStop</code> method and
          then restarts the framework to its previous state. The launcher
          should then take the appropriate action and then call the
          <code>waitForStop</code> method again or reboot the VM. The
          <code>update</code> method can be called on the framework or on the
          system bundle. If the framework is not active, this has no
          effect.</para>
        </listitem>

        <listitem>
          <para><code>stop</code> - Move the framework into the
          <code>RESOLVED</code> state via the <code>STOPPING</code> state.
          This will return a Framework <xref linkend="org.osgi.framework.FrameworkEvent.STOPPED" xrefstyle="hyperlink"/> event from the <code>waitForStop</code>
          method. The Framework's Bundle Context is no longer valid. The
          framework must be initialized again to get a new, valid Bundle
          Context. The <code>stop</code> method can be called on the framework
          or on the system bundle.</para>
        </listitem>

        <listitem>
          <para><code>uninstall</code> - Must not be called, will throw an
          Exception when called.</para>
        </listitem>
      </itemizedlist>

      <para><xref linkend="i3309036" xrefstyle="template:Figure %n on page %p"/> shows how the previous
      methods traverse the state diagram.</para>

      <figure xml:id="i3309036">
        <title>State diagram Framework</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.861in" contentwidth="7.125in" fileref="framework-states.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section xml:id="framework.lifecycle.initializing">
      <title>Initializing the Framework</title>

      <para>Before the framework can be used, it must be
      <emphasis>initialized</emphasis>. Initialization is caused by one of the
      <code>init</code> methods or implicitly by the <code>start</code>
      method. An initialized framework is operational, but none of its bundles
      are active. This is reflected in the <code>STARTING</code> state. As
      long as the framework is in this state, new bundles can be installed
      without any installed code interfering. Existing bundles must all be in
      the <code>INSTALLED</code> or <code>RESOLVED</code> state. In this
      state, the framework will run at start level 0.</para>

      <para>A framework object can be initialized multiple times. After
      initialization:</para>

      <itemizedlist>
        <listitem>
          <para>Event handling is enabled</para>
        </listitem>

        <listitem>
          <para>The security manager is configured</para>
        </listitem>

        <listitem>
          <para>Start level is set to 0</para>
        </listitem>

        <listitem>
          <para>The framework object has a valid Bundle Context</para>
        </listitem>

        <listitem>
          <para>Any installed bundle is in the <code>INSTALLED</code> or
          <code>RESOLVED</code> state</para>
        </listitem>

        <listitem>
          <para>Framework services are available</para>
        </listitem>

        <listitem>
          <para>The framework state is <code>STARTING</code></para>
        </listitem>

        <listitem>
          <para>Has a valid UUID</para>
        </listitem>

        <listitem>
          <para>The system bundle can adapt to any of its defined types</para>
        </listitem>

        <listitem>
          <para>All resolved extension bundle activators <code>start</code>
          methods have been called</para>
        </listitem>
      </itemizedlist>

      <section xml:id="framework.lifecycle.extension.start">
        <title>Start Extension Activators</title>

        <para>The Extension Bundle Activator <code>start</code> method is
        called to inform the framework extension that the
        <code>Framework</code> is initializing, see <xref linkend="framework.module.extensionActivator"/>.</para>

        <para>During the initialization process a framework must attempt to
        resolve all installed Framework Extensions. All resolve operations
        that occur during initialization must be scoped to only include the
        system bundle and the extension bundles. This is necessary to avoid
        resolution operations which change the wiring of normal bundles before
        all of the Extension Bundle Activators have been called.</para>

        <para>The last step during <code>Framework</code> initialization is to
        call the <code>start</code> method of each Extension Bundle Activator
        declared by resolved framework extensions. While calling Extension
        Bundle Activator <code>start</code> methods the framework must be in
        the <code>STARTING</code> state and have a valid bundle context. Any
        exception thrown by an Extension Bundle Activator <code>start</code>
        method must be wrapped in a <code>BundleException</code> and broadcast
        as an <xref linkend="org.osgi.framework.FrameworkEvent.ERROR" xrefstyle="hyperlink"/>.</para>
      </section>

      <section>
        <title>Init Framework Listeners</title>

        <para>The <code>Framework</code> <xref linkend="org.osgi.framework.launch.Framework.init-FrameworkListener...-" xrefstyle="hyperlink"/> method may be called with a list of framework
        listeners. Any framework events broadcast during the initialization
        process must be delivered to the specified framework listeners in the
        order they are specified before returning from the <code>init</code>
        method. After returning from <code>init</code>, the specified
        listeners are no longer notified of framework events. This allows a
        launcher to initialize a <code>Framework</code> with an init framework
        listener in order to detect errors from framework extension
        activators.</para>
      </section>
    </section>

    <section>
      <title>Starting the Framework</title>

      <para>After the framework has been initialized, it can be started with
      the <code>start</code> method. This <code>start</code> method must be
      called on the framework object. The start method moves the framework
      into the <code>ACTIVE</code> state. If the framework was not
      initialized, it must be initialized first.</para>

      <para>In the active state, all installed bundles previously recorded as
      being started must be started as described in the
      <code>Bundle.start</code> method. Any exceptions that occur during
      startup must be wrapped in a <code>BundleException</code> and then
      published as a Framework <code>ERROR</code> event. Bundles, and their
      different states, are discussed in <xref linkend="i2030856"/>. If the
      Framework implements the optional Start Level specification, this
      behavior can be different. See <xref linkend="framework.startlevel"/>.
      Any bundles that specify an activation policy must be treated according
      to their activation policy, see <xref linkend="i3270439"/>.</para>

      <para>After the system bundle enters the <code>ACTIVE</code> state, a
      Framework <code>STARTED</code> event is broadcast.</para>
    </section>

    <section xml:id="framework.lifecycle.stopping">
      <title>Stopping a Framework</title>

      <para>Shutdown can be initiated by stopping the system bundle, covered
      in <xref linkend="i3070515"/> or calling the <code>stop</code> method on
      the framework object. When the framework is shut down, it first enters
      the <code>STOPPING</code> state. All <code>ACTIVE</code> bundles are
      stopped as described in the <code>Bundle.stop</code> method, except that
      their persistently recorded start state is kept unchanged. Any
      exceptions that occur during shutdown must be wrapped in a
      <code>BundleException</code> and then published as a Framework event of
      type <code>FrameworkEvent.ERROR</code>. If the Framework implements the
      optional Start Level specification, this behavior can be different. See
      <xref linkend="framework.startlevel"/>. During the shutdown, bundles
      with a lazy policy must not be activated even when classes are loaded
      from them and they are not yet activated.</para>

      <para>The framework then moves to start level 0, calls <code>stop</code>
      on the Extension Bundle Activators (see <xref linkend="framework.lifecycle.stopExtension"/>), stops event handling and
      releases any resources (like threads, class loaders, etc.) it held. The
      framework then enters the <code>RESOLVED</code> state and destroys the
      Bundle Context. The last action is to notify any threads that are
      waiting in the <code>waitForStop</code> method. The Framework must be
      re-initialized if it needs to be used again.</para>

      <para>After a framework object is stopped and in the resolved state, it
      can be initialized and started again. Framework implementations must
      ensure that holding on to a framework object does not consume
      significant resources.</para>

      <section xml:id="framework.lifecycle.stopExtension">
        <title>Stop Extension Activators</title>

        <para>The Extension Bundle Activator <code>stop</code> method is
        called to inform the framework extension that the
        <code>Framework</code> is shutting down, see <xref linkend="framework.module.extensionActivator"/>. Before disabling
        event handling during the <code>Framework</code> shutdown process, the
        framework must call the <code>stop</code> method for each Extension
        Bundle Activator that was started successfully. While calling
        Extension Bundle Activator <code>stop</code> methods, the framework
        must be in the <code>STOPPING</code> state and have a valid bundle
        context. Any exception thrown by an Extension Bundle Activator
        <code>stop</code> method must be wrapped in a
        <code>BundleException</code> and broadcast as an <xref linkend="org.osgi.framework.FrameworkEvent.ERROR" xrefstyle="hyperlink"/>.</para>

        <para>The framework must guarantee that if the <code>start</code>
        method has executed successfully for an Extension Bundle Activator,
        that same <code>BundleActivator</code> object must be called on its
        <code>stop</code> method when the framework is shutdown. After calling
        the <code>stop</code> method, that particular
        <code>BundleActivator</code> object must never be used again. An
        Extension Bundle Activators that threw an exception during
        <code>start</code> must not be called on shutdown.</para>
      </section>
    </section>

    <section>
      <title>Embedding a Framework</title>

      <para>The launcher is not running as an OSGi bundle, it is a plain Java
      application. However, often this launcher needs to communicate with the
      bundles inside the framework. The launcher can use the Bundle Context of
      the framework object to get and register services. However, it must
      ensure that there is class compatibility between its objects and objects
      from the bundle. A framework will not automatically share packages
      between the launcher code and the bundles. Packages must be explicitly
      exported from the parent class loader. The
      <code>org.osgi.framework.system.packages.extra</code> is specifically
      designed to hold any application packages that needs to be shared
      between the OSGi bundles and the application. Packages in that property
      are added to the system packages of the framework, which are packages
      exported by the system bundle from its parent loader. Care should be
      taken to ensure that all these system packages are visible to the class
      loader that loaded the framework.</para>

      <para>The OSGi Framework is running in a multi-threaded environment.
      After the framework is started, it will start bundles and these bundles
      will be activated. Activated bundles normally start background threads
      or react on events from other bundles. That is, after the
      <code>start</code> method returns, the framework has moved to the
      <code>ACTIVE</code> state and many bundles can be busy on different
      threads. At this point, the framework object can be stopped by the
      launcher through the framework object, or by a bundle through the System
      Bundle's <code>stop</code> method.</para>

      <para>The <xref linkend="org.osgi.framework.launch.Framework.waitForStop-long-" xrefstyle="hyperlink"/> method on the framework object is included to
      handle any launcher cleanup that is required after the framework has
      completely stopped. It blocks until the framework has been completely
      shutdown. It returns one of the following Framework events to indicate
      the reason for stopping:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.framework.FrameworkEvent.STOPPED" xrefstyle="hyperlink"/> - This framework object has been shutdown.
          It can be restarted.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.framework.FrameworkEvent.STOPPED_UPDATE" xrefstyle="hyperlink"/> - This <code>Framework</code> object has
          been updated. The framework will begin to restart. The framework
          will return to its state before it was updated, either
          <code>ACTIVE</code> or <code>STARTING</code>.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.framework.FrameworkEvent.STOPPED_SYSTEM_REFRESHED" xrefstyle="hyperlink"/> - This <code>Framework</code> object has
          been stopped because of a refresh operation on the system bundle
          and the framework requires a new class loader to be used to restart.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.framework.FrameworkEvent.ERROR" xrefstyle="hyperlink"/> - The Framework encountered an error while
          shutting down or an error has occurred that forced the framework to
          shutdown.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.framework.FrameworkEvent.WAIT_TIMEDOUT" xrefstyle="hyperlink"/> - This method has timed out and returned
          before this Framework has stopped.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="i3324345">
      <title>Framework UUID</title>

      <para>Each framework must have a unique identity every time before the
      framework is started. This identity is reflected in the framework
      property:</para>

      <programlisting>org.osgi.framework.uuid</programlisting>

      <para>The value of this property must reflect a string defined in <xref linkend="i3324333"/> with the <code>urn:uuid:</code> prefix. For
      example:</para>

      <programlisting>f81d4fae-7dec-11d0-a765-00a0c91e6bf6</programlisting>

      <para>The Java UUID class is capable of generating such a UUID. However,
      as long as the external representation is maintained frameworks are free
      to create a unique global id in another way.</para>

      <para>Setting this property in the configuration properties has no
      effect, the framework must override it.</para>
    </section>

    <section xml:id="i3321423">
      <title>Daemon Threads</title>

      <para>A Java VM will automatically exit when there are only daemon
      threads running. This can create the situation where the VM exits when
      the Framework uses only daemon threads and all threads created by
      bundles are also daemon threads. A Framework must therefore ensure that
      the VM does not exit when there are still active bundles. One way to
      achieve this, is to keep at least one non-daemon thread alive at all
      times.</para>
    </section>

    <section xml:id="i3309166">
      <title>Java Service Provider Configuration Support</title>

      <para>The Java Service Provider Configuration model, as described in
      <xref linkend="i3300085"/>, provides a way to obtain the name of the
      framework factory by reading a resource in the JAR. In this
      specification, it is assumed that the framework implementation is on the
      class path. The name is obtained by reading the content of the
      configuration resource with the path
      <code>META-INF/services/org.osgi.framework.launch.FrameworkFactory</code>.</para>

      <para>For example, if the <code>com.acme.osgi</code> framework has a
      factory class <code>com.acme.osgi.Factory</code>, then it should have
      the following resource:</para>

      <programlisting>META-INF/services/org.osgi.framework.launch.FrameworkFactory</programlisting>

      <para>And the contents should be:</para>

      <programlisting># ACME Impl. for OSGi framework
com.acme.osgi.Factory</programlisting>

      <para>In contrast with the <xref linkend="i3300085"/>, there must only
      be one class name listed in the resource. However, launchers should be
      aware that the class path could contain multiple resources with the same
      name.</para>

      <para>Java 6 has introduced the <code>java.util.ServiceLoader</code>
      class that simplifies creating objects through these types of factories.
      The following code assumes there is a framework implementation JAR on
      the class path:</para>

      <programlisting>ServiceLoader&lt;FrameworkFactory&gt; sl =
    ServiceLoader.load(FrameworkFactory.class);

Iterator&lt;FrameworkFactory&gt; it = sl.iterator();
if ( it.hasNext() ) {
    Framework fw = it.next().newFramework(null);
    ...
}</programlisting>
    </section>
  </section>

  <section>
    <title>Bundles</title>

    <para>A bundle represents a JAR file that is executed in an OSGi
    Framework. The class loading aspects of this concept were specified in the
    Module Layer. However, the Module Layer does not define how a bundle is
    installed, updated, and uninstalled. These life cycle operations are
    defined here.</para>

    <para>The installation of a bundle can only be performed by another bundle
    or through implementation specific means (for example as a command line
    parameter of the Framework implementation).</para>

    <para>A Bundle is started through its Bundle Activator. Its Bundle
    Activator is identified by the Bundle-Activator manifest header. The given
    class must implement the <code>BundleActivator</code> interface. This
    interface has a <code>start</code> and <code>stop</code> method that is
    used by the bundle programmer to register itself as listener and start any
    necessary threads. The <code>stop</code> method must clean up and stop any
    running threads.</para>

    <para>Upon the activation of a bundle, it receives a Bundle Context. The
    Bundle Context interface's methods can roughly be divided in the following
    categories:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Information</emphasis> - Access to information about
        the rest of the Framework.</para>
      </listitem>

      <listitem>
        <para><emphasis>Life Cycle</emphasis> - The possibility to install
        other bundles.</para>
      </listitem>

      <listitem>
        <para><emphasis>Service Registry</emphasis> - The service registry is
        discussed in <xref linkend="framework.service"/>.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="i2030856">
    <title>The Bundle Object</title>

    <para>For each bundle installed in the OSGi framework, there is an
    associated <xref linkend="org.osgi.framework.Bundle" xrefstyle="hyperlink"/> object. The <code>Bundle</code> object for a
    bundle can be used to manage the bundle's life cycle. This is usually done
    with a Management Agent, which is also a Bundle.</para>

    <section xml:id="framework.lifecycle.bundleidentifiers">
      <title>Bundle Identifiers</title>

      <para>A bundle is identified by a number of names that vary in their
      scope:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Bundle identifier</emphasis> - A <code>long</code>
          that is a Framework assigned unique identifier for the full lifetime
          of a bundle, even if it is updated or the Framework is restarted.
          Its purpose is to distinguish bundles in a Framework. Bundle
          identifiers are assigned in ascending order to bundles when they are
          installed. The method <code>getBundleId()</code> returns a bundle's
          identifier.</para>
        </listitem>

        <listitem>
          <para><emphasis>Bundle location</emphasis> - A name assigned by the
          management agent (Operator) to a bundle during the installation.
          This string is normally interpreted as a URL to the JAR file but
          this is not mandatory. Within a particular Framework, a location
          must be unique. A location string uniquely identifies a bundle and
          must not change when a bundle is updated. The
          <code>getLocation()</code> method retrieves the location of a
          bundle.</para>
        </listitem>

        <listitem>
          <para><emphasis>Bundle Symbolic Name and Bundle Version</emphasis> -
          A name and version assigned by the developer. The combination of
          Bundle Version and Bundle Symbolic Name is a globally unique
          identifier for a bundle. The <code>getSymbolicName()</code> method
          returns the assigned bundle name. The Bundle
          <code>getVersion()</code> method returns the version. Though the
          pair is unique, it is possible to install the same bundle multiple
          times if the <code>org.osgi.framework.bsnversion</code> framework
          launching property is set to <code>managed</code> or
          <code>multiple</code>, see also <xref linkend="framework.bundlehooks.collisionhook"/>.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Bundle State</title>

      <para>A bundle can be in one of the following states:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.framework.Bundle.INSTALLED" xrefstyle="hyperlink"/> - The bundle has been successfully
          installed.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.framework.Bundle.RESOLVED" xrefstyle="hyperlink"/> - All Java classes that the bundle needs are
          available. This state indicates that the bundle is either ready to
          be started or has stopped.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.framework.Bundle.STARTING" xrefstyle="hyperlink"/> - The bundle is being started, the
          <code>BundleActivator.start</code> method will be called, and this
          method has not yet returned. When the bundle has a lazy activation
          policy, the bundle will remain in the <code>STARTING</code> state
          until the bundle is activated. See <xref linkend="i3270439"/> for
          more information.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.framework.Bundle.ACTIVE" xrefstyle="hyperlink"/> - The bundle has been successfully activated
          and is running; its Bundle Activator <code>start</code> method has
          been called and returned.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.framework.Bundle.STOPPING" xrefstyle="hyperlink"/> - The bundle is being stopped. The
          <code>BundleActivator.stop</code> method has been called but the
          <code>stop</code> method has not yet returned.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.framework.Bundle.UNINSTALLED" xrefstyle="hyperlink"/> - The bundle has been uninstalled. It cannot
          move into another state.</para>
        </listitem>
      </itemizedlist>

      <figure xml:id="i3320885">
        <title>State diagram Bundle</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.017in" contentwidth="7.125in" fileref="bundle-states.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>When a bundle is installed, it is stored in the persistent storage
      of the Framework and remains there until it is explicitly uninstalled.
      Whether a bundle has been started or stopped must be recorded in the
      persistent storage of the Framework. A bundle that has been persistently
      recorded as started must be started whenever the Framework starts until
      the bundle is explicitly stopped. The Start Level API influences the
      actual starting and stopping of bundles. See <xref linkend="framework.startlevel"/>.</para>

      <para>The <code>Bundle</code> interface defines a
      <code>getState()</code> method for returning a bundle's state.</para>

      <para>If this specification uses the term <emphasis>active</emphasis> to
      describe a state, then this includes the <code>STARTING</code> and
      <code>STOPPING</code> states.</para>

      <para>Bundle states are expressed as a bit-mask though a bundle can only
      be in one state at any time. The following code sample can be used to
      determine if a bundle is in the <code>STARTING</code>,
      <code>ACTIVE</code>, or <code>STOPPING</code> state:</para>

      <programlisting>if ((b.getState() &amp; (STARTING | ACTIVE| STOPPING)) != 0)
    doActive()</programlisting>
    </section>

    <section xml:id="i1314099">
      <title>Installing Bundles</title>

      <para>The <code>BundleContext</code> interface, which is given to the
      Bundle Activator of a bundle, defines the following methods for
      installing a bundle:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.framework.BundleContext.installBundle-String-" xrefstyle="hyperlink"/> - Installs a bundle from the specified
          location string (which should be a URL).</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.framework.BundleContext.installBundle-String-InputStream-" xrefstyle="hyperlink"/> - Installs a bundle from the specified
          <code>InputStream</code> object.</para>
        </listitem>
      </itemizedlist>

      <para>A bundle must be valid before it is installed, otherwise the
      install must fail. The validity of a bundle is discussed in <xref linkend="framework.module.bundle.validity"/>.</para>

      <para>If the to be installed bundle has a bundle symbolic name and
      version pair that is already installed in the framework then the
      installation is only valid when the
      <code>org.osgi.framework.bsnversion</code> framework launching property
      is set to <code>multiple</code> or <code>managed</code>. See <xref linkend="framework.bundlehooks.collisionhook"/> for more
      information.</para>

      <para>Every bundle is uniquely identified by its location string. If an
      installed bundle is using the specified location, the
      <code>installBundle</code> methods must return the <code>Bundle</code>
      object for that installed bundle and not install a new bundle.</para>

      <para>The Framework must assign a unique bundle identifier that is
      higher than any previous bundle identifier.</para>

      <para>The installation of a bundle in the Framework must be:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Persistent</emphasis> - The bundle must remain
          installed across Framework and Java VM invocations until it is
          explicitly uninstalled.</para>
        </listitem>

        <listitem>
          <para><emphasis>Atomic</emphasis> - The install method must
          completely install the bundle or, if the installation fails, the
          OSGi framework must be left in the same state as it was in before
          the method was called.</para>
        </listitem>
      </itemizedlist>

      <para>Once a bundle has been installed, a <code>Bundle</code> object is
      created and all remaining life cycle operations must be performed upon
      this object. The returned <code>Bundle</code> object can be used to
      start, stop, update, and uninstall the bundle.</para>
    </section>

    <section xml:id="i3270316">
      <title>Resolving Bundles</title>

      <para>A bundle can enter the <code>RESOLVED</code> state when the
      Framework has successfully resolved the bundle's dependencies as
      described in the manifest. These dependencies are described in <xref linkend="framework.module.resolvingprocess"/>.</para>
    </section>

    <section xml:id="i3270328">
      <title>Starting Bundles</title>

      <para>A bundle can be <emphasis>started</emphasis> by calling one of the
      <code>start</code> methods on its <code>Bundle</code> object or the
      Framework can automatically start the bundle if the bundle is
      <emphasis>ready</emphasis> and the <emphasis>autostart
      setting</emphasis> of the bundle indicates that it must be
      started.</para>

      <para>A bundle is <emphasis>ready</emphasis> if following conditions are
      all met:</para>

      <itemizedlist>
        <listitem>
          <para>The bundle can be resolved</para>
        </listitem>

        <listitem>
          <para>If the optional Start Level API is used, then the bundle's
          start level is met.</para>
        </listitem>
      </itemizedlist>

      <para>Once a bundle is started, a bundle must be
      <emphasis>activated</emphasis>, see <xref linkend="i3270394"/>, to give
      control to the bundle so that it can initialize. This activation can
      take place immediately (<emphasis>eager activation</emphasis>), or upon
      the first class load from the bundle (<emphasis>lazy
      activation</emphasis>). A started bundle may need to be automatically
      started again by the framework after a restart or changes in the start
      level. The framework therefore maintains a persistent
      <emphasis>autostart setting</emphasis> for each bundle. This autostart
      setting can have the following values:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Stopped</emphasis> - The bundle should not be
          started.</para>
        </listitem>

        <listitem>
          <para><emphasis>Started with eager activation</emphasis> - The
          bundle must be started once it is ready and it must then be eagerly
          activated.</para>
        </listitem>

        <listitem>
          <para><emphasis>Started with declared activation</emphasis> - The
          bundle must be started once it is ready and it must then be
          activated according to its declared activation policy. See <xref linkend="i3270439"/>.</para>
        </listitem>
      </itemizedlist>

      <para>The <code>Bundle</code> interface defines the
      <code>start(int)</code> method for starting a bundle and controlling the
      autostart setting. The <code>start(int)</code> method takes an integer
      option, the following values have been defined for this option:</para>

      <itemizedlist>
        <listitem>
          <para><code>0</code> - Start the bundle with eager activation and
          set the autostart setting to <emphasis>Started with eager
          activation</emphasis>. If the bundle was already started with the
          lazy activation policy and is awaiting activation, then it must be
          activated immediately.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.framework.Bundle.START_TRANSIENT" xrefstyle="hyperlink"/> - Identical to 0 in behavior, however, the
          autostart setting must <emphasis>not</emphasis> be altered. If the
          bundle can not be started, for example, the bundle is not ready,
          then a Bundle Exception must be thrown.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.framework.Bundle.START_ACTIVATION_POLICY" xrefstyle="hyperlink"/> - Start the bundle using the activation
          policy declared in the manifest's Bundle-ActivationPolicy header and
          set the autostart setting to <emphasis>Started with declared
          activation</emphasis>.</para>
        </listitem>

        <listitem>
          <para><code>START_ACTIVATION_POLICY | START_TRANSIENT</code> - Start
          the bundle with the bundle's declared activation policy but do not
          alter the autostart setting.</para>
        </listitem>
      </itemizedlist>

      <para>The Framework must attempt to resolve the bundle, if not already
      resolved, when trying to start the bundle. If the bundle fails to
      resolve, the start method must throw a <code>BundleException</code>. In
      this case, the bundle's autostart setting must still be set unless
      <code>START_TRANSIENT</code> is used.</para>

      <para>When the start method returns without an exception, the state of
      the bundle will either be <code>ACTIVE</code> or <code>STARTING</code>,
      depending on the declared activation policy and whether it was used. If
      the <code>start</code> method throws an exception, then the bundle will
      not be in either of these states and the <code>stop</code> method will
      not be called for this Bundle Activator instance.</para>

      <para>The <xref linkend="org.osgi.framework.Bundle.start--" xrefstyle="hyperlink"/> method calls <code>start(0)</code>.</para>

      <para>The optional Start Level API influences the actual order of
      starting and stopping of bundles. See <xref linkend="framework.startlevel"/>. Fragment bundles can not be started
      and must cause a Bundle Exception when there is an attempt to start
      them.</para>
    </section>

    <section xml:id="i3270394">
      <title>Activation</title>

      <para>A bundle is activated by calling its Bundle Activator object, if
      one exists. The <xref linkend="org.osgi.framework.BundleActivator" xrefstyle="hyperlink"/> interface defines methods that the Framework
      invokes when it starts and stops the bundle.</para>

      <para>To inform the OSGi environment of the fully qualified class name
      serving as its Bundle Activator, a bundle developer must declare a
      Bundle-Activator manifest header in the bundle's manifest file. The
      Framework must instantiate a new object of this class and cast it to a
      <code>BundleActivator</code> instance. It must then call the
      <code>BundleActivator.start</code> method to start the bundle.</para>

      <para>The following is an example of a Bundle-Activator manifest
      header:</para>

      <programlisting>Bundle-Activator: com.acme.Activator</programlisting>

      <para>A class acting as a Bundle Activator must implement the
      <code>BundleActivator</code> interface, be declared <code>public</code>,
      and have a public default constructor so an instance of it may be
      created with <code>Class.newInstance</code>.</para>

      <para>Supplying a Bundle Activator is optional. For example, a library
      bundle that only exports a number of packages does not need to define a
      Bundle Activator. In addition, other mechanism exists to obtain control
      and get a Bundle Context, like for example the Service Component
      Runtime.</para>

      <para>The <code>BundleActivator</code> interface defines these methods
      for starting and stopping a bundle:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.framework.BundleActivator.start-BundleContext-" xrefstyle="hyperlink"/> - This method can allocate resources that a
          bundle needs, start threads, register services, and more. If this
          method does not register any services, the bundle can register
          services it needs later: for example, in a callback or an external
          event, as long as it is in the <code>ACTIVE</code> state. If the
          <code>start(BundleContext)</code> method throws an exception, the
          Framework must mark the bundle as stopped and send out
          <code>STOPPING</code> and <code>STOPPED</code> events but it must
          not call the Bundle Activator <code>stop(BundleContext)</code>
          method. The start method must therefore be careful to clean up any
          resources it creates in the start method when it throws an
          exception.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.framework.BundleActivator.stop-BundleContext-" xrefstyle="hyperlink"/> - This method must undo all the actions of
          the <code>BundleActivator.start(BundleContext)</code> method.
          However, it is unnecessary to unregister services or Framework
          listeners, because they must be cleaned up by the Framework anyway.
          This method is only called when the bundle has reached the
          <code>ACTIVE</code> state. That is, when the start method has thrown
          exception, the <code>stop</code> method is never called for the same
          instance.</para>
        </listitem>
      </itemizedlist>

      <para xml:id="i3270437">A Bundle Activator must be created when a Bundle
      is started, implying the creation of a class loader. For larger systems,
      this greedy strategy can significantly increase startup times and
      unnecessarily increase the memory footprint. Mechanisms such as the
      Service Component Runtime and activation policies can mitigate these
      problems.</para>

      <para>Fragment bundles must not have a Bundle Activator
      specified.</para>

      <section xml:id="i3270439">
        <title>Activation Policies</title>

        <para>The activation of a bundle can also be deferred to a later time
        from its start using an <emphasis>activation policy</emphasis>. This
        policy is specified in the Bundle-ActivationPolicy header with the
        following syntax:</para>

        <programlisting>Bundle-ActivationPolicy ::= policy ( ';' directive )*
policy ::= 'lazy'</programlisting>

        <para>The only policy defined is the <code>lazy</code> activation
        policy. If no Bundle-ActivationPolicy header is specified, the bundle
        will use eager activation.</para>
      </section>

      <section xml:id="i3270445">
        <title>Lazy Activation Policy</title>

        <para>A <code>lazy</code> activation policy indicates that the bundle,
        once started, must not be activated until it receives the first
        request to load a class. This request can originate either during
        normal class loading or via the Bundle <code>loadClass</code> method.
        Resource loading and a request for a class that is re-directed to
        another bundle must not trigger the activation. The first request is
        relative to the bundle class loader, a bundle will not be lazily
        started if it is stopped and then started again without being
        refreshed in the mean time.</para>

        <para>This change from the default eager activation policy is
        reflected in the state of the bundle and its events. When a bundle is
        started using a lazy activation policy, the following steps must be
        taken:</para>

        <itemizedlist>
          <listitem>
            <para>A Bundle Context is created for the bundle.</para>
          </listitem>

          <listitem>
            <para>The bundle state is moved to the <xref linkend="org.osgi.framework.Bundle.STARTING" xrefstyle="hyperlink"/> state.</para>
          </listitem>

          <listitem>
            <para>The <xref linkend="org.osgi.framework.BundleEvent.LAZY_ACTIVATION" xrefstyle="hyperlink"/> event is fired.</para>
          </listitem>

          <listitem>
            <para>The system waits for a class load from the bundle to
            occur.</para>
          </listitem>

          <listitem>
            <para>The normal <xref linkend="org.osgi.framework.BundleEvent.STARTING" xrefstyle="hyperlink"/> event is fired.</para>
          </listitem>

          <listitem>
            <para>The bundle is activated.</para>
          </listitem>

          <listitem>
            <para>The bundle state is moved to <xref linkend="org.osgi.framework.Bundle.ACTIVE" xrefstyle="hyperlink"/>.</para>
          </listitem>

          <listitem>
            <para>The <xref linkend="org.osgi.framework.BundleEvent.STARTED" xrefstyle="hyperlink"/> event is fired.</para>
          </listitem>
        </itemizedlist>

        <para>If the activation fails because the Bundle Activator
        <code>start</code> method has thrown an exception, the bundle must be
        stopped without calling the Bundle Activator <code>stop</code> method.
        These steps are pictured in a flow chart in <xref linkend="i3270475"/>. This flow chart also shows the difference in
        activation policy of the normal eager activation and the lazy
        activation.</para>

        <figure xml:id="i3270475">
          <title>Starting with eager activation versus lazy activation</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" contentdepth="4.704in" contentwidth="4.975in" fileref="eager-lazy-activation.svg"/>
            </imageobject>
          </mediaobject>
        </figure>

        <para>The <code>lazy</code> activation policy allows a Framework
        implementation to defer the creation of the bundle class loader and
        activation of the bundle until the bundle is first used; potentially
        saving resources and initialization time during startup.</para>

        <para>By default, any class loaded from the bundle can trigger the
        lazy activation, however, resource loads must not trigger the
        activation. The <code>lazy</code> activation policy can define which
        classes cause the activation with the following directives:</para>

        <itemizedlist>
          <listitem>
            <para><code>include</code> - A list of package names that must
            trigger the activation when a class is loaded from any of these
            packages. The default is all package names present in the
            bundle.</para>
          </listitem>

          <listitem>
            <para><code>exclude</code> - A list of package names that must not
            trigger the activation of the bundle when a class is loaded from
            any of these packages. The default is no package names.</para>
          </listitem>
        </itemizedlist>

        <para>For example:</para>

        <programlisting>Bundle-ActivationPolicy: lazy; «
    include:="com.acme.service.base,com.acme.service.help"</programlisting>

        <para>When a class load triggers the lazy activation, the Framework
        must first define the triggering class. This definition can trigger
        additional lazy activations. These activations must be deferred until
        all transitive class loads and defines have finished. Thereafter, the
        activations must be executed in the reverse order of detection. That
        is, the last detected activation must be executed first. Only after
        all deferred activations are finished must the class load that
        triggered the activation return with the loaded class. If an error
        occurs during this process, it should be reported as a Framework
        <code>ERROR</code> event. However, the class load must succeed
        normally. A bundle that fails its lazy activation should not be
        activated again until the framework is restarted or the bundle is
        explicitly started by calling the <code>Bundle</code> start
        method.</para>
      </section>

      <section xml:id="i3285256">
        <title>Restoring State After Refresh or Update</title>

        <para>The refresh operation, see <xref linkend="framework.wiring.refreshing"/>, and the <code>update</code>
        methods can cause other bundles to be stopped. Started bundles can be
        in the <code>ACTIVE</code> state or waiting to be activated, depending
        on their activation policy. The following rules must be applied when
        restoring the state after an update or refresh:</para>

        <itemizedlist>
          <listitem>
            <para>An <code>ACTIVE</code> or <code>STARTING</code> bundle must
            be started <emphasis>transiently</emphasis> after an update or
            refresh operation to not change its persistent autostart
            state.</para>
          </listitem>

          <listitem>
            <para>If the bundle was in the <code>STARTING</code> state due to
            lazy activation, the bundle's activation policy should be used
            when starting the bundle.</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>

    <section>
      <title>Stopping Bundles</title>

      <para>The <code>Bundle</code> interface defines the
      <code>stop(int)</code> method for stopping a bundle. This calls the stop
      method when the bundle is in the <code>ACTIVE</code> state and sets the
      bundle's state to <code>RESOLVED</code>. The <code>stop(int)</code>
      takes an integer option. The following value has been defined for this
      option:</para>

      <itemizedlist>
        <listitem>
          <para><code>0</code> - If the bundle was activated, then deactivate
          the bundle and sets the autostart setting for this bundle to
          <emphasis>Stopped</emphasis>.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.framework.Bundle.STOP_TRANSIENT" xrefstyle="hyperlink"/> - If the bundle was activated, then
          deactivate the bundle. Does not alter the autostart setting for this
          bundle.</para>
        </listitem>
      </itemizedlist>

      <para>The <code>stop()</code> method calls <code>stop(0)</code>.</para>

      <para>The optional Start Level API influences the actual order of
      starting and stopping of bundles. See <xref linkend="framework.startlevel"/>.</para>

      <para>Attempting to stop a Fragment bundle must result in a Bundle
      Exception.</para>
    </section>

    <section>
      <title>Deactivation</title>

      <para>The <code>BundleActivator</code> interface defines a
      <code>stop(BundleContext)</code> method, which is invoked by the
      Framework to stop a bundle. This method must release any resources
      allocated since activation. All threads associated with the stopping
      bundle should be stopped immediately. The threaded code may no longer
      use Framework-related objects (such as services and
      <code>BundleContext</code> objects) once the stop method returns.</para>

      <para>If the stopping bundle had registered any services or Framework
      listeners during its lifetime, then the Framework must automatically
      unregister all registered services and Framework listeners when the
      bundle is stopped. It is therefore unnecessary from the Framework's
      point of view to unregister any services or Framework listeners in the
      <code>stop</code> method.</para>

      <para>The Framework must guarantee that if a
      <code>BundleActivator</code>. <code>start</code> method has executed
      successfully, that same <code>BundleActivator</code> object must be
      called with its <code>BundleActivator</code>.<code>stop</code> method
      when the bundle is deactivated. After calling the <code>stop</code>
      method, that particular <code>BundleActivator</code> object must never
      be used again.</para>

      <para>Packages exported by a stopped bundle continue to be available to
      other bundles. This continued export implies that other bundles can
      execute code from a stopped bundle, and the designer of a bundle should
      assure that this is not harmful. Exporting interfaces only is one way to
      prevent such unwanted execution when the bundle is not started.
      Generally, to ensure they cannot be executed, interfaces should not
      contain executable code.</para>
    </section>

    <section xml:id="i3284680">
      <title>Updating Bundles</title>

      <para>The <code>Bundle</code> interface defines two methods for updating
      a bundle:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.framework.Bundle.update--" xrefstyle="hyperlink"/> - This method updates a bundle.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.framework.Bundle.update-InputStream-" xrefstyle="hyperlink"/> - This method updates a bundle from the
          specified <code>InputStream</code> object.</para>
        </listitem>
      </itemizedlist>

      <para>The update process supports migration from one revision of a
      bundle to a newer revision of the same bundle. The capabilities provided
      by the new revision must be immediately available to the Framework. If
      the old bundle revision has an <xref linkend="org.osgi.framework.wiring.BundleWiring.isInUse--" xrefstyle="hyperlink"/> bundle wiring then all capabilities provided by
      the old bundle wiring must remain available for existing bundles and
      future resolves until the bundle is refreshed, see <xref linkend="framework.wiring.refreshing"/>, or the Framework is restarted.
      Otherwise the capabilities provided by the old revision must be
      removed.</para>

      <para>After the update operation is complete, the framework must attempt
      to move the bundle to the same state as it was before the operation
      taking the activation policy into account, without changing the
      autostart setting. This is described in more detail in <xref linkend="i3285256"/>.</para>

      <para>An updater of a bundle must have
      <code>AdminPermission[&lt;bundle&gt;,LIFECYCLE]</code> for both the
      installed bundle as well as the new bundle. The parameters of
      <code>AdminPermission</code> are explained in <xref linkend="framework.lifecycle.adminpermission"/>.</para>
    </section>

    <section>
      <title>Uninstalling Bundles</title>

      <para>The <code>Bundle</code> interface defines the
      <code>uninstall()</code> method for uninstalling a bundle from the
      Framework. This method causes the Framework to notify other bundles that
      the bundle is being uninstalled, and sets the bundle's state to
      <code>UNINSTALLED</code>. To whatever extent possible, the Framework
      must remove any resources related to the bundle. This method must always
      uninstall the bundle from the persistent storage of the
      Framework.</para>

      <para>If the uninstalled bundle has one or more revisions with <xref linkend="org.osgi.framework.wiring.BundleWiring.isInUse--" xrefstyle="hyperlink"/> bundle wirings then all capabilities provided by
      the old in use bundle wirings must remain available for existing bundles
      and future resolves until the bundle is refreshed, see <xref linkend="framework.wiring.refreshing"/>, or the Framework is restarted.
      Otherwise the capabilities provided by the old revision must be
      removed.</para>
    </section>

    <section xml:id="framework.lifecycle-lastmodified">
      <title>Detecting Bundle Modifications</title>

      <para>The Bundle object provides a convenient way to detect
      modifications in a bundle. The Framework must keep the time that a
      bundle is modified by any of the life cycle operations or, in the case
      of multi-release JARs, by changing the version of Java platform being
      used. See <xref linkend="framework.module-multireleasejar"/>. The <xref linkend="org.osgi.framework.Bundle.getLastModified--" xrefstyle="hyperlink"/> method will return the last time the bundle was
      effectively modified. This last modified time must be stored
      persistently.</para>

      <para>The method must return the number of milliseconds since midnight
      Jan. 1, 1970 UTC with the condition that a modification must always
      result in a higher value than the previous last modified time of any
      bundle.</para>

      <para>The <xref linkend="org.osgi.framework.Bundle.getLastModified--" xrefstyle="hyperlink"/> method is very useful when a bundle is caching
      resources from another bundle and needs to refresh the cache when the
      other bundle is effectively modified. A modification in the other bundle
      can happen while the caching bundle is not active. The last modified
      time is therefore a convenient way to track modifications in
      bundles.</para>
    </section>

    <section xml:id="framework.lifecycle-getheaders">
      <title>Retrieving Manifest Headers</title>

      <para>The <code>Bundle</code> interface defines two methods to return
      manifest header information: <code>getHeaders()</code> and
      <code>getHeaders(String)</code>.</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.framework.Bundle.getHeaders--" xrefstyle="hyperlink"/> - Returns a <code>Dictionary</code> object
          that contains the bundle's manifest headers and values as key/value
          pairs. The values returned are localized according to the default
          locale returned by <code>java.util.Locale.getDefault</code>.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.framework.Bundle.getHeaders-String-" xrefstyle="hyperlink"/> - Returns a <code>Dictionary</code> object
          that contains the bundle's manifest headers and values as key/value
          pairs. The returned values are localized using the specified locale.
          The locale may take the following values:</para>

          <itemizedlist>
            <listitem>
              <para><code>null</code> - The default locale returned by
              <code>java.util.Locale.getDefault</code> is used. This makes
              this method identical to the <code>getHeaders()</code>
              method.</para>
            </listitem>

            <listitem>
              <para><emphasis>Empty string</emphasis> - The dictionary will
              contain the raw (unlocalized) manifest headers including any
              leading '%'.</para>
            </listitem>

            <listitem>
              <para><emphasis>A Specific Locale</emphasis> - The given locale
              is used to localize the manifest headers.</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>

      <para>If the bundle is a multi-release JAR, see <xref linkend="framework.module-multireleasejar"/>, then the returned manifest
      header information must be the supplemented manifest information. That
      is, the main manifest with the replacement values from a supplemental
      manifest, if any, for the current Java platform version.</para>

      <para>Localization is performed according to the description in <xref linkend="framework.module.localization"/>. If no translation is found
      for a specific key, the <code>Dictionary</code> returned by
      <code>Bundle.getHeaders</code> will return the raw values as specified
      in the manifest header values without the leading '%' character.</para>

      <para>These methods require <code>AdminPermission[&lt;bundle&gt;,</code>
      <xref linkend="org.osgi.framework.AdminPermission.METADATA" xrefstyle="hyperlink"/>] because some of the manifest header information
      may be sensitive, such as the packages listed in the Export-Package
      header. Bundles always have permission to read their own headers.</para>

      <para>The <code>getHeaders</code> methods must continue to provide the
      manifest header information after the bundle enters the <xref linkend="org.osgi.framework.Bundle.UNINSTALLED" xrefstyle="hyperlink"/>
      state. After the bundle has been uninstalled, this method will only
      return manifest headers that are raw or localized for the default locale
      at the time the bundle was uninstalled.</para>

      <para>A framework implementation must use only the raw (unlocalized)
      manifest headers when processing manifest headers. Localizations must
      not influence the operations of the Framework.</para>
    </section>

    <section>
      <title>Loading Classes</title>

      <para>In certain cases, it is necessary to load classes as if they were
      loaded from inside the bundle. The <xref linkend="org.osgi.framework.Bundle.loadClass-String-" xrefstyle="hyperlink"/> method gives access to the bundle class loader.
      This method can be used to:</para>

      <itemizedlist>
        <listitem>
          <para>Load plugins from another bundle</para>
        </listitem>

        <listitem>
          <para>Start an application model activator</para>
        </listitem>

        <listitem>
          <para>Interact with legacy code</para>
        </listitem>
      </itemizedlist>

      <para>For example, an application model could use this feature to load
      the initial class from the bundle and start it according to the rules of
      the application model.</para>

      <programlisting>void appStart() {
    Class initializer =  bundle.loadClass(activator);
    if ( initializer != null ) {
      App app = (App) initializer.newInstance();
      app.activate();
   }
}</programlisting>

      <para>Loading a class from a bundle can cause it to be activated if the
      bundle uses a lazy activation policy.</para>
    </section>

    <section xml:id="i3258563">
      <title>Access to Resources</title>

      <para>The resources from a bundle can come from different sources. They
      can come from the raw JAR file, Fragment bundles, imported packages, or
      the bundle class path. Different use cases require a different resource
      search strategy. The <code>Bundle</code> interface provides a number of
      methods that access resources but use different strategies. The
      following search strategies are supported:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Class Space</emphasis> - The
          <code>getResource(String)</code> and
          <code>getResources(String)</code> provide access to resources that
          is consistent with the class space as described in <xref linkend="framework.module.overallsearchorder"/>. Following the
          search order can make certain parts of the JAR files inaccessible.
          These methods require that the bundle is resolved. If the bundle is
          not resolved, the Framework must attempt to resolve it.</para>

          <para>The search order can hide certain directories of the JAR file.
          Split packages are taken into account; therefore, resources with the
          same package names can come from different JARs. If the bundle is
          unresolved (or cannot be resolved), the <code>getResource</code> and
          <code>getResources</code> methods must only load resources from the
          bundle class path. This search strategy should be used by code that
          wants to access its own resources. Calling either method can cause
          the creation of a class loader and force the bundle to become
          resolved.</para>
        </listitem>

        <listitem>
          <para><emphasis>JAR File</emphasis> - The
          <code>getEntry(String)</code> and <code>getEntryPaths(String)</code>
          methods provide access to the resources in the bundle's JAR file. No
          searching is involved, only the raw JAR file is taken into account.
          The purpose of these methods is to provide low-level access without
          requiring that the bundle is resolved.</para>
        </listitem>

        <listitem>
          <para><emphasis>Bundle Space</emphasis> - The
          <code>findEntries(String,String,boolean)</code> is an intermediate
          form. Useful when configuration or setup information is needed from
          another bundle. It considers Fragment bundles but it must never
          create a class loader or use the bundle class path. The method
          provides access to all directories in the associated JAR
          files.</para>
        </listitem>
      </itemizedlist>

      <para>For example, consider the following setup:</para>

      <programlisting>A: Require-Bundle: D
   Import-Package: q,t
   Export-Package: t
B: Export-Package: q,t
C: Fragment-Host: A
D: Export-Package: s</programlisting>

      <para>This setup is depicted in <xref linkend="i2787402"/>.</para>

      <figure xml:id="i2787402">
        <title>Setup for showing the difference between getResource and
        getEntry</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.858in" contentwidth="7.418in" fileref="getresource-v-getentry.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The following table shows the effect of getting a resource from
      this setup when bundle <code>A</code> is resolved.</para>

      <table>
        <title>Differences between getResource, getEntry, and findEntries for
        resolved bundle A</title>

        <tgroup cols="4">
          <thead>
            <row>
              <entry>Resource</entry>

              <entry>getResource</entry>

              <entry>getEntry</entry>

              <entry>findEntries</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>q</code></entry>

              <entry><code>B.q</code></entry>

              <entry><code>null</code></entry>

              <entry><code>null</code></entry>
            </row>

            <row>
              <entry><code>p</code></entry>

              <entry><code>A.p &gt; C.p</code></entry>

              <entry><code>A.p</code></entry>

              <entry><code>A.p &gt; C.p</code></entry>
            </row>

            <row>
              <entry><code>r</code></entry>

              <entry><code>C.r</code></entry>

              <entry><code>null</code></entry>

              <entry><code>C.r</code></entry>
            </row>

            <row>
              <entry><code>s</code></entry>

              <entry><code>D.s</code></entry>

              <entry><code>null</code></entry>

              <entry><code>null</code></entry>
            </row>

            <row>
              <entry><code>t</code></entry>

              <entry><code>B.t</code></entry>

              <entry><code>A.t</code></entry>

              <entry><code>A.t</code></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>The following table shows the same cases as the previous table but
      now for an unresolved bundle <code>A</code>.</para>

      <table>
        <title>Differences between getResource, getEntry, and findEntries for
        an unresolved bundle A</title>

        <tgroup cols="4">
          <thead>
            <row>
              <entry>Resource</entry>

              <entry>getResource</entry>

              <entry>getEntry</entry>

              <entry>findEntries</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>q</code></entry>

              <entry><code>null</code></entry>

              <entry><code>null</code></entry>

              <entry><code>null</code></entry>
            </row>

            <row>
              <entry><code>p</code></entry>

              <entry><code>A.p</code></entry>

              <entry><code>A.p</code></entry>

              <entry><code>A.p</code></entry>
            </row>

            <row>
              <entry><code>r</code></entry>

              <entry><code>null</code></entry>

              <entry><code>null</code></entry>

              <entry><code>null</code></entry>
            </row>

            <row>
              <entry><code>s</code></entry>

              <entry><code>null</code></entry>

              <entry><code>null</code></entry>

              <entry><code>null</code></entry>
            </row>

            <row>
              <entry><code>t</code></entry>

              <entry><code>A.t</code></entry>

              <entry><code>A.t</code></entry>

              <entry><code>A.t</code></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section xml:id="i3351251">
      <title>Permissions of a Bundle</title>

      <para>The <code>Bundle</code> interface defines a method for returning
      information pertaining to a bundle's permissions:
      <code>hasPermission(Object)</code>. This method returns
      <code>true</code> if the bundle's Protection Domain has the specified
      permission, and <code>false</code> if it does not, or if the object
      specified by the argument is not an instance of
      <code>java.security.Permission</code>. Fragments also have their own
      Protection Domain.</para>

      <para>The parameter type is <code>Object</code> so that the Framework
      can be implemented on Java platforms that do not support Java based
      security.</para>

      <para>See <xref linkend="service.condpermadmin.permissioncheck"/> for
      more information about the permission checks.</para>
    </section>

    <section xml:id="i3264631">
      <title>Access to a Bundle's Bundle Context</title>

      <para>Bundles that have been started have a Bundle Context. This object
      is a <emphasis>capability</emphasis>; it is intended to be used only by
      the bundle. However, there are a number of cases where bundles must act
      on behalf of other bundles. For example, the Service Component Runtime
      registers services on behalf of other bundles. The framework therefore
      provides access to another bundle's context via the <xref linkend="org.osgi.framework.Bundle.getBundleContext--" xrefstyle="hyperlink"/> method. If there is no Bundle Context for that
      Bundle because the bundle is a fragment bundle or the bundle state is
      not in <code>{ STARTING, ACTIVE, STOPPING }</code>, then
      <code>null</code> must be returned.</para>

      <para>This method is potentially harmful because it allows any bundle to
      act as any other bundle. In a secure system, the method is protected by
      requiring <code>AdminPermission[*,CONTEXT]</code>.</para>
    </section>

    <section xml:id="framework.lifecycle.adaptations">
      <title>Adaptations</title>

      <para>The <xref linkend="org.osgi.framework.Bundle.adapt-Class-" xrefstyle="hyperlink"/> method allows the Bundle to be
      <emphasis>adapted</emphasis> to different types. The purpose of this
      method is to provide more specialized access to the Bundle object,
      access that is not always needed by most clients of the interface. For
      example, the <code>adapt</code> method can be used to adapt a Bundle
      object to the current <code>BundleWiring</code> object (if resolved).
      The adapt method is used as follows:</para>

      <programlisting>BundleWiring bw = aBundle.adapt(BundleWiring.class);</programlisting>

      <para>The following table shows the minimum list of types that can be
      used in the adapt method. However, implementations and specifications
      can extend this list.</para>

      <table>
        <title>Minimum set of classes that can be adapted from Bundle</title>

        <tgroup cols="2">
          <colspec colnum="1"/>

          <colspec colnum="2" colwidth="2*"/>

          <thead>
            <row>
              <entry>Class</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><para><code>AccessControlContext</code></para></entry>

              <entry><para>The Access Control Context for this bundle
              according to <xref linkend="i3351251"/>.</para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.framework.BundleContext" xrefstyle="hyperlink"/></para></entry>

              <entry><para>The Bundle Context for this bundle.</para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.framework.wiring.BundleRevision" xrefstyle="hyperlink"/></para></entry>

              <entry><para>The current Bundle Revision for this bundle, see
              <xref linkend="framework.wiring"/>.</para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.framework.wiring.BundleRevisions" xrefstyle="hyperlink"/></para></entry>

              <entry><para>All existing Bundle Revision objects for this
              bundle, see <xref linkend="framework.wiring"/>.</para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.framework.startlevel.BundleStartLevel" xrefstyle="hyperlink"/></para></entry>

              <entry><para>The Bundle Start Level for this bundle, see <xref linkend="framework.startlevel"/>.</para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.framework.wiring.BundleWiring" xrefstyle="hyperlink"/></para></entry>

              <entry><para>The Bundle Wiring for the current Bundle Revision,
              see <xref linkend="framework.wiring"/>.</para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.framework.launch.Framework" xrefstyle="hyperlink"/></para></entry>

              <entry><para>The Framework object from the launching API if this
              bundle is the System Bundle, see <xref linkend="framework.lifecycle-frameworks"/>.</para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.framework.startlevel.FrameworkStartLevel" xrefstyle="hyperlink"/></para></entry>

              <entry><para>The Framework Start Level if this is the System
              Bundle, see <xref linkend="framework.startlevel"/>.</para></entry>
            </row>

            <row>
              <entry><para><xref linkend="org.osgi.framework.wiring.FrameworkWiring" xrefstyle="hyperlink"/></para></entry>

              <entry><para>The Framework Wiring if this bundle is the System
              Bundle. See <xref linkend="framework.wiring"/>.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
  </section>

  <section xml:id="framework.lifecycle-bundlecontext">
    <title>The Bundle Context</title>

    <para>The relationship between the Framework and its installed bundles is
    realized by the use of <xref linkend="org.osgi.framework.BundleContext" xrefstyle="hyperlink"/> objects. A <code>BundleContext</code> object
    represents the execution context of a single bundle within the OSGi
    framework, and acts as a proxy to the underlying Framework.</para>

    <para>A <code>BundleContext</code> object is created by the Framework when
    a bundle is started. The bundle can use this private
    <code>BundleContext</code> object for the following purposes:</para>

    <itemizedlist>
      <listitem>
        <para>Installing new bundles into the OSGi environment. See <xref linkend="i1314099"/>.</para>
      </listitem>

      <listitem>
        <para>Interrogating other bundles installed in the OSGi environment.
        See <xref linkend="i1237198"/>.</para>
      </listitem>

      <listitem>
        <para>Obtaining a persistent storage area. See <xref linkend="i1236436"/>.</para>
      </listitem>

      <listitem>
        <para>Retrieving service objects of registered services. See <xref linkend="framework.service.servicereferences"/>.</para>
      </listitem>

      <listitem>
        <para>Registering services in the Framework service. See <xref linkend="framework.service.registeringservices"/>.</para>
      </listitem>

      <listitem>
        <para>Subscribing or unsubscribing to events broadcast by the
        Framework. See <xref linkend="i3032481"/>.</para>
      </listitem>
    </itemizedlist>

    <para>When a bundle is started, the Framework creates a
    <code>BundleContext</code> object and provides this object as an argument
    to the <code>start(BundleContext)</code> method of the bundle's Bundle
    Activator. Each bundle is provided with its own <code>BundleContext</code>
    object; these objects should not be passed between bundles, since the
    <code>BundleContext</code> object is related to the security and resource
    allocation aspects of a bundle.</para>

    <para>After the <code>stop(BundleContext)</code> method has returned, the
    <code>BundleContext</code> object must no longer be used. Framework
    implementations must throw an exception if the <code>BundleContext</code>
    object is used after a bundle is stopped.</para>

    <para>The <code>BundleContext</code> object is only valid during the
    <code>{ STARTING, ACTIVE, STOPPING }</code> states of a bundle. However,
    the <code>BundleContext</code> object becomes invalid after
    <code>stop(BundleContext)</code> returns (if the bundle has a Bundle
    Activator). The <code>BundleContext</code> object becomes invalid before
    disposing of any remaining registered services and releasing any remaining
    services in use. Since those activities can result in other bundles being
    called (for example, Service Listeners for <code>UNREGISTERING</code>
    events and Service Factories for unget operations), those other bundles
    can observe the stopping bundle in the <code>STOPPING</code> state but
    with an invalid <code>BundleContext</code> object.</para>

    <section xml:id="i1237198">
      <title>Getting Bundle Information</title>

      <para>The <code>BundleContext</code> interface defines methods to
      retrieve information about bundles installed in the OSGi
      framework:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.framework.BundleContext.getBundle--" xrefstyle="hyperlink"/> - Returns the single <code>Bundle</code>
          object associated with the <code>BundleContext</code> object.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.framework.BundleContext.getBundles--" xrefstyle="hyperlink"/> - Returns an array of the bundles currently
          installed in the Framework.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.framework.BundleContext.getBundle-long-" xrefstyle="hyperlink"/> - Returns the <code>Bundle</code> object
          specified by the unique identifier, or <code>null</code> if no
          matching bundle is found.</para>
        </listitem>
      </itemizedlist>

      <para>Bundle access is not restricted; any bundle can enumerate the set
      of installed bundles. Information that can identify a bundle, however
      (such as its location, or its header information), is only provided to
      callers that have
      <code>AdminPermission[&lt;bundle&gt;,METADATA]</code>.</para>
    </section>

    <section xml:id="i1236436">
      <title>Persistent Storage</title>

      <para>The Framework should provide a private persistent storage area for
      each installed bundle on platforms with some form of file system
      support.</para>

      <para>The <code>BundleContext</code> interface defines access to this
      storage in terms of the <code>File</code> class, which supports
      platform-independent definitions of file and directory names.</para>

      <para>The <code>BundleContext</code> interface defines a method to
      access the private persistent storage area:
      <code>getDataFile(String)</code>. This method takes a relative file name
      as an argument. It translates this file name into an absolute file name
      in the bundle's persistent storage area. It then returns a
      <code>File</code> object. This method returns <code>null</code> if there
      is no support for persistent storage.</para>

      <para>The Framework must automatically provide the bundle with
      <code>FilePermission[&lt;storage area&gt;, READ | WRITE | DELETE]</code>
      to allow the bundle to read, write, and delete files in that storage
      area.</para>

      <para>If <code>EXECUTE</code> permissions is required, then a relative
      path name can be used in the File Permission definition. For example,
      <code>FilePermission[bin/*,EXECUTE] specifies</code> that the
      sub-directory in the bundle's private data area may contain executables.
      This only provides execute permission within the Java environment and
      does not handle the potential underlying operating system issues related
      to executables.</para>

      <para>This special treatment applies only to <code>FilePermission</code>
      objects assigned to a bundle. Default permissions must not receive this
      special treatment. A <code>FilePermission</code> for a relative path
      name assigned via the <code>setDefaultPermission</code> method must be
      ignored.</para>
    </section>

    <section xml:id="i2068690">
      <title>Environment Properties</title>

      <para>The <code>BundleContext</code> interface defines a method for
      returning information pertaining to Framework properties:
      <code>getProperty(String)</code>. This method can be used to return the
      Framework launching properties; see <xref linkend="framework.lifecycle.launchingproperties"/>. This method will
      examine the System properties if the requested property is not available
      in the launching properties.</para>
    </section>
  </section>

  <section xml:id="i3070515">
    <title>The System Bundle</title>

    <para xml:id="i3070521">In addition to normal bundles, the Framework
    itself is represented as a bundle. The bundle representing the Framework
    is referred to as the <emphasis>system bundle</emphasis>. Through the
    system bundle, the Framework may register services that can be used by
    other bundles. Examples of such a service is the Conditional Permission
    Admin service.</para>

    <para>The system bundle resembles the framework object when a framework is
    launched, but implementations are not required to use the same object for
    the framework object and the system bundle. However, both objects must
    have bundle id 0, same location, and bundle symbolic name.</para>

    <para>The system bundle is listed in the set of installed bundles returned
    by <code>BundleContext.getBundles()</code>, although it differs from other
    bundles in the following ways:</para>

    <itemizedlist>
      <listitem>
        <para>The system bundle is always assigned a bundle identifier of zero
        (<code>0</code>).</para>
      </listitem>

      <listitem>
        <para>The system bundle <code>getLocation</code> method returns the
        string: "<code>System Bundle</code>", as defined in the
        <code>Constants</code> interface.</para>
      </listitem>

      <listitem>
        <para>The system bundle has a bundle symbolic name that is unique for
        a specific version. However, the name <code>system.bundle</code> must
        be recognized as an alias to this implementation-defined name.</para>
      </listitem>

      <listitem xml:id="i3070525">
        <para>The system bundle's life cycle cannot be managed like normal
        bundles. Its life cycle methods must behave as follows:</para>

        <itemizedlist xml:id="i3070527">
          <listitem>
            <para><emphasis> start</emphasis> - Does nothing because the
            system bundle is already started.</para>
          </listitem>

          <listitem xml:id="i3070529">
            <para><emphasis> stop</emphasis> - Returns immediately and shuts
            down the Framework on another thread.</para>
          </listitem>

          <listitem xml:id="i3070531">
            <para><emphasis> update</emphasis> - Returns immediately, then
            stops and restarts the Framework on another thread.</para>
          </listitem>

          <listitem xml:id="i3070534">
            <para><emphasis> uninstall</emphasis> - The Framework must throw a
            <code>BundleException</code> indicating that the system bundle
            cannot be uninstalled.</para>
          </listitem>
        </itemizedlist>

        <para>See <xref linkend="framework.lifecycle-frameworks"/> for more
        information about the starting and stopping of the Framework.</para>
      </listitem>
    </itemizedlist>

    <section xml:id="i3293513">
      <title>System Bundle Information</title>

      <para>The capabilities of the system bundle are obtained by adapting the
      system bundle to a <xref linkend="org.osgi.framework.wiring.BundleWiring" xrefstyle="hyperlink"/>
      as described in <xref linkend="framework.lifecycle.adaptations"/>. This
      is in preference to parsing the system bundle's headers.</para>

      <para>The system bundle's <code>Bundle.getHeaders</code> method returns
      a <code>Dictionary</code> object with implementation-specific manifest
      headers. The following headers of this OSGi specification can be
      returned in this dictionary. Headers not mentioned in this table should
      not be used.</para>

      <table>
        <title>Supported headers in the system bundle getHeaders
        method</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="2*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="3*"/>

          <thead>
            <row>
              <entry>Header</entry>

              <entry>Type</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>Bundle-ContactAddress</code></entry>

              <entry><code>optional</code></entry>

              <entry><para>Recommended to provide the framework vendor's
              contact address.</para></entry>
            </row>

            <row>
              <entry><code>Bundle-Copyright</code></entry>

              <entry><code>optional</code></entry>

              <entry><para>Recommended to provide the framework's copyright
              information.</para></entry>
            </row>

            <row>
              <entry><code>Bundle-Description</code></entry>

              <entry><code>optional</code></entry>

              <entry><para>Recommended description of the
              framework.</para></entry>
            </row>

            <row>
              <entry><code>Bundle-DocURL</code></entry>

              <entry><code>optional</code></entry>

              <entry><para>Recommended documentation URL pointing to further
              information about the framework. </para></entry>
            </row>

            <row>
              <entry><code>Bundle-Icon</code></entry>

              <entry><code>optional</code></entry>

              <entry><para>Recommended pointer to a preferably PNG icon
              representing this framework.</para></entry>
            </row>

            <row>
              <entry><code>Bundle-Localization</code></entry>

              <entry><code>optional</code></entry>

              <entry><para>Recommended localization
              information.</para></entry>
            </row>

            <row>
              <entry><code>Bundle-License</code></entry>

              <entry><code>optional</code></entry>

              <entry><para>License information about this framework
              implementation.</para></entry>
            </row>

            <row>
              <entry><code>Bundle-ManifestVersion</code></entry>

              <entry><code>mandatory</code></entry>

              <entry><para>The maximum version of the manifest version
              understood by this framework.</para></entry>
            </row>

            <row>
              <entry><code>Bundle-Name</code></entry>

              <entry><code>optional</code></entry>

              <entry><para>Recommended human readable name of this
              framework.</para></entry>
            </row>

            <row>
              <entry><para><code>Bundle-Required«</code></para><para><code> ExecutionEnvironment</code></para></entry>

              <entry><code>mandatory</code></entry>

              <entry><para>Mandatory: the list of execution environments
              supported by this framework. This header is deprecated, see
              <xref linkend="framework.namespaces.osgi.ee"/>.</para></entry>
            </row>

            <row>
              <entry><code>Bundle-SymbolicName</code></entry>

              <entry><code>mandatory</code></entry>

              <entry><para>The implementation name for this
              framework.</para></entry>
            </row>

            <row>
              <entry><code>Bundle-Vendor</code></entry>

              <entry><code>optional</code></entry>

              <entry><para>Recommended vendor information</para></entry>
            </row>

            <row>
              <entry><code>Bundle-Version</code></entry>

              <entry><code>mandatory</code></entry>

              <entry><para>The version of this framework
              implementation.</para></entry>
            </row>

            <row>
              <entry><code>Export-Package</code></entry>

              <entry><code>mandatory</code></entry>

              <entry><para>Contains packages that are exported by the
              Framework like <code>org.osgi.framework</code> but also the
              packages listed in the framework property
              <code>org.osgi.framework.system.packages</code> or
              <code>org.osgi.framework.system.packages.extra</code>.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
  </section>

  <section xml:id="i3032483">
    <title>Events</title>

    <para>The OSGi Framework Life Cycle layer supports the following types of
    events:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.framework.BundleEvent" xrefstyle="hyperlink"/> - Reports changes in the life cycle of
        bundles.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.framework.FrameworkEvent" xrefstyle="hyperlink"/> - Reports that the Framework is started, start
        level has changed, packages have been refreshed, or that an error has
        been encountered.</para>
      </listitem>
    </itemizedlist>

    <para>The actual event that is reported is available with the
    <code>getType</code> method. The integer that is returned from this method
    can be one of the constant names that are described in the class. However,
    events can, and will be, extended in the future. Unrecognized event types
    should be ignored.</para>

    <section xml:id="i3032481">
      <title>Listeners</title>

      <para>A listener interface is associated with each type of event. The
      following list describes these listeners.</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.framework.BundleListener" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.framework.SynchronousBundleListener" xrefstyle="hyperlink"/> - Called with an event of type
          <code>BundleEvent</code> when a bundle's life cycle information has
          been changed.</para>

          <para><code>SynchronousBundleListener</code> objects are called
          synchronously during the processing of the event and must be called
          before any <code>BundleListener</code> object is called. The
          following events are sent by the Framework after it has moved to a
          different state:</para>

          <itemizedlist>
            <listitem>
              <para><xref linkend="org.osgi.framework.BundleEvent.INSTALLED" xrefstyle="hyperlink"/> - Sent after a bundle is installed. The
              state is now Bundle <xref linkend="org.osgi.framework.Bundle.INSTALLED" xrefstyle="hyperlink"/> state.</para>
            </listitem>

            <listitem>
              <para><xref linkend="org.osgi.framework.BundleEvent.RESOLVED" xrefstyle="hyperlink"/> - Sent when the Framework has resolved a
              bundle. The state is now the Bundle <xref linkend="org.osgi.framework.Bundle.RESOLVED" xrefstyle="hyperlink"/> state.</para>
            </listitem>

            <listitem>
              <para><xref linkend="org.osgi.framework.BundleEvent.LAZY_ACTIVATION" xrefstyle="hyperlink"/> - The bundle has specified an activation
              policy; its activation is deferred to a later point in time. The
              state is set to the Bundle <xref linkend="org.osgi.framework.Bundle.STARTING" xrefstyle="hyperlink"/> state. This is only sent to
              <code>SynchronousBundleListener</code> objects.</para>
            </listitem>

            <listitem>
              <para><xref linkend="org.osgi.framework.BundleEvent.STARTING" xrefstyle="hyperlink"/> - Sent when the Framework is about to
              activate a bundle. This is only sent to
              <code>SynchronousBundleListener</code> objects. The state is now
              the Bundle <xref linkend="org.osgi.framework.Bundle.STARTING" xrefstyle="hyperlink"/> state.</para>
            </listitem>

            <listitem>
              <para><xref linkend="org.osgi.framework.BundleEvent.STARTED" xrefstyle="hyperlink"/> - Sent when the Framework has started a
              bundle. The state is now the Bundle <xref linkend="org.osgi.framework.Bundle.ACTIVE" xrefstyle="hyperlink"/> state.</para>
            </listitem>

            <listitem>
              <para><xref linkend="org.osgi.framework.BundleEvent.STOPPING" xrefstyle="hyperlink"/> - Sent when the Framework is about to
              stop a bundle or the start method of the Bundle Activator has
              thrown an exception and the bundle is stopped. This event
              indicates that the Bundle Context will be destroyed. This event
              is only sent to <code>SynchronousBundleListener</code>
              objects.</para>
            </listitem>

            <listitem>
              <para><xref linkend="org.osgi.framework.FrameworkEvent.STOPPED" xrefstyle="hyperlink"/> - Sent when the Framework has stopped a
              bundle.</para>
            </listitem>

            <listitem>
              <para><xref linkend="org.osgi.framework.BundleEvent.UNINSTALLED" xrefstyle="hyperlink"/> - Sent when the Framework has
              uninstalled a bundle</para>
            </listitem>

            <listitem>
              <para><xref linkend="org.osgi.framework.BundleEvent.UNRESOLVED" xrefstyle="hyperlink"/> - Sent when the Framework detects that a
              bundle becomes unresolved; this could happen when the bundle is
              refreshed or updated. When a set of bundles are refreshed using
              the Wiring API then each bundle in the set must have an
              <code>UNRESOLVED</code> BundleEvent published. The
              <code>UNRESOLVED</code> BundleEvent must be published after all
              the bundles in the set have been stopped and, in the case of a
              synchronous bundle listener, <emphasis>before</emphasis> any of
              the bundles in the set are re-started. <code>RESOLVED</code> and
              <code>UNRESOLVED</code> do not have to paired.</para>
            </listitem>

            <listitem>
              <para><xref linkend="org.osgi.framework.BundleEvent.UPDATED" xrefstyle="hyperlink"/> - Sent after a bundle is updated.</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.framework.FrameworkListener" xrefstyle="hyperlink"/> - Called with an event of type
          <code>FrameworkEvent</code>. Framework events are of type:</para>

          <itemizedlist>
            <listitem>
              <para><xref linkend="org.osgi.framework.FrameworkEvent.ERROR" xrefstyle="hyperlink"/> - Important error that requires the
              immediate attention of an operator.</para>
            </listitem>

            <listitem>
              <para><xref linkend="org.osgi.framework.FrameworkEvent.INFO" xrefstyle="hyperlink"/> - General information that is of
              interest in special situations.</para>
            </listitem>

            <listitem>
              <para><xref linkend="org.osgi.framework.FrameworkEvent.PACKAGES_REFRESHED" xrefstyle="hyperlink"/> - The Framework has refreshed the
              packages.</para>
            </listitem>

            <listitem>
              <para><xref linkend="org.osgi.framework.BundleEvent.STARTED" xrefstyle="hyperlink"/> - The Framework has performed all
              initialization and is running in normal mode.</para>
            </listitem>

            <listitem>
              <para><xref linkend="org.osgi.framework.FrameworkEvent.STARTLEVEL_CHANGED" xrefstyle="hyperlink"/> - Is sent by the Framework after a new
              start level has been set and processed.</para>
            </listitem>

            <listitem>
              <para><xref linkend="org.osgi.framework.FrameworkEvent.STOPPED" xrefstyle="hyperlink"/> - Sent by the Framework because of a
              stop operation on the system bundle.</para>
            </listitem>

            <listitem>
              <para><xref linkend="org.osgi.framework.FrameworkEvent.STOPPED_UPDATE" xrefstyle="hyperlink"/> - Sent by the Framework because of an
              update operation on the system bundle. The Framework will be
              restarted after this event is fired.</para>
            </listitem>

            <listitem>
              <para><xref linkend="org.osgi.framework.FrameworkEvent.WARNING" xrefstyle="hyperlink"/> - A warning to the operator that is not
              crucial but may indicate a potential error situation.</para>
            </listitem>

            <listitem>
              <para><xref linkend="org.osgi.framework.FrameworkEvent.WAIT_TIMEDOUT" xrefstyle="hyperlink"/> - Returned from the
              <code>waitForStop</code> method when the Framework did not stop
              before the given wait time-out expired.</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>

      <para><xref linkend="org.osgi.framework.BundleContext" xrefstyle="hyperlink"/> interface methods are defined which can be used
      to add and remove each type of listener.</para>

      <para>Events can be asynchronously delivered, unless otherwise stated,
      meaning that they are not necessarily delivered by the same thread that
      generated the event. The thread used to call an event listener is not
      defined.</para>

      <para>The Framework must publish a <code>FrameworkEvent.ERROR</code> if
      a callback to an event listener generates an unchecked exception -
      except when the callback happens while delivering a
      <code>FrameworkEvent.ERROR</code> (to prevent an infinite loop).</para>

      <para>Synchronous events have the unfortunate effect that, in rare
      cases, events can be delivered out of order to a listener. For example,
      a Service Event <code>UNREGISTERING</code> can be delivered before its
      corresponding Service Event <code>REGISTERED</code>. One pathological
      case is when a service listener (for example a Service Tracker)
      unregisters a service that it receives in the <code>REGISTERED</code>
      event for. If there are listeners queued behind the pathological
      listener then they see the unregistering before they see the
      registration.</para>
    </section>

    <section xml:id="i2708484">
      <title>Delivering Events</title>

      <para>If the Framework delivers an event asynchronously, it must:</para>

      <itemizedlist>
        <listitem>
          <para>Collect a snapshot of the listener list at the time the event
          is published (rather than doing so in the future just prior to event
          delivery), but before the event is delivered, so that listeners do
          not enter the list after the event happened.</para>
        </listitem>

        <listitem>
          <para>Ensure, at the time the snapshot is taken, that listeners on
          the list still belong to active bundles at the time the event is
          delivered.</para>
        </listitem>

        <listitem>
          <para>It is possible to use more than one thread to deliver events.
          If this is the case then each handler must receive the events in the
          same order as the events were posted. This ensures that handlers see
          events in the expected order.</para>
        </listitem>
      </itemizedlist>

      <para>If the Framework did not capture the current listener list when
      the event was published, but instead waited until just prior to event
      delivery, then the following error could occur: a bundle could have
      started and registered a listener, and then the bundle could see its own
      <code>BundleEvent.INSTALLED</code> event.</para>

      <para>The following three scenarios illustrate this concept.</para>

      <orderedlist>
        <listitem>
          <para>Scenario one event sequence:</para>

          <itemizedlist>
            <listitem>
              <para>Event A is published.</para>
            </listitem>

            <listitem>
              <para>Listener 1 is registered.</para>
            </listitem>

            <listitem>
              <para>Asynchronous delivery of Event A is attempted.</para>
            </listitem>
          </itemizedlist>

          <para>Expected Behavior: Listener 1 must not receive Event A,
          because it was not registered at the time the event was
          published.</para>
        </listitem>

        <listitem>
          <para>Scenario two event sequence:</para>

          <itemizedlist>
            <listitem>
              <para>Listener 2 is registered.</para>
            </listitem>

            <listitem>
              <para>Event B is published.</para>
            </listitem>

            <listitem>
              <para>Listener 2 is unregistered.</para>
            </listitem>

            <listitem>
              <para>Asynchronous delivery of Event B is attempted.</para>
            </listitem>
          </itemizedlist>

          <para>Expected Behavior: Listener 2 receives Event B, because
          Listener 2 was registered at the time Event B was published.</para>
        </listitem>

        <listitem>
          <para>Scenario three event sequence:</para>

          <itemizedlist>
            <listitem>
              <para>Listener 3 is registered.</para>
            </listitem>

            <listitem>
              <para>Event C is published.</para>
            </listitem>

            <listitem>
              <para>The bundle that registered Listener 3 is stopped.</para>
            </listitem>

            <listitem>
              <para>Asynchronous delivery of Event C is attempted.</para>
            </listitem>
          </itemizedlist>

          <para>Expected Behavior: Listener 3 must not receive Event C,
          because its Bundle Context object is invalid.</para>
        </listitem>
      </orderedlist>
    </section>

    <section xml:id="i2708513">
      <title>Synchronization Pitfalls</title>

      <para>Generally, a bundle that calls a listener should not hold any Java
      monitors. This means that neither the Framework nor the originator of a
      synchronous event should be in a monitor when a callback is
      initiated.</para>

      <para>The purpose of a Java monitor is to protect the update of data
      structures. This should be a small region of code that does not call any
      code the effect of which cannot be overseen. Calling the OSGi Framework
      from synchronized code can cause unexpected side effects. One of these
      side effects might be <emphasis>deadlock</emphasis>. A deadlock is the
      situation where two threads are blocked because they are waiting for
      each other.</para>

      <para>Time-outs can be used to break deadlocks, but Java monitors do not
      have time-outs. Therefore, the code will hang forever until the system
      is reset (Java has deprecated all methods that can stop a thread). This
      type of deadlock is prevented by not calling the Framework (or other
      code that might cause callbacks) in a synchronized block.</para>

      <para>If locks are necessary when calling other code, use the Java
      monitor to create semaphores that can time-out and thus provide an
      opportunity to escape a deadlocked situation.</para>
    </section>
  </section>

  <section>
    <title>Security</title>

    <section xml:id="framework.lifecycle.adminpermission">
      <title>Admin Permission</title>

      <para>The Admin Permission is a permission used to grant the right to
      manage the Framework with the option to restrict this right to a subset
      of bundles, called <emphasis>targets</emphasis>. For example, an
      Operator can give a bundle the right to only manage bundles of a signer
      that has a subject name of ACME:</para>

      <programlisting>org.osgi.framework.AdminPermission(
    "(signer=\*, o=ACME, c=us)", ... )</programlisting>

      <para>The actions of the Admin Permission are fine-grained. They allow
      the deployer to assign only the permissions that are necessary for a
      bundle. For example, an HTTP implementation could be granted access to
      all resources of all bundles.</para>

      <programlisting>org.osgi.framework.AdminPermission("*",
    "resource" )</programlisting>

      <para>Code that needs to check Admin Permission must always use the
      constructor that takes a bundle as parameter: <xref linkend="org.osgi.framework.AdminPermission.AdminPermission-Bundle-String-" xrefstyle="hyperlink"/> with a single action.</para>

      <para>For example, the implementation of the <code>loadClass</code>
      method must check that the caller has access to the class space:</para>

      <programlisting>public class BundleImpl implements Bundle{

    Class loadClass(String name) {
        securityManager.checkPermission(
            new AdminPermission(this,"class") );
            ...
    }
}</programlisting>

      <para>The Admin Permission takes a filter as its name. Filter based
      permissions are described in <xref linkend="framework.security.filterbasedpermissions"/>.</para>

      <section>
        <title>Actions</title>

        <para>The action parameter of Admin Permission will specify the subset
        of privileged administrative operations that are allowed by the
        Framework. The actions that are architected are listed in the
        following table. Future versions of the specification, as well as
        additional system services, can add additional actions. The given set
        should therefore not be assumed to be a closed set.</para>

        <table>
          <title>Admin Permission actions</title>

          <tgroup cols="2">
            <colspec colnum="1" colwidth="1*"/>

            <colspec colnum="2" colwidth="2.7*"/>

            <thead>
              <row>
                <entry>Action</entry>

                <entry>Used in</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry><code>METADATA</code></entry>

                <entry><para><code>Bundle.getHeaders</code></para><para><code>Bundle.getLocation</code></para></entry>
              </row>

              <row>
                <entry><code>RESOURCE</code></entry>

                <entry><para><code>Bundle.getResource</code></para><para><code>Bundle.getResources</code></para><para><code>Bundle.getEntry</code></para><para><code>Bundle.getEntryPaths</code></para><para><code>Bundle.findEntries</code></para><para>Bundle
                resource/entry URL creation</para></entry>
              </row>

              <row>
                <entry><code>CLASS</code></entry>

                <entry><para><code>Bundle.loadClass</code></para></entry>
              </row>

              <row>
                <entry><code>LIFECYCLE</code></entry>

                <entry><para><code>BundleContext.installBundle</code></para><para><code>Bundle.update</code></para><para><code>Bundle.uninstall</code></para></entry>
              </row>

              <row>
                <entry><code>EXECUTE</code></entry>

                <entry><para><code>Bundle.start</code></para><para><code>Bundle.stop</code></para><para><code>BundleStartLevel.setBundleStartLevel</code></para></entry>
              </row>

              <row>
                <entry><code>LISTENER</code></entry>

                <entry><para><code>BundleContext.addBundleListener</code> for
                SynchronousBundleListener
                </para><para><code>BundleContext.removeBundleListener</code>
                for SynchronousBundleListener</para></entry>
              </row>

              <row>
                <entry><code>EXTENSIONLIFECYLE</code></entry>

                <entry><para><code>BundleContext.installBundle</code> for
                extension bundles</para><para><code>Bundle.update</code> for
                extension bundles</para><para><code>Bundle.uninstall</code>
                for extension bundles</para></entry>
              </row>

              <row>
                <entry><code>RESOLVE</code></entry>

                <entry><para><code>FrameworkWiring.refreshBundles</code></para><para><code>FrameworkWiring.resolveBundles</code></para></entry>
              </row>

              <row>
                <entry><code>STARTLEVEL</code></entry>

                <entry><para><code>FrameworkStartLevel.setStartLevel</code></para><para><code>FrameworkStartLevel.setInitialBundleStartLevel</code></para></entry>
              </row>

              <row>
                <entry><code>CONTEXT</code></entry>

                <entry><para><code>Bundle.getBundleContext</code></para></entry>
              </row>

              <row>
                <entry><code>WEAVE</code></entry>

                <entry><para><code>WovenClass.setBytes</code></para><para><code>WovenClass.getDynamicImports</code></para></entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>The special action <code>"*"</code> will represent all
        actions.</para>

        <para>Each bundle must be given <code>AdminPermission(&lt;bundle
        identifier&gt;, "resource,metadata,class,context")</code> so that it
        can access its own resources and context. This is an implicit
        permission that must be automatically given to all bundles by the
        Framework.</para>
      </section>
    </section>

    <section xml:id="framework.lifecycle.privilegedcallbacks">
      <title>Privileged Callbacks</title>

      <para>The following interfaces define bundle callbacks that are invoked
      by the Framework:</para>

      <itemizedlist>
        <listitem>
          <para><code>BundleActivator</code></para>
        </listitem>

        <listitem>
          <para><code>ServiceFactory</code></para>
        </listitem>

        <listitem>
          <para><code>BundleListener</code>, <code>ServiceListener</code>, and
          <code>FrameworkListener</code></para>
        </listitem>

        <listitem>
          <para>Framework hook services</para>
        </listitem>
      </itemizedlist>

      <para>When any of these callbacks are invoked by the Framework, the
      bundle that caused the callback may still be on the stack. For example,
      when one bundle installs and then starts another bundle, the installer
      bundle may be on the stack when the <code>BundleActivator.start</code>
      method of the installed bundle is called. Likewise, when a bundle
      registers a service object, it may be on the stack when the Framework
      calls back the <code>serviceChanged</code> method of all qualifying
      <code>ServiceListener</code> objects.</para>

      <para>Whenever any of these bundle callbacks try to access a protected
      resource or operation, the access control mechanism should consider not
      only the permissions of the bundle receiving the callback, but also
      those of the Framework and any other bundles on the stack. This means
      that in these callbacks, bundle programmers normally would use
      <code>doPrivileged</code> calls around any methods protected by a
      permission check (such as getting or registering service
      objects).</para>

      <para>In order to reduce the number of <code>doPrivileged</code> calls
      by bundle programmers, the Framework must perform a
      <code>doPrivileged</code> call around any bundle callbacks. The
      Framework should have <code>java.security.AllPermission</code>.
      Therefore, a bundle programmer can assume that the bundle is not further
      restricted except for its own permissions.</para>

      <para>Bundle programmers do not need to use <code>doPrivileged</code>
      calls in their implementations of any callbacks registered with and
      invoked by the Framework.</para>

      <para>For any other callbacks that are registered with a service object
      and therefore get invoked by the service-providing bundle directly,
      <code>doPrivileged</code> calls must be used in the callback
      implementation if the bundle's own privileges are to be exercised.
      Otherwise, the callback must fail if the bundle that initiated the
      callback lacks the required permissions.</para>

      <para>A framework must never load classes in a <code>doPrivileged</code>
      region, but must instead use the current stack. This means that static
      initializers and constructors must not assume that they are privileged.
      Any privileged code in a static initializer must be guarded with a
      <code>doPrivileged</code> region in the static initializer. Likewise, a
      framework must not instantiate a <code>BundleActivator</code> object in
      a <code>doPrivileged</code> region, but must instead use the current
      stack. This means that the <code>BundleActivator</code> constructor must
      not assume that it is privileged.</para>
    </section>

    <section>
      <title>Lazy Activation</title>

      <para>The activation policy, see <xref linkend="i3270439"/>, can
      indirectly cause the activation of a bundle.
      <code>AdminPermission[*,CLASS ]</code> therefore implies the
      <code>EXECUTE</code> action during a <code>loadClass</code> method
      call.</para>

      <para>Normal class loading caused by executing Java class code must not
      require <code>AdminPermission[*,EXECUTE ]</code>.</para>
    </section>
  </section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="i1296051"><title>The Standard for the Format of
      ARPA Internet Text Messages</title>STD 11, RFC 822, UDEL, August
      1982<?line-break?><biblioid class="uri"><link xlink:href="http://www.ietf.org/rfc/rfc822.txt"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i1296055"><title>The Hypertext Transfer Protocol -
      HTTP/1.1</title>RFC 2068 DEC, MIT/LCS, UC Irvine, January
      1997<?line-break?><biblioid class="uri"><link xlink:href="http://www.ietf.org/rfc/rfc2068.txt"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i1199923"><title>Java Language Specification: Java
      SE 8 Edition</title><biblioid class="uri"><link xlink:href="https://docs.oracle.com/javase/specs/jls/se8/html/index.html"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i1199796"><title>A String Representation of LDAP
      Search Filters</title>RFC 1960, UMich, 1996<?line-break?><biblioid class="uri"><link xlink:href="http://www.ietf.org/rfc/rfc1960.txt"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i1200042"><title>Java Security
      Architecture</title><biblioid class="uri"><link xlink:href="https://docs.oracle.com/javase/8/docs/technotes/guides/security/spec/security-spec.doc.html"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i1201324"><title>Java Package Versioning
      Specification</title><biblioid class="uri"><link xlink:href="https://docs.oracle.com/javase/8/docs/technotes/guides/versioning/index.html"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i1304871"><title>Codes for the Representation of
      Names of Languages</title>ISO 639, International Standards
      Organization<?line-break?><biblioid class="uri"><link xlink:href="http://lcweb.loc.gov/standards/iso639-2/langhome.html"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i2164952"><title>Manifest Format</title><biblioid class="uri"><link xlink:href="https://docs.oracle.com/javase/8/docs/technotes/guides/jar/jar.html#JAR_Manifest"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i2461629"><title>W3C EBNF</title><biblioid class="uri"><link xlink:href="http://www.w3c.org/TR/REC-xml#sec-notation"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i2467175"><title>Interval Notation</title><biblioid class="uri"><link xlink:href="http://www.math.ohio-state.edu/courses/math104/interval.pdf"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i3287541"><title>OSGi Reference
      Names</title><biblioid class="uri"><link xlink:href="https://docs.osgi.org/reference/"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i3290992"><title>JKS Keystore Format (reverse
      engineered)</title><biblioid class="uri"><link xlink:href="http://metastatic.org/source/JKS.html"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i3300085"><title>Java Service Provider
      Configuration</title><biblioid class="uri"><link xlink:href="https://docs.oracle.com/javase/8/docs/technotes/guides/jar/jar.html#Service_Provider"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i3324333"><title>IETF RFC 1422 A Universally Unique
      IDentifier (UUID) URN Namespace</title><biblioid class="uri"><link xlink:href="http://www.ietf.org/rfc/rfc4122.txt"/></biblioid></bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter label="5" revision="$Id: 65e0155a06b9ef2badfc52e06e11d7d704958d2a $" version="5.0" xml:id="framework.service" xml:base="005/framework.service.xml">
  <title>Service Layer</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.framework-version" linkend="org.osgi.framework"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>The OSGi Service Layer defines a dynamic collaborative model that is
    highly integrated with the Life Cycle Layer. The
    <emphasis>service</emphasis> model is a publish, find and bind model. A
    service is a normal Java object that is registered under one or more Java
    interfaces with the service registry. Bundles can register services,
    search for them, or receive notifications when their registration state
    changes.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Collaborative</emphasis> - The service layer must
          provide a mechanism for bundles to publish, find, and bind to each
          other's services without having a priori knowledge of those
          bundles.</para>
        </listitem>

        <listitem>
          <para><emphasis>Dynamic</emphasis> - The service mechanism must be
          able to handle changes in the outside world and underlying
          structures directly.</para>
        </listitem>

        <listitem>
          <para><emphasis>Secure</emphasis> - It must be possible to restrict
          access to services.</para>
        </listitem>

        <listitem>
          <para><emphasis>Reflective</emphasis> - Provide full access to the
          Service Layer's internal state.</para>
        </listitem>

        <listitem>
          <para><emphasis>Versioning</emphasis> - Provide mechanisms that make
          it possible to handle the fact that bundles and their services
          evolve over time.</para>
        </listitem>

        <listitem>
          <para><emphasis>Persistent Identifier</emphasis> - Provide a means
          for bundles to track services across Framework restarts.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Service</emphasis> - An object registered with the
          service registry under one or more interfaces together with
          properties. The service can be discovered and used by
          bundles.</para>
        </listitem>

        <listitem>
          <para><emphasis>Service Registry</emphasis> - Holds the service
          registrations.</para>
        </listitem>

        <listitem>
          <para><emphasis>Service Reference</emphasis> - A reference to a
          service. Provides access to the service's properties but not the
          actual service object. The service object must be acquired through a
          bundle's Bundle Context.</para>
        </listitem>

        <listitem>
          <para><emphasis>Service Registration</emphasis> - The receipt
          provided when a service is registered. The service registration
          allows the update of the service properties and the unregistration
          of the service.</para>
        </listitem>

        <listitem>
          <para><emphasis>Service Permission</emphasis> - The permission to
          use an interface name when registering or using a service.</para>
        </listitem>

        <listitem>
          <para><emphasis>Service Scope</emphasis> - Indicates how service
          objects are obtained when requesting a service object. The following
          service scopes are defined: <emphasis>singleton</emphasis>,
          <emphasis>bundle</emphasis>, and <emphasis>prototype</emphasis>. The
          default service scope is <emphasis>singleton</emphasis>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Service Factory</emphasis> - A facility to let the
          registering bundle customize the service object for each using
          bundle. When using a Service Factory, the service scope of the
          service is <emphasis>bundle</emphasis>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Prototype Service Factory</emphasis> - A facility to
          let the registering bundle customize the service object for each
          caller. When using a Prototype Service Factory, the service scope of
          the service is <emphasis>prototype</emphasis>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Service Objects</emphasis> - A facility to let the
          using bundle obtain multiple service objects for a service with
          <emphasis>prototype</emphasis> service scope.</para>
        </listitem>

        <listitem>
          <para><emphasis>Service Listener</emphasis> - A listener to Service
          Events.</para>
        </listitem>

        <listitem>
          <para><emphasis>Service Event</emphasis> - An event holding
          information about the registration, modification, or unregistration
          of a service object.</para>
        </listitem>

        <listitem>
          <para><emphasis>Filter</emphasis> - An object that implements a
          simple but powerful filter language. It can select on
          properties.</para>
        </listitem>

        <listitem>
          <para><emphasis>Invalid Syntax Exception</emphasis> - The exception
          thrown when a filter expression contains an error.</para>
        </listitem>
      </itemizedlist>

      <figure>
        <title>Class Diagram <code>org.osgi.framework</code><emphasis> Service
        Layer</emphasis></title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="4.538in" contentwidth="6.221in" fileref="service-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section>
    <title>Services</title>

    <para>In the OSGi framework, bundles are built around a set of cooperating
    services available from a shared service registry. Such an OSGi service is
    defined semantically by its <emphasis>service interface</emphasis> and
    implemented as a <emphasis>service object</emphasis>.</para>

    <para>The service interface should be specified with as few implementation
    details as possible. OSGi has specified many service interfaces for common
    needs and will specify more in the future.</para>

    <para>The service object is owned by, and runs within, a bundle. This
    bundle must register the service object with the Framework service
    registry so that the service's functionality is available to other bundles
    under control of the Framework.</para>

    <para>Dependencies between the bundle owning the service and the bundles
    using it are managed by the Framework. For example, when a bundle is
    stopped, all the services registered with the Framework by that bundle
    must be automatically unregistered.</para>

    <para>The Framework maps services to their underlying service objects, and
    provides a simple but powerful query mechanism that enables a bundle to
    request the services it needs. The Framework also provides an event
    mechanism so that bundles can receive events of services that are
    registered, modified, or unregistered.</para>

    <section xml:id="framework.service.servicereferences">
      <title>Service References</title>

      <para>In general, registered service objects are referenced through
      <code>ServiceReference</code> objects. This avoids creating unnecessary
      dynamic service dependencies between bundles when a bundle needs to know
      about a service but does not require the service object itself.</para>

      <para>A <code>ServiceReference</code> object can be stored and passed on
      to other bundles without the implications of dependencies. A
      <code>ServiceReference</code> object encapsulates the properties and
      other meta-information about the service object it represents. This
      meta-information can be queried by a bundle to assist in the selection
      of a service that best suits its needs.</para>

      <para>When a bundle queries the Framework service registry for services,
      the Framework must provide the requesting bundle with the
      <code>ServiceReference</code> objects of the requested services, rather
      than with the services themselves. See <xref linkend="framework.service.locating"/>.</para>

      <para>A <code>ServiceReference</code> object may also be obtained from a
      <code>ServiceRegistration</code> object.</para>

      <para>A <code>ServiceReference</code> object is valid only as long as
      the service is registered. However, its properties must remain available
      as long as the <code>ServiceReference</code> object exists.</para>

      <para>When a bundle wishes to use the service object, it can be obtained
      by using the <code>ServiceReference</code>. See <xref linkend="framework.service.getting"/>.</para>
    </section>

    <section>
      <title>Service Interfaces</title>

      <para>A <emphasis>service interface</emphasis> is the specification of
      the service's public methods.</para>

      <para>In practice, a bundle developer creates a service object by
      implementing its service interface and registers the service object with
      the Framework service registry. Once a bundle has registered a service
      object under an interface name, the associated service can be acquired
      by bundles under that interface name, and its methods can be accessed by
      way of its service interface. The Framework also supports registering
      service objects under a class name, so references to service interface
      in this specification can be interpreted to be an interface or
      class.</para>

      <para>When requesting a service object from the Framework, a bundle can
      specify the name of the service interface that the requested service
      object must implement. In the request, the bundle may also specify a
      filter string to narrow the search.</para>

      <para>Many service interfaces are defined and specified by organizations
      such as the OSGi Working Group. A service interface that has been accepted as
      a standard can be implemented and used by any number of bundle
      developers.</para>
    </section>

    <section xml:id="framework.service.registeringservices">
      <title>Registering Services</title>

      <para>A bundle publishes a service by registering a service object with
      the Framework service registry. A service object registered with the
      Framework is exposed to other bundles installed in the OSGi
      environment.</para>

      <para>Every registered service object has a unique
      <code>ServiceRegistration</code> object, and has one or more
      <code>ServiceReference</code> objects that refer to it. These
      <code>ServiceReference</code> objects expose the registration properties
      of the service, including the set of service interfaces they implement.
      The <code>ServiceReference</code> object can then be used to acquire a
      service object that implements the desired service interface.</para>

      <para>The Framework permits bundles to register and unregister service
      objects dynamically. Therefore, a bundle is permitted to register
      service objects at any time during the <code>STARTING</code>,
      <code>ACTIVE</code> or <code>STOPPING</code> states.</para>

      <para>A bundle registers a service object with the Framework by calling
      one of the <code>BundleContext.registerService</code> methods on its
      <code>BundleContext</code> object:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.framework.BundleContext.registerService-String-Object-Dictionary-" xrefstyle="hyperlink"/> - For a service object registered under a
          single service interface.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.framework.BundleContext.registerService-String---Object-Dictionary-" xrefstyle="hyperlink"/> - For a service object registered under
          multiple service interfaces.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.framework.BundleContext.registerService-Class-S-Dictionary-" xrefstyle="hyperlink"/> - For a service object registered under a
          single service interface using the class object for the interface
          name.</para>
        </listitem>
      </itemizedlist>

      <para>The names of the service interfaces under which a bundle wants to
      register its service are provided as arguments to the
      <code>registerService</code> methods. The Framework must ensure that the
      service object actually is an instance of each specified service
      interfaces, unless the object is a Service Factory. See <xref linkend="framework.service.serviceFactory"/> and <xref linkend="framework.service.prototypeServiceFactory"/>.</para>

      <para>To perform this check, the Framework must load the
      <code>Class</code> object for each specified service interface from
      either the bundle or a shared package. For each <code>Class</code>
      object, <code>Class.isInstance</code> must be called and return
      <code>true</code> on the <code>Class</code> object with the service
      object as the argument.</para>

      <para>The service object being registered may be further described by a
      <code>Dictionary</code> object, which contains the properties of the
      service as a collection of key/value pairs. The methods <xref linkend="org.osgi.framework.FrameworkUtil.asMap-Dictionary-" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.framework.FrameworkUtil.asDictionary-Map-" xrefstyle="hyperlink"/> can be helpful when working with service
      properties to provide Map views over Dictionaries and Dictionary views
      over Maps.</para>

      <para>The service interface names under which a service object has been
      successfully registered are automatically added to the service's
      properties under the key <code>objectClass</code>. This value must be
      set automatically by the Framework and any value provided by the bundle
      must be overridden.</para>

      <para>If the service object is successfully registered, the Framework
      must return a <code>ServiceRegistration</code> object to the caller. A
      service object can be unregistered only by the holder of its
      <code>ServiceRegistration</code> object (see the <xref linkend="org.osgi.framework.ServiceRegistration.unregister--" xrefstyle="hyperlink"/> method). Every successful service object
      registration must yield a unique <code>ServiceRegistration</code> object
      even if the same service object is registered multiple times.</para>

      <para>Using the <code>ServiceRegistration</code> object is the only way
      to reliably change the service's properties after it has been registered
      (see the <xref linkend="org.osgi.framework.ServiceRegistration.setProperties-Dictionary-" xrefstyle="hyperlink"/> method). Modifying a service's
      <code>Dictionary</code> object after the service object is registered
      may not have any effect on the service's properties.</para>

      <para>The process of registering a service object is subject to a
      permission check. The registering bundle must have
      <code>ServicePermission[&lt;name&gt;,REGISTER]</code> to register the
      service object under all the service interfaces specified. Otherwise,
      the service object must not be registered, and a
      <code>SecurityException</code> must be thrown.</para>
    </section>

    <section xml:id="i2061648">
      <title>Early Need for ServiceRegistration Object</title>

      <para>The registration of a service object will cause all registered
      <code>ServiceListener</code> objects to be notified. This is a
      synchronous notification. This means that such a listener can get access
      to the service and call its methods before the
      <code>registerService</code> method has returned the
      <code>ServiceRegistration</code> object. In certain cases, access to the
      <code>ServiceRegistration</code> object is necessary in such a callback.
      However, the registering bundle has not yet received the
      <code>ServiceRegistration</code> object. <xref linkend="i2058495" xrefstyle="template:Figure %n on page %p"/> shows such a
      sequence.</para>

      <figure xml:id="i2058495">
        <title>Service Registration and registration</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.870in" contentwidth="4.942in" fileref="registration-actions.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>In a case as described previously, access to the registration
      object can be obtained via a <code>ServiceFactory</code> object or
      <code>PrototypeServiceFactory</code> object. If a
      <code>ServiceFactory</code> object or
      <code>PrototypeServiceFactory</code> object is registered, the Framework
      must call-back the registering bundle with the
      <code>ServiceFactory</code> method <xref linkend="org.osgi.framework.ServiceFactory.getService-Bundle-ServiceRegistration-" xrefstyle="hyperlink"/> or the <code>PrototypeServiceFactory</code>
      method <xref linkend="org.osgi.framework.PrototypeServiceFactory.getService-Bundle-ServiceRegistration-" xrefstyle="hyperlink"/>. The required <code>ServiceRegistration</code>
      object is passed as a parameter to these methods.</para>
    </section>

    <section xml:id="framework.service.serviceproperties">
      <title>Service Properties</title>

      <para>Properties hold information as key/value pairs. The key must be a
      <code>String</code> object and the value should be a type recognized by
      <code>Filter</code> objects (see <xref linkend="i2671413"/> for a list).
      Multiple values for the same key are supported with arrays ([]) and
      <code>Collection</code> objects.</para>

      <para>The values of properties should be limited to primitive or
      standard Java types to prevent unwanted inter bundle dependencies. The
      Framework cannot detect dependencies that are created by the exchange of
      objects between bundles via the service properties.</para>

      <para xml:id="i2070445">The key of a property is not case sensitive.
      <code>ObjectClass</code>, <code>OBJECTCLASS</code> and <code>
      objectclass</code> all are the same property key. A Framework must
      return the key in <code>ServiceReference.getPropertyKeys</code> in
      exactly the same case as it was last set. When a <code>Dictionary</code>
      object that contains keys that only differ in case is passed, the
      Framework must raise an exception.</para>

      <para>The service properties are intended to provide information
      <emphasis>about</emphasis> the service. The properties should not be
      used to participate in the actual function of the service. Modifying the
      properties for the service registration is a potentially expensive
      operation. For example, a Framework may pre-process the properties into
      an index during registration to speed up later look-ups.</para>

      <para>The <code>Filter</code> interface supports complex filtering; it
      can be used to find matching services. Therefore, all properties share a
      single namespace in the Framework service registry. As a result, it is
      important to use descriptive names or formal definitions of shorter
      names to prevent conflicts. Several OSGi specifications reserve parts of
      this namespace. All properties starting with the prefix
      <code>service</code>. and the property <code>objectClass</code> are
      reserved for use by OSGi specifications.</para>

      <para><xref linkend="framework.service-service.properties"/> contains a
      list of pre-defined properties.</para>

      <table xml:id="framework.service-service.properties">
        <title>Standard Service Properties (+ indicates scalar, array of, or
        collection of)</title>

        <tgroup cols="4">
          <colspec colnum="1" colwidth="1.8*"/>

          <colspec colnum="2" colwidth="0.8*"/>

          <colspec colnum="3" colwidth="2*"/>

          <colspec colnum="4" colwidth="3.4*"/>

          <thead>
            <row>
              <entry>Property Key</entry>

              <entry>Type</entry>

              <entry>Constants</entry>

              <entry>Property Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>objectClass</code><superscript>†</superscript></entry>

              <entry><code>String[]</code></entry>

              <entry><para xml:id="i2070464"><xref linkend="org.osgi.framework.Constants.OBJECTCLASS" xrefstyle="hyperlink"/></para></entry>

              <entry><para>The <code>objectClass</code> property contains the
              set of interface names under which a service object is
              registered with the Framework. The Framework must set this
              property automatically. The Framework must guarantee that when a
              service object is retrieved with <xref linkend="org.osgi.framework.BundleContext.getService-ServiceReference-" xrefstyle="hyperlink"/>, it can be cast to any of the interface
              names.</para></entry>
            </row>

            <row>
              <entry><code>service.bundleid</code><superscript>†</superscript></entry>

              <entry><code>Long</code></entry>

              <entry><para><xref linkend="org.osgi.framework.Constants.SERVICE_BUNDLEID" xrefstyle="hyperlink"/></para></entry>

              <entry><para>The <code>service.bundleid</code> property
              identifies the bundle registering the service. The Framework
              must set this property automatically with the value of the
              bundle id of the registering bundle.</para></entry>
            </row>

            <row>
              <entry><code>service.description</code></entry>

              <entry><code>String</code></entry>

              <entry><para xml:id="i2070467"><xref linkend="org.osgi.framework.Constants.SERVICE_DESCRIPTION" xrefstyle="hyperlink"/></para></entry>

              <entry><para xml:id="i2070468">The
              <code>service.description</code> property is intended to be used
              as documentation and is optional. Frameworks and bundles can use
              this property to provide a short description of a registered
              service object. The purpose is mainly for debugging because
              there is no support for localization.</para></entry>
            </row>

            <row>
              <entry><code>service.id</code><superscript>†</superscript></entry>

              <entry><code>Long</code></entry>

              <entry><para><xref linkend="org.osgi.framework.Constants.SERVICE_ID" xrefstyle="hyperlink"/></para></entry>

              <entry><para>Every registered service object is assigned a
              unique, non-negative <code>service.id</code> by the Framework.
              This number is added to the service's properties. The Framework
              assigns a unique, non-negative value to every registered service
              object that is larger than values provided to all previously
              registered service objects.</para></entry>
            </row>

            <row>
              <entry><code>service.pid</code></entry>

              <entry><code>String+</code></entry>

              <entry><para><xref linkend="org.osgi.framework.Constants.SERVICE_PID" xrefstyle="hyperlink"/></para></entry>

              <entry><para>The <code>service.pid</code> property optionally
              identifies a persistent, unique identifier for the service
              object. See <xref linkend="i3043166"/>.</para></entry>
            </row>

            <row>
              <entry><code>service.scope</code><superscript>†</superscript></entry>

              <entry><code>String</code></entry>

              <entry><para><xref linkend="org.osgi.framework.Constants.SERVICE_SCOPE" xrefstyle="hyperlink"/></para></entry>

              <entry><para>The <code>service.scope</code> property identifies
              the service's scope. The Framework must set this property
              automatically. If the registered service object implements <xref linkend="org.osgi.framework.PrototypeServiceFactory" xrefstyle="hyperlink"/>, then the value will be <link linkend="org.osgi.framework.Constants.SCOPE_PROTOTYPE" xrefstyle="hyperlink">prototype</link>. Otherwise, if the
              registered service object implements <xref linkend="org.osgi.framework.ServiceFactory" xrefstyle="hyperlink"/>, then the value will be <link linkend="org.osgi.framework.Constants.SCOPE_BUNDLE" xrefstyle="hyperlink">bundle</link>. Otherwise, the value will
              be <link linkend="org.osgi.framework.Constants.SCOPE_SINGLETON" xrefstyle="hyperlink">singleton</link>. See <xref linkend="framework.service.scope"/>.</para></entry>
            </row>

            <row>
              <entry><code>service.ranking</code></entry>

              <entry><code>Integer</code></entry>

              <entry><para xml:id="i2070487"><xref linkend="org.osgi.framework.Constants.SERVICE_RANKING" xrefstyle="hyperlink"/></para></entry>

              <entry><para>See <xref linkend="framework.service.servicerankingorder"/>.</para></entry>
            </row>

            <row>
              <entry><code>service.vendor</code></entry>

              <entry><code>String</code></entry>

              <entry><para xml:id="i2070492"><xref linkend="org.osgi.framework.Constants.SERVICE_VENDOR" xrefstyle="hyperlink"/></para></entry>

              <entry><para>This optional property can be used by the bundle
              registering the service object to indicate the
              vendor.</para></entry>
            </row>

            <row>
              <entry><code>service.changecount</code></entry>

              <entry><code>Long</code></entry>

              <entry><para><link linkend="org.osgi.framework.Constants.SERVICE_CHANGECOUNT" xrefstyle="hyperlink">SERVICE_</link></para><para><link linkend="org.osgi.framework.Constants.SERVICE_CHANGECOUNT" xrefstyle="hyperlink">CHANGECOUNT</link></para></entry>

              <entry><para>This optional property can be used by the bundle
              registering the service object to indicate there has been a
              change in some data provided by the service.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para><superscript>†</superscript> The values for these service
      properties must be set by the Framework. Any values specified for these
      service properties during service registration or service properties
      update must be ignored.</para>
    </section>

    <section xml:id="framework.service.servicerankingorder">
      <title>Service Ranking Order</title>

      <para>When registering a service object, a bundle may optionally specify
      a <xref linkend="org.osgi.framework.Constants.SERVICE_RANKING" xrefstyle="hyperlink"/> service property of type <code>Integer</code>.
      This number specifies a ranking order between services. The highest
      number has the highest ranking and the lowest number (including negative
      numbers) has the lowest ranking. If no <code>service.ranking</code>
      service property is specified or its type is not <code>Integer</code>
      then a ranking of 0 must be used.</para>

      <para>The <emphasis>ranking order</emphasis> is defined as
      follows:</para>

      <itemizedlist>
        <listitem>
          <para>Sorted on descending ranking number (highest first)</para>
        </listitem>

        <listitem>
          <para>If the ranking numbers are equal, sorted on ascending
          <code>service.id</code> property (oldest first).</para>
        </listitem>
      </itemizedlist>

      <para>This ordering is complete because service ids are never reused and
      handed out in order of their registration time. That is, a service that
      is registered later will have a higher service id. Therefore, the
      ranking order is in descending <code>service.ranking</code> numeric
      order where ties give a preference to the earlier registrant.</para>

      <para>The ranking order is the reverse of the natural ordering of a
      <code>ServiceReference</code> object.</para>

      <para>The purpose of the ranking order is to allow:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Selection</emphasis> - When a single service must be
          chosen but multiple services qualify then the service with the
          highest ranking must be selected.</para>
        </listitem>

        <listitem>
          <para><emphasis>Ordering</emphasis> - When multiple services must be
          used in a specified order.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="i3043166">
      <title>Persistent Identifier (PID)</title>

      <para>The purpose of a Persistent Identifier (PID) is to identify a
      service across Framework restarts. Services that can reference the same
      underlying entity every time they are registered should therefore use a
      service property that contains a PID. The name of the service property
      for PID is defined as <code>service.pid</code>. The PID is a unique
      identifier for a service that persists over multiple invocations of the
      Framework. For a given service, the same PID should always be used. If
      the bundle is stopped and later started, the same PID must always be
      used.</para>

      <para>The format of the PID should be:</para>

      <programlisting>    pid ::= symbolic-name                   // See <xref linkend="framework.general.syntax" xrefstyle="template:%n"/></programlisting>
    </section>

    <section xml:id="framework.service.locating">
      <title>Locating Services</title>

      <para>In order to use a service object and call its methods, a bundle
      must first obtain a <code>ServiceReference</code> object. The
      <code>BundleContext</code> interface defines a number of methods a
      bundle can call to obtain <code>ServiceReference</code> objects from the
      Framework:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.framework.BundleContext.getServiceReference-String-" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.framework.BundleContext.getServiceReference-Class-" xrefstyle="hyperlink"/> - These methods returns a
          <code>ServiceReference</code> object to a service object that
          implements, and was registered under, the name of the specified
          service interface. If multiple such service objects exist, a
          <code>ServiceReference</code> object to the service object with the
          highest <xref linkend="org.osgi.framework.Constants.SERVICE_RANKING" xrefstyle="hyperlink"/> is returned. If there is a tie in ranking, a
          <code>ServiceReference</code> object to the service object with the
          lowest <xref linkend="org.osgi.framework.Constants.SERVICE_ID" xrefstyle="hyperlink"/> (the service object that was registered
          first) is returned. If no matching service objects are registered
          then <code>null</code> must be returned.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.framework.BundleContext.getServiceReferences-String-String-" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.framework.BundleContext.getServiceReferences-Class-String-" xrefstyle="hyperlink"/> - These methods returns an array or
          collection, respectively, of <code>ServiceReference</code> objects
          for service objects that:</para>

          <itemizedlist>
            <listitem>
              <para>Implement and were registered under the specified service
              interface.</para>
            </listitem>

            <listitem>
              <para>Satisfy the search filter specified. The filter syntax is
              further explained in <xref linkend="i2671413"/>.</para>
            </listitem>
          </itemizedlist>

          <para>If no matching service objects are registered then
          <code>null</code> must be returned by the <xref linkend="org.osgi.framework.BundleContext.getServiceReferences-String-String-" xrefstyle="hyperlink"/> method and an empty collection must be
          returned by the <xref linkend="org.osgi.framework.BundleContext.getServiceReferences-Class-String-" xrefstyle="hyperlink"/> method.</para>
        </listitem>
      </itemizedlist>

      <para>The caller receives zero or more <code>ServiceReference</code>
      objects. These objects can be used to retrieve properties of the
      underlying service, or they can be used to obtain the actual service
      object. See <xref linkend="framework.service.getting"/>.</para>

      <para>The above methods require that the caller has the necessary
      <code>ServicePermission[ServiceReference, GET]</code> to get the service
      object for the returned Service Reference. If the caller lacks the
      required permission, these methods must not include that Service
      Reference in the result.</para>
    </section>

    <section>
      <title>Getting Service Properties</title>

      <para>To allow for interrogation of service properties, the
      <code>ServiceReference</code> interface defines these two
      methods:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.framework.ServiceReference.getPropertyKeys--" xrefstyle="hyperlink"/> - Returns an array of the property keys that
          are available.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.framework.ServiceReference.getProperty-String-" xrefstyle="hyperlink"/> - Returns the value of a property.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.framework.ServiceReference.getProperties--" xrefstyle="hyperlink"/> - Returns a copy of the properties.</para>
        </listitem>
      </itemizedlist>

      <para>Both of these methods must continue to provide information about
      the referenced service object, even after it has been unregistered from
      the Framework. This requirement can be useful when a
      <code>ServiceReference</code> object is stored with the Log
      Service.</para>
    </section>

    <section>
      <title>Information About Services</title>

      <para>The <code>Bundle</code> interface defines these two methods for
      returning information pertaining to service usage of the bundles:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.framework.Bundle.getRegisteredServices--" xrefstyle="hyperlink"/> - Returns the <code>ServiceReference</code>
          objects for the service objects that the bundle has registered with
          the Framework.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.framework.Bundle.getServicesInUse--" xrefstyle="hyperlink"/> - Returns the <code>ServiceReference</code>
          objects for the service objects that the bundle is currently
          using.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="i3061523">
      <title>Service Exceptions</title>

      <para>The Service Exception is a Run Time exception that can be used by
      the Framework to report errors or by user code that needs to signal a
      problem with a service. An exception type available from this exception
      provides the detailed information about the problem that caused the
      exception to be thrown.</para>

      <para>Implementations of the framework or user code are allowed to throw
      sub classes of the <code>ServiceException</code> class. If a sub class
      is thrown for a reason other than one of the specified types, then the
      type should be set to <xref linkend="org.osgi.framework.ServiceException.SUBCLASSED" xrefstyle="hyperlink"/>. Sub classes that provide additional information
      for a specified type should use the specified type.</para>
    </section>

    <section>
      <title>Services and Concurrency</title>

      <para>Services published on one thread and obtained on another thread
      must be safe to use. That is, the Framework must guarantee that there is
      a <emphasis>happens-before</emphasis> relationship between the time a
      service is registered and the time a service object or Service Reference
      is obtained. That is both the registering and obtaining threads must be
      properly synchronized with each other.</para>
    </section>
  </section>

  <section xml:id="framework.service.scope">
    <title>Service Scope</title>

    <para>The <xref linkend="org.osgi.framework.Constants.SERVICE_SCOPE" xrefstyle="hyperlink"/> service property identifies the scope of the
    registered service object. The following service scopes are supported by
    the Framework:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.framework.Constants.SCOPE_SINGLETON" xrefstyle="hyperlink"/> - Identifies the registered service object as
        a single service object which will be used by all bundles requesting
        the service object.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.framework.Constants.SCOPE_BUNDLE" xrefstyle="hyperlink"/> - Identifies the registered service object as
        a Service Factory. A Service Factory allows the registering bundle to
        customize the service object for each bundle requesting the service
        object. See <xref linkend="framework.service.serviceFactory"/></para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.framework.Constants.SCOPE_PROTOTYPE" xrefstyle="hyperlink"/> - Identifies the registered service object as
        a Prototype Service Factory. A Prototype Service Factory allows the
        registering bundle to customize the service object for each request
        for the service object. See <xref linkend="framework.service.prototypeServiceFactory"/>.</para>
      </listitem>
    </itemizedlist>

    <para>The Framework must set the <xref linkend="org.osgi.framework.Constants.SERVICE_SCOPE" xrefstyle="hyperlink"/> service property automatically depending on the
    type of registered service object. If the registered service object
    implements <xref linkend="org.osgi.framework.PrototypeServiceFactory" xrefstyle="hyperlink"/>, then the value must be <xref linkend="org.osgi.framework.Constants.SCOPE_PROTOTYPE" xrefstyle="hyperlink"/>. Otherwise, if the registered service object
    implements <xref linkend="org.osgi.framework.ServiceFactory" xrefstyle="hyperlink"/>, then the value must be <xref linkend="org.osgi.framework.Constants.SCOPE_BUNDLE" xrefstyle="hyperlink"/>. Otherwise, the value must be <xref linkend="org.osgi.framework.Constants.SCOPE_SINGLETON" xrefstyle="hyperlink"/>. The <xref linkend="org.osgi.framework.Constants.SERVICE_SCOPE" xrefstyle="hyperlink"/> service property allows bundles to determine
    whether multiple service objects can be obtained for the service.
    Component models like Declarative Services and Blueprint need to know if
    they can properly obtain multiple service objects for referenced
    services.</para>
  </section>

  <section xml:id="framework.service.getting">
    <title>Getting Service Objects</title>

    <para>There are two methods available to get service objects from the
    service registry:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.framework.BundleContext" xrefstyle="hyperlink"/>.<xref linkend="org.osgi.framework.BundleContext.getService-ServiceReference-" xrefstyle="hyperlink"/> - This method should be used if the using
        bundle only needs a single service object.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.framework.ServiceObjects" xrefstyle="hyperlink"/>.<xref linkend="org.osgi.framework.ServiceObjects.getService--" xrefstyle="hyperlink"/> - This method should be used if the service
        has <xref linkend="org.osgi.framework.Constants.SCOPE_PROTOTYPE" xrefstyle="hyperlink"/> scope and the using bundle needs multiple
        service objects.</para>
      </listitem>
    </itemizedlist>

    <para>These methods are used to obtain an actual service object so that
    the Framework can manage dependencies. If a bundle retrieves a service
    object, that bundle becomes dependent upon the life cycle of the
    registered service object. This dependency is tracked by the
    <code>BundleContext</code> object used to obtain the service object,
    directly or indirectly by a <code>ServiceObjects</code> object, and is one
    reason that it is important to be careful when sharing
    <code>BundleContext</code> and <code>ServiceObjects</code> objects with
    other bundles.</para>

    <section xml:id="framework.service.gettingSingle">
      <title>Getting a Single Service Object</title>

      <para>The <code>BundleContext</code> is used when a bundle only needs a
      single service object. The <xref linkend="org.osgi.framework.BundleContext" xrefstyle="hyperlink"/>.<xref linkend="org.osgi.framework.BundleContext.getService-ServiceReference-" xrefstyle="hyperlink"/> method returns an object that implements the
      interfaces as defined by the <code>objectClass</code> property. A bundle
      making multiple calls to this method, without releasing the service
      object, will receive the same service object.</para>

      <para>This method has the following characteristics:</para>

      <itemizedlist>
        <listitem>
          <para>Returns <code>null</code> if the underlying service object has
          been unregistered.</para>
        </listitem>

        <listitem>
          <para>Determines if the caller has
          <code>ServicePermission[ServiceReference,GET]</code>, to get a
          service object associated with the specified Service Reference. This
          permission check is necessary so that <code>ServiceReference</code>
          objects can be passed around freely without compromising
          security.</para>
        </listitem>

        <listitem>
          <para>Increments the usage count of the service by one for this
          <code>BundleContext</code> object.</para>
        </listitem>

        <listitem>
          <para>If the service has <xref linkend="org.osgi.framework.Constants.SCOPE_SINGLETON" xrefstyle="hyperlink"/> scope then the registered service object is
          returned. Otherwise, if the bundle context's usage count of the
          service is one, the registered service object is cast to a <xref linkend="org.osgi.framework.ServiceFactory" xrefstyle="hyperlink"/>
          object and the <xref linkend="org.osgi.framework.ServiceFactory.getService-Bundle-ServiceRegistration-" xrefstyle="hyperlink"/> method is called to create a customized
          service object for the calling bundle which is then cached and
          returned. Otherwise, a cached copy of this customized service object
          is returned. See <xref linkend="framework.service.serviceFactory"/>
          for more information about <code>ServiceFactory</code>
          objects.</para>
        </listitem>
      </itemizedlist>

      <para>The <xref linkend="org.osgi.framework.BundleContext" xrefstyle="hyperlink"/>.<xref linkend="org.osgi.framework.BundleContext.getService-ServiceReference-" xrefstyle="hyperlink"/> method will only return a single service object
      for the bundle even if the service has <xref linkend="org.osgi.framework.Constants.SCOPE_PROTOTYPE" xrefstyle="hyperlink"/> scope. See <xref linkend="framework.service.gettingMultiple"/> for information on how to
      obtain multiple service objects for a service with <xref linkend="org.osgi.framework.Constants.SCOPE_PROTOTYPE" xrefstyle="hyperlink"/> scope.</para>
    </section>

    <section xml:id="framework.service.gettingMultiple">
      <title>Getting Multiple Service Objects</title>

      <para>A <xref linkend="org.osgi.framework.ServiceObjects" xrefstyle="hyperlink"/> object is used when the service has <xref linkend="org.osgi.framework.Constants.SCOPE_PROTOTYPE" xrefstyle="hyperlink"/> scope and a bundle needs multiple service
      objects. A <code>ServiceObjects</code> object is associated with a
      single service and is obtained by calling the <xref linkend="org.osgi.framework.BundleContext" xrefstyle="hyperlink"/>.<xref linkend="org.osgi.framework.BundleContext.getServiceObjects-ServiceReference-" xrefstyle="hyperlink"/> method. The caller must have
      <code>ServicePermission[ServiceReference,GET]</code>, to get a
      <code>ServiceObjects</code> object for a service.</para>

      <para>The <xref linkend="org.osgi.framework.ServiceObjects" xrefstyle="hyperlink"/>.<xref linkend="org.osgi.framework.ServiceObjects.getService--" xrefstyle="hyperlink"/> method can be used to obtain multiple service
      objects for the <link linkend="org.osgi.framework.ServiceObjects.getServiceReference--">associated</link>
      service.</para>

      <para>This method has the following characteristics for a service with
      <xref linkend="org.osgi.framework.Constants.SCOPE_PROTOTYPE" xrefstyle="hyperlink"/> scope:</para>

      <itemizedlist>
        <listitem>
          <para>Returns <code>null</code> if the underlying service object has
          been unregistered.</para>
        </listitem>

        <listitem>
          <para>The registered service object is cast to a <xref linkend="org.osgi.framework.PrototypeServiceFactory" xrefstyle="hyperlink"/> object and the <xref linkend="org.osgi.framework.PrototypeServiceFactory.getService-Bundle-ServiceRegistration-" xrefstyle="hyperlink"/> method is called to create a customized
          service object. See <xref linkend="framework.service.prototypeServiceFactory" xrefstyle="hyperlink"/> for more information about
          <code>PrototypeServiceFactory</code> objects.</para>
        </listitem>

        <listitem>
          <para>The usage count for the customized service object is
          incremented.</para>
        </listitem>

        <listitem>
          <para>The customized service object is returned.</para>
        </listitem>
      </itemizedlist>

      <para>The <xref linkend="org.osgi.framework.ServiceObjects" xrefstyle="hyperlink"/>.<xref linkend="org.osgi.framework.ServiceObjects.getService--" xrefstyle="hyperlink"/> method will only return a single service object
      for the bundle if the service has <xref linkend="org.osgi.framework.Constants.SCOPE_SINGLETON" xrefstyle="hyperlink"/> or <xref linkend="org.osgi.framework.Constants.SCOPE_BUNDLE" xrefstyle="hyperlink"/> scope. That is, the method behaves the same as
      the <xref linkend="org.osgi.framework.BundleContext" xrefstyle="hyperlink"/>.<xref linkend="org.osgi.framework.BundleContext.getService-ServiceReference-" xrefstyle="hyperlink"/> method and only a single service object is
      available. See <xref linkend="framework.service.gettingSingle"/>.</para>
    </section>
  </section>

  <section xml:id="framework.service.releasing">
    <title>Releasing Service Objects</title>

    <para>A bundle must release a service object to remove the dynamic
    dependency on the bundle that registered the service object. Depending on
    how a service object was <link linkend="framework.service.getting">obtained</link>, one of the following
    methods is used to release a service object:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.framework.BundleContext" xrefstyle="hyperlink"/>.<xref linkend="org.osgi.framework.BundleContext.ungetService-ServiceReference-" xrefstyle="hyperlink"/> - This method should be used if the bundle is
        using a single service object and needs to release the single service
        object. See <xref linkend="framework.service.gettingSingle"/>.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.framework.ServiceObjects" xrefstyle="hyperlink"/>.<xref linkend="org.osgi.framework.ServiceObjects.ungetService-S-" xrefstyle="hyperlink"/> - This method should be used if the bundle is
        using multiple service objects and needs to release one of the service
        objects. See <xref linkend="framework.service.gettingMultiple"/>.</para>
      </listitem>
    </itemizedlist>

    <section xml:id="framework.service.releasingSingle">
      <title>Releasing a Single Service Object</title>

      <para>The <code>BundleContext</code> interface defines a method to
      release a single service object: <xref linkend="org.osgi.framework.BundleContext.ungetService-ServiceReference-" xrefstyle="hyperlink"/></para>

      <para>This method has the following characteristics:</para>

      <itemizedlist>
        <listitem>
          <para>If the usage count of the service for this
          <code>BundleContext</code> object is zero or the service has been
          unregistered, <code>false</code> is returned.</para>
        </listitem>

        <listitem>
          <para>The usage count of the service for this
          <code>BundleContext</code> object is decremented by one.</para>
        </listitem>

        <listitem>
          <para>If the usage count of the service for this
          <code>BundleContext</code> object is now zero and the service has
          <xref linkend="org.osgi.framework.Constants.SCOPE_BUNDLE" xrefstyle="hyperlink"/> or <xref linkend="org.osgi.framework.Constants.SCOPE_PROTOTYPE" xrefstyle="hyperlink"/> scope, the registered service object is cast
          to a <xref linkend="org.osgi.framework.ServiceFactory" xrefstyle="hyperlink"/> object and the <xref linkend="org.osgi.framework.ServiceFactory.ungetService-Bundle-ServiceRegistration-S-" xrefstyle="hyperlink"/> method is called to release the previously
          cached customized service object for the calling bundle. The cached
          customized service object must be unreferenced by the Framework so
          it may be garbage collected. See <xref linkend="framework.service.serviceFactory"/> for more information
          about <code>ServiceFactory</code> objects.</para>
        </listitem>

        <listitem>
          <para><code>true</code> is returned.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="framework.service.releasingMultiple">
      <title>Releasing Multiple Service Objects</title>

      <para>A <code>ServiceObjects</code> object can be used to obtain
      multiple service objects for the <link linkend="org.osgi.framework.ServiceObjects.getServiceReference--" xrefstyle="hyperlink">associated</link> service if the service has <xref linkend="org.osgi.framework.Constants.SCOPE_PROTOTYPE" xrefstyle="hyperlink"/> scope. The <code>ServiceObjects</code> interface
      defines a method to release one of the service objects obtained by a
      bundle: <xref linkend="org.osgi.framework.ServiceObjects.ungetService-S-" xrefstyle="hyperlink"/>. If the associated service has <xref linkend="org.osgi.framework.Constants.SCOPE_SINGLETON" xrefstyle="hyperlink"/> or <xref linkend="org.osgi.framework.Constants.SCOPE_BUNDLE" xrefstyle="hyperlink"/> scope, this method behaves the same as calling
      the <xref linkend="org.osgi.framework.BundleContext" xrefstyle="hyperlink"/>.<xref linkend="org.osgi.framework.BundleContext.ungetService-ServiceReference-" xrefstyle="hyperlink"/> method.</para>

      <para>For a service with <xref linkend="org.osgi.framework.Constants.SCOPE_PROTOTYPE" xrefstyle="hyperlink"/> scope, the following steps are required to
      release the specified service object:</para>

      <itemizedlist>
        <listitem>
          <para>If the associated service has been unregistered, this method
          returns without doing anything.</para>
        </listitem>

        <listitem>
          <para>If the specified service object is <code>null</code> or was
          not provided by a <code>ServiceObjects</code> for the <link linkend="org.osgi.framework.ServiceObjects.getServiceReference--" xrefstyle="hyperlink">associated</link> service, then an
          <code>IllegalArgumentException</code> is thrown.</para>
        </listitem>

        <listitem>
          <para>The usage count for the specified service object is
          decremented.</para>
        </listitem>

        <listitem>
          <para>If the usage count for the specified service object is now
          zero, the registered service object is cast to a <xref linkend="org.osgi.framework.PrototypeServiceFactory" xrefstyle="hyperlink"/> object and the <xref linkend="org.osgi.framework.PrototypeServiceFactory.ungetService-Bundle-ServiceRegistration-S-" xrefstyle="hyperlink"/> method is called to release the specified
          service object . The specified service object must be unreferenced
          by the Framework so it may be garbage collected. See <xref linkend="framework.service.prototypeServiceFactory"/> for more
          information about <code>PrototypeServiceFactory</code>
          objects.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section xml:id="i3081215">
    <title>Service Events</title>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.framework.ServiceEvent" xrefstyle="hyperlink"/> - Reports registration, unregistration, and
        property changes for service objects. All events of this kind must be
        delivered synchronously. The type of the event is given by the <xref linkend="org.osgi.framework.ServiceEvent.getType--" xrefstyle="hyperlink"/> method, which returns an <code>int</code>.
        Event types can be extended in the future; unknown event types should
        be ignored.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.framework.ServiceListener" xrefstyle="hyperlink"/> - Called with a <code>ServiceEvent</code> when
        a service object has been registered or modified, or is in the process
        of unregistering. A security check must be performed for each
        registered listener when a <code>ServiceEvent</code> occurs. The
        listener must not be called unless the bundle which registered the
        listener has the required
        <code>ServicePermission[ServiceReference,GET]</code> for the
        corresponding Service Reference.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.framework.AllServiceListener" xrefstyle="hyperlink"/> - Services can only be seen when the service
        interface/class is not incompatible with the getter. The <xref linkend="org.osgi.framework.AllServiceListener" xrefstyle="hyperlink"/> is a marker interface that indicates that the
        getter wants to receive events for all services even if they are
        incompatible. See <xref linkend="framework.service.multipleversionexportconsiderations"/>.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.framework.UnfilteredServiceListener" xrefstyle="hyperlink"/> - Extenders (bundles that can act on behalf of
        other bundles) frequently require unfiltered access to the service
        events for efficiency reasons. However, when they register without a
        filter then the Service Hooks, see <xref linkend="framework.servicehooks"/>, cannot provide the filter
        expression to the hooks. This filter information is sometimes
        necessary to detect when certain services are needed. Therefore, the
        <xref linkend="org.osgi.framework.UnfilteredServiceListener" xrefstyle="hyperlink"/> interface is a marker interface that instructs
        the framework to never filter service events but still pass the filter
        to the Service Hooks. Extenders should use a single <xref linkend="org.osgi.framework.UnfilteredServiceListener" xrefstyle="hyperlink"/> object with a compound filter.</para>
      </listitem>
    </itemizedlist>

    <para>A bundle that uses a service object should register a
    <code>ServiceListener</code> object to track the availability of the
    service object, and take appropriate action when the service object is
    unregistering.</para>

    <section xml:id="i3061130">
      <title>Service Event Types</title>

      <para>The following service events are defined:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.framework.ServiceEvent.REGISTERED" xrefstyle="hyperlink"/> - A service object has been registered. This
          event is synchronously delivered after the service object has been
          registered with the Framework.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.framework.ServiceEvent.MODIFIED" xrefstyle="hyperlink"/> - The properties of a service have been
          modified. This event is synchronously delivered after the service
          properties have been modified.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.framework.ServiceEvent.MODIFIED_ENDMATCH" xrefstyle="hyperlink"/> - Listeners registered with a filter can not
          see the <code>MODIFIED</code> event when a modification makes the
          filter no longer match. The lack of this notification complicates
          tracking a service with a filter. The <code>MODIFIED_ENDMATCH</code>
          event is therefore delivered if the old service properties matched
          the given filter but the modified properties do not. This event is
          synchronously delivered after the service properties have been
          modified.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.framework.ServiceEvent.UNREGISTERING" xrefstyle="hyperlink"/> - A service object is in the process of
          being unregistered. This event is synchronously delivered before the
          service object has completed unregistering. That is, during the
          delivery of this event, the service object is still valid. The
          bundle receiving this event must release all references to this
          service before this method returns.</para>
        </listitem>
      </itemizedlist>

      <para>New service event types can be added in future
      specifications</para>
    </section>
  </section>

  <section>
    <title>Stale References</title>

    <para>The Framework must manage the dependencies between bundles. This
    management is, however, restricted to Framework structures. Bundles must
    listen to events generated by the Framework to clean up and remove
    <emphasis>stale references</emphasis>.</para>

    <para>A stale reference is a reference to a Java object that belongs to
    the class loader of a bundle that is stopped or is associated with a
    service object that is unregistered. Standard Java does not provide any
    generic means to clean up stale references, and bundle developers must
    analyze their code carefully to ensure that stale references are
    deleted.</para>

    <para>Stale references are potentially harmful because they hinder the
    Java garbage collector from harvesting the classes, and possibly the
    instances, of stopped bundles. This may result in significantly increased
    memory usage and can cause updating native code libraries to fail. Bundles
    using services are strongly recommended to use either the Service Tracker
    or Declarative Services.</para>

    <para>Service developers can minimize the consequences of (but not
    completely prevent) stale references by using the following
    mechanisms:</para>

    <itemizedlist>
      <listitem>
        <para>Implement service objects using the <code>ServiceFactory</code>
        or <code>PrototypeServiceFactory</code> interface. The methods in the
        <code>ServiceFactory</code> and <code>PrototypeServiceFactory</code>
        interface simplify tracking bundles that use their service objects.
        See <xref linkend="framework.service.serviceFactory"/> and <xref linkend="framework.service.prototypeServiceFactory"/>.</para>
      </listitem>

      <listitem>
        <para>Use indirection in the service object implementations. Service
        objects handed out to other bundles should use a pointer to the actual
        service implementation. When the service object becomes invalid, the
        pointer is set to <code>null</code>, effectively removing the
        reference to the actual service implementation.</para>
      </listitem>
    </itemizedlist>

    <para>The behavior of a service object that becomes unregistered is
    undefined. Such service objects may continue to work properly or throw an
    exception at their discretion. This type of error should be logged.</para>
  </section>

  <section xml:id="i2671413">
    <title>Filters</title>

    <para>The Framework provides a <xref linkend="org.osgi.framework.Filter" xrefstyle="hyperlink"/> interface, and uses a filter syntax in the
    <code>getServiceReferences</code> methods that is defined in <xref linkend="framework.module.filtersyntax"/>. Filter objects can be created
    by calling <xref linkend="org.osgi.framework.BundleContext" xrefstyle="hyperlink"/>.<xref linkend="org.osgi.framework.BundleContext.createFilter-String-" xrefstyle="hyperlink"/> or <xref linkend="org.osgi.framework.FrameworkUtil" xrefstyle="hyperlink"/>.<xref linkend="org.osgi.framework.FrameworkUtil.createFilter-String-" xrefstyle="hyperlink"/> with the chosen filter string. The filter supports
    the following match methods:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.framework.Filter.match-ServiceReference-" xrefstyle="hyperlink"/> - Match the properties of the Service
        Reference performing key lookup in a case insensitive way.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.framework.Filter.match-Dictionary-" xrefstyle="hyperlink"/> - Match the entries in the given
        <code>Dictionary</code> object performing key lookup in a case
        insensitive way.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.framework.Filter.matchCase-Dictionary-" xrefstyle="hyperlink"/> - Match the entries in the given
        <code>Dictionary</code> object performing key lookup in a case
        sensitive way.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.framework.Filter.matches-Map-" xrefstyle="hyperlink"/> - Match the entries in the given
        <code>Map</code> object performing key lookup in a case sensitive
        way.</para>
      </listitem>
    </itemizedlist>

    <para>A <code>Filter</code> object can be used numerous times to determine
    if the match argument, a <code>ServiceReference</code> object, a
    <code>Map</code> object, or a <code>Dictionary</code> object, matches the
    filter string that was used to create the <code>Filter</code>
    object.</para>

    <para>This matching requires comparing the value string in the filter to a
    target object from the service properties, dictionary, or map. This
    comparison can be executed with the <code>Comparable</code> interface if
    the target object's class implements the <code>Comparable</code>
    interface. If the target object's class does not implement
    <code>Comparable</code>, the =, ~=, &lt;= &gt;= operators must return only
    true when the objects are equal (using the <code>equals(Object)</code>
    method).</para>

    <para>The value string in the filter can be converted into an object
    suitable for comparison with the target object if the target object's
    class implements either a static <code>valueOf</code> method taking a
    single <code>String</code> object or a constructor taking a single
    <code>String</code> object. That is, if the target object is of class
    <code>Target</code>, the class <code>Target</code> must implement one of
    the following methods:</para>

    <itemizedlist>
      <listitem>
        <para>A static <code>valueOf(String)</code> method whose return type
        is assignable to <code>Target</code></para>
      </listitem>

      <listitem>
        <para>A <code>Target(String)</code> constructor</para>
      </listitem>
    </itemizedlist>

    <para>The <code>Target</code> class does not need to be a public
    class.</para>

    <para>If during the evaluation of the filter a target object throws an
    exception, then this exception must not be re-thrown but caught. The
    result of the evaluation must then be interpreted as
    <code>false</code>.</para>

    <para>The following example shows how a class can verify the ordering of
    an enumeration with a filter.</para>

    <programlisting>public class B implements Comparable {
    String keys[] = {"bugs", "daffy", "elmer", "pepe"};
    int         index;

    public B(String s) {
        for ( index=0; index&lt;keys.length; index++ )
            if ( keys[index].equals(s) )
                return;
    }

    public int compareTo( Object other ) {
        B vother = (B) other;
        return index - vother.index;
    }
 }</programlisting>

    <para>The class could be used with the following filter:</para>

    <programlisting>(!(enum&gt;=elmer))   -&gt; matches bugs and daffy</programlisting>

    <para>The <code>Filter.toString</code> method must always return the
    filter string with unnecessary white space removed.</para>
  </section>

  <section xml:id="framework.service.serviceFactory">
    <title>Service Factory</title>

    <para>A Service Factory allows customization of the service object that is
    returned to a calling bundle. See <xref linkend="framework.service.gettingSingle"/>. See also <xref linkend="framework.service.prototypeServiceFactory"/>.</para>

    <para>Often, the service object that is registered by a bundle is returned
    directly to all using bundles. Such a service has <xref linkend="org.osgi.framework.Constants.SCOPE_SINGLETON" xrefstyle="hyperlink"/> scope. If, however, the registered service object
    implements the <xref linkend="org.osgi.framework.ServiceFactory" xrefstyle="hyperlink"/> interface, the service has <xref linkend="org.osgi.framework.Constants.SCOPE_BUNDLE" xrefstyle="hyperlink"/> scope and the Framework must call methods on the
    registered object to obtain a customized service object for each distinct
    bundle that gets the service.</para>

    <para>When the customized service object is no longer used by a bundle -
    for example, when that bundle is stopped - then the Framework must notify
    the <code>ServiceFactory</code> object to release the customized service
    object.</para>

    <para><code>ServiceFactory</code> objects help manage bundle dependencies
    that are not explicitly managed by the Framework. By binding a returned
    service object to the requesting bundle, the service can be notified when
    that bundle ceases to use the customized service object, such as when it
    is stopped, and release resources associated with providing the service to
    that bundle.</para>

    <para>The <code>ServiceFactory</code> interface defines the following
    methods:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.framework.ServiceFactory.getService-Bundle-ServiceRegistration-" xrefstyle="hyperlink"/> - This method is called by the Framework when
        it needs to obtain a customized service object for a requesting
        bundle. See <xref linkend="framework.service.getting"/>.</para>

        <para>The Framework must check the customized service object returned
        by this method. If it is not an instance of all the classes named when
        the Service Factory was registered, <code>null</code> is returned to
        the requesting bundle. This check must be done as specified in <xref linkend="framework.service.registeringservices"/>.</para>

        <para>If this method is called recursively for the same bundle then it
        must return <code>null</code> to break the recursion.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.framework.ServiceFactory.ungetService-Bundle-ServiceRegistration-S-" xrefstyle="hyperlink"/> - This method is called by the Framework when
        it needs to release a customized service object for a requesting
        bundle. See <xref linkend="framework.service.releasing"/>.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="framework.service.prototypeServiceFactory">
    <title>Prototype Service Factory</title>

    <para>A Prototype Service Factory allows customization of service objects
    and allows multiple service objects to be used by a bundle. See <xref linkend="framework.service.gettingMultiple"/>. See also <xref linkend="framework.service.serviceFactory"/>.</para>

    <para>Often, the service object that is registered by a bundle is returned
    directly to all using bundles. Such a service has <xref linkend="org.osgi.framework.Constants.SCOPE_SINGLETON" xrefstyle="hyperlink"/> scope. If, however, the registered service object
    implements the <xref linkend="org.osgi.framework.PrototypeServiceFactory" xrefstyle="hyperlink"/> interface, the service has <xref linkend="org.osgi.framework.Constants.SCOPE_PROTOTYPE" xrefstyle="hyperlink"/> scope and the Framework must call methods on the
    registered service object to create customized service object instances
    for each call to <xref linkend="org.osgi.framework.ServiceObjects" xrefstyle="hyperlink"/>.<xref linkend="org.osgi.framework.ServiceObjects.getService--" xrefstyle="hyperlink"/>. Services with <xref linkend="org.osgi.framework.Constants.SCOPE_PROTOTYPE" xrefstyle="hyperlink"/> are useful for service objects that maintain state
    for the duration of usage and the using bundles require multiple service
    objects at the same time.</para>

    <para>When the customized service objects are no longer used by a bundle -
    for example, when that bundle is stopped - then the Framework must notify
    the <code>PrototypeServiceFactory</code> object to release all the
    customized service objects.</para>

    <para><code>PrototypeServiceFactory</code> objects help manage bundle
    dependencies that are not explicitly managed by the Framework. By binding
    a returned service object to the requesting bundle and optionally some
    other stateful information, the Prototype Service Factory can be notified
    when that bundle ceases to use a customized service object, such as when
    it is stopped, and release resources associated with providing a
    customized service object to that bundle.</para>

    <para>The <code>PrototypeServiceFactory</code> interface defines the
    following methods:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.framework.PrototypeServiceFactory.getService-Bundle-ServiceRegistration-" xrefstyle="hyperlink"/> - This method is called by the Framework when
        it needs to obtain a customized service object for a requesting
        bundle. See <xref linkend="framework.service.getting"/>.</para>

        <para>The Framework must check the customized service object returned
        by this method. If it is not an instance of all the classes named when
        the Service Factory was registered, <code>null</code> is returned to
        the requesting bundle. This check must be done as specified in <xref linkend="framework.service.registeringservices"/>.</para>

        <para>For each customized services object returned by this method, the
        Framework must hold a reference to it until it is released. This is
        necessary so the Framework can release all unused and unreleased
        customized service objects - for example, when a requesting bundle is
        stopped or the service object is unregistered.</para>

        <para>Since this method can return the same service object repeatedly,
        the framework must maintain a usage count for each customized service
        object so that it is only released when its usage count returns to
        zero.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.framework.PrototypeServiceFactory.ungetService-Bundle-ServiceRegistration-S-" xrefstyle="hyperlink"/> - This method is called by the Framework when
        it needs to release a customized service object for a requesting
        bundle. See <xref linkend="framework.service.releasing"/>.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="i1180814">
    <title>Unregistering Services</title>

    <para>The <code>ServiceRegistration</code> interface defines the <xref linkend="org.osgi.framework.ServiceRegistration.unregister--" xrefstyle="hyperlink"/> method to unregister the service object. This must
    remove the service object from the Framework service registry. Any
    <code>ServiceReference</code> object for this
    <code>ServiceRegistration</code> object can no longer be used to access
    the service object.</para>

    <para>The fact that this method is on the <code>ServiceRegistration</code>
    object ensures that only the bundle holding this object can unregister the
    associated service object. The bundle that unregisters a service object,
    however, might not be the same bundle that registered it. As an example,
    the registering bundle could have passed the
    <code>ServiceRegistration</code> object to another bundle, endowing that
    bundle with the responsibility of unregistering the service object.
    Passing <code>ServiceRegistration</code> objects should be done with
    caution.</para>

    <para>After <xref linkend="org.osgi.framework.ServiceRegistration.unregister--" xrefstyle="hyperlink"/> successfully completes, the service objects must
    be:</para>

    <itemizedlist>
      <listitem>
        <para>Completely removed from the Framework service registry.
        Therefore, <code>ServiceReference</code> objects obtained for that
        service object can no longer be used to access a service object.
        Attempts to get a service object must return <code>null</code>.</para>
      </listitem>

      <listitem>
        <para>Unregistered, even if other bundles had dependencies upon it.
        Bundles must be notified of the unregistration through the publishing
        of a <code>ServiceEvent</code> of type <xref linkend="org.osgi.framework.ServiceEvent.UNREGISTERING" xrefstyle="hyperlink"/>. This event is sent synchronously in order to
        give bundles the opportunity to release service objects.</para>

        <para>After receiving an event of type <xref linkend="org.osgi.framework.ServiceEvent.UNREGISTERING" xrefstyle="hyperlink"/>, a bundle should release the service objects
        and release any references it has to the service objects, so that the
        service objects can be garbage collected by the Java VM.</para>
      </listitem>

      <listitem>
        <para>Released by all using bundles. For each bundle with unreleased
        service objects after all invoked <code>ServiceListener</code> objects
        have returned, the Framework must release all the service
        objects.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="framework.service.multipleversionexportconsiderations">
    <title>Multiple Version Export Considerations</title>

    <para>Allowing multiple bundles to export a package with a given name
    causes some complications for Framework implementers and bundle
    programmers: The class name no longer uniquely identifies the exported
    class. This affects the service registry and permission checking.</para>

    <section>
      <title>Service Registry</title>

      <para>Bundles must not be exposed to service objects for which there are
      conflicting class loaders. A bundle that gets a service object should be
      able to expect that it can safely cast the service object to any of the
      associated interfaces or classes under which the service object was
      registered and that it can access. No <code>ClassCastExceptions</code>
      should occur because those interfaces do not come from the same class
      loader. The service registry must therefore ensure that bundles can only
      see service objects that are <emphasis>not incompatible</emphasis> with
      the bundle. A service object is not incompatible with the bundle getting
      the service object when that bundle is not wired to another source class
      loader for this interface package than the bundle registering the
      service object. That is, it is either wired to the same source class
      loader or it has no wire for that package at all.</para>

      <para>It is paramount that bundles are not accidentally confronted with
      incompatible service objects. Therefore, the following methods need to
      filter <code>ServiceReference</code> objects depending on the
      incompatibility of the interfaces with the calling bundle and only
      return Service Reference objects for services object that are not
      incompatible with the calling bundle for the specified interface. The
      bundle is identified by the used Bundle Context:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.framework.BundleContext.getServiceReference-String-" xrefstyle="hyperlink"/></para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.framework.BundleContext.getServiceReference-Class-" xrefstyle="hyperlink"/></para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.framework.BundleContext.getServiceReferences-String-String-" xrefstyle="hyperlink"/></para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.framework.BundleContext.getServiceReferences-Class-String-" xrefstyle="hyperlink"/></para>
        </listitem>
      </itemizedlist>

      <para>The <xref linkend="org.osgi.framework.BundleContext.getAllServiceReferences-String-String-" xrefstyle="hyperlink"/> method provides access to the service registry
      without any compatibility restrictions. Service References acquired
      through this method can be used to obtain service objects which can
      cause a Class Cast Exception when casting to the specified class
      name.</para>

      <para>The <xref linkend="org.osgi.framework.ServiceReference" xrefstyle="hyperlink"/>.<xref linkend="org.osgi.framework.ServiceReference.isAssignableTo-Bundle-String-" xrefstyle="hyperlink"/> method is also available to test if the bundle
      that registered the service object referenced by this ServiceReference
      and the specified bundle are both wired to same source for the specified
      interface.</para>
    </section>

    <section xml:id="i3081203">
      <title>Service Events</title>

      <para>Service events must only be delivered to event listeners
      registered by bundles that are not incompatible with the referenced
      service object.</para>

      <para>Some bundles need to listen to all service events regardless of
      any compatibility issues. A special type of ServiceListener can
      therefore be used: <xref linkend="org.osgi.framework.AllServiceListener" xrefstyle="hyperlink"/>. This is a marker interface; it extends <xref linkend="org.osgi.framework.ServiceListener" xrefstyle="hyperlink"/>.
      Listeners that use this marker interface indicate to the Framework that
      the bundle registering the event listener wants to see events for all
      services, including for service objects that are incompatible with the
      bundle.</para>
    </section>
  </section>

  <section>
    <title>Security</title>

    <section xml:id="i3043587">
      <title>Service Permission</title>

      <para>A <code>ServicePermission</code> has the following
      parameters.</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>target</emphasis> - Either the interface name or a
          filter expression for the <code>GET</code> action. The interface
          name may end with a wildcard to match multiple interface names. See
          <code>java.security.BasicPermission</code> for a discussion of
          wildcards. Filters are explained in <xref linkend="framework.security.filterbasedpermissions"/>. The filter
          expression can additionally test for the service interface name with
          the <code>objectClass</code> key. Additionally, a service permission
          can also test for service properties that are part of the service
          registration. In general, all the service properties are usable in
          the filter expression. However, when there is a name conflict with
          the bundle identification properties, then the key can be prefixed
          with the commercial at sign (<code>'@' \u0040</code>). For example,
          @id will refer to a service property with the name id.</para>
        </listitem>

        <listitem>
          <para><emphasis>action</emphasis> - Supported actions are:</para>

          <itemizedlist>
            <listitem>
              <para><code>REGISTER</code> - Indicates that the permission
              holder may register the service object</para>
            </listitem>

            <listitem>
              <para><code>GET</code> - Indicates that the holder may get the
              service.</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>

      <para>When an object is being registered as a service object using
      <code>BundleContext.registerService</code>, the registering bundle must
      have the <code>ServicePermission</code> to register all the named
      classes. See <xref linkend="framework.service.registeringservices"/>.</para>

      <para>When a <code>ServiceReference</code> object is obtained from the
      service registry, see <xref linkend="framework.service.locating"/>, the
      calling bundle must have the required
      <code>ServicePermission[ServiceReference, GET]</code> to get the service
      object for each returned Service Reference.</para>

      <para>When a service object is obtained using a
      <code>ServiceReference</code> object, see <xref linkend="framework.service.getting"/>, the calling code must have the
      required <code>ServicePermission[ServiceReference, GET]</code> to get
      the service object associated with the Service Reference.</para>

      <para><code>ServicePermission</code> must be used as a filter for the
      service events received by the Service Listener, as well as for the
      methods to enumerate services, including
      <code>Bundle.getRegisteredServices</code> and
      <code>Bundle.getServicesInUse</code>. The Framework must assure that a
      bundle must not be able to detect the presence of a service that it does
      not have permission to access.</para>
    </section>
  </section>
</chapter>

  <chapter label="6" revision="$Id: 8bd0a662ee1076078cfd1cb23972c5b8204c876c $" version="5.0" xml:id="framework.resource" xml:base="006/framework.resource.xml">
  <title>Resource API Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.resource-version" linkend="org.osgi.resource"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>This section describes the API for the generic
    Requirement-Capability model as introduced in the <xref linkend="framework.module.dependencies"/>. This API is not used directly
    by the Framework, the purpose of specifying this base API is to allow it
    to be used as building block for other specifications.</para>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Resource</emphasis> - An entity that can be
          installed in an Environment where it will provide its Capabilities
          when all its Requirements are satisfied.</para>
        </listitem>

        <listitem>
          <para><emphasis>Environment</emphasis> - A framework or container
          that contains one or more Resources.</para>
        </listitem>

        <listitem>
          <para><emphasis>Namespace</emphasis> - Defines the semantics of the
          Requirements and Capabilities; a Requirement can only match a
          Capability when they are in the same Namespace. A Namespace is
          similar to a type in an object oriented language.</para>
        </listitem>

        <listitem>
          <para><emphasis>Requirement</emphasis> - An assertion on a
          Capability in a Namespace. The assertion uses the OSGi filter
          language to match the attributes of a Capability. The filter is
          specified as a directive; a Requirement can also have other
          directives and attributes.</para>
        </listitem>

        <listitem>
          <para><emphasis>Capability</emphasis> - An attribute based
          description of a quality of a Resource when installed in an
          Environment.</para>
        </listitem>

        <listitem>
          <para><emphasis>Wiring</emphasis> - The wired state of a
          Resource.</para>
        </listitem>

        <listitem>
          <para><emphasis>Wire</emphasis> - Connects a Requirement to a
          matching Capability.</para>
        </listitem>
      </itemizedlist>

      <figure pgwide="1" xml:id="i1764826">
        <title>Class diagram for org.osgi.resource</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.000in" contentwidth="6.415in" fileref="resource-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section>
    <title>Resources</title>

    <para>The OSGi dependency model is introduced in <xref linkend="framework.module.dependencies"/> ; it is based on a generic
    <emphasis>Requirements/Capability</emphasis> model. In this model a
    <emphasis>Resource</emphasis> models something that can be installed in an
    <emphasis>Environment</emphasis> but has Requirements that must be
    satisfied by Capabilities available in that the Environment. However, once
    it is installed and resolved into the Environment it provides its declared
    Capabilities to that Environment. Bundles are Resources, an example of a
    Requirement is an Import-Package clause, and an example of a Capability is
    an Export-Package clause.</para>

    <para>The <code>org.osgi.resource</code> package contains a base API that
    defines a number of interfaces that model this generic model.</para>

    <para>The <code>org.osgi.framework.wiring</code> package provides an API
    for reflecting the wiring of an OSGi Framework. The purpose of the
    separation is to allow the management agents to treat the system in a
    uniform way. That is, it allows a wide array of resources and environments
    to be modeled, and thus managed, in a uniform way. The Resource API is
    therefore primarily a building block for other specifications.</para>

    <para>The <xref linkend="org.osgi.resource.Capability" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.resource.Requirement" xrefstyle="hyperlink"/> class are almost identical in their signature.
    They both provide the following methods:</para>

    <itemizedlist>
      <listitem>
        <para><code>getAttributes()</code> - Return a map with the
        attributes</para>
      </listitem>

      <listitem>
        <para><code>getDirectives()</code> - Return a map with the
        directives</para>
      </listitem>

      <listitem>
        <para><code>getNamespace()</code> - Return the Namespace</para>
      </listitem>

      <listitem>
        <para><code>getResource()</code> - Return the Resource</para>
      </listitem>
    </itemizedlist>

    <para>The key difference between a Requirement and a Capability is that a
    Capability provides attributes that are matched by an OSGi filter
    specified in a Requirement's <code>filter</code> directive.</para>
  </section>

  <section>
    <title>Namespaces</title>

    <para>The <emphasis>Namespace</emphasis> acts as the type of a Capability
    and Requirement. A Capability and a Requirement can only match when they
    are in the same Namespace. The Namespaces in use by the OSGi Core
    specification are defined in <xref linkend="framework.namespaces"/>. Other
    specifications can, however, define their own Namespaces.</para>

    <para>A Namespace defines:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Requirement Attributes</emphasis> - Any attributes
        that are allowed to be used on a Requirement declaration.</para>
      </listitem>

      <listitem>
        <para><emphasis>Requirement Directives</emphasis> - Any directives
        that are allowed to be used on a Requirement declaration.</para>
      </listitem>

      <listitem>
        <para><emphasis>Capability Attributes</emphasis> - Any attributes that
        are allowed to be used on a Capability, these attributes are available
        for matching.</para>
      </listitem>

      <listitem>
        <para><emphasis>Capability Directives</emphasis> - Any defined
        directives that are allowed to be used on the Capability</para>
      </listitem>

      <listitem>
        <para><emphasis>Semantics</emphasis> - The Namespace definition
        defines what the meaning is of a Capability. This can include actions
        in the Environment like for example being wired with certain
        rules.</para>
      </listitem>
    </itemizedlist>

    <section>
      <title>Matching</title>

      <para>A Requirement matches a Capability when:</para>

      <itemizedlist>
        <listitem>
          <para>They have the same Namespace, and</para>
        </listitem>

        <listitem>
          <para>The Requirement's filter matches the Capability's attributes,
          and</para>
        </listitem>

        <listitem>
          <para>If the Namespace is an <code>osgi.wiring.*</code> Namespace
          then the <code>mandatory</code> directive must be supported.</para>
        </listitem>
      </itemizedlist>

      <para>Other Namespaces must not introduce additional matching
      rules.</para>
    </section>
  </section>

  <section>
    <title>Resolution</title>

    <para>Before a Resource can provide its functionality it must be
    <emphasis>resolved</emphasis> against the Environment. The Environment can
    provide a number of Capabilities of its own but in general the
    Capabilities come from the of the installed Resources. The
    <emphasis>resolver</emphasis> must find a set of
    <emphasis>Wires</emphasis> between Requirements and Capabilities in an
    Environment such that each mandatory Requirement is satisfied with at
    least one Capability, and the constraints of the involved Namespaces are
    all met.</para>

    <para>Resolving is an NP-complete problem since there are many solutions,
    it is easy to test if a solution is right, but there is no algorithm to
    calculate a solution. In practice, for the OSGi resolvers it is possible
    to find solutions in a reasonable amount of time. However, the nature of
    NP-complete problems makes it difficult to set exact rules: many solutions
    are correct. Constraining the resolvers too much would stifle innovation
    and likely cause performance problems.</para>

    <para>In general the Environment has an existing
    <emphasis>Wiring</emphasis> state for already installed Resources. The
    resolver then calculates a resolution, which is a set of Wires that should
    be added to the existing Wiring state by installing the Resources. A Wire
    is a connection from a Requirement to a Capability. A Requirement or
    Capability is <emphasis>declared</emphasis> in a Resource. This is
    depicted in <xref linkend="i1769129"/>.</para>

    <figure xml:id="i1769129">
      <title>Wire and declared Resources</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="0.690in" contentwidth="6.185in" fileref="wire-resources.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <section>
      <title>Hosted Requirements and Capabilities</title>

      <para>Though each Capability and Requirement is declared in a Resource,
      it can however be <emphasis>hosted</emphasis> by another Resource. For
      example, when a Fragment has an Export-Package header it is in reality
      its host that will provide that package. There is therefore a clear
      distinction between the Resource that declares the
      Capability/Requirement and the run time Wiring state that hosts that
      Capability. For this reason, a Wire connects a Requirement and a
      Capability but links separately to the Resources that host the
      Requirement and the Capability. <xref linkend="i1769742"/> depicts a
      hosted Capability. The Capability from the Fragment bundle is hosted by
      Host A and Host B.</para>

      <figure xml:id="i1769742">
        <title>Hosted Capability Example</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.858in" contentwidth="6.242in" fileref="hosted-cap-example.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>For this reason, the <xref linkend="org.osgi.resource.Wire" xrefstyle="hyperlink"/> class provides the following methods:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.resource.Wire.getRequirement--" xrefstyle="hyperlink"/> - The Requirement wired from.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.resource.Wire.getRequirer--" xrefstyle="hyperlink"/> - The Resource that hosts the
          Requirement.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.resource.Wire.getCapability--" xrefstyle="hyperlink"/> - The Capability that is wired to.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.resource.Wire.getProvider--" xrefstyle="hyperlink"/> - The Resource that hosts the
          Capability.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Resolution</title>

      <para>Requirements can be <code>optional</code> or
      <code>mandatory</code>, as specified in the <code>resolution</code>
      directive, which is only available on the Requirement. Optional
      Requirements do not have to be satisfied by the Resolver. Environments
      can be eager or relaxed in finding Resources to resolve optional
      Requirements. All mandatory Requirements of a Resource must be satisfied
      before that Resource's Capabilities can be provided to the
      Environment.</para>

      <para>The syntax of the resolution directive is therefore:</para>

      <programlisting>resolution ::= 'optional' | 'mandatory'</programlisting>

      <para>The default is <code>mandatory</code>.</para>
    </section>

    <section>
      <title>Effectiveness</title>

      <para>Both Requirements and Capabilities support the
      <code>effective</code> directive. This directive provides a name that
      can be used by the Environment to control the resolving process. During
      a resolve process, the Environment can then decide one or more names
      that must match the <code>effective</code> directive.</para>

      <para>For the OSGi Framework, the name <code>resolve</code> is reserved,
      this is also the default. The syntax is therefore:</para>

      <programlisting>effective ::= &lt;name&gt;</programlisting>
    </section>

    <section>
      <title>Mandatory Attributes</title>

      <para>If a Capability has declared a <code>mandatory</code> directive
      and the Namespace starts with <code>osgi.wiring</code> then it mandates
      that the names listed directive are used in the filter and must match.
      The syntax for the mandatory attribute is:</para>

      <programlisting>mandatory   ::= extended ( ',' extended )*</programlisting>
    </section>

    <section>
      <title>Cardinality</title>

      <para>The cardinality directive defines if a Requirement can be wired to
      multiple Capabilities or must be wired to at most one. The syntax for
      the directive is:</para>

      <programlisting>cardinality ::= 'single' | 'multiple'</programlisting>

      <para>The default is <code>single</code>.</para>
    </section>

    <section>
      <title>Class Space Consistency</title>

      <para>Though the Requirement/Capability model is generic it is linked
      closely with the class loading architecture of OSGi frameworks,
      particularly class space consistency, see <xref linkend="framework.module.constraint.solving"/>. For this reason, each
      Capability can specify its <emphasis>uses constraints</emphasis> with
      the <code>uses</code> Capability directive. The uses directive always
      contains a comma separated list of package names. The resolver must
      ensure that any resolution does not violate the class space consistency
      based on these constraints. Uses constraints can be specified on any
      Capability, not just Capabilities related to class loading, and are
      always about Java packages. The syntax of the directive is:</para>

      <programlisting>uses ::= package-name ( ',' package-name )*</programlisting>
    </section>
  </section>

  <section>
    <title>Wiring</title>

    <para>A resolver calculates a set of Wires between Requirements and
    Capabilities based on an existing, potentially empty, state. The existing
    state in the Environment is represented in a set of <xref linkend="org.osgi.resource.Wiring" xrefstyle="hyperlink"/> objects. Such
    an object represents the Wiring state of a Resource in an Environment. It
    provides access to all hosted Requirements and Capabilities as well as
    existing Wires. It has the following methods to conveniently provide
    access to the state:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.resource.Wiring.getResource--" xrefstyle="hyperlink"/> - The related Resource.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.resource.Wiring.getProvidedResourceWires-String-" xrefstyle="hyperlink"/> - Get any Wires, in the given Namespace, where
        the related Resource is the provider.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.resource.Wiring.getRequiredResourceWires-String-" xrefstyle="hyperlink"/> - Get any Wires, in the given Namespace, where
        the related Resource is the requirer.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.resource.Wiring.getResourceCapabilities-String-" xrefstyle="hyperlink"/> - Get the hosted Capabilities of the related
        Resource.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.resource.Wiring.getResourceRequirements-String-" xrefstyle="hyperlink"/> - Get the hosted Requirements of the related
        Resource.</para>
      </listitem>
    </itemizedlist>
  </section>
</chapter>

  <chapter label="7" revision="$Id: 834a857f8a5b21b559c6d8d8116795d9396945cc $" version="5.0" xml:id="framework.wiring" xml:base="007/framework.wiring.xml">
  <title>Bundle Wiring API Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.framework.wiring-version" linkend="org.osgi.framework.wiring"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>A key aspect of the OSGi framework is managing the dependencies
    between the bundles. These dependencies are expressed as manifest headers
    that can be grouped into <emphasis>requirements</emphasis> and
    <emphasis>capabilities</emphasis> as defined in <xref linkend="framework.resource"/>. For example, an Export-Package clause is a
    capability and an Import-Package clause is a requirement. During the
    resolving phase the requirements are resolved to matching capabilities by
    creating a <emphasis>Bundle Wire</emphasis>. Some of the wires can
    influence how the classes are loaded from bundles during runtime.</para>

    <para>This section outlines the API to introspect the wiring between the
    requirements and capabilities of resolved bundles.</para>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Bundle Revision</emphasis> - Represents the
          class/resource container of an install or update (that is, the JAR,
          directory, or other form of archive). Each update creates a new
          Bundle Revision and an uninstall removes the Bundle Revisions. A
          Bundle Revision is modeled after a Resource.</para>
        </listitem>

        <listitem>
          <para><emphasis>Namespace</emphasis> - Bundle Requirements and
          Bundle Capabilities are defined in a namespace, namespaces define
          the semantics of the requirements and capabilities. The
          <code>osgi.wiring.bundle</code>, <code>osgi.wiring.host</code> and
          <code>osgi.wiring.package</code> from the Framework Namespaces are
          defined in <xref linkend="framework.namespaces"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Bundle Requirement</emphasis> - Represents a
          requirement header, either the Require-Capability header or any of
          the manifest headers referred to in the <xref linkend="framework.namespaces"/> that map to a requirement.</para>
        </listitem>

        <listitem>
          <para><emphasis>Bundle Capability</emphasis> - A quality of a Bundle
          Revision that is provided when the revision is installed.
          Implemented as a set of attributes that are part of a namespace. A
          Bundle Capability represents either the Provide-Capability manifest
          header clauses, or any headers defined in the OSGi namespaces that
          map to a capability.</para>
        </listitem>

        <listitem>
          <para><emphasis>Bundle Wiring</emphasis> - Created each time when a
          Bundle Revision is resolved for holding the wires to other Bundle
          Wirings as well as maintaining the run time state. Used by the
          framework to control class loading depending on the semantics of the
          OSGi namespaces.</para>
        </listitem>

        <listitem>
          <para><emphasis>Bundle Wire</emphasis> - Connects a Bundle
          Requirement to a Bundle Capability as well as the requirer Bundle
          Wiring and provider Bundle Wiring.</para>
        </listitem>

        <listitem>
          <para><emphasis>Framework Wiring</emphasis> - Provides access to
          manage and initiate refresh and resolving.</para>
        </listitem>
      </itemizedlist>

      <figure pgwide="1">
        <title>Class Diagram org.osgi.framework.wiring (with relations to
        org.osgi.resource)</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="5.000in" contentwidth="7.000in" fileref="wiring-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section xml:id="framework.wiring.usingthewiringapi">
    <title>Using the Wiring API</title>

    <para>This section explains how the wiring API can be used without fully
    explaining all the concepts in depth. The next sections outline the formal
    specification.</para>

    <section>
      <title>Synopsis</title>

      <para>The Bundle Context <code>installBundle</code> method installs a
      bundle and returns a <code>Bundle</code> object. This install provides
      the classes and resources in a JAR, directory or some other form, as an
      <emphasis>environment</emphasis>. This resource is represented as a
      <emphasis>Bundle Revision</emphasis>.</para>

      <para>A Bundle Revision <emphasis>declares</emphasis> a number of
      <emphasis>Bundle Capabilities</emphasis> as well as a number of
      <emphasis>Bundle Requirements</emphasis>. A capability represents a set
      of attributes and a requirement is a filter on those attributes. For a
      requirement to be applicable to a capability, they must reside in the
      same <emphasis>namespace</emphasis>. The namespace groups requirements
      and capabilities and defines the semantics for a resolved
      requirement/capability pair. This pair is represented as a
      <emphasis>Bundle Wire</emphasis>.</para>

      <para>Capabilities can be anything: certificates, screen size, the
      packages, the bundle itself or the capability to act as host for a
      fragment. Some capabilities and requirements are from the
      Provide-Capability and Require-Capability headers, others are defined by
      the OSGi headers defined in <xref linkend="framework.module"/>, the
      namespaces for these OSGi specific headers are defined in <xref linkend="framework.namespaces"/>.</para>

      <para>The framework wires the Bundle Requirements to Bundle Capabilities
      during the resolving operation. The framework must resolve all the
      requirements to matching capabilities according to the semantics of
      their namespaces before it can declare a bundle to be resolved. For
      generic namespaces it is sufficient to find a matching capability for
      each requirement. However, for the OSGi namespaces additional rules are
      implied. For example, the <code>osgi.wiring.host</code> namespace
      implies all the rules around OSGi fragment bundles.</para>

      <para>Once a bundle is in the <code>RESOLVED</code> state it gets a
      <emphasis>Bundle Wiring</emphasis>, the Bundle Wiring represents the run
      time state of the Bundle Revision. The Bundle Wiring holds the
      <emphasis>Bundle Wires</emphasis>. A Bundle Wire ties a single Bundle
      Requirement to a single Bundle Capability as well as tying the Bundle
      Wiring that holds the requirement to the Bundle Wiring that holds the
      capability. The Bundle Wires that flow from a Bundle Wiring's
      Requirement to a capability are the <emphasis>required wires</emphasis>,
      they can be obtained with <xref linkend="org.osgi.framework.wiring.BundleWiring.getRequiredWires-String-" xrefstyle="hyperlink"/>. Bundle Wires that come from a Bundle Wiring's
      Capability to a requirement are the <emphasis>provided wires</emphasis>,
      they can be obtained with <xref linkend="org.osgi.framework.wiring.BundleWiring.getProvidedWires-String-" xrefstyle="hyperlink"/>. The same requirements and capabilities can be
      used in different wires.</para>

      <para>Namespace rules can be complex. For example, in the case of
      fragments they imply that any capabilities from the fragment are
      actually available from its hosts. In the case of exported packages that
      are also imported the resolver can choose to pick either. These examples
      demonstrate that the resolver must be able to differentiate between the
      Bundle Revision's declared requirements and capabilities and the run
      time state, the Bundle Wiring, of the corresponding Bundle Revision. A
      Bundle Revision's Bundle Wiring therefore provides the actual run time
      requirements and capabilities as chosen by the resolver with the Bundle
      Wiring's <xref linkend="org.osgi.framework.wiring.BundleWiring.getRequirements-String-" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.framework.wiring.BundleWiring.getCapabilities-String-" xrefstyle="hyperlink"/> methods. Any optional declared requirements that
      were not satisfied are not in the list of requirements. All dynamic
      requirements that can potentially be satisfied at run time are in this
      requirements list.</para>

      <para>The <code>BundleWiring</code> objects are therefore not
      necessarily associated with the same Bundle Revisions that originate the
      declared Bundle Requirement and the declared Bundle Capability. It is
      therefore that the diagramming technique used in <xref linkend="i1740286"/> uses dotted lines for the Bundle Wiring connection.
      That is, the connections from the Bundle Wire to the requirer
      <code>BundleWiring</code> object and to the provider
      <code>BundleWiring</code> object. It then uses solid lines for the
      connection to the declared requirement and capability in their Bundle
      Revisions. This technique makes it possible to depict fragments where a
      capability in the fragment is actually available from the host's Bundle
      Wiring.</para>

      <figure pgwide="1" xml:id="i1740286">
        <title>Requirements and Capabilities Diagramming</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.500in" contentwidth="6.199in" fileref="req-cap-legend.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para><code>BundleWiring</code> objects can continue to exist and
      operate as long as there are wires from other <code>BundleWiring</code>
      objects, even after a bundle is updated. The only way to break this
      non-current wiring is to <emphasis>refresh</emphasis> the bundles that
      are involved. The refresh operation computes a transitive closure of all
      dependent bundles, and re-resolves them. Any active bundles in this
      closure will be stopped and restarted. This operation can be activated
      on the <emphasis>Framework Wiring</emphasis>.</para>

      <para>The wiring API is based on the <code>Bundle.adapt()</code> method,
      see <xref linkend="framework.lifecycle.adaptations"/>. This method
      allows the <code>Bundle</code> object to be adapted to another type. For
      example:</para>

      <programlisting>BundleWiring current = bundle.adapt(BundleWiring.class);
if ( current != null ) {
  ...
}</programlisting>

      <para>For this API, the following adaptations of the Bundle object are
      supported:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.framework.wiring.BundleRevision" xrefstyle="hyperlink"/> - Provides access to the current revision at
          the time of the <code>adapt</code> method call. A Bundle will always
          have a current Bundle Revision until it is uninstalled.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.framework.wiring.BundleWiring" xrefstyle="hyperlink"/> - Provides access to the current Bundle
          Wiring at the time of the <code>adapt</code> method call. A current
          Bundle Wiring object only exists (the adapt method returns
          non-<code>null</code>) when the bundle is resolved.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.framework.wiring.BundleRevisions" xrefstyle="hyperlink"/> - Provides access to all the
          <code>BundleRevision</code> objects that are still in use. A Bundle
          always has a <code>BundleRevisions</code> object, the
          <code>adapt</code> method must never return
          <code>null</code>.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.framework.wiring.FrameworkWiring" xrefstyle="hyperlink"/> - Can only be adapted from the system bundle
          with bundle id 0. Provides access to the management methods like
          refresh and resolve, and information about bundles that are pending
          removal, and the dependency closure of a set of bundles.</para>
        </listitem>
      </itemizedlist>

      <para>The Bundle Wiring API is usable during launching after the
      <code>init</code> method has returned.</para>

      <para>After an uninstall the adapt method will always return
      <code>null</code> for <xref linkend="org.osgi.framework.wiring.BundleRevision" xrefstyle="hyperlink"/> or <xref linkend="org.osgi.framework.wiring.BundleWiring" xrefstyle="hyperlink"/>. However, it is possible that the Bundle
      Revision and/or its Bundle Wiring are reachable through other
      bundles.</para>
    </section>

    <section>
      <title>Finding the Imported Packages</title>

      <para>Packages are reflected in the <code>osgi.wiring.package</code>
      namespace. An Import-Package clause is mapped to an
      <code>osgi.wiring.package</code> requirement and an Export-Package
      clause is mapped into the corresponding capability. For example:</para>

      <programlisting>Import-Package: com.acme.foo;version=1
Export-Package: com.acme.foo;version=1</programlisting>

      <para>In the Requirements/Capabilities model this is depicted as in
      <xref linkend="i1748298"/>.:</para>

      <figure pgwide="1" xml:id="i1748298">
        <title>Example Import/Export Package with Requirements/Capabilities
        Model</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="0.500in" contentwidth="6.199in" fileref="package-req-cap.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The following code prints the bundles that bundle A is wired to
      through Import-Package statements:</para>

      <programlisting>void printImports( Bundle A ) {
    BundleWiring wA = A.adapt( BundleWiring.class );
    for ( BundleWire wire :
     wA.getRequiredWires(<xref linkend="org.osgi.framework.namespace.PackageNamespace.PACKAGE_NAMESPACE" xrefstyle="hyperlink"/>)) {
     String pack = (String) wire.getCapability().getAttributes()
         .get(<xref linkend="org.osgi.framework.namespace.PackageNamespace.PACKAGE_NAMESPACE" xrefstyle="hyperlink"/>);
     Bundle bundle = wire.getProviderWiring()
          .getBundle());
     System.out.println(pack + " - " + bundle.getLocation());
    }
}</programlisting>
    </section>

    <section>
      <title>Attached Fragments</title>

      <para>Fragments use the <code>osgi.wiring.host</code> namespace to
      control their attachment. A fragment has a requirement for a host
      capability, this is a capability with the bundle symbolic name and
      version. If a fragment is attached then there is a wire from the
      fragment's Bundle Wiring to the host's Bundle Wiring.</para>

      <para>The following snippet finds the attached fragments of a
      bundle:</para>

      <programlisting>Set&lt;BundleWiring&gt; attachedFragments( BundleA ) {
    Set&lt;BundleWiring&gt; result = new HashSet&lt;BundleWiring&gt;();
    BundleWiring wA = A.adapt( BundleWiring.class );

    for ( BundleWire wire : wA.getProvidedWires(<xref linkend="org.osgi.framework.namespace.HostNamespace.HOST_NAMESPACE" xrefstyle="hyperlink"/>)) {
        result.add( wire.getRequirerWiring() );
    }
    return result;
}</programlisting>
    </section>
  </section>

  <section>
    <title>Bundle Wiring</title>

    <para>A bundle provides a simplified view of the state of the framework:
    it is either resolved or not. If it is resolved, bundles can become active
    and collaborate with other resolved bundles. During the time a bundle is
    resolved, and thus can see the environment, it will see a consistent
    stable state with respect to its code dependencies. Other bundles can be
    started and stopped, installed, updated, and uninstalled during the life
    cycle of a bundle. However, as long as a bundle is resolved it will
    continue to load classes from the bundle revisions it was wired to when it
    was initially resolved, even if those bundles are updated or
    uninstalled.</para>

    <para>The consequence of this model is that each bundle can have multiple
    <emphasis>revisions</emphasis>, and each revision can have an optional
    <emphasis>wiring</emphasis> at any moment in time. Management agents have
    the need to see this more complex state to be able to predict the impact
    of management actions and to help diagnose problems.</para>

    <para>There are two important event types that complicate the overall
    state. The install and update events provide a new <emphasis>Bundle
    Revision</emphasis> for a bundle and the uninstall event disconnects any
    Bundle Revisions from the bundle. The Bundle Revision contains the
    resources and the metadata defining, among other things, what type of
    bundle it is and what its dependencies are. An update can therefore change
    every aspect of a bundle. For example, an update could turn a non-fragment
    bundle into a fragment.</para>

    <para>The other event types that is of interest here are the
    <code>RESOLVED</code> and <code>UNRESOLVED</code> events. Resolving a
    bundle creates a <emphasis>Bundle Wiring</emphasis> based on the then
    current Bundle Revision. During resolving, a Bundle Wiring uses the
    requirements from the Bundle Revision to create <emphasis>wires</emphasis>
    to other Bundle Revisions; the wires are used to control the class loading
    process. Once a Bundle Wiring is required by another Bundle Wiring, or it
    is the current wiring, it is said to be <emphasis>in use</emphasis>. This
    model is depicted in <xref linkend="i1714190"/>.</para>

    <figure xml:id="i1714190">
      <title>Relationship between events, revisions, and wirings</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="2.250in" contentwidth="7.000in" fileref="events-revisions-wirings.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The framework never eagerly disconnects the wires between Bundle
    Wirings, a disconnect happens only under control of the management agent
    when the <xref linkend="org.osgi.framework.wiring.FrameworkWiring.refreshBundles-Collection-FrameworkListener...-" xrefstyle="hyperlink"/> method is called or when all requiring bundles
    become uninstalled. When a bundle is updated, its existing
    <code>BundleWiring</code> objects will continue to serve classes and
    resources to bundles that use it. The update, even though it provides a
    new revision, has no effect on resolved bundles with respect to class
    loading. Also, the installation of a new bundle could allow new wires but
    they must not affect the existing wiring until <xref linkend="org.osgi.framework.wiring.FrameworkWiring.refreshBundles-Collection-FrameworkListener...-" xrefstyle="hyperlink"/> is called (with the exception for dynamic
    imports). Though the class loading wires remain in place, proper bundles
    should react to the changes in the dynamic state. That is, when a bundle
    is updated it will be stopped, allowing others to remove any references
    they have to that bundle. However, even in those cases the wirings will
    remain until the bundle is unresolved during a refresh cycle.</para>

    <para>After an update, the existing Bundle Wiring is no longer
    <emphasis>current</emphasis> for the bundle.</para>

    <para>Bundle Wirings that are not in use (no other Bundle Wiring is wired
    to it) can be removed immediately but in-use Bundle Wirings must remain in
    place until they become no longer in use. These non-current in-use Bundle
    Wirings are called <emphasis>pending for removal</emphasis>.</para>

    <para>To forcefully remove all these non-current in use Bundle Wirings the
    framework can <emphasis>refresh</emphasis> a set of bundles at the request
    of a management agent. The refresh will create a transitive dependency
    graph on an initial set of bundles and then unresolves each bundle in the
    graph, which will make any of the stale Bundle Wirings no longer in use so
    they can be cleaned up. After this refresh, any previously active bundles
    will be restored to their previous state.</para>

    <para>The purpose of this non-eager behavior is to allow for efficient
    handling of multiple updates/installs/uninstalls. Refreshing the wires
    after each such event requires the start and stop of the dependent
    bundles, disrupting the operations of the system unnecessary often. It is
    therefore better to batch up a number of such operations and then
    <emphasis>refresh</emphasis> the system once. However, the implication of
    this optimization is that the actual wiring between bundles can quickly
    become an intricate web of connections between revisions of
    bundles.</para>

    <para>For example, assume a bundle <code>A</code> is installed. At
    installation, it will have a single Bundle Revision, called
    <code>A.0</code>. Next, bundle <code>B</code> is installed, it will have a
    Bundle Revision <code>B.0</code>. Assuming Bundle Revision
    <code>A.0</code> requires a capability in bundle <code>B</code>, resolving
    bundle <code>A</code> and bundle <code>B</code> will create a Bundle
    Wiring for Bundle Revision <code>A.0</code> linking to a Bundle Wiring for
    Bundle Revision <code>B.0</code>. If bundle <code>B</code> is now updated,
    it will create a second Bundle Revision, <code>B.1</code>. However, the
    current Bundle Wiring for bundle <code>A</code> (Bundle Revision
    <code>A.0</code>) will remain wired to Bundle Revision <code>B.0</code> as
    long as bundle <code>A</code> and bundle <code>B</code> remain resolved,
    even though the current Bundle Revision for bundle <code>B</code> has now
    become <code>B.1</code>. As long as Bundle Revision <code>A.0</code>
    remains resolved, bundle <code>B</code>'s resolved state has no
    impact.</para>

    <para>Bundles are only actually unresolved when they are
    <emphasis>refreshed</emphasis>, the <code>UNRESOLVED</code> event only
    indicates that a Bundle is updated or uninstalled. Refreshing happens on a
    per bundle basis but takes any Bundle Wirings into account that depend on
    the refreshed bundle. In the previous example, if bundle <code>B</code> is
    refreshed, it will automatically refresh bundle <code>A</code> because
    <code>A</code> is wired to <code>B</code>. That is, bundle <code>B</code>
    is in use by <code>A</code>. The refresh will stop bundles <code>A</code>
    and <code>B</code> and then unresolve both of them. Unresolving basically
    means removing any reference from the framework to the Bundle Wirings of
    the involved bundles. This unreferencing will allow the garbage collector
    to remove any remains, like for example the class loader and the
    activator, unless some bundles illegally hold on to references. Once a
    Bundle Wiring is no longer required by the framework, it is set to be not
    in use, regardless of stale references.</para>

    <para>Normally, after unresolving, the bundles are started again in their
    original state, forcing them to resolve again. In the previous example,
    Bundle Revision <code>A.0</code> will then be connected to the Bundle
    Revision <code>B.1</code> through newly created <code>BundleWiring</code>
    objects. The old Bundle Wiring for <code>B.0</code> will no longer be in
    use and will thus be garbage collected.</para>

    <para>This example is depicted in <xref linkend="i1714323"/>. This picture
    shows when the different objects are created and discarded. In this
    picture bundle <code>B</code> is not started.</para>

    <figure xml:id="i1714323">
      <title>The Bundle Revisions and Bundle Wirings over time</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="2.865in" contentwidth="4.930in" fileref="revisions-wirings-over-time.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The resolver is responsible for wiring Bundle Requirements and
    Bundle Capabilities to each other while adhering to the semantics defined
    in their namespace. For each paired Bundle Requirement and Bundle
    Capability the resolver creates a Bundle Wire that links the Bundle
    Requirement, the requiring Bundle Wiring, the providing Bundle Wiring, and
    the Bundle Capability. The relationships between a bundle <code>A</code>
    and bundle <code>B</code>, where <code>A</code> requires some capability
    in <code>B</code>, is depicted in <xref linkend="i1735263"/>.</para>

    <figure xml:id="i1735263">
      <title>Bundle A requires Bundle B Wiring Instances</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="2.313in" contentwidth="6.213in" fileref="a-requires-b-wiring.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The OSGi framework can add wires and new requirements and
    capabilities after resolving during run time. This mechanism is for
    example used in DynamicImport-Package, dynamic attaching of fragments, and
    byte code weaving.</para>
  </section>

  <section xml:id="framework.wiring-fragments">
    <title>Fragments</title>

    <para>The type of a bundle is available on the Bundle Revision because a
    Bundle can change from a fragment to a normal bundle or vice versa after
    an update. The <xref linkend="org.osgi.framework.wiring.BundleRevision.getTypes--" xrefstyle="hyperlink"/> method is used to obtain a bitmap that is either 0
    or has the following bit set:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.framework.wiring.BundleRevision.TYPE_FRAGMENT" xrefstyle="hyperlink"/> - If this bit is set the Bundle Revision is a
        fragment.</para>
      </listitem>
    </itemizedlist>

    <para>The type is a bitmap allowing future versions of this specification
    to add new types that can be a combination of existing and new types. The
    following example displays how a Bundle is checked to be a
    fragment:</para>

    <programlisting>BundleRevision rev = aBundle.adapt(BundleRevision.class);
if ( rev != null &amp;&amp; (rev.getTypes() &amp; TYPE_FRAGMENT)!= 0 ){
  ... // do the fragment thing
}</programlisting>

    <para>A fragment bundle will show all its declared capabilities and
    requirements on its Bundle Revision but during resolving the resolver only
    considers the <code>osgi.wiring.host</code> and <code>osgi.ee</code>
    requirements and the <code>osgi.identity</code> capability and
    requirements.</para>

    <para>The <code>osgi.wiring.host</code> requirement represents the
    Fragment-Host header. A fragment can be attached to different hosts and
    each attachment creates a wire from the fragment's Bundle Wiring to the
    host's Bundle Wiring. The <code>osgi.ee</code> requirement is also never
    hosted.</para>

    <para>The <code>osgi.identity</code> capability of a fragment is part of
    the fragment's Bundle Wiring and is not part of a host bundle's Bundle
    Wiring. That is, each Bundle Wiring has exactly one
    <code>osgi.identity</code> capability. However, <code>osgi.identity</code>
    requirements declared by a fragment are not part of the fragment's Bundle
    Wiring and are instead hosted by the host bundle's Bundle Wiring.</para>

    <para>Any other requirements and capabilities in a fragment bundle never
    become part of the fragment's Bundle Wiring; they are treated as part of
    the host's requirements and capabilities when the fragment is attached to
    that host.</para>

    <para>To find the attached fragment for a host bundle it is necessary to
    find the wires for the <code>osgi.wiring.host</code> capability. The
    requiring end of such a wire is the attached fragment and the providing
    end is the attaching host.</para>

    <para>For example, bundle <code>A</code> is a host and bundle B is a
    fragment as depicted in <xref linkend="i1743622" xrefstyle="template:Figure %n on page %p"/>.</para>

    <figure xml:id="i1743622">
      <title>Fragments and Wiring</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="1.056in" contentwidth="6.242in" fileref="fragments-wiring.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>Then, to find the attached fragments for Bundle Revision
    <code>A0:</code></para>

    <programlisting>List&lt;BundleWiring&gt; attached = new ArrayList&lt;BundleWiring&gt;();
for ( BundleWire wire : A0.getBundleWiring().getProvidedWires(HOST_NAMESPACE))
    attached.add( wire.getRequirerWiring() );</programlisting>

    <para>It is also possible to calculate the reverse dependency for finding
    the hosts of a fragment. For the previous example, the bundles that attach
    fragment <code>B</code> can be found with:</para>

    <programlisting>List&lt;BundleWiring&gt; hosts = new ArrayList&lt;BundleWiring&gt;();
for ( BundleWire wire :  B0.getBundleWiring().getRequiredWires(HOST_NAMESPACE))
    hosts.add( wire.getProviderWiring() );</programlisting>

    <para>The <code>osgi.wiring.host</code> namespace mandates that the
    resolver moves the Bundle Requirements and Bundle Capabilities from the
    fragment in all other namespaces than the <code>osgi.wiring.host</code>,
    <code>osgi.identity</code> and <code>osgi.ee</code> namespaces to the host
    bundle. For example, if the fragment exports a package <code>p</code>,
    then this package is exported by the host. In such a case, the
    <code>BundleRequirement</code> and <code>BundleCapability</code> objects
    remain associated with the Bundle Revision of the fragment. However, the
    Bundle Wire has the appropriate Bundle Wiring of the host. This is
    depicted in <xref linkend="i1743831" xrefstyle="template:Figure %n on page %p"/>. Package <code>p</code> is
    declared a capability in fragment <code>B.0</code> but when wired the
    Bundle Wiring of host <code>A.0</code> will be the provider.</para>

    <figure xml:id="i1743831">
      <title>Exporting a Package from a Fragment</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="1.450in" contentwidth="6.242in" fileref="fragment-export-package.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The previous example is also depicted as an instance diagram in
    <xref linkend="i1743855" xrefstyle="template:Figure %n on page %p"/>.</para>

    <figure pgwide="1" xml:id="i1743855">
      <title>Fragments Wiring Instances</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="3.600in" contentwidth="7.000in" fileref="fragment-wiring-instances.svg"/>
        </imageobject>
      </mediaobject>
    </figure>
  </section>

  <section>
    <title>Framework Actions</title>

    <para>There are a number of actions that are global in a framework and not
    associated with a specific bundle. These actions are associated with the
    framework; this is the reason for the Framework Wiring adaptation. The
    system bundle (bundle 0) can be adapted to a <code>FrameworkWiring</code>
    object:</para>

    <programlisting>FrameworkWiring fw = systemBundle.adapt(FrameworkWiring.class);</programlisting>

    <para>The Framework Wiring provides the following actions:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.framework.wiring.FrameworkWiring.findProviders-Requirement-" xrefstyle="hyperlink"/> - The find providers method returns
        capabilities available in the framework that match the given
        requirement. This method can be used to search for capabilities
        provided by bundles in the framework. For example, an exported package
        with a specific package name.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.framework.wiring.FrameworkWiring.getDependencyClosure-Collection-" xrefstyle="hyperlink"/> - The dependency closure method takes a seed
        of bundles for a dependency closure and then add any bundles that
        depend a bundle in the dependency closure, recursively. The result can
        be used to calculate the impact of a refresh operation. If the
        framework is refreshed the result of this method provides the bundles
        that will be affected.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.framework.wiring.FrameworkWiring.getRemovalPendingBundles--" xrefstyle="hyperlink"/> - Bundles that have a Bundle Wiring that is in
        use but not current. Such bundles are pending removal.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.framework.wiring.FrameworkWiring.refreshBundles-Collection-FrameworkListener...-" xrefstyle="hyperlink"/> - See <xref linkend="framework.wiring.refreshing"/>.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.framework.wiring.FrameworkWiring.resolveBundles-Collection-" xrefstyle="hyperlink"/> - Attempt to resolve all the bundles in the
        given collection. This action can also cause bundles to become
        resolved outside the given collections.</para>
      </listitem>
    </itemizedlist>

    <section xml:id="framework.wiring.refreshing">
      <title>Refreshing</title>

      <para>The update of bundles will create new Bundle Revisions while the
      existing Bundle Wirings remain wired to their previous Bundle Revisions.
      This stale wiring must be cleaned up and the <xref linkend="org.osgi.framework.wiring.FrameworkWiring.refreshBundles-Collection-FrameworkListener...-" xrefstyle="hyperlink"/> method achieves this.</para>

      <para>The <code>refreshBundles</code> method works from an initial
      collection of bundles that is used to seed the calculation of the
      <emphasis>dependency closure</emphasis>. The dependency closure is
      calculated by expanding the seed dependency closure to include any
      bundle that has a Bundle Wiring that depends on any bundle in the
      dependency closure. This is a recursive definition so the dependency
      closure contains the list of transitive dependencies on the initial seed
      collection.</para>

      <para>This dependency closure can be obtained separately with the <xref linkend="org.osgi.framework.wiring.FrameworkWiring.getDependencyClosure-Collection-" xrefstyle="hyperlink"/> method providing it with the same seed. If no
      seed is provided, that is a <code>null</code> argument is given, the
      <code>refreshBundles</code> method will be identical to calling it with
      the result of the <xref linkend="org.osgi.framework.wiring.FrameworkWiring.getRemovalPendingBundles--" xrefstyle="hyperlink"/> method as the seed collection. This default will
      ensure that all stale Bundle Wirings will be cleaned up.</para>

      <para>The refresh process will stop any bundles in the considered
      collection while recording their state and, if active, their starting
      option (for example <code>START_TRANSIENT</code>). Stopping must take
      any start level rules into account.</para>

      <para>The refresh must then unresolve all the bundles in the considered
      collection. Unresolving will cause all the removal pending Bundle
      Wirings to become no longer in use because there are no longer any
      bundles requiring them. This will make the Bundle Wirings available for
      garbage collection because they are then no longer reachable from the
      framework API.</para>

      <para>The framework must then attempt to restore the state as it was
      before the refresh taking all the framework rules into account,
      including start levels, start options, and activation options.</para>

      <para>The actual refresh operation will take place in the background
      because it can be a long running operation. The refresh operation will
      send out a global framework event <code>PACKAGES_REFRESHED</code>.
      However, catching this event properly is non-trivial. For this reason,
      the <code>refreshBundle</code> method also allows a callback by
      specifying an optional Framework Listener in the method invocation that
      will only be called when the method is finished. For example:</para>

      <programlisting>fw.refreshBundles( null, new FrameworkListener(){
  public void frameworkEvent(FrameworkEvent ev) {
     System.out.println("Refresh finished");
  }
});</programlisting>
    </section>
  </section>

  <section>
    <title>Container Scanning</title>

    <para>A resolved bundle can consist of a number of containers: the basic
    bundle container (usually a JAR), embedded JARs or directories, and
    fragments. Containers contain <emphasis>entries</emphasis> but the
    Bundle-ClassPath header turns these entries into a single namespace,
    called <emphasis>resources</emphasis>. These concepts are fully defined in
    <xref linkend="framework.module.bundleclasspath"/>.</para>

    <para>The wiring API provides two different ways to iterate over the
    contents in the containers that constitute a resolved bundle:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Bundle Class Path Order</emphasis> - Scan the bundle
        class path containers.</para>
      </listitem>

      <listitem>
        <para><emphasis>Entry Order</emphasis> - Scan all the entries that
        constitute a bundle and its attached fragments.</para>
      </listitem>
    </itemizedlist>

    <para>These two different ways are outlined in the following
    sections.</para>

    <section xml:id="framework.wiring-bundleclasspathorder">
      <title>Bundle Class Path Order</title>

      <para>Once a bundle is resolved all its container namespaces are
      flattened to a single namespace that is then used by the class loader.
      Flattening has as a consequence that certain resources will disappear
      from the view, which resource remains and which disappear depends on the
      order of the flattening. The OSGi specification defines exactly what
      this order is. However, the rules for this ordering are many and
      non-trivial. For this reason, a Bundle Wiring allows the iteration over
      the resources of a bundle in the bundle class path order, reflecting the
      same flattening as that what the class loader will do. A bundle must be
      resolved to be able to iterate over its resources.</para>

      <para>The method used to iterate over the resources in bundle class path
      order is <xref linkend="org.osgi.framework.wiring.BundleWiring.listResources-String-String-int-" xrefstyle="hyperlink"/>. This method takes a starting path in the
      namespace, a pattern to match (for example <code>*.class</code> for
      class resources) and a flag to indicate if the scan should recurs into
      directories or not.</para>

      <para>When the bundle class path has a multi-release container, see
      <xref linkend="framework.module-multireleasecontainer"/>, and an
      argument to the <xref linkend="org.osgi.framework.wiring.BundleWiring.listResources-String-String-int-" xrefstyle="hyperlink"/> method would include a resource name in the
      method result if the resource was not available from the root directory
      but is available from a versioned directory visible on the current Java
      version, then the method result must include the resource name from the
      root directory. For example, if the multi-release container has the
      following entry</para>

      <programlisting>META-INF/versions/9/com/foo/resource.txt</programlisting>

      <para>and the call <code>listResources(“/com/foo”, “*.txt”, 0)</code> is
      made when running on Java 9, or later, the result must include</para>

      <programlisting>com/foo/resource.txt</programlisting>

      <para>The <xref linkend="org.osgi.framework.wiring.BundleWiring.listResources-String-String-int-" xrefstyle="hyperlink"/> method has no counterpart in the standard class
      loader API.</para>
    </section>

    <section>
      <title>Entry Order</title>

      <para>A Bundle Wiring reflects a resolved bundle. This wiring
      constitutes the bundle and any attached fragments. The <xref linkend="org.osgi.framework.wiring.BundleWiring.findEntries-String-String-int-" xrefstyle="hyperlink"/> method is similar to the
      <code>Bundle.</code><xref linkend="org.osgi.framework.Bundle.findEntries-String-String-boolean-" xrefstyle="hyperlink"/> method. The Bundle's method will be identical
      when the bundle can be resolved, if the bundle cannot resolve the
      Bundle's <code>findEntries</code> method has a fallback that allows
      iteration without attached fragments. The Bundle Wiring's <xref linkend="org.osgi.framework.wiring.BundleWiring.findEntries-String-String-int-" xrefstyle="hyperlink"/> is always against a resolved bundle because it
      is on a Bundle Wiring.</para>
    </section>

    <section>
      <title>Class Loader Access</title>

      <para>The class loader can also be obtained from the
      <code>BundleWiring</code> class with the <xref linkend="org.osgi.framework.wiring.BundleWiring.getClassLoader--" xrefstyle="hyperlink"/> method.</para>
    </section>
  </section>

  <section>
    <title>Security</title>

    <para>The Bundle Wiring API requires Adapt Permission with action
    <code>ADAPT</code> for the following types:</para>

    <itemizedlist>
      <listitem>
        <para><code>org.osgi.framework.wiring.BundleWiring</code></para>
      </listitem>

      <listitem>
        <para><code>org.osgi.framework.wiring.BundleRevision</code></para>
      </listitem>

      <listitem>
        <para><code>org.osgi.framework.wiring.BundleRevisions</code></para>
      </listitem>

      <listitem>
        <para><code>org.osgi.framework.wiring.FrameworkWiring</code></para>
      </listitem>
    </itemizedlist>

    <para>The Framework Wiring methods that mutate state require an additional
    Admin Permission with the action:</para>

    <itemizedlist>
      <listitem>
        <para><code>RESOLVE</code> (for the system bundle) - For <xref linkend="org.osgi.framework.wiring.FrameworkWiring.refreshBundles-Collection-FrameworkListener...-" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.framework.wiring.FrameworkWiring.resolveBundles-Collection-" xrefstyle="hyperlink"/></para>
      </listitem>
    </itemizedlist>
  </section>
</chapter>

  <chapter label="8" revision="$Id: b9fa0941b4c9c1fde28ca64b748da41b67d7403e $" version="5.0" xml:id="framework.namespaces" xml:base="008/framework.namespaces.xml">
  <title>Framework Namespaces Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.framework.namespace-version" linkend="org.osgi.framework.namespace"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>A key aspect of the OSGi dependency model based on requirements and
    capabilities is the concept of a <emphasis>namespace</emphasis>. A
    Namespace defines the semantics of a Requirement-Capability pair. This
    generic model is defined in <xref linkend="framework.resource"/>. This
    section defines a number of namespaces that are part of the OSGi Core
    specification. The <code>osgi.wiring.*</code> namespaces map to the module
    layer, others are used as foundations for other specifications.</para>

    <para>Namespaces that are mapped from OSGi manifest headers must never be
    specified as generic requirements or capabilities in the manifest. The
    purpose of these namespaces is only to provide the Modularity manifest
    headers in generic form; the framework must translate the specific
    manifest headers defined in the <xref linkend="framework.module"/> to
    their generic form so that requirements and capabilities can be used in a
    uniform way, regardless if they originate from specialized or generic
    manifest headers.</para>

    <para>Each namespace is defined with the following items:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Name</emphasis> - the name of an attribute or
        directive</para>
      </listitem>

      <listitem>
        <para><emphasis>Kind</emphasis> - Defines where the attribute or
        directive can be used</para>

        <itemizedlist>
          <listitem>
            <para><code>CA</code> - Capability Attribute</para>
          </listitem>

          <listitem>
            <para><code>CD</code> - Capability Directive</para>
          </listitem>

          <listitem>
            <para><code>RA</code> - Requirement Attribute</para>
          </listitem>

          <listitem>
            <para><code>RD</code> - Requirement Directive</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para><emphasis>M/O</emphasis> - Mandatory (<code>M</code>) or
        Optional (<code>O</code>).</para>
      </listitem>

      <listitem>
        <para><emphasis>Type</emphasis> - The data Type</para>
      </listitem>

      <listitem>
        <para><emphasis>Syntax</emphasis> - Any syntax rules. The syntax
        refers in general to the syntaxes defined in <xref linkend="framework.general.syntax"/> and <xref linkend="framework.common.header.syntax"/> and later sections.</para>
      </listitem>
    </itemizedlist>

    <para>Attributes on manifest headers that define capabilities are used as
    matching attributes in the requirement's filter and are available as the
    attributes of a <code>Capability</code> object. Attributes on manifest
    headers that define requirements are translated to a conjunction of
    assertions in the filter that correspond to the semantics of their header.
    That is, these attributes on requiring manifest headers are not visible on
    the <code>Requirement</code> objects as attributes.</para>

    <para>Unless an attribute is specifically overridden, all namespaces
    inherit the attributes and directives of the default namespace as defined
    in <xref linkend="framework.namespaces-default.namespace"/> and in <xref linkend="org.osgi.resource.Namespace" xrefstyle="hyperlink"/>.</para>

    <table pgwide="1" xml:id="framework.namespaces-default.namespace">
      <title>Default Namespace</title>

      <tgroup cols="6">
        <colspec colnum="1" colwidth="2*"/>

        <colspec colnum="2" colwidth="1*"/>

        <colspec colnum="3" colwidth="1*"/>

        <colspec colnum="4" colwidth="1.5*"/>

        <colspec colnum="5" colwidth="4*"/>

        <colspec colnum="6" colwidth="6*"/>

        <thead>
          <row>
            <entry>Name</entry>

            <entry>Kind</entry>

            <entry>M/O</entry>

            <entry>Type</entry>

            <entry>Syntax</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>uses</code></entry>

            <entry><code>CD</code></entry>

            <entry><code>O</code></entry>

            <entry><code>String</code></entry>

            <entry><para><code>package-name</code></para><para><code> ( ','
            package-name )*</code></para></entry>

            <entry><para>A list of packages used in calculation class space
            consistency.</para></entry>
          </row>

          <row>
            <entry><code>effective</code></entry>

            <entry><para><code>RD,</code></para><para><code>CD</code></para></entry>

            <entry><code>O</code></entry>

            <entry><code>String</code></entry>

            <entry><code>'resolve' | &lt;any name&gt;</code></entry>

            <entry><para>A name indicating if a resolve operation applies to
            this requirement. Default and only defined value is
            <code>resolve</code>.</para></entry>
          </row>

          <row>
            <entry><code>resolution</code></entry>

            <entry><code>RD</code></entry>

            <entry><code>O</code></entry>

            <entry><code>String</code></entry>

            <entry><code>'mandatory' | 'optional'</code></entry>

            <entry><para>If <code>mandatory</code>, then this requirement must
            be satisfied before the resource is resolved. The default is
            <code>mandatory</code>.</para></entry>
          </row>

          <row>
            <entry><code>filter</code></entry>

            <entry><code>RD</code></entry>

            <entry><code>O</code></entry>

            <entry><code>String</code></entry>

            <entry><code>filter</code></entry>

            <entry><para>The given filter is matched against the capability's
            attributes to satisfy the requirement. A filter is optional, if no
            filter directive is specified the requirement always
            matches.</para></entry>
          </row>

          <row>
            <entry><code>cardinality</code></entry>

            <entry><code>RD</code></entry>

            <entry><code>O</code></entry>

            <entry><code>String</code></entry>

            <entry><code>'multiple' | 'single'</code></entry>

            <entry><para>Allow the requirement to be satisfied by just one
            capability or provide wires to any capability that satisfies the
            requirement.</para></entry>
          </row>

          <row>
            <entry><code>mandatory</code></entry>

            <entry><code>CD</code></entry>

            <entry><code>O</code></entry>

            <entry><code>String</code></entry>

            <entry><code>extended ( ',' extended )*</code></entry>

            <entry><para>List of attribute names that the requirement's filter
            must assert to be equal to the values in the capability's
            attributes. </para> <para>This directive must only be used for the
            <code>osgi.wiring.*</code> namespaces and is forbidden in any
            other namespace.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>Namespaces can have any additional attributes and directives, both
    defined in a namespace as well as ad-hoc. However, none of these
    additional directives or attributes must require different or additional
    matching rules.</para>

    <para>All directives and attributes specified on the OSGi manifest headers
    that are translated to requirements and capabilities are visible in these
    capabilities and requirements, except when they are specifically noted to
    be ignored in the definition of a namespace.</para>
  </section>

  <section xml:id="framework.namespaces.osgi.ee">
    <title>osgi.ee Namespace</title>

    <para>An OSGi Framework must register capabilities for all the execution
    environments the Java VM is known to be backward compatible with. For
    example, if the Java VM provides Java SE 6, then it is backward compatible
    with 1.2, 1.3, 1.4, 1.5, and 1.6. The <code>osgi.ee</code> capability
    defines the provided versions as a comma separated list. For
    example:</para>

    <programlisting>Provide-Capability: «
    osgi.ee; «
        osgi.ee="OSGi/Minimum"; «
        version:List&lt;Version&gt;="1.0,1.1,1.2", «
    osgi.ee; «
        osgi.ee="JavaSE"; «
        version:List&lt;Version&gt;="1.2,1.3,1.4,1.5,1.6"</programlisting>

    <para>Bundles can require the <code>osgi.ee</code> capability if they have
    a dependency on a specific execution environment, for example:</para>

    <programlisting>Require-Capability: «
   osgi.ee;filter:="(&amp;(osgi.ee=JavaSE)(version=1.6))"</programlisting>

    <para>This is useful when the bundle contains class files compiled to
    target a version of the Java VM and thus cannot be loaded by prior
    versions of the Java VM. If a bundle needs to require that specific
    <code>java.*</code> packages are available in the runtime, it should use
    the Import-Package header to require those packages. See <xref linkend="framework.module-execution.environment"/>.</para>

    <para>The <code>osgi.ee</code> requirement is not hosted when it is part
    of a Fragment. That is, a requirement from this namespace must be treated
    as part of the Fragment Bundle and must not be hosted.</para>

    <para>The <code>osgi.ee</code> capability is defined in table <xref linkend="framework.namespaces-ee.namespace"/> and in the <xref linkend="org.osgi.framework.namespace.ExecutionEnvironmentNamespace" xrefstyle="hyperlink"/> class.</para>

    <table pgwide="1" xml:id="framework.namespaces-ee.namespace">
      <title>osgi.ee Namespace definition</title>

      <tgroup cols="6">
        <colspec colnum="1" colwidth="2*"/>

        <colspec colnum="2" colwidth="1*"/>

        <colspec colnum="3" colwidth="1*"/>

        <colspec colnum="4" colwidth="2*"/>

        <colspec colnum="5" colwidth="4*"/>

        <colspec colnum="6" colwidth="7*"/>

        <thead>
          <row>
            <entry>Name</entry>

            <entry>Kind</entry>

            <entry>M/O</entry>

            <entry>Type</entry>

            <entry>Syntax</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>osgi.ee</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><code>String</code></entry>

            <entry><code>~(ws|',')+</code></entry>

            <entry><para>The name of the execution environment. The name can
            contain any character except white space (as defined by Java) or
            the comma (<code>',' \u002C</code>) character. </para></entry>
          </row>

          <row>
            <entry><code>version</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><para><code>List</code></para><para><code>&lt;Version&gt;</code></para></entry>

            <entry><code>version ( ',' version )*</code></entry>

            <entry><para>A comma separated list of versions, comparisons must
            be done with version ordering because the version attribute must
            be declared with the <code>List&lt;Version&gt;</code>
            type.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>Provide-Capability headers in the <code>osgi.ee</code> namespace
    must not be used in a bundle's manifest; Require-Capability with this
    namespace is allowed. An <code>osgi.ee</code> requirement is the
    replacement for the Bundle-RequiredExecutionEnvironment header in <xref linkend="framework.module.bree"/>.</para>

    <para>The names for the execution environments are not normatively defined
    in this specification except those defined in <xref linkend="framework.namespaces-ee.names"/>. A list of well-known
    (non-normative) names are maintained at <xref linkend="i1775657"/>.</para>

    <table xml:id="framework.namespaces-ee.names">
      <title>osgi.ee execution environment names</title>

      <tgroup cols="2">
        <colspec colnum="1" colwidth="1*"/>

        <colspec colnum="2" colwidth="4*"/>

        <thead>
          <row>
            <entry>Name</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>JavaSE</code></entry>

            <entry><para>Should be used for all Java SE execution environments
            since Java 1.2. The name for the Java Runtime Environment has
            changed several times but for all environments the Java SE name
            must be used.</para></entry>
          </row>

          <row>
            <entry><code>JavaSE/compact1</code></entry>

            <entry><para>Java SE Embedded compact1 profile.</para></entry>
          </row>

          <row>
            <entry><code>JavaSE/compact2</code></entry>

            <entry><para>Java SE Embedded compact2 profile.</para></entry>
          </row>

          <row>
            <entry><code>JavaSE/compact3</code></entry>

            <entry><para>Java SE Embedded compact3 profile.</para></entry>
          </row>

          <row>
            <entry><code>OSGi/Minimum</code></entry>

            <entry><para>The OSGi Minimum execution
            environment.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section xml:id="framework.namespaces.osgi.wiring.package">
    <title>osgi.wiring.package Namespace</title>

    <para>The <code>osgi.wiring.package</code> namespace reflects the
    information in the manifest Import-Package, DynamicImport-Package, and
    Export-Package clauses as defined <xref linkend="framework.module.importpackage"/>, <xref linkend="framework.module.exportpackage"/>, and <xref linkend="framework.module.dynamicimportpackage"/>.</para>

    <para>The Import-Package header and DynamicImport-Package headers are
    represented as a Bundle Requirement for each of their clauses. The
    Export-Package header is represented as a Bundle Capability for each
    clause. DynamicImport-Package clauses have a <code>resolution</code>
    directive set to <code>dynamic</code> and can only be wired after the
    bundle has been resolved.</para>

    <para>For example, the following bundles:</para>

    <programlisting>Bundle A:
  Import-Package: p
  DynamicImport-Package: q.*

Bundle B:
  Export-Package: p</programlisting>

    <para>This example is depicted in <xref linkend="i1767123"/>. Package
    <code>p</code> is wired to a Bundle Revision of bundle <code>B</code>
    because it exports package <code>p</code>. The DynamicImport-Package
    clause is not wired but this can change when during run time package s
    refers to a class that cannot be found.</para>

    <figure xml:id="i1767123">
      <title>Example osgi.wiring.package Namespace</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="0.840in" contentwidth="6.199in" fileref="package-namespace-example.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The <code>osgi.wiring.package</code> attributes are defined in <xref linkend="framework.namespaces-wiring.package.namespace"/> and in the <xref linkend="org.osgi.framework.namespace.PackageNamespace" xrefstyle="hyperlink"/> class.</para>

    <table pgwide="1" xml:id="framework.namespaces-wiring.package.namespace">
      <title>osgi.wiring.package Namespace definition</title>

      <tgroup cols="6">
        <colspec colnum="1" colwidth="4*"/>

        <colspec colnum="2" colwidth="1*"/>

        <colspec colnum="3" colwidth="1*"/>

        <colspec colnum="4" colwidth="1.5*"/>

        <colspec colnum="5" colwidth="4*"/>

        <colspec colnum="6" colwidth="7*"/>

        <thead>
          <row>
            <entry>Name</entry>

            <entry>Kind</entry>

            <entry>M/O</entry>

            <entry>Type</entry>

            <entry>Syntax</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>osgi.wiring.package</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><code>String</code></entry>

            <entry><code>package-name</code></entry>

            <entry><para>The name of the package.</para></entry>
          </row>

          <row>
            <entry><code>version</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><code>Version</code></entry>

            <entry><code>version</code></entry>

            <entry><para>A version of the exported package</para></entry>
          </row>

          <row>
            <entry><code>bundle-symbolic-name</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><code>String</code></entry>

            <entry><code>symbolic-name</code></entry>

            <entry><para>The bundle symbolic name of the bundle that exports
            the package</para></entry>
          </row>

          <row>
            <entry><code>bundle-version</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><code>Version</code></entry>

            <entry><code>version</code></entry>

            <entry><para>The bundle version as defined in the Bundle-Version
            header.</para></entry>
          </row>

          <row>
            <entry><code>*</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>O</code></entry>

            <entry><code>String</code></entry>

            <entry><code>*</code></entry>

            <entry><para>Any attributes defined on the Export-Package
            clause</para></entry>
          </row>

          <row>
            <entry><code>resolution</code></entry>

            <entry><code>RD</code></entry>

            <entry><code>O</code></entry>

            <entry><code>String</code></entry>

            <entry><para><code>'dynamic'
            |</code></para><para><code>'mandatory'
            |</code></para><para><code>'optional'</code></para></entry>

            <entry><para>This directive is inherited from the default
            namespace but this namespace adds an additional value
            <code>dynamic</code>.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>The following directives must be ignored when specified on the
    Import-Package, or Export-Package, or DynamicImport-Package manifest
    headers:</para>

    <itemizedlist>
      <listitem>
        <para><code>effective</code></para>
      </listitem>

      <listitem>
        <para><code>cardinality</code></para>
      </listitem>
    </itemizedlist>

    <para>The requirements and capabilities in the
    <code>osgi.wiring.package</code> namespace must never be used in the
    Require-Capability and Provide-Capability headers.</para>
  </section>

  <section xml:id="framework.namespaces.osgi.wiring.bundle">
    <title>osgi.wiring.bundle Namespace</title>

    <para>The <code>osgi.wiring.bundle</code> namespace reflects the
    information in the bundle headers for the purpose of requiring another
    bundle. The Require-Bundle header is a requirement on the capability
    provided by the pair of Bundle-SymbolicName/Bundle-Version headers.
    Requiring this namespace through a Require-Bundle header creates a wire
    from the requiring bundle to the required bundle.</para>

    <para>A bundle must only provide this capability when the
    Bundle-ManifestVersion &gt;= 2. The <code>osgi.wiring.bundle</code>
    attributes are defined in table <xref linkend="framework.namespaces-wiring.bundle.namespace"/> and in the <xref linkend="org.osgi.framework.namespace.BundleNamespace" xrefstyle="hyperlink"/> class.</para>

    <table pgwide="1" xml:id="framework.namespaces-wiring.bundle.namespace">
      <title>osgi.wiring.bundle Namespace definition</title>

      <tgroup cols="6">
        <colspec colnum="1" colwidth="4*"/>

        <colspec colnum="2" colwidth="1*"/>

        <colspec colnum="3" colwidth="1*"/>

        <colspec colnum="4" colwidth="1.5*"/>

        <colspec colnum="5" colwidth="4*"/>

        <colspec colnum="6" colwidth="7*"/>

        <thead>
          <row>
            <entry>Name</entry>

            <entry>Kind</entry>

            <entry>M/O</entry>

            <entry>Type</entry>

            <entry>Syntax</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>osgi.wiring.bundle</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><code>String</code></entry>

            <entry><code>symbolic-name</code></entry>

            <entry><para>The name of the bundle as defined in the
            Bundle-SymbolicName header.</para></entry>
          </row>

          <row>
            <entry><code>bundle-version</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><code>Version</code></entry>

            <entry><code>version</code></entry>

            <entry><para>The version of the bundle as defined in the
            Bundle-Version header.</para></entry>
          </row>

          <row>
            <entry><code>*</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>O</code></entry>

            <entry><code>String</code></entry>

            <entry><code>*</code></entry>

            <entry><para>Any attributes defined on the Bundle-SymbolicName
            header</para></entry>
          </row>

          <row>
            <entry><code>singleton</code></entry>

            <entry><code>CD</code></entry>

            <entry><code>O</code></entry>

            <entry><code>String</code></entry>

            <entry><code>'true' | 'false'</code></entry>

            <entry><para>Indicates if this is a singleton bundle, see <xref linkend="framework.module.bsn"/>.</para></entry>
          </row>

          <row>
            <entry><code>visibility</code></entry>

            <entry><code>RD</code></entry>

            <entry><code>O</code></entry>

            <entry><code>String</code></entry>

            <entry><code>'private' | 'reexport'</code></entry>

            <entry><para>See <xref linkend="framework.module.requirebundle"/>.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>The effect of the <code>osgi.wiring.bundle</code> namespace is that
    the exported packages of any required bundles become available to the
    requirer as defined in the <xref linkend="framework.module.requiringbundles"/>. A Bundle Wire in the
    <code>osgi.wiring.bundle</code> namespace does not imply the availability
    of <code>osgi.wiring.package</code> Bundle Wires that correspond to the
    required bundle's exported packages. If there is a need to know what
    packages will become available then this must be deduced from the
    <code>osgi.wiring.package</code> capabilities of the required
    bundle.</para>

    <para>The following directives must be ignored when specified on the
    Require-Bundle or Bundle-SymbolicName manifest headers:</para>

    <itemizedlist>
      <listitem>
        <para><code>uses</code></para>
      </listitem>

      <listitem>
        <para><code>effective</code></para>
      </listitem>

      <listitem>
        <para><code>cardinality</code></para>
      </listitem>
    </itemizedlist>

    <para>The requirements and capabilities in the
    <code>osgi.wiring.bundle</code> namespace must not be used in the
    Require-Capability and Provide-Capability headers.</para>
  </section>

  <section xml:id="framework.namespaces.osgi.wiring.host">
    <title>osgi.wiring.host Namespace</title>

    <para>The <code>osgi.wiring.host</code> namespace reflects the information
    in the bundle headers for the purpose of fragments. The Fragment-Host
    header is a requirement on the capability that is provided by the pair of
    Bundle-SymbolicName/Bundle-Version headers. Satisfying this requirement
    allows a fragment to attach itself to a host. A bundle must only provide
    this capability when the <code>fragment-attachment</code> directive allows
    fragments to attach and the Bundle-ManifestVersion &gt;= 2.</para>

    <para>The <code>osgi.wiring.host</code> namespace is defined in table
    <xref linkend="framework.namespaces-wiring.host.namespace"/> and in the
    <xref linkend="org.osgi.framework.namespace.HostNamespace" xrefstyle="hyperlink"/> class.</para>

    <table pgwide="1" xml:id="framework.namespaces-wiring.host.namespace">
      <title>osgi.wiring.host Namespace definition</title>

      <tgroup cols="6">
        <colspec colnum="1" colwidth="4*"/>

        <colspec colnum="2" colwidth="1*"/>

        <colspec colnum="3" colwidth="1*"/>

        <colspec colnum="4" colwidth="1.5*"/>

        <colspec colnum="5" colwidth="4*"/>

        <colspec colnum="6" colwidth="7*"/>

        <thead>
          <row>
            <entry>Name</entry>

            <entry>Kind</entry>

            <entry>M/O</entry>

            <entry>Type</entry>

            <entry>Syntax</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>osgi.wiring.host</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><code>String</code></entry>

            <entry><code>symbolic-name</code></entry>

            <entry><para>The name of the bundle as defined in the
            Bundle-SymbolicName header.</para></entry>
          </row>

          <row>
            <entry><code>bundle-version</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><code>Version</code></entry>

            <entry><code>version</code></entry>

            <entry><para>The version of the bundle as defined in the
            Bundle-Version header.</para></entry>
          </row>

          <row>
            <entry><code>*</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>O</code></entry>

            <entry><code>String</code></entry>

            <entry><code>*</code></entry>

            <entry><para>Any attributes defined on the Bundle-SymbolicName
            header</para></entry>
          </row>

          <row>
            <entry><code>fragment-attachment</code></entry>

            <entry><code>CD</code></entry>

            <entry><code>O</code></entry>

            <entry><code>String</code></entry>

            <entry><para><code>'always'
            |</code></para><para><code>'resolve-time'
            |</code></para><para><code>'never'</code></para></entry>

            <entry><para>Indicates how, or if, a fragment can attach to this
            host. This capability is defined on the Bundle-SymbolicName header
            with its corresponding <code>fragment-attachment</code> directive.
            See <xref linkend="framework.module.bsn"/>.</para></entry>
          </row>

          <row>
            <entry><code>extension</code></entry>

            <entry><code>RD</code></entry>

            <entry><code>O</code></entry>

            <entry><code>String</code></entry>

            <entry><para><code>'framework'</code></para></entry>

            <entry><para>Indicates if the requiring fragment bundle is a
            framework extension. See <xref linkend="framework.module.fragmenthost"/>.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>The effect of the <code>osgi.wiring.host</code> namespace is that
    all declared capabilities and requirements of the fragment, except the
    <code>osgi.wiring.host</code> and <code>osgi.ee</code> requirements and
    the <code>osgi.identity</code> capability, are merged with the host bundle
    as defined in the <xref linkend="framework.module.fragmentbundles"/>.</para>

    <para>The following directives must be ignored when specified on the
    Fragment-Host or Bundle-SymbolicName manifest headers:</para>

    <itemizedlist>
      <listitem>
        <para><code>uses</code></para>
      </listitem>

      <listitem>
        <para><code>effective</code></para>
      </listitem>

      <listitem>
        <para><code>cardinality</code></para>
      </listitem>
    </itemizedlist>

    <para>The requirements and capabilities in the
    <code>osgi.wiring.host</code> namespace must not be used in the
    Require-Capability and Provide-Capability headers.</para>
  </section>

  <section xml:id="framework.namespaces.osgi.identity">
    <title>osgi.identity Namespace</title>

    <para>The <code>osgi.identity</code> namespace has a capability that can
    uniquely identify a resource. Its purpose is to identify a type for the
    resource and then provide a name that is unique for that type. That is,
    the type can be <code>osgi.bundle</code> and then the name is a
    Bundle-SymbolicName. For example, for a certificate the type could be x509
    and the name could then its SHA-1 fingerprint. Each must have associated
    rules for the names uses as the identity name. It is required that the
    value of the <code>osgi.identity</code> attribute, plus the value of the
    <code>type</code> attribute, plus the <code>version</code> attribute are a
    unique combination.</para>

    <para>The definition of the <code>osgi.identity</code> namespace is in
    <xref linkend="framework.namespaces-identity.namespace"/> and in the <xref linkend="org.osgi.framework.namespace.IdentityNamespace" xrefstyle="hyperlink"/> class.</para>

    <table pgwide="1" xml:id="framework.namespaces-identity.namespace">
      <title>osgi.identity Namespace definition</title>

      <tgroup cols="6">
        <colspec colnum="1" colwidth="3*"/>

        <colspec colnum="2" colwidth="1*"/>

        <colspec colnum="3" colwidth="1*"/>

        <colspec colnum="4" colwidth="2*"/>

        <colspec colnum="5" colwidth="4*"/>

        <colspec colnum="6" colwidth="7*"/>

        <thead>
          <row>
            <entry>Name</entry>

            <entry>Kind</entry>

            <entry>M/O</entry>

            <entry>Type</entry>

            <entry>Syntax</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>osgi.identity</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><code>String</code></entry>

            <entry><code>symbolic-name</code></entry>

            <entry><para>The identity of the resource, for an OSGi bundle this
            is the bundle symbolic name as defined in the Bundle-SymbolicName
            header.</para></entry>
          </row>

          <row>
            <entry><code>type</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><code>String</code></entry>

            <entry><para><code>osgi.bundle
            |</code></para><para><code>osgi.fragment
            |</code></para><para><code>'unknown'
            |</code></para><para><code>&lt;any&gt;</code></para></entry>

            <entry><para>The type of the resource</para></entry>
          </row>

          <row>
            <entry><code>version</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><code>Version</code></entry>

            <entry><code>version</code></entry>

            <entry><para>The version of the resource. For an OSGi bundle this
            is as defined in the Bundle-Version header.</para></entry>
          </row>

          <row>
            <entry><code>singleton</code></entry>

            <entry><code>CD</code></entry>

            <entry><code>O</code></entry>

            <entry><code>String</code></entry>

            <entry><code>'true' |'false'</code></entry>

            <entry><para>If this resource is a singleton. The default value is
            <code>false</code>. For an OSGi bundle this is the singleton
            directive as defined in the Bundle-SymbolicName
            header.</para></entry>
          </row>

          <row>
            <entry><code>copyright</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>O</code></entry>

            <entry><code>String</code></entry>

            <entry/>

            <entry><para>A human readable copyright notice as defined for the
            Bundle-Copyright header.</para></entry>
          </row>

          <row>
            <entry><code>description</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>O</code></entry>

            <entry><code>String</code></entry>

            <entry/>

            <entry><para>A human readable description of the resource as
            defined for the Bundle-Description header.</para></entry>
          </row>

          <row>
            <entry><code>documentation</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>O</code></entry>

            <entry><code>String</code></entry>

            <entry><code>&lt;url&gt;</code></entry>

            <entry><para>A URL to where documentation of the resource can be
            found as defined for the Bundle-DocURL header.</para></entry>
          </row>

          <row>
            <entry><code>license</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>O</code></entry>

            <entry><code>String</code></entry>

            <entry><code>&lt;url&gt;</code></entry>

            <entry><para>A URL to the license for this resource. The URL must
            be the name of the license as defined in the Bundle-License
            header.</para></entry>
          </row>

          <row>
            <entry><code>tags</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>O</code></entry>

            <entry><code>List&lt;String&gt;</code></entry>

            <entry><code>extended ( ',' extended )*</code></entry>

            <entry><para>A list of tag names used to identify an aspect of
            this resource that is not otherwise expressed by the capabilities
            of this resource.</para></entry>
          </row>

          <row>
            <entry><code>*</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>O</code></entry>

            <entry><code>String</code></entry>

            <entry><code>*</code></entry>

            <entry><para>Any other attributes for the resource. For an OSGi
            bundle this is includes the attributes defined in the
            Bundle-SymbolicName header.</para></entry>
          </row>

          <row>
            <entry><code>classifier</code></entry>

            <entry><code>RD</code></entry>

            <entry><code>O</code></entry>

            <entry><code>String</code></entry>

            <entry><code>&lt;see text&gt;</code></entry>

            <entry><para>A name for the relation. Though any name is usable, a
            number of names are defined in <xref linkend="i1776004"/>.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>Provide-Capability headers in the <code>osgi.identity</code>
    Namespace must not be used in the manifest, Require-Capability with this
    Namespace is allowed.</para>

    <section xml:id="i1776004">
      <title>Related Resources</title>

      <para>A resource can have related resources. For example, a Bundle can
      have Javadoc, source code, link to a source control management system,
      etc. It is assumed that these artifacts are also resources. It is
      therefore necessary that a resource can specify a relation with another
      resource.</para>

      <para>A resource can specify a relation to other resource by declaring
      an optional requirement to that other resource. Such relation
      requirements should be placed in another effective time than resolve to
      not interfere with resolving, for example the effective time
      <code>meta</code>. The requirements should be in to the
      <code>osgi.identity</code> namespace and assert:</para>

      <itemizedlist>
        <listitem>
          <para><code>osgi.identity</code> - The name of the resource.</para>
        </listitem>

        <listitem>
          <para><code>type</code> - The type of the resource.</para>
        </listitem>

        <listitem>
          <para><code>version</code> - The version of the resource.</para>
        </listitem>
      </itemizedlist>

      <para>The requirement must then add a directive <code>classifier</code>
      that defines the related type so that tools like IDEs can find the
      relations by iteration over all the <code>osgi.identity</code>
      requirements that have a <code>classifier</code> directive. In general,
      these requirement should be <code>optional</code> and have a
      <code>cardinality</code> of <code>single</code>.</para>

      <para>The following values are defined for the <code>classifier</code>
      directive:</para>

      <itemizedlist>
        <listitem>
          <para><code>sources</code> - An archive containing the source code
          in the same directory layout as this resource.</para>
        </listitem>

        <listitem>
          <para><code>javadoc</code> - An archive containing the Javadoc in
          the same directory layout as this resource</para>
        </listitem>

        <listitem>
          <para>* - Any other names</para>
        </listitem>
      </itemizedlist>

      <para>For example, a bundle could contain the following requirement
      modeling a relation:</para>

      <programlisting>Require-Capability: «
    osgi.identity; «
        filter:="(&amp;(osgi.identity=org.example.foo-source)(version=1.1))"; «
        effective:=meta; «
        classifier:=sources; «
        resolution:=optional</programlisting>

      <para>The code to retrieve a related resource could look like:</para>

      <programlisting>    Repository repository = ...;

    InputStream getRelated(Resource resource, String classifier)
        throws IOException {
        for ( Requirement r : resource.getRequirements("osgi.identity")) {
            if ( classifier.equals(r.getDirectives().get("classifier"))){
                Collection&lt;Capability&gt; caps =
                     repository.findProviders(Collections.singleton(r)).get(r);

                if ( caps==null || caps.isEmpty())
                    continue;

                Capability c = caps.iterator().next();
                Resource related = c.getResource();
                return ((RepositoryContent)related).getContent();
            }
        }
        return null;
    }</programlisting>
    </section>
  </section>

  <section xml:id="framework.namespaces.osgi.native">
    <title>osgi.native Namespace</title>

    <para>The <code>osgi.native</code> namespace is used to describe the
    native environment in which the Framework is executing. An OSGi Framework
    must provide a capability in the <code>osgi.native</code> namespace that
    represents the native environment in which the Framework is executing. For
    example, the following capability is provided when running a 64-bit VM on
    a Windows 7 machine with the language set to en_US:</para>

    <programlisting>Provide-Capability: «
    osgi.native; «
        osgi.native.osname:List&lt;String&gt;="Windows7,Windows 7,Win7,Win32"; «
        osgi.native.osversion:Version="7.0"; «
        osgi.native.processor:List&lt;String&gt;="x86-64,amd64,em64t,x86_64"; «
        osgi.native.language="en"</programlisting>

    <para>Provide-Capability headers in the <code>osgi.native</code> namespace
    must not be used in a bundle's manifest. Bundles can require an
    <code>osgi.native</code> capability which matches the native environment
    required for the bundle to function properly, for example:</para>

    <programlisting>Require-Capability: «
     osgi.native; «
       filter:=" «
         (&amp; «
           (osgi.native.osname~=win32) «
           (osgi.native.processor~=x86-64) «
           (osgi.native.language~=en) «
         )"</programlisting>

    <para>The <code>osgi.native</code> namespace is not used to specify native
    code paths packaged within a bundle. The <code>Bundle-NativeCode</code>
    header is used to specify native code paths. The OSGi Framework converts a
    <code>Bundle-NativeCode</code> into an <code>osgi.native</code>
    requirement which describes the native environment required to execute
    native code packaged within a Bundle (see <xref linkend="framework.module-loading.native.code.libraries"/>). There is no
    need for a bundle to specify both a <code>Bundle-NativeCode</code> header
    and an <code>osgi.native</code> requirement.</para>

    <para>Native code included in a Fragment Bundle gets loaded by the class
    loaders of the Host Bundles the Fragment is attached to, therefore the
    <code>osgi.native</code> requirement is hosted when it is part of a
    Fragment. That is, a requirement from this namespace must be treated as
    part of the Host Bundles the Fragment is attached to.</para>

    <para>The <code>osgi.native</code> capability is defined in table <xref linkend="framework.namespaces-native.namespace"/> and in the <xref linkend="org.osgi.framework.namespace.NativeNamespace" xrefstyle="hyperlink"/> class.</para>

    <table pgwide="1" xml:id="framework.namespaces-native.namespace">
      <title>osgi.native Namespace definition</title>

      <tgroup cols="6">
        <colspec colnum="1" colwidth="4*"/>

        <colspec colnum="2" colwidth="1*"/>

        <colspec colnum="3" colwidth="1*"/>

        <colspec colnum="4" colwidth="2*"/>

        <colspec colnum="5" colwidth="3*"/>

        <colspec colnum="6" colwidth="7*"/>

        <thead>
          <row>
            <entry>Name</entry>

            <entry>Kind</entry>

            <entry>M/O</entry>

            <entry>Type</entry>

            <entry>Syntax</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>osgi.native.osname</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><para><code>List</code></para><para><code>&lt;String&gt;</code></para></entry>

            <entry><para><code>osname</code></para><para><code>( ',' osname
            )*</code></para></entry>

            <entry><para>A comma separated list of canonical os name aliases
            to the <code>org.osgi.framework.os.name</code> launching property
            value (See <xref linkend="framework.module.os-names"/> and <xref linkend="i3287541"/>). For example, an
            <code>org.osgi.framework.os.name</code> value of
            <code>Windows95</code> will get a <code>List&lt;String&gt;</code>
            value of <code>Windows95,Windows
            95,Win95,Win32</code></para></entry>
          </row>

          <row>
            <entry><code>osgi.native.osversion</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><para><code>Version</code></para></entry>

            <entry><code>version</code></entry>

            <entry><para>A <code>Version</code> as parsed from the value of
            the <code>org.osgi.framework.os.version</code> launching
            property</para></entry>
          </row>

          <row>
            <entry><code>osgi.native.processor</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><para><code>List</code></para><para><code>&lt;String&gt;</code></para></entry>

            <entry><para><code>processor</code></para><para><code>( ','
            processor )*</code></para></entry>

            <entry><para>A comma separated list of canonical processor aliases
            to the <code>org.osgi.framework.processor</code> launching
            property value (See <xref linkend="framework.module.processor-names"/> and <xref linkend="i3287541"/>). For example, an
            <code>org.osgi.framework.processor</code> value of
            <code>x86</code> will get a <code>List&lt;String&gt;</code> value
            of <code>x86,pentium,i386,i486,i586,i686</code></para></entry>
          </row>

          <row>
            <entry><code>osgi.native.language</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><para><code>String</code></para></entry>

            <entry/>

            <entry><para>The value of the
            <code>org.osgi.framework.language</code> launching
            property</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>In addition to the attributes defined in <xref linkend="framework.namespaces-native.namespace"/> an OSGi Framework must
    populate the <code>osgi.native</code> capability attributes with the
    values included in the Framework launching properties (see <xref linkend="framework.lifecycle.launchingproperties"/>). Launching property
    keys that start with <code>osgi.native.</code> are excluded to prevent
    collisions with the defined capability attribute keys.</para>
  </section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="i1775657"><title>Specification
      References</title><biblioid class="uri"><link xlink:href="https://docs.osgi.org/reference/"/></biblioid></bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter label="9" revision="$Id: 58e96ef966e224a7287232d11874291d2ed5fe56 $" version="5.0" xml:id="framework.startlevel" xml:base="009/framework.startlevel.xml">
  <title>Start Level API Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.framework.startlevel-version" linkend="org.osgi.framework.startlevel"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>This specification describes how to enable a management agent to
    control the relative starting and stopping order of bundles in an OSGi
    framework.</para>

    <para>The management agent can set the start levels for bundles and set
    the active start level of the Framework, which will start and stop the
    appropriate bundles. Only bundles that have a start level less or equal to
    this active start level must be active. The purpose of the Start Level API
    is to allow the management agent to control, in detail, what bundles will
    be started and stopped and when this occurs.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Ordering</emphasis> - A management agent should be
          able to order the startup and shutdown sequences of bundles.</para>
        </listitem>

        <listitem>
          <para><emphasis>Levels</emphasis> - The management agent should
          support a virtually unlimited number of levels.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Bundle Start Level</emphasis> - The adapter on a
          bundle that is used by a management agent to order the startup and
          shutdown sequences of bundles.</para>
        </listitem>

        <listitem>
          <para><emphasis>Framework Start Level</emphasis> - The adapter that
          is used to set the framework start levels.</para>
        </listitem>

        <listitem>
          <para><emphasis>Management Agent</emphasis> - A bundle that is
          provided by the Operator to implement an Operator specific
          policy.</para>
        </listitem>

        <listitem>
          <para><emphasis>Framework Event</emphasis> - See <xref linkend="i3032483"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Framework Listener</emphasis> - See <xref linkend="i3032481"/>.</para>
        </listitem>
      </itemizedlist>

      <figure>
        <title>Class Diagram org.osgi.framework.startlevel package</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.586in" contentwidth="7.000in" fileref="startlevel-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section>
    <title>Start Level API</title>

    <para>The Start Level API provides the following functions:</para>

    <itemizedlist>
      <listitem>
        <para>Controls the beginning start level of the OSGi Framework.</para>
      </listitem>

      <listitem>
        <para>Is used to modify the active start level of the
        Framework.</para>
      </listitem>

      <listitem>
        <para>Can be used to assign a specific start level to a bundle.</para>
      </listitem>

      <listitem>
        <para>Can set the initial start level for newly installed
        bundles.</para>
      </listitem>
    </itemizedlist>

    <para>Defining the order in which bundles are started and stopped is
    useful for the following:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Safe mode</emphasis> - The management agent can
        implement a <emphasis>safe mode</emphasis>. In this mode, only fully
        trusted bundles are started. Safe mode might be necessary when a
        bundle causes a failure at startup that disrupts normal operation and
        prevents correction of the problem.</para>
      </listitem>

      <listitem>
        <para><emphasis>Splash screen</emphasis> - If the total startup time
        is long, it might be desirable to show a splash screen during
        initialization. This improves the user's perception of the boot time
        of the device. The startup ordering can ensure that the right bundle
        is started first.</para>
      </listitem>

      <listitem>
        <para><emphasis>Handling erratic bundles</emphasis> - Problems can
        occur because bundles require services to be available when they are
        activated (this is a programming error). By controlling the start
        order, the management agent can prevent these problems.</para>
      </listitem>

      <listitem>
        <para><emphasis>High priority bundles</emphasis> - Certain tasks such
        as metering need to run as quickly as possible and cannot have a long
        startup delay. These bundles can be started first.</para>
      </listitem>
    </itemizedlist>

    <para>Start levels are not intended to be used for ensuring that
    dependencies are met when a bundle is started. Any of the life cycle
    actions (install/update/uninstall) can cause a dependency to become
    unavailable regardless of start levels.</para>

    <section>
      <title>Adaptations</title>

      <para>This specification provides two adaptations of a
      <code>Bundle</code> object to a:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.framework.startlevel.BundleStartLevel" xrefstyle="hyperlink"/> - Used to get and set the start level on a
          specific bundle.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.framework.startlevel.FrameworkStartLevel" xrefstyle="hyperlink"/> - Used to get and control the framework
          start level. This adaptation must return null for any other bundle
          than the system bundle (bundle 0).</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Bundle Start Level Bundle Adaptation</title>

      <para>The adaptation provides the following methods:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.framework.startlevel.BundleStartLevel.setStartLevel-int-" xrefstyle="hyperlink"/> - Sets the current start level for the
          adapted bundle.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.framework.startlevel.BundleStartLevel.getStartLevel--" xrefstyle="hyperlink"/> - Gets the current start level for the
          adapted bundle.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.framework.startlevel.BundleStartLevel.isActivationPolicyUsed--" xrefstyle="hyperlink"/> - Answer if the activation policy is
          used.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.framework.startlevel.BundleStartLevel.isPersistentlyStarted--" xrefstyle="hyperlink"/> - Answer if this bundle as persistently
          started.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Framework Start Level Bundle Adaptation</title>

      <para>The Framework Start Level adaptation is only possible for the
      system bundle. Other bundles must return <code>null</code> for this
      adaptation. The adaptation provides the following methods:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.framework.startlevel.FrameworkStartLevel.getInitialBundleStartLevel--" xrefstyle="hyperlink"/> - Return the start level to assign for newly
          installed bundles.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.framework.startlevel.FrameworkStartLevel.setInitialBundleStartLevel-int-" xrefstyle="hyperlink"/> - Set the initial start level.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.framework.startlevel.FrameworkStartLevel.getStartLevel--" xrefstyle="hyperlink"/> - Get the current framework start
          level.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.framework.startlevel.FrameworkStartLevel.setStartLevel-int-FrameworkListener...-" xrefstyle="hyperlink"/> - Set the current framework start level and
          provide an optional callback Framework Listener. This listener is
          called back when the set start level has been reached.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section>
    <title>The Concept of a Start Level</title>

    <para>A <emphasis>start level</emphasis> is defined as a non-negative
    integer. A start level of 0 (zero) is the state in which the Framework has
    either not been launched or has completed shutdown (these two states are
    considered equivalent). In this state, no bundles are running.
    Progressively higher integral values represent progressively higher start
    levels. For example, 2 is a higher start level than 1. The Framework must
    support all positive <code>int</code> values
    (<code>Integer.MAX_VALUE</code>) for start levels.</para>

    <para>The Framework has an <emphasis>active start level</emphasis> that is
    used to decide which bundles can be started. All bundles must be assigned
    a <emphasis>bundle start level.</emphasis> This is the minimum start level
    to start a bundle. The bundle start level can be set with the <xref linkend="org.osgi.framework.startlevel.BundleStartLevel.setStartLevel-int-" xrefstyle="hyperlink"/> method on the <code>BundleStartLevel</code>
    object. When a bundle is installed, it is initially assigned the bundle
    start level returned by <xref linkend="org.osgi.framework.startlevel.FrameworkStartLevel.getInitialBundleStartLevel--" xrefstyle="hyperlink"/> on a <code>FrameworkStartLevel</code> object. The
    initial bundle start level to be used when bundles are installed can be
    set with <xref linkend="org.osgi.framework.startlevel.FrameworkStartLevel.setInitialBundleStartLevel-int-" xrefstyle="hyperlink"/>.</para>

    <para>In addition, a bundle can be persistently marked as
    <emphasis>started</emphasis> or <emphasis>stopped</emphasis> with the
    <code>Bundle</code> <code>start</code> and <code>stop</code> methods. A
    bundle cannot run unless it is marked started, regardless of the bundle's
    start level.</para>

    <section xml:id="i1300852">
      <title>Changing the Active Start Level</title>

      <para>A management agent can influence the active start level with the
      <xref linkend="org.osgi.framework.startlevel.BundleStartLevel.setStartLevel-int-" xrefstyle="hyperlink"/> method. The Framework must then increase or
      decrease the active start level by 1 until the requested start level is
      reached. The process of starting or stopping bundles, which is initiated
      by the <xref linkend="org.osgi.framework.startlevel.BundleStartLevel.setStartLevel-int-" xrefstyle="hyperlink"/> method, must take place asynchronously.</para>

      <para>This means that the <emphasis>active start level</emphasis> (the
      one that is active at a certain moment in time) must be changed to a new
      start level, called the <emphasis>requested start level</emphasis>. The
      active and requested levels differ during a certain period when the
      Framework starts and stops the appropriate bundles. Moving from the
      active start level to the requested start level must take place in
      increments of one (1).</para>

      <para>If the requested start level is higher than the active start
      level, the Framework must increase the start level by one and then start
      all bundles that meet the following criteria:</para>

      <itemizedlist>
        <listitem>
          <para>Bundles that are persistently marked started, and</para>
        </listitem>

        <listitem>
          <para>Bundles that have a bundle start level equal to the new active
          start level.</para>
        </listitem>
      </itemizedlist>

      <para>The Framework continues increasing the active start level and
      starting the appropriate bundles until it has started all bundles with a
      bundle start level that equals the requested start level.</para>

      <para>The Framework must not increase to the next active start level
      until all started bundles have returned from their
      <code>BundleActivator.start</code> method normally or with an exception.
      A <code>FrameworkEvent.ERROR</code> must be broadcast when the
      <code>BundleActivator.start</code> method throws an exception.</para>

      <para>If the requested start level is lower than the active start level,
      the Framework must stop all bundles that have a bundle start level that
      is equal to the active start level. The Framework must then decrease the
      active start level by 1. If the active start level is still higher than
      the requested start level, it should continue stopping the appropriate
      bundles and decreasing the active start level until the requested start
      level is reached. A <code>FrameworkEvent.ERROR</code> must be broadcast
      when the <code>BundleActivator.stop</code> method throws an
      exception.</para>

      <para>If the requested start level is the active start level, the
      Framework will not start or stop any bundles.</para>

      <para>When the requested start level is reached and all bundles satisfy
      the condition that their bundle start level &lt;= active start level in
      order to be started, then the
      <code>FrameworkEvent.STARTLEVEL_CHANGED</code> event must be sent to all
      registered <code>FrameworkListener</code> objects. If the requested
      start level and active start level are equal, then this event may arrive
      before the <code>setStartLevel</code> method has returned.</para>

      <para>It must therefore always be true that:</para>

      <itemizedlist>
        <listitem>
          <para>A bundle is started, or will be started soon, if the start
          level is less or equal to the active start level.</para>
        </listitem>

        <listitem>
          <para>A bundle is stopped, or will be stopped soon, when it has a
          start level more than the active start level.</para>
        </listitem>
      </itemizedlist>

      <para>These steps are depicted in the flow chart in <xref linkend="i1300675"/>.</para>

      <figure xml:id="i1300675">
        <title>Move to requested start level R, active level is A, B is a
        bundle's start level</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.882in" contentwidth="4.917in" fileref="startlevel-example.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>If the Framework is currently involved in changing the active
      start level, it must first reach the previously requested start level
      before it is allowed to continue with a newly requested start level. For
      example, assume the active start level is 5 and the Framework is
      requested to transition to start level 3. Before start level 3 is
      reached, another request is made to transition to start level 7. In this
      case, the OSGi Framework must first complete the transition to start
      level 3 before it transitions to start level 7.</para>
    </section>

    <section xml:id="i1334328">
      <title>Startup Sequence</title>

      <para>At startup, the Framework must have an active start level of zero.
      It must then move the active start level to the <emphasis>beginning
      start level</emphasis>. The beginning start level is specified with an
      argument when starting the Framework or through some other means, which
      is left undefined here. If no beginning start level is given, the
      Framework must assume a beginning start level of one (1).</para>

      <para>The Framework must launch and then set the requested start level
      to the beginning start level. It must then follow the procedure
      described in <xref linkend="i1300852"/> to make the active start level
      equal the beginning start level, with the exception of the
      <code>FrameworkEvent.START_LEVEL_CHANGED</code> event broadcast. During
      launching, the Framework must broadcast a
      <code>FrameworkEvent.STARTED</code> event when the beginning start level
      is reached.</para>
    </section>

    <section xml:id="i1277583">
      <title>Shutdown Sequence</title>

      <para>When the Framework shuts down, the requested start level must be
      set to zero. The Framework must then follow the process described in
      <xref linkend="i1300852"/> to make the active start level equal to
      zero.</para>
    </section>

    <section>
      <title>Changing a Bundle's Start Level</title>

      <para>Bundles are assigned an initial start level when they are
      installed. The default value for the initial start level is set to one,
      but can be changed with the <xref linkend="org.osgi.framework.startlevel.FrameworkStartLevel.setInitialBundleStartLevel-int-" xrefstyle="hyperlink"/> method on the <xref linkend="org.osgi.framework.startlevel.FrameworkStartLevel" xrefstyle="hyperlink"/> object. A bundle's start level will not change
      when the <xref linkend="org.osgi.framework.startlevel.FrameworkStartLevel.setInitialBundleStartLevel-int-" xrefstyle="hyperlink"/> method later modifies the default initial start
      level.</para>

      <para>Once installed, the start level of a bundle can be changed with
      <xref linkend="org.osgi.framework.startlevel.BundleStartLevel.setStartLevel-int-" xrefstyle="hyperlink"/>. When a bundle's start level is changed and the
      bundle is marked persistently to be started, then the OSGi Framework
      must compare the new bundle start level to the active start level. For
      example, assume that the active start level is 5 and a bundle with start
      level 5 is started. If the bundle's start level subsequently is changed
      to 6 then this bundle must be stopped by the OSGi Framework but it must
      still be marked persistently to be started.</para>
    </section>

    <section>
      <title>Starting a Bundle</title>

      <para>If a bundle is started by calling the
      <code>Bundle.start</code> method, then the OSGi Framework must mark the
      bundle as persistently started. The OSGi Framework must not actually
      start a bundle when the active start level is less than the bundle's
      start level. In that case, the state must not change.</para>
    </section>

    <section>
      <title>Exceptions in the Bundle Activator</title>

      <para>If the <code>BundleActivator.start</code> or <code>stop</code>
      method throws an <code>Exception</code>, then the handling of this
      <code>Exception</code> is different depending who invoked the
      <code>start</code> or <code>stop</code> method.</para>

      <para>If the bundle is started/stopped due to a change in the active
      start level or the bundle's start level, then the <code>Exception</code>
      must be wrapped in a <code>BundleException</code> and broadcast as a
      <code>FrameworkEvent.ERROR</code> event. Otherwise, a new
      <code>BundleException</code> must be created containing the exception
      and this <code>BundleException</code> is then thrown to the
      caller.</para>
    </section>

    <section>
      <title>System Bundle</title>

      <para>The System Bundle is defined to have a start level of zero. The
      start level of the System Bundle cannot be changed.</para>
    </section>
  </section>

  <section>
    <title>Example Applications</title>

    <para>The Start Level API allows a management agent to implement many
    different startup schemes. The following sections show some
    examples.</para>

    <section>
      <title>Safe Mode Startup Scheme</title>

      <para>A management agent can implement a <emphasis>safe mode</emphasis>
      in which it runs trusted bundles at level 1 and runs itself on level 2.
      When the management agent gets control, it constructs a list of all
      applications to be started. This list can be constructed from
      <code>BundleContext.getBundles()</code>. The management agent checks
      each bundle to determine if it is not started but is marked to be
      started persistently by calling the <xref linkend="org.osgi.framework.startlevel.BundleStartLevel.isPersistentlyStarted--" xrefstyle="hyperlink"/> method of the Start Level API.</para>

      <para>Before it starts each bundle, the management agent persistently
      records the bundle to be started and then starts the bundle. This
      continues until all bundles are started. When all bundles are
      successfully started, the management agent persistently records that all
      bundles started without problems.</para>

      <para>If the OSGi framework is restarted, the management agent should
      inspect the persistently recorded information. If the persistently
      recorded information indicates a bundle failure, the management agent
      should try to restart the system without that application bundle since
      that bundle failed. Alternatively, it could contact its Remote Manager
      and ask for assistance.</para>
    </section>

    <section>
      <title>Splash Screen Startup Scheme</title>

      <para>A splash screen is a popup containing startup information about an
      application. The popup provides feedback to the end user indicating that
      the system is still initializing. The Start Level API can be used by a
      bundle to pop-up a splash screen before any other bundle is started, and
      remove it once all bundles have been started. The splash-screen bundle
      would start at start level 1 and all other bundles would start at start
      level 2 or higher.</para>

      <programlisting>class SplashScreen implements
    BundleActivator, FrameworkListener {
    Screen         screen;
    public void start(BundleContext context) {
        context.addFrameworkListener( this );
        screen = createSplash();
        screen.open();
    }
    public void stop(BundleContext context) {
        screen.close();
    }
    public void frameworkEvent( FrameworkEvent event ) {
        if ( event.getType() == FrameworkEvent.STARTED )
            screen.close();
    }
    Screen createSplash() { ... }
}</programlisting>
    </section>
  </section>

  <section>
    <title>Security</title>

    <para>The Start Level API requires Adapt Permission with action
    <code>ADAPT</code> for the following type:</para>

    <itemizedlist>
      <listitem>
        <para><code>org.osgi.framework.startlevel.BundleStartLevel</code></para>
      </listitem>

      <listitem>
        <para><code>org.osgi.framework.startlevel.FrameworkStartLevel</code></para>
      </listitem>
    </itemizedlist>

    <para>The Start Level methods that mutate state require an additional
    Admin Permission with the action:</para>

    <itemizedlist>
      <listitem>
        <para><code>EXECUTE</code> - For bundles that must be able to modify a
        bundle's start level</para>
      </listitem>

      <listitem>
        <para><code>STARTLEVEL</code> - For modifying the Framework's active
        start level.</para>
      </listitem>
    </itemizedlist>
  </section>
</chapter>

  <chapter label="10" revision="$Id: 5215cc0eaa999accbf6408df6b0af443561374ca $" version="5.0" xml:id="framework.api" xml:base="010/framework.api.xml">
  <title>Framework API</title>

  <section xreflabel="org.osgi.framework" version="5" role="package" xml:id="org.osgi.framework" xml:base="010/../../../generated/javadoc/docbook/org.osgi.framework.xml">
   <title>org.osgi.framework</title>
   <info>
      <releaseinfo xml:id="org.osgi.framework-version">Version 1.10</releaseinfo>
      <edition xml:id="org.osgi.framework-version.number">1.10</edition>
   </info>
   <para>
Framework Package Version 1.10.
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest.
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.framework; version="[1.10,2.0)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.AdaptPermission">
                  <code>AdaptPermission</code>
               </link> -
A bundle's authority to adapt an object to a type.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.AdminPermission">
                  <code>AdminPermission</code>
               </link> -
A bundle's authority to perform specific privileged administrative operations
 on or to get sensitive information about a bundle.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.AllServiceListener">
                  <code>AllServiceListener</code>
               </link> -
A <code>ServiceEvent</code> listener that does not filter based upon package
 wiring.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.Bundle">
                  <code>Bundle</code>
               </link> -
An installed bundle in the Framework.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.BundleActivator">
                  <code>BundleActivator</code>
               </link> -
Customizes the starting and stopping of a bundle.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.BundleContext">
                  <code>BundleContext</code>
               </link> -
A bundle's execution context within the Framework.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.BundleEvent">
                  <code>BundleEvent</code>
               </link> -
An event from the Framework describing a bundle lifecycle change.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.BundleException">
                  <code>BundleException</code>
               </link> -
A Framework exception used to indicate that a bundle lifecycle problem
 occurred.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.BundleListener">
                  <code>BundleListener</code>
               </link> -
A <code>BundleEvent</code> listener.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.BundlePermission">
                  <code>BundlePermission</code>
               </link> -
A bundle's authority to require or provide a bundle or to receive or attach
 fragments.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.BundleReference">
                  <code>BundleReference</code>
               </link> -
A reference to a Bundle.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.CapabilityPermission">
                  <code>CapabilityPermission</code>
               </link> -
A bundle's authority to provide or require a capability.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.Configurable">
                  <code>Configurable</code>
               </link> -
Supports a configuration object.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.Constants">
                  <code>Constants</code>
               </link> -
Defines standard names for the OSGi environment system properties, service
 properties, and Manifest header attribute keys.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.Filter">
                  <code>Filter</code>
               </link> -
An <link xlink:href="http://www.ietf.org/rfc/rfc1960.txt">RFC 1960</link>-based Filter.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.FrameworkEvent">
                  <code>FrameworkEvent</code>
               </link> -
A general event from the Framework.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.FrameworkListener">
                  <code>FrameworkListener</code>
               </link> -
A <code>FrameworkEvent</code> listener.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.FrameworkUtil">
                  <code>FrameworkUtil</code>
               </link> -
Framework Utility class.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.InvalidSyntaxException">
                  <code>InvalidSyntaxException</code>
               </link> -
A Framework exception used to indicate that a filter string has an invalid
 syntax.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.PackagePermission">
                  <code>PackagePermission</code>
               </link> -
A bundle's authority to import or export a package.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.PrototypeServiceFactory">
                  <code>PrototypeServiceFactory</code>
               </link> -
A factory for <link linkend="org.osgi.framework.Constants.SCOPE_PROTOTYPE">prototype scope</link> services.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.ServiceEvent">
                  <code>ServiceEvent</code>
               </link> -
An event from the Framework describing a service lifecycle change.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.ServiceException">
                  <code>ServiceException</code>
               </link> -
A service exception used to indicate that a service problem occurred.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.ServiceFactory">
                  <code>ServiceFactory</code>
               </link> -
A factory for <link linkend="org.osgi.framework.Constants.SCOPE_BUNDLE">bundle scope</link> services.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.ServiceListener">
                  <code>ServiceListener</code>
               </link> -
A <code>ServiceEvent</code> listener.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.ServiceObjects">
                  <code>ServiceObjects</code>
               </link> -
Allows multiple service objects for a service to be obtained.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.ServicePermission">
                  <code>ServicePermission</code>
               </link> -
A bundle's authority to register or get a service.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.ServiceReference">
                  <code>ServiceReference</code>
               </link> -
A reference to a service.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.ServiceRegistration">
                  <code>ServiceRegistration</code>
               </link> -
A registered service.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.SynchronousBundleListener">
                  <code>SynchronousBundleListener</code>
               </link> -
A synchronous <code>BundleEvent</code> listener.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.UnfilteredServiceListener">
                  <code>UnfilteredServiceListener</code>
               </link> -
A <code>ServiceEvent</code> listener that does <emphasis>not</emphasis> filter based upon any
 filter string specified to
 <link linkend="org.osgi.framework.BundleContext.addServiceListener-ServiceListener-String-">BundleContext.addServiceListener(ServiceListener, String)</link>.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.Version">
                  <code>Version</code>
               </link> -
Version identifier for capabilities such as bundles and packages.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.VersionRange">
                  <code>VersionRange</code>
               </link> -
Version range.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section xreflabel="AdaptPermission" role="class" xml:id="org.osgi.framework.AdaptPermission">
      <title>public final class AdaptPermission<?line-break?> extends BasicPermission</title>
      <para>
A bundle's authority to adapt an object to a type.

 </para>
      <para>
         <code>AdaptPermission</code> has one action: <code>adapt</code>.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section xreflabel="ADAPT" role="field" xml:id="org.osgi.framework.AdaptPermission.ADAPT">
         <title>public static final String ADAPT = "adapt"</title>
         <para>
The action string <code>initiate</code>.
   </para>
      </section>
      <section xreflabel="AdaptPermission(String,String)" role="method" xml:id="org.osgi.framework.AdaptPermission.AdaptPermission-String-String-">
         <title>public  AdaptPermission(String filter, String actions)</title>
         <formalpara role="parameter">
            <title>filter</title>
            <para>A filter expression. Filter attribute names are processed
        in a case sensitive manner. A special value of <code>"*"</code> can be
        used to match all adaptations.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>actions</title>
            <para>
               <code>adapt</code>.</para>
         </formalpara>
         <para role="description">
Creates a new granted <code>AdaptPermission</code> object.

 This constructor must only be used to create a permission that is going
 to be checked.
 </para>
         <para>
 Examples:

 </para>
         <programlisting> (adaptClass=com.acme.*)
 (&amp;(signer=\*,o=ACME,c=US)(adaptClass=com.acme.*))
 (signer=\*,o=ACME,c=US)</programlisting>
         <para>
 When a signer key is used within the filter expression the signer value
 must escape the special filter chars ('*', '(', ')').
 </para>
         <para>
 The name is specified as a filter expression. The filter gives access to
 the following attributes:
 </para>
         <itemizedlist>
            <listitem>
               <para>signer - A Distinguished Name chain used to sign the exporting
 bundle. Wildcards in a DN are not matched according to the filter string
 rules, but according to the rules defined for a DN chain.</para>
            </listitem>
            <listitem>
               <para>location - The location of the exporting bundle.</para>
            </listitem>
            <listitem>
               <para>id - The bundle ID of the exporting bundle.</para>
            </listitem>
            <listitem>
               <para>name - The symbolic name of the exporting bundle.</para>
            </listitem>
            <listitem>
               <para>adaptClass - The name of the type to which an object can be adapted.</para>
            </listitem>
         </itemizedlist>
         <para>
 Filter attribute names are processed in a case sensitive manner.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the filter has an invalid syntax.</para>
         </formalpara>
      </section>
      <section xreflabel="AdaptPermission(String,Bundle,String)" role="method" xml:id="org.osgi.framework.AdaptPermission.AdaptPermission-String-Bundle-String-">
         <title>public  AdaptPermission(String adaptClass, Bundle adaptableBundle, String actions)</title>
         <formalpara role="parameter">
            <title>adaptClass</title>
            <para>The name of the type to which an object can be adapted.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>adaptableBundle</title>
            <para>The bundle associated with the object being
        adapted.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>actions</title>
            <para>
               <code>adapt</code>.</para>
         </formalpara>
         <para role="description">
Creates a new requested <code>AdaptPermission</code> object to be used by the
 code that must perform <code>checkPermission</code>. <code>AdaptPermission</code>
 objects created with this constructor cannot be added to an
 <code>AdaptPermission</code> permission collection.
   </para>
      </section>
      <section xreflabel="equals(Object)" role="method" xml:id="org.osgi.framework.AdaptPermission.equals-Object-">
         <title>public boolean equals(Object obj)</title>
         <formalpara role="parameter">
            <title>obj</title>
            <para>The object to test for equality with this
        <code>AdaptPermission</code> object.</para>
         </formalpara>
         <para role="description">
Determines the equality of two <code>AdaptPermission</code> objects.

 This method checks that specified permission has the same name and
 <code>AdaptPermission</code> actions as this <code>AdaptPermission</code> object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if <code>obj</code> is a <code>AdaptPermission</code>, and has
         the same name and actions as this <code>AdaptPermission</code> object;
         <code>false</code> otherwise.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getActions()" role="method" xml:id="org.osgi.framework.AdaptPermission.getActions--">
         <title>public String getActions()</title>
         <para role="description">
Returns the canonical string representation of the
 <code>AdaptPermission</code> actions.

 </para>
         <para>
 Always returns present <code>AdaptPermission</code> actions in the following
 order: <code>adapt</code>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Canonical string representation of the <code>AdaptPermission</code>
         actions.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="hashCode()" role="method" xml:id="org.osgi.framework.AdaptPermission.hashCode--">
         <title>public int hashCode()</title>
         <para role="description">
Returns the hash code value for this object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A hash code value for this object.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="implies(Permission)" role="method" xml:id="org.osgi.framework.AdaptPermission.implies-Permission-">
         <title>public boolean implies(Permission p)</title>
         <formalpara role="parameter">
            <title>p</title>
            <para>The requested permission.</para>
         </formalpara>
         <para role="description">
Determines if the specified permission is implied by this object.

 </para>
         <para>
 This method checks that the filter of the target is implied by the adapt
 class name of this object. The list of <code>AdaptPermission</code> actions
 must either match or allow for the list of the target object to imply the
 target <code>AdaptPermission</code> action.
 </para>
         <para/>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the specified permission is implied by this
         object; <code>false</code> otherwise.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="newPermissionCollection()" role="method" xml:id="org.osgi.framework.AdaptPermission.newPermissionCollection--">
         <title>public PermissionCollection newPermissionCollection()</title>
         <para role="description">
Returns a new <code>PermissionCollection</code> object suitable for storing
 <code>AdaptPermission</code> objects.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A new <code>PermissionCollection</code> object.</para>
         </formalpara>
         <para/>
      </section>
   </section>
   <section xreflabel="AdminPermission" role="class" xml:id="org.osgi.framework.AdminPermission">
      <title>public final class AdminPermission<?line-break?> extends BasicPermission</title>
      <para>
A bundle's authority to perform specific privileged administrative operations
 on or to get sensitive information about a bundle. The actions for this
 permission are:

 </para>
      <programlisting> Action             Methods
 class              Bundle.loadClass
 execute            Bundle.start
                    Bundle.stop
                    BundleStartLevel.setStartLevel
 extensionLifecycle BundleContext.installBundle for extension bundles
                    Bundle.update for extension bundles
                    Bundle.uninstall for extension bundles
 lifecycle          BundleContext.installBundle
                    Bundle.update
                    Bundle.uninstall
 listener           BundleContext.addBundleListener for
                      SynchronousBundleListener
                    BundleContext.removeBundleListener for
                      SynchronousBundleListener
 metadata           Bundle.getHeaders
                    Bundle.getLocation
 resolve            FrameworkWiring.refreshBundles
                    FrameworkWiring.resolveBundles
 resource           Bundle.getResource
                    Bundle.getResources
                    Bundle.getEntry
                    Bundle.getEntryPaths
                    Bundle.findEntries
                    Bundle resource/entry URL creation
 startlevel         FrameworkStartLevel.setStartLevel
                    FrameworkStartLevel.setInitialBundleStartLevel
 context            Bundle.getBundleContext
 weave              WovenClass.getBytes
                    WovenClass.setBytes
                    WovenClass.getDynamicImports for modification</programlisting>
      <para>
 The special action "*" will represent all actions. The
 <code>resolve</code> action is implied by the <code>class</code>, <code>execute</code> and
 <code>resource</code> actions.
 </para>
      <para>
 The name of this permission is a filter expression. The filter gives access
 to the following attributes:
 </para>
      <itemizedlist>
         <listitem>
            <para>signer - A Distinguished Name chain used to sign a bundle. Wildcards in a
 DN are not matched according to the filter string rules, but according to the
 rules defined for a DN chain.</para>
         </listitem>
         <listitem>
            <para>location - The location of a bundle.</para>
         </listitem>
         <listitem>
            <para>id - The bundle ID of the designated bundle.</para>
         </listitem>
         <listitem>
            <para>name - The symbolic name of a bundle.</para>
         </listitem>
      </itemizedlist>
      <para>
 Filter attribute names are processed in a case sensitive manner.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section xreflabel="CLASS" role="field" xml:id="org.osgi.framework.AdminPermission.CLASS">
         <title>public static final String CLASS = "class"</title>
         <para>
The action string <code>class</code>. The <code>class</code> action implies the
 <code>resolve</code> action.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="CONTEXT" role="field" xml:id="org.osgi.framework.AdminPermission.CONTEXT">
         <title>public static final String CONTEXT = "context"</title>
         <para>
The action string <code>context</code>.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.4</para>
         </formalpara>
      </section>
      <section xreflabel="EXECUTE" role="field" xml:id="org.osgi.framework.AdminPermission.EXECUTE">
         <title>public static final String EXECUTE = "execute"</title>
         <para>
The action string <code>execute</code>. The <code>execute</code> action implies the
 <code>resolve</code> action.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="EXTENSIONLIFECYCLE" role="field" xml:id="org.osgi.framework.AdminPermission.EXTENSIONLIFECYCLE">
         <title>public static final String EXTENSIONLIFECYCLE = "extensionLifecycle"</title>
         <para>
The action string <code>extensionLifecycle</code>.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="LIFECYCLE" role="field" xml:id="org.osgi.framework.AdminPermission.LIFECYCLE">
         <title>public static final String LIFECYCLE = "lifecycle"</title>
         <para>
The action string <code>lifecycle</code>.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="LISTENER" role="field" xml:id="org.osgi.framework.AdminPermission.LISTENER">
         <title>public static final String LISTENER = "listener"</title>
         <para>
The action string <code>listener</code>.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="METADATA" role="field" xml:id="org.osgi.framework.AdminPermission.METADATA">
         <title>public static final String METADATA = "metadata"</title>
         <para>
The action string <code>metadata</code>.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="RESOLVE" role="field" xml:id="org.osgi.framework.AdminPermission.RESOLVE">
         <title>public static final String RESOLVE = "resolve"</title>
         <para>
The action string <code>resolve</code>. The <code>resolve</code> action is implied
 by the <code>class</code>, <code>execute</code> and <code>resource</code> actions.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="RESOURCE" role="field" xml:id="org.osgi.framework.AdminPermission.RESOURCE">
         <title>public static final String RESOURCE = "resource"</title>
         <para>
The action string <code>resource</code>. The <code>resource</code> action implies
 the <code>resolve</code> action.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="STARTLEVEL" role="field" xml:id="org.osgi.framework.AdminPermission.STARTLEVEL">
         <title>public static final String STARTLEVEL = "startlevel"</title>
         <para>
The action string <code>startlevel</code>.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="WEAVE" role="field" xml:id="org.osgi.framework.AdminPermission.WEAVE">
         <title>public static final String WEAVE = "weave"</title>
         <para>
The action string <code>weave</code>.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.6</para>
         </formalpara>
      </section>
      <section xreflabel="AdminPermission()" role="method" xml:id="org.osgi.framework.AdminPermission.AdminPermission--">
         <title>public  AdminPermission()</title>
         <para role="description">
Creates a new <code>AdminPermission</code> object that matches all bundles and
 has all actions. Equivalent to AdminPermission("*","*");
   </para>
      </section>
      <section xreflabel="AdminPermission(String,String)" role="method" xml:id="org.osgi.framework.AdminPermission.AdminPermission-String-String-">
         <title>public  AdminPermission(String filter, String actions)</title>
         <formalpara role="parameter">
            <title>filter</title>
            <para>A filter expression that can use signer, location, id, and
        name keys. A value of "*" or <code>null</code> matches all
        bundle. Filter attribute names are processed in a case sensitive
        manner.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>actions</title>
            <para>
               <code>class</code>, <code>execute</code>, <code>extensionLifecycle</code>
        , <code>lifecycle</code>, <code>listener</code>, <code>metadata</code>,
        <code>resolve</code> , <code>resource</code>, <code>startlevel</code>,
        <code>context</code> or <code>weave</code>. A value of "*" or <code>null</code>
        indicates all actions.</para>
         </formalpara>
         <para role="description">
Create a new AdminPermission.

 This constructor must only be used to create a permission that is going
 to be checked.
 </para>
         <para>
 Examples:

 </para>
         <programlisting> (signer=\*,o=ACME,c=US)
 (&amp;(signer=\*,o=ACME,c=US)(name=com.acme.*)
   (location=http://www.acme.com/bundles/*))
 (id&gt;=1)</programlisting>
         <para>
 When a signer key is used within the filter expression the signer value
 must escape the special filter chars ('*', '(', ')').
 </para>
         <para>
 Null arguments are equivalent to "*".</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the filter has an invalid syntax.</para>
         </formalpara>
      </section>
      <section xreflabel="AdminPermission(Bundle,String)" role="method" xml:id="org.osgi.framework.AdminPermission.AdminPermission-Bundle-String-">
         <title>public  AdminPermission(Bundle bundle, String actions)</title>
         <formalpara role="parameter">
            <title>bundle</title>
            <para>A bundle.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>actions</title>
            <para>
               <code>class</code>, <code>execute</code>, <code>extensionLifecycle</code>
        , <code>lifecycle</code>, <code>listener</code>, <code>metadata</code>,
        <code>resolve</code> , <code>resource</code>, <code>startlevel</code>,
        <code>context</code>, <code>weave</code>. A value of "*" or <code>null</code>
        indicates all actions.</para>
         </formalpara>
         <para role="description">
Creates a new requested <code>AdminPermission</code> object to be used by the
 code that must perform <code>checkPermission</code>. <code>AdminPermission</code>
 objects created with this constructor cannot be added to an
 <code>AdminPermission</code> permission collection.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="equals(Object)" role="method" xml:id="org.osgi.framework.AdminPermission.equals-Object-">
         <title>public boolean equals(Object obj)</title>
         <formalpara role="parameter">
            <title>obj</title>
            <para>The object being compared for equality with this object.</para>
         </formalpara>
         <para role="description">
Determines the equality of two <code>AdminPermission</code> objects.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if <code>obj</code> is equivalent to this
         <code>AdminPermission</code>; <code>false</code> otherwise.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getActions()" role="method" xml:id="org.osgi.framework.AdminPermission.getActions--">
         <title>public String getActions()</title>
         <para role="description">
Returns the canonical string representation of the
 <code>AdminPermission</code> actions.

 </para>
         <para>
 Always returns present <code>AdminPermission</code> actions in the following
 order: <code>class</code>, <code>execute</code>, <code>extensionLifecycle</code>,
 <code>lifecycle</code>, <code>listener</code>, <code>metadata</code>, <code>resolve</code>,
 <code>resource</code>, <code>startlevel</code>, <code>context</code>, <code>weave</code>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Canonical string representation of the <code>AdminPermission</code>
         actions.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="hashCode()" role="method" xml:id="org.osgi.framework.AdminPermission.hashCode--">
         <title>public int hashCode()</title>
         <para role="description">
Returns the hash code value for this object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Hash code value for this object.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="implies(Permission)" role="method" xml:id="org.osgi.framework.AdminPermission.implies-Permission-">
         <title>public boolean implies(Permission p)</title>
         <formalpara role="parameter">
            <title>p</title>
            <para>The requested permission.</para>
         </formalpara>
         <para role="description">
Determines if the specified permission is implied by this object. This
 method throws an exception if the specified permission was not
 constructed with a bundle.

 </para>
         <para>
 This method returns <code>true</code> if the specified permission is an
 AdminPermission AND
 </para>
         <itemizedlist>
            <listitem>
               <para>this object's filter matches the specified permission's bundle ID,
 bundle symbolic name, bundle location and bundle signer distinguished
 name chain OR</para>
            </listitem>
            <listitem>
               <para>this object's filter is "*"</para>
            </listitem>
         </itemizedlist>
         <para>
 AND this object's actions include all of the specified permission's
 actions.
 </para>
         <para>
 Special case: if the specified permission was constructed with "*"
 filter, then this method returns <code>true</code> if this object's filter is
 "*" and this object's actions include all of the specified permission's
 actions</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the specified permission is implied by this
         object; <code>false</code> otherwise.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="newPermissionCollection()" role="method" xml:id="org.osgi.framework.AdminPermission.newPermissionCollection--">
         <title>public PermissionCollection newPermissionCollection()</title>
         <para role="description">
Returns a new <code>PermissionCollection</code> object suitable for storing
 <code>AdminPermission</code>s.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A new <code>PermissionCollection</code> object.</para>
         </formalpara>
         <para/>
      </section>
   </section>
   <section xreflabel="AllServiceListener" role="class" xml:id="org.osgi.framework.AllServiceListener">
      <title>public interface AllServiceListener<?line-break?> extends ServiceListener</title>
      <para>
A <code>ServiceEvent</code> listener that does not filter based upon package
 wiring. <code>AllServiceListener</code> is a listener interface that may be
 implemented by a bundle developer. When a <code>ServiceEvent</code> is fired, it
 is synchronously delivered to an <code>AllServiceListener</code>. The Framework
 may deliver <code>ServiceEvent</code> objects to an <code>AllServiceListener</code> out
 of order and may concurrently call and/or reenter an
 <code>AllServiceListener</code>.
 </para>
      <para>
 An <code>AllServiceListener</code> object is registered with the Framework using
 the <code>BundleContext.addServiceListener</code> method.
 <code>AllServiceListener</code> objects are called with a <code>ServiceEvent</code>
 object when a service is registered, modified, or is in the process of
 unregistering.

 </para>
      <para>
         <code>ServiceEvent</code> object delivery to <code>AllServiceListener</code> objects is
 filtered by the filter specified when the listener was registered. If the
 Java Runtime Environment supports permissions, then additional filtering is
 done. <code>ServiceEvent</code> objects are only delivered to the listener if the
 bundle which defines the listener object's class has the appropriate
 <code>ServicePermission</code> to get the service using at least one of the named
 classes under which the service was registered.

 </para>
      <para>
 Unlike normal <code>ServiceListener</code> objects, <code>AllServiceListener</code>
 objects receive all <code>ServiceEvent</code> objects regardless of whether the
 package source of the listening bundle is equal to the package source of the
 bundle that registered the service. This means that the listener may not be
 able to cast the service object to any of its corresponding service
 interfaces if the service object is retrieved.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.framework.ServiceEvent">ServiceEvent</link>, <link linkend="org.osgi.framework.ServicePermission">ServicePermission</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.3</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
   </section>
   <section xreflabel="Bundle" role="class" xml:id="org.osgi.framework.Bundle">
      <title>public interface Bundle<?line-break?> extends Comparable&lt;Bundle&gt;</title>
      <para>
An installed bundle in the Framework.

 </para>
      <para>
 A <code>Bundle</code> object is the access point to define the lifecycle of an
 installed bundle. Each bundle installed in the OSGi environment must have an
 associated <code>Bundle</code> object.

 </para>
      <para>
 A bundle must have a unique identity, a <code>long</code>, chosen by the
 Framework. This identity must not change during the lifecycle of a bundle,
 even when the bundle is updated. Uninstalling and then reinstalling the
 bundle must create a new unique identity.

 </para>
      <para>
 A bundle can be in one of six states:
 </para>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.Bundle.UNINSTALLED">UNINSTALLED</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.Bundle.INSTALLED">INSTALLED</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.Bundle.RESOLVED">RESOLVED</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.Bundle.STARTING">STARTING</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.Bundle.STOPPING">STOPPING</link>
            </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.Bundle.ACTIVE">ACTIVE</link>
            </para>
         </listitem>
      </itemizedlist>
      <para>
 Values assigned to these states have no specified ordering; they represent
 bit values that may be ORed together to determine if a bundle is in one of
 the valid states.

 </para>
      <para>
 A bundle should only have active threads of execution when its state is one
 of <code>STARTING</code>,<code>ACTIVE</code>, or <code>STOPPING</code>. An
 <code>UNINSTALLED</code> bundle can not be set to another state; it is a zombie
 and can only be reached because references are kept somewhere.

 </para>
      <para>
 The Framework is the only entity that is allowed to create <code>Bundle</code>
 objects, and these objects are only valid within the Framework that created
 them.

 </para>
      <para>
 Bundles have a natural ordering such that if two <code>Bundle</code>s have the
 same <link linkend="org.osgi.framework.Bundle.getBundleId--">bundle id</link> they are equal. A <code>Bundle</code> is
 less than another <code>Bundle</code> if it has a lower <link linkend="org.osgi.framework.Bundle.getBundleId--">bundle id</link> and is greater if it has a higher bundle id.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section xreflabel="ACTIVE" role="field" xml:id="org.osgi.framework.Bundle.ACTIVE">
         <title>public static final int ACTIVE = 32</title>
         <para>
The bundle is now running.

 </para>
         <para>
 A bundle is in the <code>ACTIVE</code> state when it has been successfully
 started and activated.
 </para>
         <para>
 The value of <code>ACTIVE</code> is 0x00000020.</para>
      </section>
      <section xreflabel="INSTALLED" role="field" xml:id="org.osgi.framework.Bundle.INSTALLED">
         <title>public static final int INSTALLED = 2</title>
         <para>
The bundle is installed but not yet resolved.

 </para>
         <para>
 A bundle is in the <code>INSTALLED</code> state when it has been installed in
 the Framework but is not or cannot be resolved.
 </para>
         <para>
 This state is visible if the bundle's code dependencies are not resolved.
 The Framework may attempt to resolve an <code>INSTALLED</code> bundle's code
 dependencies and move the bundle to the <code>RESOLVED</code> state.
 </para>
         <para>
 The value of <code>INSTALLED</code> is 0x00000002.</para>
      </section>
      <section xreflabel="RESOLVED" role="field" xml:id="org.osgi.framework.Bundle.RESOLVED">
         <title>public static final int RESOLVED = 4</title>
         <para>
The bundle is resolved and is able to be started.

 </para>
         <para>
 A bundle is in the <code>RESOLVED</code> state when the Framework has
 successfully resolved the bundle's code dependencies. These dependencies
 include:
 </para>
         <itemizedlist>
            <listitem>
               <para>The bundle's class path from its <link linkend="org.osgi.framework.Constants.BUNDLE_CLASSPATH">Constants.BUNDLE_CLASSPATH</link>
 Manifest header.</para>
            </listitem>
            <listitem>
               <para>The bundle's package dependencies from its
 <link linkend="org.osgi.framework.Constants.EXPORT_PACKAGE">Constants.EXPORT_PACKAGE</link> and <link linkend="org.osgi.framework.Constants.IMPORT_PACKAGE">Constants.IMPORT_PACKAGE</link>
 Manifest headers.</para>
            </listitem>
            <listitem>
               <para>The bundle's required bundle dependencies from its
 <link linkend="org.osgi.framework.Constants.REQUIRE_BUNDLE">Constants.REQUIRE_BUNDLE</link> Manifest header.</para>
            </listitem>
            <listitem>
               <para>A fragment bundle's host dependency from its
 <link linkend="org.osgi.framework.Constants.FRAGMENT_HOST">Constants.FRAGMENT_HOST</link> Manifest header.</para>
            </listitem>
         </itemizedlist>
         <para>
 Note that the bundle is not active yet. A bundle must be put in the
 <code>RESOLVED</code> state before it can be started. The Framework may
 attempt to resolve a bundle at any time.
 </para>
         <para>
 The value of <code>RESOLVED</code> is 0x00000004.</para>
      </section>
      <section xreflabel="SIGNERS_ALL" role="field" xml:id="org.osgi.framework.Bundle.SIGNERS_ALL">
         <title>public static final int SIGNERS_ALL = 1</title>
         <para>
Request that all certificates used to sign the bundle be returned.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Bundle.getSignerCertificates-int-">getSignerCertificates(int)</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="SIGNERS_TRUSTED" role="field" xml:id="org.osgi.framework.Bundle.SIGNERS_TRUSTED">
         <title>public static final int SIGNERS_TRUSTED = 2</title>
         <para>
Request that only certificates used to sign the bundle that are trusted
 by the framework be returned.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Bundle.getSignerCertificates-int-">getSignerCertificates(int)</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="START_ACTIVATION_POLICY" role="field" xml:id="org.osgi.framework.Bundle.START_ACTIVATION_POLICY">
         <title>public static final int START_ACTIVATION_POLICY = 2</title>
         <para>
The bundle start operation must activate the bundle according to the
 bundle's declared <link linkend="org.osgi.framework.Constants.BUNDLE_ACTIVATIONPOLICY">activation
 policy</link>.

 </para>
         <para>
 This bit may be set when calling <link linkend="org.osgi.framework.Bundle.start-int-">start(int)</link> to notify the
 framework that the bundle must be activated using the bundle's declared
 activation policy.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.BUNDLE_ACTIVATIONPOLICY">Constants.BUNDLE_ACTIVATIONPOLICY</link>, <link linkend="org.osgi.framework.Bundle.start-int-">start(int)</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.4</para>
         </formalpara>
      </section>
      <section xreflabel="START_TRANSIENT" role="field" xml:id="org.osgi.framework.Bundle.START_TRANSIENT">
         <title>public static final int START_TRANSIENT = 1</title>
         <para>
The bundle start operation is transient and the persistent autostart
 setting of the bundle is not modified.

 </para>
         <para>
 This bit may be set when calling <link linkend="org.osgi.framework.Bundle.start-int-">start(int)</link> to notify the
 framework that the autostart setting of the bundle must not be modified.
 If this bit is not set, then the autostart setting of the bundle is
 modified.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Bundle.start-int-">start(int)</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.4</para>
         </formalpara>
      </section>
      <section xreflabel="STARTING" role="field" xml:id="org.osgi.framework.Bundle.STARTING">
         <title>public static final int STARTING = 8</title>
         <para>
The bundle is in the process of starting.

 </para>
         <para>
 A bundle is in the <code>STARTING</code> state when its <link linkend="org.osgi.framework.Bundle.start-int-">start</link> method is active. A bundle must be in this state when the bundle's
 <link linkend="org.osgi.framework.BundleActivator.start-BundleContext-">BundleActivator.start(BundleContext)</link> is called. If the
 <code>BundleActivator.start</code> method completes without exception, then
 the bundle has successfully started and must move to the <code>ACTIVE</code>
 state.
 </para>
         <para>
 If the bundle has a <link linkend="org.osgi.framework.Constants.ACTIVATION_LAZY">lazy activation
 policy</link>, then the bundle may remain in this state for some time until the
 activation is triggered.
 </para>
         <para>
 The value of <code>STARTING</code> is 0x00000008.</para>
      </section>
      <section xreflabel="STOP_TRANSIENT" role="field" xml:id="org.osgi.framework.Bundle.STOP_TRANSIENT">
         <title>public static final int STOP_TRANSIENT = 1</title>
         <para>
The bundle stop is transient and the persistent autostart setting of the
 bundle is not modified.

 </para>
         <para>
 This bit may be set when calling <link linkend="org.osgi.framework.Bundle.stop-int-">stop(int)</link> to notify the
 framework that the autostart setting of the bundle must not be modified.
 If this bit is not set, then the autostart setting of the bundle is
 modified.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Bundle.stop-int-">stop(int)</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.4</para>
         </formalpara>
      </section>
      <section xreflabel="STOPPING" role="field" xml:id="org.osgi.framework.Bundle.STOPPING">
         <title>public static final int STOPPING = 16</title>
         <para>
The bundle is in the process of stopping.

 </para>
         <para>
 A bundle is in the <code>STOPPING</code> state when its <link linkend="org.osgi.framework.Bundle.stop-int-">stop</link> method is active. A bundle must be in this state when the bundle's
 <link linkend="org.osgi.framework.BundleActivator.stop-BundleContext-">BundleActivator.stop(BundleContext)</link> method is called. When the
 <code>BundleActivator.stop</code> method completes the bundle is stopped and
 must move to the <code>RESOLVED</code> state.
 </para>
         <para>
 The value of <code>STOPPING</code> is 0x00000010.</para>
      </section>
      <section xreflabel="UNINSTALLED" role="field" xml:id="org.osgi.framework.Bundle.UNINSTALLED">
         <title>public static final int UNINSTALLED = 1</title>
         <para>
The bundle is uninstalled and may not be used.

 </para>
         <para>
 The <code>UNINSTALLED</code> state is only visible after a bundle is
 uninstalled; the bundle is in an unusable state but references to the
 <code>Bundle</code> object may still be available and used for introspection.
 </para>
         <para>
 The value of <code>UNINSTALLED</code> is 0x00000001.</para>
      </section>
      <section xreflabel="adapt(Class)" role="method" xml:id="org.osgi.framework.Bundle.adapt-Class-">
         <title>public A adapt(Class&lt;A&gt; type)</title>
         <formalpara role="parameter">
            <title>Type Parameters</title>
            <para>
               <code>&lt;A&gt;</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>&lt;A&gt;</title>
            <para>The type to which this bundle is to be adapted.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>type</title>
            <para>Class object for the type to which this bundle is to be
        adapted.</para>
         </formalpara>
         <para role="description">
Adapt this bundle to the specified type.

 </para>
         <para>
 Adapting this bundle to the specified type may require certain checks,
 including security checks, to succeed. If a check does not succeed, then
 this bundle cannot be adapted and <code>null</code> is returned.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The object, of the specified type, to which this bundle has been
         adapted or <code>null</code> if this bundle cannot be adapted to the
         specified type.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have the appropriate
         <code>AdaptPermission[type,this,ADAPT]</code>, and the Java Runtime
         Environment supports permissions.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.6</para>
         </formalpara>
      </section>
      <section xreflabel="findEntries(String,String,boolean)" role="method" xml:id="org.osgi.framework.Bundle.findEntries-String-String-boolean-">
         <title>public Enumeration&lt;URL&gt; findEntries(String path, String filePattern, boolean recurse)</title>
         <formalpara role="parameter">
            <title>path</title>
            <para>The path name in which to look. The path is always relative
        to the root of this bundle and may begin with "/". A
        path value of "/" indicates the root of this bundle.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>filePattern</title>
            <para>The file name pattern for selecting entries in the
        specified path. The pattern is only matched against the last
        element of the entry path. If the entry is a directory then the
        trailing "/" is not used for pattern matching. Substring
        matching is supported, as specified in the Filter specification,
        using the wildcard character ("*"). If null is
        specified, this is equivalent to "*" and matches all
        files.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>recurse</title>
            <para>If <code>true</code>, recurse into subdirectories. Otherwise
        only return entries from the specified path.</para>
         </formalpara>
         <para role="description">
Returns entries in this bundle and its attached fragments. This bundle's
 class loader is not used to search for entries. Only the contents of this
 bundle and its attached fragments are searched for the specified entries.

 If this bundle's state is <code>INSTALLED</code>, this method must attempt to
 resolve this bundle before attempting to find entries.

 </para>
         <para>
 This method is intended to be used to obtain configuration, setup,
 localization and other information from this bundle. This method takes
 into account that the "contents" of this bundle can be extended
 with fragments. This "bundle space" is not a namespace with
 unique members; the same entry name can be present multiple times. This
 method therefore returns an enumeration of URL objects. These URLs can
 come from different JARs but have the same path name. This method can
 either return only entries in the specified path or recurse into
 subdirectories returning entries in the directory tree beginning at the
 specified path. Fragments can be attached after this bundle is resolved,
 possibly changing the set of URLs returned by this method. If this bundle
 is not resolved, only the entries in the JAR file of this bundle are
 returned.
 </para>
         <para>
 Examples:

 </para>
         <programlisting> // List all XML files in the OSGI-INF directory and below
 Enumeration e = b.findEntries("OSGI-INF", "*.xml", true);

 // Find a specific localization file
 Enumeration e = b.findEntries("OSGI-INF/l10n",
     "bundle_nl_DU.properties", false);
 if (e.hasMoreElements())
     return (URL) e.nextElement();</programlisting>
         <para>
 URLs for directory entries must have their path end with "/".
 </para>
         <para>
 Note: Jar and zip files are not required to include directory entries.
 URLs to directory entries will not be returned if the bundle contents do
 not contain directory entries.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An enumeration of URL objects for each matching entry, or
         <code>null</code> if no matching entry could be found or if the caller
         does not have the appropriate
         <code>AdminPermission[this,RESOURCE]</code>, and the Java Runtime
         Environment supports permissions. The URLs are sorted such that
         entries from this bundle are returned first followed by the
         entries from attached fragments in attachment order. If this
         bundle is a fragment, then only matching entries in this fragment
         are returned.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this bundle has been uninstalled.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="getBundleContext()" role="method" xml:id="org.osgi.framework.Bundle.getBundleContext--">
         <title>public BundleContext getBundleContext()</title>
         <para role="description">
Returns this bundle's <link linkend="org.osgi.framework.BundleContext">BundleContext</link>. The returned
 <code>BundleContext</code> can be used by the caller to act on behalf of this
 bundle.

 </para>
         <para>
 If this bundle is not in the <link linkend="org.osgi.framework.Bundle.STARTING">STARTING</link>, <link linkend="org.osgi.framework.Bundle.ACTIVE">ACTIVE</link>, or
 <link linkend="org.osgi.framework.Bundle.STOPPING">STOPPING</link> states or this bundle is a fragment bundle, then this
 bundle has no valid <code>BundleContext</code>. This method will return
 <code>null</code> if this bundle has no valid <code>BundleContext</code>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A <code>BundleContext</code> for this bundle or <code>null</code> if this
         bundle has no valid <code>BundleContext</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have the appropriate
         <code>AdminPermission[this,CONTEXT]</code>, and the Java Runtime
         Environment supports permissions.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.4</para>
         </formalpara>
      </section>
      <section xreflabel="getBundleId()" role="method" xml:id="org.osgi.framework.Bundle.getBundleId--">
         <title>public long getBundleId()</title>
         <para role="description">
Returns this bundle's unique identifier. This bundle is assigned a unique
 identifier by the Framework when it was installed in the OSGi
 environment.

 </para>
         <para>
 A bundle's unique identifier has the following attributes:
 </para>
         <itemizedlist>
            <listitem>
               <para>Is unique and persistent.</para>
            </listitem>
            <listitem>
               <para>Is a <code>long</code>.</para>
            </listitem>
            <listitem>
               <para>Its value is not reused for another bundle, even after a bundle is
 uninstalled.</para>
            </listitem>
            <listitem>
               <para>Does not change while a bundle remains installed.</para>
            </listitem>
            <listitem>
               <para>Does not change when a bundle is updated.</para>
            </listitem>
         </itemizedlist>
         <para>
 This method must continue to return this bundle's unique identifier while
 this bundle is in the <code>UNINSTALLED</code> state.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The unique identifier of this bundle.</para>
         </formalpara>
      </section>
      <section xreflabel="getDataFile(String)" role="method" xml:id="org.osgi.framework.Bundle.getDataFile-String-">
         <title>public File getDataFile(String filename)</title>
         <formalpara role="parameter">
            <title>filename</title>
            <para>A relative name to the file to be accessed.</para>
         </formalpara>
         <para role="description">
Creates a <code>File</code> object for a file in the persistent storage area
 provided for this bundle by the Framework. This method will return
 <code>null</code> if the platform does not have file system support or this
 bundle is a fragment bundle.

 </para>
         <para>
 A <code>File</code> object for the base directory of the persistent storage
 area provided for this bundle by the Framework can be obtained by calling
 this method with an empty string as <code>filename</code>.

 </para>
         <para>
 If the Java Runtime Environment supports permissions, the Framework will
 ensure that this bundle has the <code>java.io.FilePermission</code> with
 actions <code>read</code>,<code>write</code>,<code>delete</code> for all files
 (recursively) in the persistent storage area provided for this bundle.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A <code>File</code> object that represents the requested file or
         <code>null</code> if the platform does not have file system support or
         this bundle is a fragment bundle.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this bundle has been uninstalled.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.6</para>
         </formalpara>
      </section>
      <section xreflabel="getEntry(String)" role="method" xml:id="org.osgi.framework.Bundle.getEntry-String-">
         <title>public URL getEntry(String path)</title>
         <formalpara role="parameter">
            <title>path</title>
            <para>The path name of the entry.</para>
         </formalpara>
         <para role="description">
Returns a URL to the entry at the specified path in this bundle. This
 bundle's class loader is not used to search for the entry. Only the
 contents of this bundle are searched for the entry.
 </para>
         <para>
 The specified path is always relative to the root of this bundle and may
 begin with "/". A path value of "/" indicates the
 root of this bundle.
 </para>
         <para>
 Note: Jar and zip files are not required to include directory entries.
 URLs to directory entries will not be returned if the bundle contents do
 not contain directory entries.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A URL to the entry, or <code>null</code> if no entry could be found or
         if the caller does not have the appropriate
         <code>AdminPermission[this,RESOURCE]</code> and the Java Runtime
         Environment supports permissions.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this bundle has been uninstalled.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="getEntryPaths(String)" role="method" xml:id="org.osgi.framework.Bundle.getEntryPaths-String-">
         <title>public Enumeration&lt;String&gt; getEntryPaths(String path)</title>
         <formalpara role="parameter">
            <title>path</title>
            <para>The path name for which to return entry paths.</para>
         </formalpara>
         <para role="description">
Returns an Enumeration of all the paths (<code>String</code> objects) to
 entries within this bundle whose longest sub-path matches the specified
 path. This bundle's class loader is not used to search for entries. Only
 the contents of this bundle are searched.
 </para>
         <para>
 The specified path is always relative to the root of this bundle and may
 begin with a "/". A path value of "/" indicates the
 root of this bundle.
 </para>
         <para>
 Returned paths indicating subdirectory paths end with a "/".
 The returned paths are all relative to the root of this bundle and must
 not begin with "/".
 </para>
         <para>
 Note: Jar and zip files are not required to include directory entries.
 Paths to directory entries will not be returned if the bundle contents do
 not contain directory entries.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An Enumeration of the entry paths (<code>String</code> objects) or
         <code>null</code> if no entry could be found or if the caller does not
         have the appropriate <code>AdminPermission[this,RESOURCE]</code> and
         the Java Runtime Environment supports permissions.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this bundle has been uninstalled.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="getHeaders()" role="method" xml:id="org.osgi.framework.Bundle.getHeaders--">
         <title>public Dictionary&lt;String, String&gt; getHeaders()</title>
         <para role="description">
Returns this bundle's Manifest headers and values. This method returns
 all the Manifest headers and values from the main section of this
 bundle's Manifest file; that is, all lines prior to the first blank line.

 </para>
         <para>
 Manifest header names are case-insensitive. The methods of the returned
 <code>Dictionary</code> object must operate on header names in a
 case-insensitive manner.

 If a Manifest header value starts with "%", it must be
 localized according to the default locale. If no localization is found
 for a header value, the header value without the leading "%" is
 returned.

 </para>
         <para>
 For example, the following Manifest headers and values are included if
 they are present in the Manifest file:

 </para>
         <programlisting>     Bundle-Name
     Bundle-Vendor
     Bundle-Version
     Bundle-Description
     Bundle-DocURL
     Bundle-ContactAddress</programlisting>
         <para>
 This method must continue to return Manifest header information while
 this bundle is in the <code>UNINSTALLED</code> state.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An unmodifiable <code>Dictionary</code> object containing this
         bundle's Manifest headers and values.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have the appropriate
         <code>AdminPermission[this,METADATA]</code>, and the Java Runtime
         Environment supports permissions.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.BUNDLE_LOCALIZATION">Constants.BUNDLE_LOCALIZATION</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="getHeaders(String)" role="method" xml:id="org.osgi.framework.Bundle.getHeaders-String-">
         <title>public Dictionary&lt;String, String&gt; getHeaders(String locale)</title>
         <formalpara role="parameter">
            <title>locale</title>
            <para>The locale name into which the header values are to be
        localized. If the specified locale is <code>null</code> then the locale
        returned by <code>java.util.Locale.getDefault</code> is used. If the
        specified locale is the empty string, this method will return the
        raw (unlocalized) manifest headers including any leading
        "%".</para>
         </formalpara>
         <para role="description">
Returns this bundle's Manifest headers and values localized to the
 specified locale.

 </para>
         <para>
 This method performs the same function as <code>Bundle.getHeaders()</code>
 except the manifest header values are localized to the specified locale.

 </para>
         <para>
 If a Manifest header value starts with "%", it must be
 localized according to the specified locale. If a locale is specified and
 cannot be found, then the header values must be returned using the
 default locale. Localizations are searched for in the following order:

 </para>
         <programlisting>   bn + "_" + Ls + "_" + Cs + "_" + Vs
   bn + "_" + Ls + "_" + Cs
   bn + "_" + Ls
   bn + "_" + Ld + "_" + Cd + "_" + Vd
   bn + "_" + Ld + "_" + Cd
   bn + "_" + Ld
   bn</programlisting>
         <para>

 Where <code>bn</code> is this bundle's localization basename, <code>Ls</code>,
 <code>Cs</code> and <code>Vs</code> are the specified locale (language, country,
 variant) and <code>Ld</code>, <code>Cd</code> and <code>Vd</code> are the default locale
 (language, country, variant).

 If <code>null</code> is specified as the locale string, the header values must
 be localized using the default locale. If the empty string ("")
 is specified as the locale string, the header values must not be
 localized and the raw (unlocalized) header values, including any leading
 "%", must be returned. If no localization is found for a header
 value, the header value without the leading "%" is returned.

 </para>
         <para>
 This method must continue to return Manifest header information while
 this bundle is in the <code>UNINSTALLED</code> state, however the header
 values must only be available in the raw and default locale values.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An unmodifiable <code>Dictionary</code> object containing this
         bundle's Manifest headers and values.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have the appropriate
         <code>AdminPermission[this,METADATA]</code>, and the Java Runtime
         Environment supports permissions.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Bundle.getHeaders--">getHeaders()</link>, <link linkend="org.osgi.framework.Constants.BUNDLE_LOCALIZATION">Constants.BUNDLE_LOCALIZATION</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="getLastModified()" role="method" xml:id="org.osgi.framework.Bundle.getLastModified--">
         <title>public long getLastModified()</title>
         <para role="description">
Returns the time when this bundle was last modified. A bundle is
 considered to be modified when it is installed, updated or uninstalled.

 </para>
         <para>
 The time value is the number of milliseconds since January 1, 1970,
 00:00:00 UTC.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The time when this bundle was last modified.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="getLocation()" role="method" xml:id="org.osgi.framework.Bundle.getLocation--">
         <title>public String getLocation()</title>
         <para role="description">
Returns this bundle's location identifier.

 </para>
         <para>
 The location identifier is the location passed to
 <code>BundleContext.installBundle</code> when a bundle is installed. The
 location identifier does not change while this bundle remains installed,
 even if this bundle is updated.

 </para>
         <para>
 This method must continue to return this bundle's location identifier
 while this bundle is in the <code>UNINSTALLED</code> state.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The string representation of this bundle's location identifier.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have the appropriate
         <code>AdminPermission[this,METADATA]</code>, and the Java Runtime
         Environment supports permissions.</para>
         </formalpara>
      </section>
      <section xreflabel="getRegisteredServices()" role="method" xml:id="org.osgi.framework.Bundle.getRegisteredServices--">
         <title>public ServiceReference&lt;?&gt;[] getRegisteredServices()</title>
         <para role="description">
Returns this bundle's <code>ServiceReference</code> list for all services it
 has registered or <code>null</code> if this bundle has no registered services.

 </para>
         <para>
 If the Java runtime supports permissions, a <code>ServiceReference</code>
 object to a service is included in the returned list only if the caller
 has the <code>ServicePermission</code> to get the service using at least one
 of the named classes the service was registered under.

 </para>
         <para>
 The list is valid at the time of the call to this method, however, as the
 Framework is a very dynamic environment, services can be modified or
 unregistered at anytime.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An array of <code>ServiceReference</code> objects or <code>null</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this bundle has been uninstalled.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.ServiceRegistration">ServiceRegistration</link>, <link linkend="org.osgi.framework.ServiceReference">ServiceReference</link>, <link linkend="org.osgi.framework.ServicePermission">ServicePermission</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="getResource(String)" role="method" xml:id="org.osgi.framework.Bundle.getResource-String-">
         <title>public URL getResource(String name)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The name of the resource. See <code>ClassLoader.getResource</code>
        for a description of the format of a resource name.</para>
         </formalpara>
         <para role="description">
Find the specified resource from this bundle's class loader.

 This bundle's class loader is called to search for the specified
 resource. If this bundle's state is <code>INSTALLED</code>, this method must
 attempt to resolve this bundle before attempting to get the specified
 resource. If this bundle cannot be resolved, then only this bundle must
 be searched for the specified resource. Imported packages cannot be
 searched when this bundle has not been resolved. If this bundle is a
 fragment bundle then <code>null</code> is returned.
 </para>
         <para>
 Note: Jar and zip files are not required to include directory entries.
 URLs to directory entries will not be returned if the bundle contents do
 not contain directory entries.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A URL to the named resource, or <code>null</code> if the resource
         could not be found or if this bundle is a fragment bundle or if
         the caller does not have the appropriate
         <code>AdminPermission[this,RESOURCE]</code>, and the Java Runtime
         Environment supports permissions.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this bundle has been uninstalled.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Bundle.getEntry-String-">getEntry(String)</link>, <link linkend="org.osgi.framework.Bundle.findEntries-String-String-boolean-">findEntries(String, String, boolean)</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section xreflabel="getResources(String)" role="method" xml:id="org.osgi.framework.Bundle.getResources-String-">
         <title>public Enumeration&lt;URL&gt; getResources(String name) throws IOException</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The name of the resource. See
        <code>ClassLoader.getResources</code> for a description of the format
        of a resource name.</para>
         </formalpara>
         <para role="description">
Find the specified resources from this bundle's class loader.

 This bundle's class loader is called to search for the specified
 resources. If this bundle's state is <code>INSTALLED</code>, this method must
 attempt to resolve this bundle before attempting to get the specified
 resources. If this bundle cannot be resolved, then only this bundle must
 be searched for the specified resources. Imported packages cannot be
 searched when a bundle has not been resolved. If this bundle is a
 fragment bundle then <code>null</code> is returned.
 </para>
         <para>
 Note: Jar and zip files are not required to include directory entries.
 URLs to directory entries will not be returned if the bundle contents do
 not contain directory entries.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An enumeration of URLs to the named resources, or <code>null</code> if
         the resource could not be found or if this bundle is a fragment
         bundle or if the caller does not have the appropriate
         <code>AdminPermission[this,RESOURCE]</code>, and the Java Runtime
         Environment supports permissions.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this bundle has been uninstalled.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– If there is an I/O error.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="getServicesInUse()" role="method" xml:id="org.osgi.framework.Bundle.getServicesInUse--">
         <title>public ServiceReference&lt;?&gt;[] getServicesInUse()</title>
         <para role="description">
Returns this bundle's <code>ServiceReference</code> list for all services it
 is using or returns <code>null</code> if this bundle is not using any
 services. A bundle is considered to be using a service if it has any
 unreleased service objects.

 </para>
         <para>
 If the Java Runtime Environment supports permissions, a
 <code>ServiceReference</code> object to a service is included in the returned
 list only if the caller has the <code>ServicePermission</code> to get the
 service using at least one of the named classes the service was
 registered under.
 </para>
         <para>
 The list is valid at the time of the call to this method, however, as the
 Framework is a very dynamic environment, services can be modified or
 unregistered at anytime.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An array of <code>ServiceReference</code> objects or <code>null</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this bundle has been uninstalled.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.ServiceReference">ServiceReference</link>, <link linkend="org.osgi.framework.ServicePermission">ServicePermission</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="getSignerCertificates(int)" role="method" xml:id="org.osgi.framework.Bundle.getSignerCertificates-int-">
         <title>public Map&lt;X509Certificate, List&lt;X509Certificate&gt;&gt; getSignerCertificates(int signersType)</title>
         <formalpara role="parameter">
            <title>signersType</title>
            <para>If <link linkend="org.osgi.framework.Bundle.SIGNERS_ALL">SIGNERS_ALL</link> is specified, then information
        on all signers of this bundle is returned. If
        <link linkend="org.osgi.framework.Bundle.SIGNERS_TRUSTED">SIGNERS_TRUSTED</link> is specified, then only information on
        the signers of this bundle trusted by the framework is returned.</para>
         </formalpara>
         <para role="description">
Return the certificates for the signers of this bundle and the
 certificate chains for those signers.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The <code>X509Certificate</code>s for the signers of this bundle and
         the <code>X509Certificate</code> chains for those signers. The keys of
         the <code>Map</code> are the <code>X509Certificate</code>s of the signers
         of this bundle. The value for a key is a <code>List</code> containing
         the <code>X509Certificate</code> chain for the signer. The first item
         in the <code>List</code> is the signer's <code>X509Certificate</code> which
         is then followed by the rest of the <code>X509Certificate</code>
         chain. The returned <code>Map</code> will be empty if there are no
         signers. The returned <code>Map</code> is the property of the caller
         who is free to modify it.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the specified <code>signersType</code> is
         not <link linkend="org.osgi.framework.Bundle.SIGNERS_ALL">SIGNERS_ALL</link> or <link linkend="org.osgi.framework.Bundle.SIGNERS_TRUSTED">SIGNERS_TRUSTED</link>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="getState()" role="method" xml:id="org.osgi.framework.Bundle.getState--">
         <title>public int getState()</title>
         <para role="description">
Returns this bundle's current state.

 </para>
         <para>
 A bundle can be in only one state at any time.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An element of <code>UNINSTALLED</code>,<code>INSTALLED</code>,
         <code>RESOLVED</code>, <code>STARTING</code>, <code>STOPPING</code>,
         <code>ACTIVE</code>.</para>
         </formalpara>
      </section>
      <section xreflabel="getSymbolicName()" role="method" xml:id="org.osgi.framework.Bundle.getSymbolicName--">
         <title>public String getSymbolicName()</title>
         <para role="description">
Returns the symbolic name of this bundle as specified by its
 <code>Bundle-SymbolicName</code> manifest header. The bundle symbolic name
 should be based on the reverse domain name naming convention like that
 used for java packages.

 </para>
         <para>
 This method must continue to return this bundle's symbolic name while
 this bundle is in the <code>UNINSTALLED</code> state.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The symbolic name of this bundle or <code>null</code> if this bundle
         does not have a symbolic name.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="getVersion()" role="method" xml:id="org.osgi.framework.Bundle.getVersion--">
         <title>public Version getVersion()</title>
         <para role="description">
Returns the version of this bundle as specified by its
 <code>Bundle-Version</code> manifest header. If this bundle does not have a
 specified version then <link linkend="org.osgi.framework.Version.emptyVersion">Version.emptyVersion</link> is returned.

 </para>
         <para>
 This method must continue to return this bundle's version while this
 bundle is in the <code>UNINSTALLED</code> state.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The version of this bundle.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="hasPermission(Object)" role="method" xml:id="org.osgi.framework.Bundle.hasPermission-Object-">
         <title>public boolean hasPermission(Object permission)</title>
         <formalpara role="parameter">
            <title>permission</title>
            <para>The permission to verify.</para>
         </formalpara>
         <para role="description">
Determines if this bundle has the specified permissions.

 </para>
         <para>
 If the Java Runtime Environment does not support permissions, this method
 always returns <code>true</code>.
 </para>
         <para>
            <code>permission</code> is of type <code>Object</code> to avoid referencing the
 <code>java.security.Permission</code> class directly. This is to allow the
 Framework to be implemented in Java environments which do not support
 permissions.

 </para>
         <para>
 If the Java Runtime Environment does support permissions, this bundle and
 all its resources including embedded JAR files, belong to the same
 <code>java.security.ProtectionDomain</code>; that is, they must share the same
 set of permissions.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if this bundle has the specified permission or the
         permissions possessed by this bundle imply the specified
         permission; <code>false</code> if this bundle does not have the
         specified permission or <code>permission</code> is not an
         <code>instanceof</code>
               <code>java.security.Permission</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this bundle has been uninstalled.</para>
         </formalpara>
      </section>
      <section xreflabel="loadClass(String)" role="method" xml:id="org.osgi.framework.Bundle.loadClass-String-">
         <title>public Class&lt;?&gt; loadClass(String name) throws ClassNotFoundException</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The name of the class to load.</para>
         </formalpara>
         <para role="description">
Loads the specified class using this bundle's class loader.

 </para>
         <para>
 If this bundle is a fragment bundle then this method must throw a
 <code>ClassNotFoundException</code>.

 </para>
         <para>
 If this bundle's state is <code>INSTALLED</code>, this method must attempt to
 resolve this bundle before attempting to load the class.

 </para>
         <para>
 If this bundle cannot be resolved, a Framework event of type
 <link linkend="org.osgi.framework.FrameworkEvent.ERROR">FrameworkEvent.ERROR</link> is fired containing a
 <code>BundleException</code> with details of the reason this bundle could not
 be resolved. This method must then throw a <code>ClassNotFoundException</code>.

 </para>
         <para>
 If this bundle's state is <code>UNINSTALLED</code>, then an
 <code>IllegalStateException</code> is thrown.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The Class object for the requested class.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>ClassNotFoundException</code>– If no such class can be found or if this
         bundle is a fragment bundle or if the caller does not have the
         appropriate <code>AdminPermission[this,CLASS]</code>, and the Java
         Runtime Environment supports permissions.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this bundle has been uninstalled.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="start(int)" role="method" xml:id="org.osgi.framework.Bundle.start-int-">
         <title>public void start(int options) throws BundleException</title>
         <formalpara role="parameter">
            <title>options</title>
            <para>The options for starting this bundle. See
        <link linkend="org.osgi.framework.Bundle.START_TRANSIENT">START_TRANSIENT</link> and <link linkend="org.osgi.framework.Bundle.START_ACTIVATION_POLICY">START_ACTIVATION_POLICY</link>. The
        Framework must ignore unrecognized options.</para>
         </formalpara>
         <para role="description">
Starts this bundle.

 </para>
         <para>
 If this bundle's state is <code>UNINSTALLED</code> then an
 <code>IllegalStateException</code> is thrown.
 </para>
         <para>
 If the current start level is less than this bundle's start level:
 </para>
         <itemizedlist>
            <listitem>
               <para>If the <link linkend="org.osgi.framework.Bundle.START_TRANSIENT">START_TRANSIENT</link> option is set, then a
 <code>BundleException</code> is thrown indicating this bundle cannot be
 started due to the Framework's current start level.</para>
            </listitem>
            <listitem>
               <para>Otherwise, the Framework must set this bundle's persistent autostart
 setting to <emphasis>Started with declared activation</emphasis> if the
 <link linkend="org.osgi.framework.Bundle.START_ACTIVATION_POLICY">START_ACTIVATION_POLICY</link> option is set or
 <emphasis>Started with eager activation</emphasis> if not set.</para>
            </listitem>
         </itemizedlist>
         <para>
 When the Framework's current start level becomes equal to or more than
 this bundle's start level, this bundle will be started.
 </para>
         <para>
 Otherwise, the following steps are required to start this bundle:
 </para>
         <orderedlist>
            <listitem>
               <para>If this bundle is in the process of being activated or deactivated
 then this method must wait for activation or deactivation to complete
 before continuing. If this does not occur in a reasonable time, a
 <code>BundleException</code> is thrown to indicate this bundle was unable to
 be started.</para>
            </listitem>
            <listitem>
               <para>If the <link linkend="org.osgi.framework.Bundle.START_TRANSIENT">START_TRANSIENT</link> option is not set then set this
 bundle's autostart setting to <emphasis>Started with declared activation</emphasis>
 if the <link linkend="org.osgi.framework.Bundle.START_ACTIVATION_POLICY">START_ACTIVATION_POLICY</link> option is set or
 <emphasis>Started with eager activation</emphasis> if not set. When the Framework is
 restarted and this bundle's autostart setting is not <emphasis>Stopped</emphasis>,
 this bundle must be automatically started.</para>
            </listitem>
            <listitem>
               <para>If this bundle's state is <code>ACTIVE</code> then this method returns
 immediately.</para>
            </listitem>
            <listitem>
               <para>If this bundle's state is not <code>RESOLVED</code>, an attempt is made to
 resolve this bundle. If the Framework cannot resolve this bundle, a
 <code>BundleException</code> is thrown.</para>
            </listitem>
            <listitem>
               <para>If the <link linkend="org.osgi.framework.Bundle.START_ACTIVATION_POLICY">START_ACTIVATION_POLICY</link> option is set and this
 bundle's declared activation policy is <link linkend="org.osgi.framework.Constants.ACTIVATION_LAZY">lazy</link> then:
 </para>
               <itemizedlist>
                  <listitem>
                     <para>If this bundle's state is <code>STARTING</code> then this method returns
 immediately.</para>
                  </listitem>
                  <listitem>
                     <para>This bundle's state is set to <code>STARTING</code>.</para>
                  </listitem>
                  <listitem>
                     <para>A bundle event of type <link linkend="org.osgi.framework.BundleEvent.LAZY_ACTIVATION">BundleEvent.LAZY_ACTIVATION</link> is fired.</para>
                  </listitem>
                  <listitem>
                     <para>This method returns immediately and the remaining steps will be
 followed when this bundle's activation is later triggered.</para>
                  </listitem>
               </itemizedlist>
            </listitem>
            <listitem>
               <para>This bundle's state is set to <code>STARTING</code>.</para>
            </listitem>
            <listitem>
               <para>A bundle event of type <link linkend="org.osgi.framework.BundleEvent.STARTING">BundleEvent.STARTING</link> is fired.</para>
            </listitem>
            <listitem>
               <para>The <link linkend="org.osgi.framework.BundleActivator.start-BundleContext-">BundleActivator.start(BundleContext)</link> method of this
 bundle's <code>BundleActivator</code>, if one is specified, is called. If the
 <code>BundleActivator</code> is invalid or throws an exception then:
 </para>
               <itemizedlist>
                  <listitem>
                     <para>This bundle's state is set to <code>STOPPING</code>.</para>
                  </listitem>
                  <listitem>
                     <para>A bundle event of type <link linkend="org.osgi.framework.BundleEvent.STOPPING">BundleEvent.STOPPING</link> is fired.</para>
                  </listitem>
                  <listitem>
                     <para>Any services registered by this bundle must be unregistered.</para>
                  </listitem>
                  <listitem>
                     <para>Any services used by this bundle must be released.</para>
                  </listitem>
                  <listitem>
                     <para>Any listeners registered by this bundle must be removed.</para>
                  </listitem>
                  <listitem>
                     <para>This bundle's state is set to <code>RESOLVED</code>.</para>
                  </listitem>
                  <listitem>
                     <para>A bundle event of type <link linkend="org.osgi.framework.BundleEvent.STOPPED">BundleEvent.STOPPED</link> is fired.</para>
                  </listitem>
                  <listitem>
                     <para>A <code>BundleException</code> is then thrown.</para>
                  </listitem>
               </itemizedlist>
            </listitem>
            <listitem>
               <para>This bundle's state is set to <code>ACTIVE</code>.</para>
            </listitem>
            <listitem>
               <para>A bundle event of type <link linkend="org.osgi.framework.BundleEvent.STARTED">BundleEvent.STARTED</link> is fired.</para>
            </listitem>
         </orderedlist>
         <para>
            <emphasis role="strong">Preconditions </emphasis>
         </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>getState()</code> in { <code>INSTALLED</code>, <code>RESOLVED</code>
 } or { <code>INSTALLED</code>, <code>RESOLVED</code>,
 <code>STARTING</code> } if this bundle has a lazy activation policy.</para>
            </listitem>
         </itemizedlist>
         <para>
            <emphasis role="strong">Postconditions, no exceptions thrown </emphasis>
         </para>
         <itemizedlist>
            <listitem>
               <para>Bundle autostart setting is modified unless the
 <link linkend="org.osgi.framework.Bundle.START_TRANSIENT">START_TRANSIENT</link> option was set.</para>
            </listitem>
            <listitem>
               <para>
                  <code>getState()</code> in { <code>ACTIVE</code> } unless the
 lazy activation policy was used.</para>
            </listitem>
            <listitem>
               <para>
                  <code>BundleActivator.start()</code> has been called and did not throw an
 exception unless the lazy activation policy was used.</para>
            </listitem>
         </itemizedlist>
         <para>
            <emphasis role="strong">Postconditions, when an exception is thrown </emphasis>
         </para>
         <itemizedlist>
            <listitem>
               <para>Depending on when the exception occurred, bundle autostart setting is
 modified unless the <link linkend="org.osgi.framework.Bundle.START_TRANSIENT">START_TRANSIENT</link> option was set.</para>
            </listitem>
            <listitem>
               <para>
                  <code>getState()</code> not in { <code>STARTING</code>, <code>ACTIVE</code>
 }.</para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>BundleException</code>– If this bundle could not be started.
         BundleException types thrown by this method include:
         <link linkend="org.osgi.framework.BundleException.START_TRANSIENT_ERROR">BundleException.START_TRANSIENT_ERROR</link>,
         <link linkend="org.osgi.framework.BundleException.NATIVECODE_ERROR">BundleException.NATIVECODE_ERROR</link>,
         <link linkend="org.osgi.framework.BundleException.RESOLVE_ERROR">BundleException.RESOLVE_ERROR</link>,
         <link linkend="org.osgi.framework.BundleException.STATECHANGE_ERROR">BundleException.STATECHANGE_ERROR</link>, and
         <link linkend="org.osgi.framework.BundleException.ACTIVATOR_ERROR">BundleException.ACTIVATOR_ERROR</link>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this bundle has been uninstalled or this
         bundle tries to change its own state.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have the appropriate
         <code>AdminPermission[this,EXECUTE]</code>, and the Java Runtime
         Environment supports permissions.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.4</para>
         </formalpara>
      </section>
      <section xreflabel="start()" role="method" xml:id="org.osgi.framework.Bundle.start--">
         <title>public void start() throws BundleException</title>
         <para role="description">
Starts this bundle with no options.

 </para>
         <para>
 This method performs the same function as calling <code>start(0)</code>.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>BundleException</code>– If this bundle could not be started.
         BundleException types thrown by this method include:
         <link linkend="org.osgi.framework.BundleException.NATIVECODE_ERROR">BundleException.NATIVECODE_ERROR</link>,
         <link linkend="org.osgi.framework.BundleException.RESOLVE_ERROR">BundleException.RESOLVE_ERROR</link>,
         <link linkend="org.osgi.framework.BundleException.STATECHANGE_ERROR">BundleException.STATECHANGE_ERROR</link>, and
         <link linkend="org.osgi.framework.BundleException.ACTIVATOR_ERROR">BundleException.ACTIVATOR_ERROR</link>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this bundle has been uninstalled or this
         bundle tries to change its own state.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have the appropriate
         <code>AdminPermission[this,EXECUTE]</code>, and the Java Runtime
         Environment supports permissions.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Bundle.start-int-">start(int)</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="stop(int)" role="method" xml:id="org.osgi.framework.Bundle.stop-int-">
         <title>public void stop(int options) throws BundleException</title>
         <formalpara role="parameter">
            <title>options</title>
            <para>The options for stopping this bundle. See
        <link linkend="org.osgi.framework.Bundle.STOP_TRANSIENT">STOP_TRANSIENT</link>. The Framework must ignore unrecognized
        options.</para>
         </formalpara>
         <para role="description">
Stops this bundle.

 </para>
         <para>
 The following steps are required to stop a bundle:
 </para>
         <orderedlist>
            <listitem>
               <para>If this bundle's state is <code>UNINSTALLED</code> then an
 <code>IllegalStateException</code> is thrown.</para>
            </listitem>
            <listitem>
               <para>If this bundle is in the process of being activated or deactivated
 then this method must wait for activation or deactivation to complete
 before continuing. If this does not occur in a reasonable time, a
 <code>BundleException</code> is thrown to indicate this bundle was unable to
 be stopped.</para>
            </listitem>
            <listitem>
               <para>If the <link linkend="org.osgi.framework.Bundle.STOP_TRANSIENT">STOP_TRANSIENT</link> option is not set then set this
 bundle's persistent autostart setting to <emphasis>Stopped</emphasis>. When the
 Framework is restarted and this bundle's autostart setting is
 <emphasis>Stopped</emphasis>, this bundle must not be automatically started.</para>
            </listitem>
            <listitem>
               <para>If this bundle's state is not <code>STARTING</code> or <code>ACTIVE</code> then
 this method returns immediately.</para>
            </listitem>
            <listitem>
               <para>This bundle's state is set to <code>STOPPING</code>.</para>
            </listitem>
            <listitem>
               <para>A bundle event of type <link linkend="org.osgi.framework.BundleEvent.STOPPING">BundleEvent.STOPPING</link> is fired.</para>
            </listitem>
            <listitem>
               <para>If this bundle's state was <code>ACTIVE</code> prior to setting the state
 to <code>STOPPING</code>, the <link linkend="org.osgi.framework.BundleActivator.stop-BundleContext-">BundleActivator.stop(BundleContext)</link>
 method of this bundle's <code>BundleActivator</code>, if one is specified, is
 called. If that method throws an exception, this method must continue to
 stop this bundle and a <code>BundleException</code> must be thrown after
 completion of the remaining steps.</para>
            </listitem>
            <listitem>
               <para>Any services registered by this bundle must be unregistered.</para>
            </listitem>
            <listitem>
               <para>Any services used by this bundle must be released.</para>
            </listitem>
            <listitem>
               <para>Any listeners registered by this bundle must be removed.</para>
            </listitem>
            <listitem>
               <para>If this bundle's state is <code>UNINSTALLED</code>, because this bundle
 was uninstalled while the <code>BundleActivator.stop</code> method was
 running, a <code>BundleException</code> must be thrown.</para>
            </listitem>
            <listitem>
               <para>This bundle's state is set to <code>RESOLVED</code>.</para>
            </listitem>
            <listitem>
               <para>A bundle event of type <link linkend="org.osgi.framework.BundleEvent.STOPPED">BundleEvent.STOPPED</link> is fired.</para>
            </listitem>
         </orderedlist>
         <para>
            <emphasis role="strong">Preconditions </emphasis>
         </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>getState()</code> in { <code>ACTIVE</code> }.</para>
            </listitem>
         </itemizedlist>
         <para>
            <emphasis role="strong">Postconditions, no exceptions thrown </emphasis>
         </para>
         <itemizedlist>
            <listitem>
               <para>Bundle autostart setting is modified unless the
 <link linkend="org.osgi.framework.Bundle.STOP_TRANSIENT">STOP_TRANSIENT</link> option was set.</para>
            </listitem>
            <listitem>
               <para>
                  <code>getState()</code> not in { <code>ACTIVE</code>, <code>STOPPING</code>
 }.</para>
            </listitem>
            <listitem>
               <para>
                  <code>BundleActivator.stop</code> has been called and did not throw an
 exception.</para>
            </listitem>
         </itemizedlist>
         <para>
            <emphasis role="strong">Postconditions, when an exception is thrown </emphasis>
         </para>
         <itemizedlist>
            <listitem>
               <para>Bundle autostart setting is modified unless the
 <link linkend="org.osgi.framework.Bundle.STOP_TRANSIENT">STOP_TRANSIENT</link> option was set.</para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>BundleException</code>– BundleException types thrown by this method
         include: <link linkend="org.osgi.framework.BundleException.STATECHANGE_ERROR">BundleException.STATECHANGE_ERROR</link> and
         <link linkend="org.osgi.framework.BundleException.ACTIVATOR_ERROR">BundleException.ACTIVATOR_ERROR</link>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this bundle has been uninstalled or this
         bundle tries to change its own state.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have the appropriate
         <code>AdminPermission[this,EXECUTE]</code>, and the Java Runtime
         Environment supports permissions.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.4</para>
         </formalpara>
      </section>
      <section xreflabel="stop()" role="method" xml:id="org.osgi.framework.Bundle.stop--">
         <title>public void stop() throws BundleException</title>
         <para role="description">
Stops this bundle with no options.

 </para>
         <para>
 This method performs the same function as calling <code>stop(0)</code>.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>BundleException</code>– BundleException types thrown by this method
         include: <link linkend="org.osgi.framework.BundleException.STATECHANGE_ERROR">BundleException.STATECHANGE_ERROR</link> and
         <link linkend="org.osgi.framework.BundleException.ACTIVATOR_ERROR">BundleException.ACTIVATOR_ERROR</link>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this bundle has been uninstalled or this
         bundle tries to change its own state.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have the appropriate
         <code>AdminPermission[this,EXECUTE]</code>, and the Java Runtime
         Environment supports permissions.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Bundle.start-int-">start(int)</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="uninstall()" role="method" xml:id="org.osgi.framework.Bundle.uninstall--">
         <title>public void uninstall() throws BundleException</title>
         <para role="description">
Uninstalls this bundle.

 </para>
         <para>
 This method causes the Framework to notify other bundles that this bundle
 is being uninstalled, and then puts this bundle into the
 <code>UNINSTALLED</code> state. The Framework must remove any resources
 related to this bundle that it is able to remove.

 </para>
         <para>
 If this bundle has exported any packages, the Framework must continue to
 make these packages available to their importing bundles until the
 <link linkend="org.osgi.framework.wiring.FrameworkWiring.refreshBundles-Collection-FrameworkListener...-">FrameworkWiring.refreshBundles</link> method has been called or the Framework
 is relaunched.

 </para>
         <para>
 The following steps are required to uninstall a bundle:
 </para>
         <orderedlist>
            <listitem>
               <para>If this bundle's state is <code>UNINSTALLED</code> then an
 <code>IllegalStateException</code> is thrown.</para>
            </listitem>
            <listitem>
               <para>If this bundle's state is <code>ACTIVE</code>, <code>STARTING</code> or
 <code>STOPPING</code>, this bundle is stopped as described in the
 <code>Bundle.stop</code> method. If <code>Bundle.stop</code> throws an exception, a
 Framework event of type <link linkend="org.osgi.framework.FrameworkEvent.ERROR">FrameworkEvent.ERROR</link> is fired containing
 the exception.</para>
            </listitem>
            <listitem>
               <para>This bundle's state is set to <code>UNINSTALLED</code>.</para>
            </listitem>
            <listitem>
               <para>A bundle event of type <link linkend="org.osgi.framework.BundleEvent.UNINSTALLED">BundleEvent.UNINSTALLED</link> is fired.</para>
            </listitem>
            <listitem>
               <para>This bundle and any persistent storage area provided for this bundle
 by the Framework are removed.</para>
            </listitem>
         </orderedlist>
         <para>
            <emphasis role="strong">Preconditions </emphasis>
         </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>getState()</code> not in { <code>UNINSTALLED</code> }.</para>
            </listitem>
         </itemizedlist>
         <para>
            <emphasis role="strong">Postconditions, no exceptions thrown </emphasis>
         </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>getState()</code> in { <code>UNINSTALLED</code> }.</para>
            </listitem>
            <listitem>
               <para>This bundle has been uninstalled.</para>
            </listitem>
         </itemizedlist>
         <para>
            <emphasis role="strong">Postconditions, when an exception is thrown </emphasis>
         </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>getState()</code> not in { <code>UNINSTALLED</code> }.</para>
            </listitem>
            <listitem>
               <para>This Bundle has not been uninstalled.</para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>BundleException</code>– If the uninstall failed. This can occur if
         another thread is attempting to change this bundle's state and
         does not complete in a timely manner. BundleException types
         thrown by this method include:
         <link linkend="org.osgi.framework.BundleException.STATECHANGE_ERROR">BundleException.STATECHANGE_ERROR</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this bundle has been uninstalled or this
         bundle tries to change its own state.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have the appropriate
         <code>AdminPermission[this,LIFECYCLE]</code>, and the Java Runtime
         Environment supports permissions.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Bundle.stop--">stop()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="update(InputStream)" role="method" xml:id="org.osgi.framework.Bundle.update-InputStream-">
         <title>public void update(InputStream input) throws BundleException</title>
         <formalpara role="parameter">
            <title>input</title>
            <para>The <code>InputStream</code> from which to read the new bundle or
        <code>null</code> to indicate the Framework must create the input
        stream from this bundle's <link linkend="org.osgi.framework.Constants.BUNDLE_UPDATELOCATION">Bundle-UpdateLocation</link> Manifest header, if present, or this
        bundle's original location. The input stream must always be closed
        when this method completes, even if an exception is thrown.</para>
         </formalpara>
         <para role="description">
Updates this bundle from an <code>InputStream</code>.

 </para>
         <para>
 If the specified <code>InputStream</code> is <code>null</code>, the Framework must
 create the <code>InputStream</code> from which to read the updated bundle by
 interpreting, in an implementation dependent manner, this bundle's
 <link linkend="org.osgi.framework.Constants.BUNDLE_UPDATELOCATION">Bundle-UpdateLocation</link> Manifest
 header, if present, or this bundle's original location.

 </para>
         <para>
 If this bundle's state is <code>ACTIVE</code>, it must be stopped before the
 update and started after the update successfully completes.

 </para>
         <para>
 If this bundle has exported any packages that are imported by another
 bundle, these packages must remain exported until the
 <link linkend="org.osgi.framework.wiring.FrameworkWiring.refreshBundles-Collection-FrameworkListener...-">FrameworkWiring.refreshBundles</link> method has been has been called or the
 Framework is relaunched.

 </para>
         <para>
 The following steps are required to update a bundle:
 </para>
         <orderedlist>
            <listitem>
               <para>If this bundle's state is <code>UNINSTALLED</code> then an
 <code>IllegalStateException</code> is thrown.</para>
            </listitem>
            <listitem>
               <para>If this bundle's state is <code>ACTIVE</code>, <code>STARTING</code> or
 <code>STOPPING</code>, this bundle is stopped as described in the
 <code>Bundle.stop</code> method. If <code>Bundle.stop</code> throws an exception,
 the exception is rethrown terminating the update.</para>
            </listitem>
            <listitem>
               <para>The updated version of this bundle is read from the input stream and
 installed. If the Framework is unable to install the updated version of
 this bundle, the original version of this bundle must be restored and a
 <code>BundleException</code> must be thrown after completion of the remaining
 steps.</para>
            </listitem>
            <listitem>
               <para>This bundle's state is set to <code>INSTALLED</code>.</para>
            </listitem>
            <listitem>
               <para>If the updated version of this bundle was successfully installed, a
 bundle event of type <link linkend="org.osgi.framework.BundleEvent.UPDATED">BundleEvent.UPDATED</link> is fired.</para>
            </listitem>
            <listitem>
               <para>If this bundle's state was originally <code>ACTIVE</code>, the updated
 bundle is started as described in the <code>Bundle.start</code> method. If
 <code>Bundle.start</code> throws an exception, a Framework event of type
 <link linkend="org.osgi.framework.FrameworkEvent.ERROR">FrameworkEvent.ERROR</link> is fired containing the exception.</para>
            </listitem>
         </orderedlist>
         <para>
            <emphasis role="strong">Preconditions </emphasis>
         </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>getState()</code> not in { <code>UNINSTALLED</code> }.</para>
            </listitem>
         </itemizedlist>
         <para>
            <emphasis role="strong">Postconditions, no exceptions thrown </emphasis>
         </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>getState()</code> in { <code>INSTALLED</code>, <code>RESOLVED</code>,
 <code>ACTIVE</code> }.</para>
            </listitem>
            <listitem>
               <para>This bundle has been updated.</para>
            </listitem>
         </itemizedlist>
         <para>
            <emphasis role="strong">Postconditions, when an exception is thrown </emphasis>
         </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>getState()</code> in { <code>INSTALLED</code>, <code>RESOLVED</code>,
 <code>ACTIVE</code> }.</para>
            </listitem>
            <listitem>
               <para>Original bundle is still used; no update occurred.</para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>BundleException</code>– If this bundle could not be updated.
         BundleException types thrown by this method include:
         <link linkend="org.osgi.framework.BundleException.READ_ERROR">BundleException.READ_ERROR</link>,
         <link linkend="org.osgi.framework.BundleException.DUPLICATE_BUNDLE_ERROR">BundleException.DUPLICATE_BUNDLE_ERROR</link>,
         <link linkend="org.osgi.framework.BundleException.MANIFEST_ERROR">BundleException.MANIFEST_ERROR</link>,
         <link linkend="org.osgi.framework.BundleException.NATIVECODE_ERROR">BundleException.NATIVECODE_ERROR</link>,
         <link linkend="org.osgi.framework.BundleException.RESOLVE_ERROR">BundleException.RESOLVE_ERROR</link>,
         <link linkend="org.osgi.framework.BundleException.STATECHANGE_ERROR">BundleException.STATECHANGE_ERROR</link>, and
         <link linkend="org.osgi.framework.BundleException.ACTIVATOR_ERROR">BundleException.ACTIVATOR_ERROR</link>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this bundle has been uninstalled or this
         bundle tries to change its own state.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have the appropriate
         <code>AdminPermission[this,LIFECYCLE]</code> for both the current
         bundle and the updated bundle, and the Java Runtime Environment
         supports permissions.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Bundle.stop--">stop()</link>, <link linkend="org.osgi.framework.Bundle.start--">start()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="update()" role="method" xml:id="org.osgi.framework.Bundle.update--">
         <title>public void update() throws BundleException</title>
         <para role="description">
Updates this bundle.

 </para>
         <para>
 This method performs the same function as calling
 <link linkend="org.osgi.framework.Bundle.update-InputStream-">update(InputStream)</link> with a <code>null</code> InputStream.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>BundleException</code>– If this bundle could not be updated.
         BundleException types thrown by this method include:
         <link linkend="org.osgi.framework.BundleException.READ_ERROR">BundleException.READ_ERROR</link>,
         <link linkend="org.osgi.framework.BundleException.DUPLICATE_BUNDLE_ERROR">BundleException.DUPLICATE_BUNDLE_ERROR</link>,
         <link linkend="org.osgi.framework.BundleException.MANIFEST_ERROR">BundleException.MANIFEST_ERROR</link>,
         <link linkend="org.osgi.framework.BundleException.NATIVECODE_ERROR">BundleException.NATIVECODE_ERROR</link>,
         <link linkend="org.osgi.framework.BundleException.RESOLVE_ERROR">BundleException.RESOLVE_ERROR</link>,
         <link linkend="org.osgi.framework.BundleException.STATECHANGE_ERROR">BundleException.STATECHANGE_ERROR</link>, and
         <link linkend="org.osgi.framework.BundleException.ACTIVATOR_ERROR">BundleException.ACTIVATOR_ERROR</link>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this bundle has been uninstalled or this
         bundle tries to change its own state.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have the appropriate
         <code>AdminPermission[this,LIFECYCLE]</code> for both the current
         bundle and the updated bundle, and the Java Runtime Environment
         supports permissions.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Bundle.update-InputStream-">update(InputStream)</link>
            </para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="BundleActivator" role="class" xml:id="org.osgi.framework.BundleActivator">
      <title>public interface BundleActivator</title>
      <para>
Customizes the starting and stopping of a bundle.
 </para>
      <para>
         <code>BundleActivator</code> is an interface that may be implemented when a bundle
 is started or stopped. The Framework can create instances of a bundle's
 <code>BundleActivator</code> as required. If an instance's
 <code>BundleActivator.start</code> method executes successfully, it is guaranteed
 that the same instance's <code>BundleActivator.stop</code> method will be called
 when the bundle is to be stopped. The Framework must not concurrently call a
 <code>BundleActivator</code> object.

 </para>
      <para>
         <code>BundleActivator</code> is specified through the <code>Bundle-Activator</code>
 Manifest header. A bundle can only specify a single <code>BundleActivator</code>
 in the Manifest file. Fragment bundles must not have a
 <code>BundleActivator</code>. The form of the Manifest header is:

 </para>
      <para>
         <code>Bundle-Activator:</code>
         <emphasis>class-name</emphasis>
      </para>
      <para>
 where <emphasis>class-name</emphasis> is a fully qualified Java classname.
 </para>
      <para>
 The specified <code>BundleActivator</code> class must have a public constructor
 that takes no parameters so that a <code>BundleActivator</code> object can be
 created by <code>Class.newInstance()</code>.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <section xreflabel="start(BundleContext)" role="method" xml:id="org.osgi.framework.BundleActivator.start-BundleContext-">
         <title>public void start(BundleContext context) throws Exception</title>
         <formalpara role="parameter">
            <title>context</title>
            <para>The execution context of the bundle being started.</para>
         </formalpara>
         <para role="description">
Called when this bundle is started so the Framework can perform the
 bundle-specific activities necessary to start this bundle. This method
 can be used to register services or to allocate any resources that this
 bundle needs.

 </para>
         <para>
 This method must complete and return to its caller in a timely manner.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– If this method throws an exception, this bundle is
         marked as stopped and the Framework will remove this bundle's
         listeners, unregister all services registered by this bundle, and
         release all services used by this bundle.</para>
         </formalpara>
      </section>
      <section xreflabel="stop(BundleContext)" role="method" xml:id="org.osgi.framework.BundleActivator.stop-BundleContext-">
         <title>public void stop(BundleContext context) throws Exception</title>
         <formalpara role="parameter">
            <title>context</title>
            <para>The execution context of the bundle being stopped.</para>
         </formalpara>
         <para role="description">
Called when this bundle is stopped so the Framework can perform the
 bundle-specific activities necessary to stop the bundle. In general, this
 method should undo the work that the <code>BundleActivator.start</code> method
 started. There should be no active threads that were started by this
 bundle when this bundle returns. A stopped bundle must not call any
 Framework objects.

 </para>
         <para>
 This method must complete and return to its caller in a timely manner.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>Exception</code>– If this method throws an exception, the bundle is still
         marked as stopped, and the Framework will remove the bundle's
         listeners, unregister all services registered by the bundle, and
         release all services used by the bundle.</para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="BundleContext" role="class" xml:id="org.osgi.framework.BundleContext">
      <title>public interface BundleContext<?line-break?> extends BundleReference</title>
      <para>
A bundle's execution context within the Framework. The context is used to
 grant access to other methods so that this bundle can interact with the
 Framework.

 </para>
      <para>
         <code>BundleContext</code> methods allow a bundle to:
 </para>
      <itemizedlist>
         <listitem>
            <para>Subscribe to events published by the Framework.</para>
         </listitem>
         <listitem>
            <para>Register service objects with the Framework service registry.</para>
         </listitem>
         <listitem>
            <para>Retrieve <code>ServiceReferences</code> from the Framework service registry.</para>
         </listitem>
         <listitem>
            <para>Get and release service objects for a referenced service.</para>
         </listitem>
         <listitem>
            <para>Install new bundles in the Framework.</para>
         </listitem>
         <listitem>
            <para>Get the list of bundles installed in the Framework.</para>
         </listitem>
         <listitem>
            <para>Get the <link linkend="org.osgi.framework.Bundle">Bundle</link> object for a bundle.</para>
         </listitem>
         <listitem>
            <para>Create <code>File</code> objects for files in a persistent storage area
 provided for the bundle by the Framework.</para>
         </listitem>
      </itemizedlist>
      <para>
 A <code>BundleContext</code> object will be created for a bundle when the bundle
 is started. The <code>Bundle</code> object associated with a <code>BundleContext</code>
 object is called the <emphasis>context bundle</emphasis>.

 </para>
      <para>
 The <code>BundleContext</code> object will be passed to the
 <link linkend="org.osgi.framework.BundleActivator.start-BundleContext-">BundleActivator.start(BundleContext)</link> method during activation of the
 context bundle. The same <code>BundleContext</code> object will be passed to the
 <link linkend="org.osgi.framework.BundleActivator.stop-BundleContext-">BundleActivator.stop(BundleContext)</link> method when the context bundle is
 stopped. A <code>BundleContext</code> object is generally for the private use of
 its associated bundle and is not meant to be shared with other bundles in the
 OSGi environment.

 </para>
      <para>
 The <code>BundleContext</code> object is only valid during the execution of its
 context bundle; that is, during the period from when the context bundle is in
 the <code>STARTING</code>, <code>STOPPING</code>, and <code>ACTIVE</code> bundle states.
 However, the <code>BundleContext</code> object becomes invalid after
 <link linkend="org.osgi.framework.BundleActivator.stop-BundleContext-">BundleActivator.stop(BundleContext)</link> returns (if the bundle has a
 Bundle Activator). The <code>BundleContext</code> object becomes invalid before
 disposing of any remaining registered services and releasing any remaining
 services in use. Since those activities can result in other bundles being
 called (for example, <link linkend="org.osgi.framework.ServiceListener">ServiceListener</link>s for
 <link linkend="org.osgi.framework.ServiceEvent.UNREGISTERING">ServiceEvent.UNREGISTERING</link> events and <link linkend="org.osgi.framework.ServiceFactory">ServiceFactory</link>s for
 unget operations), those other bundles can observe the stopping bundle in the
 <code>STOPPING</code> state but with an invalid <code>BundleContext</code> object. If
 the <code>BundleContext</code> object is used after it has become invalid, an
 <code>IllegalStateException</code> must be thrown. The <code>BundleContext</code>
 object must never be reused after its context bundle is stopped.

 </para>
      <para>
 Two <code>BundleContext</code> objects are equal if they both refer to the same
 execution context of a bundle. The Framework is the only entity that can
 create <code>BundleContext</code> objects and they are only valid within the
 Framework that created them.

 </para>
      <para>
 A <link linkend="org.osgi.framework.Bundle">Bundle</link> can be <link linkend="org.osgi.framework.Bundle.adapt-Class-">adapted</link> to its
 <code>BundleContext</code>. In order for this to succeed, the caller must have the
 appropriate <code>AdminPermission[bundle,CONTEXT]</code> if the Java Runtime
 Environment supports permissions.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section xreflabel="addBundleListener(BundleListener)" role="method" xml:id="org.osgi.framework.BundleContext.addBundleListener-BundleListener-">
         <title>public void addBundleListener(BundleListener listener)</title>
         <formalpara role="parameter">
            <title>listener</title>
            <para>The <code>BundleListener</code> to be added.</para>
         </formalpara>
         <para role="description">
Adds the specified <code>BundleListener</code> object to the context bundle's
 list of listeners if not already present. BundleListener objects are
 notified when a bundle has a lifecycle state change.

 </para>
         <para>
 If the context bundle's list of listeners already contains a listener
 <code>l</code> such that <code>(l==listener)</code>, this method does nothing.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this BundleContext is no longer valid.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If listener is a
         <code>SynchronousBundleListener</code> and the caller does not have
         the appropriate <code>AdminPermission[context bundle,LISTENER]</code>,
         and the Java Runtime Environment supports permissions.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.BundleEvent">BundleEvent</link>, <link linkend="org.osgi.framework.BundleListener">BundleListener</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="addFrameworkListener(FrameworkListener)" role="method" xml:id="org.osgi.framework.BundleContext.addFrameworkListener-FrameworkListener-">
         <title>public void addFrameworkListener(FrameworkListener listener)</title>
         <formalpara role="parameter">
            <title>listener</title>
            <para>The <code>FrameworkListener</code> object to be added.</para>
         </formalpara>
         <para role="description">
Adds the specified <code>FrameworkListener</code> object to the context
 bundle's list of listeners if not already present. FrameworkListeners are
 notified of general Framework events.

 </para>
         <para>
 If the context bundle's list of listeners already contains a listener
 <code>l</code> such that <code>(l==listener)</code>, this method does nothing.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this BundleContext is no longer valid.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.FrameworkEvent">FrameworkEvent</link>, <link linkend="org.osgi.framework.FrameworkListener">FrameworkListener</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="addServiceListener(ServiceListener,String)" role="method" xml:id="org.osgi.framework.BundleContext.addServiceListener-ServiceListener-String-">
         <title>public void addServiceListener(ServiceListener listener, String filter) throws InvalidSyntaxException</title>
         <formalpara role="parameter">
            <title>listener</title>
            <para>The <code>ServiceListener</code> object to be added.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>filter</title>
            <para>The filter criteria.</para>
         </formalpara>
         <para role="description">
Adds the specified <code>ServiceListener</code> object with the specified
 <code>filter</code> to the context bundle's list of listeners. See
 <link linkend="org.osgi.framework.Filter">Filter</link> for a description of the filter syntax.
 <code>ServiceListener</code> objects are notified when a service has a
 lifecycle state change.

 </para>
         <para>
 If the context bundle's list of listeners already contains a listener
 <code>l</code> such that <code>(l==listener)</code>, then this method replaces that
 listener's filter (which may be <code>null</code>) with the specified one
 (which may be <code>null</code>).

 </para>
         <para>
 The listener is called if the filter criteria is met. To filter based
 upon the class of the service, the filter should reference the
 <link linkend="org.osgi.framework.Constants.OBJECTCLASS">Constants.OBJECTCLASS</link> property. If <code>filter</code> is <code>null</code>
 , all services are considered to match the filter.

 </para>
         <para>
 When using a <code>filter</code>, it is possible that the <code>ServiceEvent</code>
 s for the complete lifecycle of a service will not be delivered to the
 listener. For example, if the <code>filter</code> only matches when the
 property <code>x</code> has the value <code>1</code>, the listener will not be
 called if the service is registered with the property <code>x</code> not set
 to the value <code>1</code>. Subsequently, when the service is modified
 setting property <code>x</code> to the value <code>1</code>, the filter will match
 and the listener will be called with a <code>ServiceEvent</code> of type
 <code>MODIFIED</code>. Thus, the listener will not be called with a
 <code>ServiceEvent</code> of type <code>REGISTERED</code>.

 </para>
         <para>
 If the Java Runtime Environment supports permissions, the
 <code>ServiceListener</code> object will be notified of a service event only
 if the bundle that is registering it has the <code>ServicePermission</code> to
 get the service using at least one of the named classes the service was
 registered under.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>InvalidSyntaxException</code>– If <code>filter</code> contains an invalid
         filter string that cannot be parsed.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this BundleContext is no longer valid.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.ServiceEvent">ServiceEvent</link>, <link linkend="org.osgi.framework.ServiceListener">ServiceListener</link>, <link linkend="org.osgi.framework.ServicePermission">ServicePermission</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="addServiceListener(ServiceListener)" role="method" xml:id="org.osgi.framework.BundleContext.addServiceListener-ServiceListener-">
         <title>public void addServiceListener(ServiceListener listener)</title>
         <formalpara role="parameter">
            <title>listener</title>
            <para>The <code>ServiceListener</code> object to be added.</para>
         </formalpara>
         <para role="description">
Adds the specified <code>ServiceListener</code> object to the context bundle's
 list of listeners.

 </para>
         <para>
 This method is the same as calling
 <code>BundleContext.addServiceListener(ServiceListener listener,
 String filter)</code> with <code>filter</code> set to <code>null</code>.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this BundleContext is no longer valid.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.BundleContext.addServiceListener-ServiceListener-String-">addServiceListener(ServiceListener, String)</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="createFilter(String)" role="method" xml:id="org.osgi.framework.BundleContext.createFilter-String-">
         <title>public Filter createFilter(String filter) throws InvalidSyntaxException</title>
         <formalpara role="parameter">
            <title>filter</title>
            <para>The filter string.</para>
         </formalpara>
         <para role="description">
Creates a <code>Filter</code> object. This <code>Filter</code> object may be used
 to match a <code>ServiceReference</code> object or a <code>Dictionary</code>
 object.

 </para>
         <para>
 If the filter cannot be parsed, an <link linkend="org.osgi.framework.InvalidSyntaxException">InvalidSyntaxException</link> will be
 thrown with a human readable message where the filter became unparsable.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A <code>Filter</code> object encapsulating the filter string.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>InvalidSyntaxException</code>– If <code>filter</code> contains an invalid
         filter string that cannot be parsed.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>NullPointerException</code>– If <code>filter</code> is null.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this BundleContext is no longer valid.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>Framework specification for a description of the filter string syntax.</code>, <link linkend="org.osgi.framework.FrameworkUtil.createFilter-String-">FrameworkUtil.createFilter(String)</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section xreflabel="getAllServiceReferences(String,String)" role="method" xml:id="org.osgi.framework.BundleContext.getAllServiceReferences-String-String-">
         <title>public ServiceReference&lt;?&gt;[] getAllServiceReferences(String clazz, String filter) throws InvalidSyntaxException</title>
         <formalpara role="parameter">
            <title>clazz</title>
            <para>The class name with which the service was registered or
        <code>null</code> for all services.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>filter</title>
            <para>The filter expression or <code>null</code> for all services.</para>
         </formalpara>
         <para role="description">
Returns an array of <code>ServiceReference</code> objects. The returned array
 of <code>ServiceReference</code> objects contains services that were
 registered under the specified class and match the specified filter
 expression.

 </para>
         <para>
 The list is valid at the time of the call to this method. However since
 the Framework is a very dynamic environment, services can be modified or
 unregistered at any time.

 </para>
         <para>
 The specified <code>filter</code> expression is used to select the registered
 services whose service properties contain keys and values which satisfy
 the filter expression. See <link linkend="org.osgi.framework.Filter">Filter</link> for a description of the filter
 syntax. If the specified <code>filter</code> is <code>null</code>, all registered
 services are considered to match the filter. If the specified
 <code>filter</code> expression cannot be parsed, an
 <link linkend="org.osgi.framework.InvalidSyntaxException">InvalidSyntaxException</link> will be thrown with a human readable
 message where the filter became unparsable.

 </para>
         <para>
 The result is an array of <code>ServiceReference</code> objects for all
 services that meet all of the following conditions:
 </para>
         <itemizedlist>
            <listitem>
               <para>If the specified class name, <code>clazz</code>, is not <code>null</code>, the
 service must have been registered with the specified class name. The
 complete list of class names with which a service was registered is
 available from the service's <link linkend="org.osgi.framework.Constants.OBJECTCLASS">objectClass</link>
 property.</para>
            </listitem>
            <listitem>
               <para>If the specified <code>filter</code> is not <code>null</code>, the filter
 expression must match the service.</para>
            </listitem>
            <listitem>
               <para>If the Java Runtime Environment supports permissions, the caller must
 have <code>ServicePermission</code> with the <code>GET</code> action for at least
 one of the class names under which the service was registered.</para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An array of <code>ServiceReference</code> objects or <code>null</code> if
         no services are registered which satisfy the search.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>InvalidSyntaxException</code>– If the specified <code>filter</code> contains
         an invalid filter expression that cannot be parsed.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this BundleContext is no longer valid.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="getBundle()" role="method" xml:id="org.osgi.framework.BundleContext.getBundle--">
         <title>public Bundle getBundle()</title>
         <para role="description">
Returns the <code>Bundle</code> object associated with this
 <code>BundleContext</code>. This bundle is called the context bundle.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The <code>Bundle</code> object associated with this
         <code>BundleContext</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this BundleContext is no longer valid.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getBundle(long)" role="method" xml:id="org.osgi.framework.BundleContext.getBundle-long-">
         <title>public Bundle getBundle(long id)</title>
         <formalpara role="parameter">
            <title>id</title>
            <para>The identifier of the bundle to retrieve.</para>
         </formalpara>
         <para role="description">
Returns the bundle with the specified identifier.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A <code>Bundle</code> object or <code>null</code> if the identifier does
         not match any installed bundle.</para>
         </formalpara>
      </section>
      <section xreflabel="getBundle(String)" role="method" xml:id="org.osgi.framework.BundleContext.getBundle-String-">
         <title>public Bundle getBundle(String location)</title>
         <formalpara role="parameter">
            <title>location</title>
            <para>The location of the bundle to retrieve.</para>
         </formalpara>
         <para role="description">
Returns the bundle with the specified location.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A <code>Bundle</code> object or <code>null</code> if the location does not
         match any installed bundle.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.6</para>
         </formalpara>
      </section>
      <section xreflabel="getBundles()" role="method" xml:id="org.osgi.framework.BundleContext.getBundles--">
         <title>public Bundle[] getBundles()</title>
         <para role="description">
Returns a list of all installed bundles.
 </para>
         <para>
 This method returns a list of all bundles installed in the OSGi
 environment at the time of the call to this method. However, since the
 Framework is a very dynamic environment, bundles can be installed or
 uninstalled at anytime.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An array of <code>Bundle</code> objects, one object per installed
         bundle.</para>
         </formalpara>
      </section>
      <section xreflabel="getDataFile(String)" role="method" xml:id="org.osgi.framework.BundleContext.getDataFile-String-">
         <title>public File getDataFile(String filename)</title>
         <formalpara role="parameter">
            <title>filename</title>
            <para>A relative name to the file to be accessed.</para>
         </formalpara>
         <para role="description">
Creates a <code>File</code> object for a file in the persistent storage area
 provided for the bundle by the Framework. This method will return
 <code>null</code> if the platform does not have file system support.

 </para>
         <para>
 A <code>File</code> object for the base directory of the persistent storage
 area provided for the context bundle by the Framework can be obtained by
 calling this method with an empty string as <code>filename</code>.

 </para>
         <para>
 If the Java Runtime Environment supports permissions, the Framework will
 ensure that the bundle has the <code>java.io.FilePermission</code> with
 actions <code>read</code>,<code>write</code>,<code>delete</code> for all files
 (recursively) in the persistent storage area provided for the context
 bundle.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A <code>File</code> object that represents the requested file or
         <code>null</code> if the platform does not have file system support.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this BundleContext is no longer valid.</para>
         </formalpara>
      </section>
      <section xreflabel="getProperty(String)" role="method" xml:id="org.osgi.framework.BundleContext.getProperty-String-">
         <title>public String getProperty(String key)</title>
         <formalpara role="parameter">
            <title>key</title>
            <para>The name of the requested property.</para>
         </formalpara>
         <para role="description">
Returns the value of the specified property. If the key is not found in
 the Framework properties, the system properties are then searched. The
 method returns <code>null</code> if the property is not found.

 </para>
         <para>
 All bundles must have permission to read properties whose names start
 with "org.osgi.".</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The value of the requested property, or <code>null</code> if the
         property is undefined.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have the appropriate
         <code>PropertyPermission</code> to read the property, and the Java
         Runtime Environment supports permissions.</para>
         </formalpara>
      </section>
      <section xreflabel="getService(ServiceReference)" role="method" xml:id="org.osgi.framework.BundleContext.getService-ServiceReference-">
         <title>public S getService(ServiceReference&lt;S&gt; reference)</title>
         <formalpara role="parameter">
            <title>Type Parameters</title>
            <para>
               <code>&lt;S&gt;</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>&lt;S&gt;</title>
            <para>Type of Service.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>reference</title>
            <para>A reference to the service.</para>
         </formalpara>
         <para role="description">
Returns the service object for the service referenced by the specified
 <code>ServiceReference</code> object.

 </para>
         <para>
 A bundle's use of a service object obtained from this method is tracked
 by the bundle's use count of that service. Each time the service object
 is returned by <link linkend="org.osgi.framework.BundleContext.getService-ServiceReference-">getService(ServiceReference)</link> the context bundle's
 use count for the service is incremented by one. Each time the service
 object is released by <link linkend="org.osgi.framework.BundleContext.ungetService-ServiceReference-">ungetService(ServiceReference)</link> the context
 bundle's use count for the service is decremented by one.

 </para>
         <para>
 When a bundle's use count for the service drops to zero, the bundle
 should no longer use the service object.

 </para>
         <para>
 This method will always return <code>null</code> when the service associated
 with the specified <code>reference</code> has been unregistered.

 </para>
         <para>
 The following steps are required to get the service object:
 </para>
         <orderedlist>
            <listitem>
               <para>If the service has been unregistered, <code>null</code> is returned.</para>
            </listitem>
            <listitem>
               <para>If the context bundle's use count for the service is currently zero
 and the service has <link linkend="org.osgi.framework.Constants.SCOPE_BUNDLE">bundle</link> or
 <link linkend="org.osgi.framework.Constants.SCOPE_PROTOTYPE">prototype</link> scope, the
 <link linkend="org.osgi.framework.ServiceFactory.getService-Bundle-ServiceRegistration-">ServiceFactory.getService(Bundle, ServiceRegistration)</link> method is
 called to supply the service object for the context bundle. If the
 service object returned by the <code>ServiceFactory</code> object is
 <code>null</code>, not an <code>instanceof</code> all the classes named when the
 service was registered or the <code>ServiceFactory</code> object throws an
 exception or will be recursively called for the context bundle,
 <code>null</code> is returned and a Framework event of type
 <link linkend="org.osgi.framework.FrameworkEvent.ERROR">FrameworkEvent.ERROR</link> containing a <link linkend="org.osgi.framework.ServiceException">ServiceException</link>
 describing the error is fired. The supplied service object is cached by
 the Framework. While the context bundle's use count for the service is
 greater than zero, subsequent calls to get the service object for the
 context bundle will return the cached service object.</para>
            </listitem>
            <listitem>
               <para>The context bundle's use count for the service is incremented by one.
 </para>
            </listitem>
            <listitem>
               <para>The service object for the service is returned.</para>
            </listitem>
         </orderedlist>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A service object for the service associated with
         <code>reference</code> or <code>null</code> if the service is not
         registered, the service object returned by a
         <code>ServiceFactory</code> does not implement the classes under which
         it was registered or the <code>ServiceFactory</code> threw an
         exception.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have the
         <code>ServicePermission</code> to get the service using at least one
         of the named classes the service was registered under and the
         Java Runtime Environment supports permissions.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this BundleContext is no longer valid.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the specified
         <code>ServiceReference</code> was not created by the same framework
         instance as this <code>BundleContext</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.BundleContext.ungetService-ServiceReference-">ungetService(ServiceReference)</link>, <link linkend="org.osgi.framework.ServiceFactory">ServiceFactory</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="getServiceObjects(ServiceReference)" role="method" xml:id="org.osgi.framework.BundleContext.getServiceObjects-ServiceReference-">
         <title>public ServiceObjects&lt;S&gt; getServiceObjects(ServiceReference&lt;S&gt; reference)</title>
         <formalpara role="parameter">
            <title>Type Parameters</title>
            <para>
               <code>&lt;S&gt;</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>&lt;S&gt;</title>
            <para>Type of Service.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>reference</title>
            <para>A reference to the service.</para>
         </formalpara>
         <para role="description">
Returns the <link linkend="org.osgi.framework.ServiceObjects">ServiceObjects</link> object for the service referenced by
 the specified <code>ServiceReference</code> object.

 </para>
         <para>
 The <link linkend="org.osgi.framework.ServiceObjects">ServiceObjects</link> object can be used to obtain multiple service
 objects for services with <link linkend="org.osgi.framework.Constants.SCOPE_PROTOTYPE">prototype</link>
 scope.

 </para>
         <para>
 For services with <link linkend="org.osgi.framework.Constants.SCOPE_SINGLETON">singleton</link> or
 <link linkend="org.osgi.framework.Constants.SCOPE_BUNDLE">bundle</link> scope, the
 <link linkend="org.osgi.framework.ServiceObjects.getService--">ServiceObjects.getService()</link> method behaves the same as the
 <link linkend="org.osgi.framework.BundleContext.getService-ServiceReference-">getService(ServiceReference)</link> method and the
 <link linkend="org.osgi.framework.ServiceObjects.ungetService-S-">ServiceObjects.ungetService(Object)</link> method behaves the same as
 the <link linkend="org.osgi.framework.BundleContext.ungetService-ServiceReference-">ungetService(ServiceReference)</link> method. That is, only one,
 use-counted service object is available from the <link linkend="org.osgi.framework.ServiceObjects">ServiceObjects</link>
 object.

 </para>
         <para>
 This method will always return <code>null</code> when the service associated
 with the specified <code>reference</code> has been unregistered.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A <link linkend="org.osgi.framework.ServiceObjects">ServiceObjects</link> object for the service associated with
         the specified <code>reference</code> or <code>null</code> if the service is
         not registered.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have the
         <code>ServicePermission</code> to get the service using at least one
         of the named classes the service was registered under and the
         Java Runtime Environment supports permissions.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this BundleContext is no longer valid.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the specified
         <code>ServiceReference</code> was not created by the same framework
         instance as this <code>BundleContext</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.PrototypeServiceFactory">PrototypeServiceFactory</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.8</para>
         </formalpara>
      </section>
      <section xreflabel="getServiceReference(String)" role="method" xml:id="org.osgi.framework.BundleContext.getServiceReference-String-">
         <title>public ServiceReference&lt;?&gt; getServiceReference(String clazz)</title>
         <formalpara role="parameter">
            <title>clazz</title>
            <para>The class name with which the service was registered.</para>
         </formalpara>
         <para role="description">
Returns a <code>ServiceReference</code> object for a service that implements
 and was registered under the specified class.

 </para>
         <para>
 The returned <code>ServiceReference</code> object is valid at the time of the
 call to this method. However as the Framework is a very dynamic
 environment, services can be modified or unregistered at any time.

 </para>
         <para>
 This method is the same as calling
 <link linkend="org.osgi.framework.BundleContext.getServiceReferences-String-String-">getServiceReferences(String, String)</link> with a <code>null</code> filter
 expression and then finding the reference with the highest priority. It
 is provided as a convenience for when the caller is interested in any
 service that implements the specified class.
 </para>
         <para>
 If multiple such services exist, the service with the highest priority is
 selected. This priority is defined as the service reference with the
 highest ranking (as specified in its <link linkend="org.osgi.framework.Constants.SERVICE_RANKING">Constants.SERVICE_RANKING</link>
 property) is returned.
 </para>
         <para>
 If there is a tie in ranking, the service with the lowest service id (as
 specified in its <link linkend="org.osgi.framework.Constants.SERVICE_ID">Constants.SERVICE_ID</link> property); that is, the
 service that was registered first is returned.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A <code>ServiceReference</code> object, or <code>null</code> if no services
         are registered which implement the named class.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this BundleContext is no longer valid.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.BundleContext.getServiceReferences-String-String-">getServiceReferences(String, String)</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="getServiceReference(Class)" role="method" xml:id="org.osgi.framework.BundleContext.getServiceReference-Class-">
         <title>public ServiceReference&lt;S&gt; getServiceReference(Class&lt;S&gt; clazz)</title>
         <formalpara role="parameter">
            <title>Type Parameters</title>
            <para>
               <code>&lt;S&gt;</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>&lt;S&gt;</title>
            <para>Type of Service.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>clazz</title>
            <para>The class under whose name the service was registered. Must
        not be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Returns a <code>ServiceReference</code> object for a service that implements
 and was registered under the name of the specified class.

 </para>
         <para>
 The returned <code>ServiceReference</code> object is valid at the time of the
 call to this method. However as the Framework is a very dynamic
 environment, services can be modified or unregistered at any time.

 </para>
         <para>
 This method is the same as calling
 <link linkend="org.osgi.framework.BundleContext.getServiceReferences-Class-String-">getServiceReferences(Class, String)</link> with a <code>null</code> filter
 expression. It is provided as a convenience for when the caller is
 interested in any service that implements the specified class.
 </para>
         <para>
 If multiple such services exist, the service with the highest ranking (as
 specified in its <link linkend="org.osgi.framework.Constants.SERVICE_RANKING">Constants.SERVICE_RANKING</link> property) is returned.
 </para>
         <para>
 If there is a tie in ranking, the service with the lowest service id (as
 specified in its <link linkend="org.osgi.framework.Constants.SERVICE_ID">Constants.SERVICE_ID</link> property); that is, the
 service that was registered first is returned.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A <code>ServiceReference</code> object, or <code>null</code> if no services
         are registered which implement the specified class.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this BundleContext is no longer valid.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.BundleContext.getServiceReferences-Class-String-">getServiceReferences(Class, String)</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.6</para>
         </formalpara>
      </section>
      <section xreflabel="getServiceReferences(String,String)" role="method" xml:id="org.osgi.framework.BundleContext.getServiceReferences-String-String-">
         <title>public ServiceReference&lt;?&gt;[] getServiceReferences(String clazz, String filter) throws InvalidSyntaxException</title>
         <formalpara role="parameter">
            <title>clazz</title>
            <para>The class name with which the service was registered or
        <code>null</code> for all services.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>filter</title>
            <para>The filter expression or <code>null</code> for all services.</para>
         </formalpara>
         <para role="description">
Returns an array of <code>ServiceReference</code> objects. The returned array
 of <code>ServiceReference</code> objects contains services that were
 registered under the specified class, match the specified filter
 expression, and the packages for the class names under which the services
 were registered match the context bundle's packages as defined in
 <link linkend="org.osgi.framework.ServiceReference.isAssignableTo-Bundle-String-">ServiceReference.isAssignableTo(Bundle, String)</link>.

 </para>
         <para>
 The list is valid at the time of the call to this method. However since
 the Framework is a very dynamic environment, services can be modified or
 unregistered at any time.

 </para>
         <para>
 The specified <code>filter</code> expression is used to select the registered
 services whose service properties contain keys and values which satisfy
 the filter expression. See <link linkend="org.osgi.framework.Filter">Filter</link> for a description of the filter
 syntax. If the specified <code>filter</code> is <code>null</code>, all registered
 services are considered to match the filter. If the specified
 <code>filter</code> expression cannot be parsed, an
 <link linkend="org.osgi.framework.InvalidSyntaxException">InvalidSyntaxException</link> will be thrown with a human readable
 message where the filter became unparsable.

 </para>
         <para>
 The result is an array of <code>ServiceReference</code> objects for all
 services that meet all of the following conditions:
 </para>
         <itemizedlist>
            <listitem>
               <para>If the specified class name, <code>clazz</code>, is not <code>null</code>, the
 service must have been registered with the specified class name. The
 complete list of class names with which a service was registered is
 available from the service's <link linkend="org.osgi.framework.Constants.OBJECTCLASS">objectClass</link>
 property.</para>
            </listitem>
            <listitem>
               <para>If the specified <code>filter</code> is not <code>null</code>, the filter
 expression must match the service.</para>
            </listitem>
            <listitem>
               <para>If the Java Runtime Environment supports permissions, the caller must
 have <code>ServicePermission</code> with the <code>GET</code> action for at least
 one of the class names under which the service was registered.</para>
            </listitem>
            <listitem>
               <para>For each class name with which the service was registered, calling
 <link linkend="org.osgi.framework.ServiceReference.isAssignableTo-Bundle-String-">ServiceReference.isAssignableTo(Bundle, String)</link> with the context
 bundle and the class name on the service's <code>ServiceReference</code>
 object must return <code>true</code>
               </para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An array of <code>ServiceReference</code> objects or <code>null</code> if
         no services are registered which satisfy the search.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>InvalidSyntaxException</code>– If the specified <code>filter</code> contains
         an invalid filter expression that cannot be parsed.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this BundleContext is no longer valid.</para>
         </formalpara>
      </section>
      <section xreflabel="getServiceReferences(Class,String)" role="method" xml:id="org.osgi.framework.BundleContext.getServiceReferences-Class-String-">
         <title>public Collection&lt;ServiceReference&lt;S&gt;&gt; getServiceReferences(Class&lt;S&gt; clazz, String filter) throws InvalidSyntaxException</title>
         <formalpara role="parameter">
            <title>Type Parameters</title>
            <para>
               <code>&lt;S&gt;</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>&lt;S&gt;</title>
            <para>Type of Service</para>
         </formalpara>
         <formalpara role="parameter">
            <title>clazz</title>
            <para>The class under whose name the service was registered. Must
        not be <code>null</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>filter</title>
            <para>The filter expression or <code>null</code> for all services.</para>
         </formalpara>
         <para role="description">
Returns a collection of <code>ServiceReference</code> objects. The returned
 collection of <code>ServiceReference</code> objects contains services that
 were registered under the name of the specified class, match the
 specified filter expression, and the packages for the class names under
 which the services were registered match the context bundle's packages as
 defined in <link linkend="org.osgi.framework.ServiceReference.isAssignableTo-Bundle-String-">ServiceReference.isAssignableTo(Bundle, String)</link>.

 </para>
         <para>
 The collection is valid at the time of the call to this method. However
 since the Framework is a very dynamic environment, services can be
 modified or unregistered at any time.

 </para>
         <para>
 The specified <code>filter</code> expression is used to select the registered
 services whose service properties contain keys and values which satisfy
 the filter expression. See <link linkend="org.osgi.framework.Filter">Filter</link> for a description of the filter
 syntax. If the specified <code>filter</code> is <code>null</code>, all registered
 services are considered to match the filter. If the specified
 <code>filter</code> expression cannot be parsed, an
 <link linkend="org.osgi.framework.InvalidSyntaxException">InvalidSyntaxException</link> will be thrown with a human readable
 message where the filter became unparsable.

 </para>
         <para>
 The result is a collection of <code>ServiceReference</code> objects for all
 services that meet all of the following conditions:
 </para>
         <itemizedlist>
            <listitem>
               <para>The service must have been registered with the name of the specified
 class. The complete list of class names with which a service was
 registered is available from the service's <link linkend="org.osgi.framework.Constants.OBJECTCLASS">objectClass</link> property.</para>
            </listitem>
            <listitem>
               <para>If the specified <code>filter</code> is not <code>null</code>, the filter
 expression must match the service.</para>
            </listitem>
            <listitem>
               <para>If the Java Runtime Environment supports permissions, the caller must
 have <code>ServicePermission</code> with the <code>GET</code> action for at least
 one of the class names under which the service was registered.</para>
            </listitem>
            <listitem>
               <para>For each class name with which the service was registered, calling
 <link linkend="org.osgi.framework.ServiceReference.isAssignableTo-Bundle-String-">ServiceReference.isAssignableTo(Bundle, String)</link> with the context
 bundle and the class name on the service's <code>ServiceReference</code>
 object must return <code>true</code>
               </para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A collection of <code>ServiceReference</code> objects. May be empty if
         no services are registered which satisfy the search.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>InvalidSyntaxException</code>– If the specified <code>filter</code> contains
         an invalid filter expression that cannot be parsed.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this BundleContext is no longer valid.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.6</para>
         </formalpara>
      </section>
      <section xreflabel="installBundle(String,InputStream)" role="method" xml:id="org.osgi.framework.BundleContext.installBundle-String-InputStream-">
         <title>public Bundle installBundle(String location, InputStream input) throws BundleException</title>
         <formalpara role="parameter">
            <title>location</title>
            <para>The location identifier of the bundle to install.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>input</title>
            <para>The <code>InputStream</code> object from which this bundle will
        be read or <code>null</code> to indicate the Framework must create the
        input stream from the specified location identifier. The input
        stream must always be closed when this method completes, even if
        an exception is thrown.</para>
         </formalpara>
         <para role="description">
Installs a bundle from the specified <code>InputStream</code> object.

 </para>
         <para>
 If the specified <code>InputStream</code> is <code>null</code>, the Framework must
 create the <code>InputStream</code> from which to read the bundle by
 interpreting, in an implementation dependent manner, the specified
 <code>location</code>.

 </para>
         <para>
 The specified <code>location</code> identifier will be used as the identity of
 the bundle. Every installed bundle is uniquely identified by its location
 identifier which is typically in the form of a URL.

 </para>
         <para>
 The following steps are required to install a bundle:
 </para>
         <orderedlist>
            <listitem>
               <para>If a bundle containing the same location identifier is already
 installed, the <code>Bundle</code> object for that bundle is returned.</para>
            </listitem>
            <listitem>
               <para>The bundle's content is read from the input stream. If this fails, a
 <link linkend="org.osgi.framework.BundleException">BundleException</link> is thrown.</para>
            </listitem>
            <listitem>
               <para>The bundle's associated resources are allocated. The associated
 resources minimally consist of a unique identifier and a persistent
 storage area if the platform has file system support. If this step fails,
 a <code>BundleException</code> is thrown.</para>
            </listitem>
            <listitem>
               <para>The bundle's state is set to <code>INSTALLED</code>.</para>
            </listitem>
            <listitem>
               <para>A bundle event of type <link linkend="org.osgi.framework.BundleEvent.INSTALLED">BundleEvent.INSTALLED</link> is fired.</para>
            </listitem>
            <listitem>
               <para>The <code>Bundle</code> object for the newly or previously installed
 bundle is returned.</para>
            </listitem>
         </orderedlist>
         <para>
            <emphasis role="strong">Postconditions, no exceptions thrown </emphasis>
         </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>getState()</code> in { <code>INSTALLED</code>, <code>RESOLVED</code>
 }.</para>
            </listitem>
            <listitem>
               <para>Bundle has a unique ID.</para>
            </listitem>
         </itemizedlist>
         <para>
            <emphasis role="strong">Postconditions, when an exception is thrown </emphasis>
         </para>
         <itemizedlist>
            <listitem>
               <para>Bundle is not installed. If there was an existing bundle for the
 specified location, then that bundle must still be in the state it was
 prior to calling this method.</para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The <code>Bundle</code> object of the installed bundle.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>BundleException</code>– If the installation failed. BundleException types
         thrown by this method include: <link linkend="org.osgi.framework.BundleException.READ_ERROR">BundleException.READ_ERROR</link>
         , <link linkend="org.osgi.framework.BundleException.DUPLICATE_BUNDLE_ERROR">BundleException.DUPLICATE_BUNDLE_ERROR</link>,
         <link linkend="org.osgi.framework.BundleException.MANIFEST_ERROR">BundleException.MANIFEST_ERROR</link>, and
         <link linkend="org.osgi.framework.BundleException.REJECTED_BY_HOOK">BundleException.REJECTED_BY_HOOK</link>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have the appropriate
         <code>AdminPermission[installed bundle,LIFECYCLE]</code>, and the Java
         Runtime Environment supports permissions.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this BundleContext is no longer valid.</para>
         </formalpara>
      </section>
      <section xreflabel="installBundle(String)" role="method" xml:id="org.osgi.framework.BundleContext.installBundle-String-">
         <title>public Bundle installBundle(String location) throws BundleException</title>
         <formalpara role="parameter">
            <title>location</title>
            <para>The location identifier of the bundle to install.</para>
         </formalpara>
         <para role="description">
Installs a bundle from the specified <code>location</code> identifier.

 </para>
         <para>
 This method performs the same function as calling
 <link linkend="org.osgi.framework.BundleContext.installBundle-String-InputStream-">installBundle(String,InputStream)</link> with the specified
 <code>location</code> identifier and a <code>null</code> InputStream.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The <code>Bundle</code> object of the installed bundle.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>BundleException</code>– If the installation failed. BundleException types
         thrown by this method include: <link linkend="org.osgi.framework.BundleException.READ_ERROR">BundleException.READ_ERROR</link>
         , <link linkend="org.osgi.framework.BundleException.DUPLICATE_BUNDLE_ERROR">BundleException.DUPLICATE_BUNDLE_ERROR</link>,
         <link linkend="org.osgi.framework.BundleException.MANIFEST_ERROR">BundleException.MANIFEST_ERROR</link>, and
         <link linkend="org.osgi.framework.BundleException.REJECTED_BY_HOOK">BundleException.REJECTED_BY_HOOK</link>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have the appropriate
         <code>AdminPermission[installed bundle,LIFECYCLE]</code>, and the Java
         Runtime Environment supports permissions.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this BundleContext is no longer valid.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.BundleContext.installBundle-String-InputStream-">installBundle(String, InputStream)</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="registerService(String[],Object,Dictionary)" role="method" xml:id="org.osgi.framework.BundleContext.registerService-String---Object-Dictionary-">
         <title>public ServiceRegistration&lt;?&gt; registerService(String[] clazzes, Object service, Dictionary&lt;String, ?&gt; properties)</title>
         <formalpara role="parameter">
            <title>clazzes</title>
            <para>The class names under which the service can be located.
        The class names in this array will be stored in the service's
        properties under the key <link linkend="org.osgi.framework.Constants.OBJECTCLASS">Constants.OBJECTCLASS</link>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>service</title>
            <para>The service object or an object implementing
        <code>ServiceFactory</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>properties</title>
            <para>The properties for this service. The keys in the
        properties object must all be <code>String</code> objects. See
        <link linkend="org.osgi.framework.Constants">Constants</link> for a list of standard service property keys.
        Changes should not be made to this object after calling this
        method. To update the service's properties the
        <link linkend="org.osgi.framework.ServiceRegistration.setProperties-Dictionary-">ServiceRegistration.setProperties(Dictionary)</link> method must
        be called. The set of properties may be <code>null</code> if the
        service has no properties.</para>
         </formalpara>
         <para role="description">
Registers the specified service object with the specified properties
 under the specified class names into the Framework. A
 <code>ServiceRegistration</code> object is returned. The
 <code>ServiceRegistration</code> object is for the private use of the bundle
 registering the service and should not be shared with other bundles. The
 registering bundle is defined to be the context bundle. Other bundles can
 locate the service by using one of the
 <link linkend="org.osgi.framework.BundleContext.getServiceReferences-Class-String-">getServiceReferences(Class, String)</link>,
 <link linkend="org.osgi.framework.BundleContext.getServiceReferences-String-String-">getServiceReferences(String, String)</link>,
 <link linkend="org.osgi.framework.BundleContext.getServiceReference-Class-">getServiceReference(Class)</link> or
 <link linkend="org.osgi.framework.BundleContext.getServiceReference-String-">getServiceReference(String)</link> methods.

 </para>
         <para>
 A bundle can register a service object that implements the
 <link linkend="org.osgi.framework.ServiceFactory">ServiceFactory</link> interface to have more flexibility in providing
 service objects to other bundles.

 </para>
         <para>
 The following steps are required to register a service:
 </para>
         <orderedlist>
            <listitem>
               <para>If <code>service</code> does not implement <code>ServiceFactory</code>, an
 <code>IllegalArgumentException</code> is thrown if <code>service</code> is not an
 <code>instanceof</code> all the specified class names.</para>
            </listitem>
            <listitem>
               <para>The Framework adds the following service properties to the service
 properties from the specified <code>Dictionary</code> (which may be
 <code>null</code>):
 </para>
               <itemizedlist>
                  <listitem>
                     <para>A property named <link linkend="org.osgi.framework.Constants.SERVICE_ID">Constants.SERVICE_ID</link> identifying the
 registration number of the service</para>
                  </listitem>
                  <listitem>
                     <para>A property named <link linkend="org.osgi.framework.Constants.OBJECTCLASS">Constants.OBJECTCLASS</link> containing all the
 specified classes.</para>
                  </listitem>
                  <listitem>
                     <para>A property named <link linkend="org.osgi.framework.Constants.SERVICE_SCOPE">Constants.SERVICE_SCOPE</link> identifying the
 scope of the service.</para>
                  </listitem>
                  <listitem>
                     <para>A property named <link linkend="org.osgi.framework.Constants.SERVICE_BUNDLEID">Constants.SERVICE_BUNDLEID</link> identifying the
 context bundle.</para>
                  </listitem>
               </itemizedlist>
               <para>
 Properties with these names in the specified <code>Dictionary</code> will be
 ignored.</para>
            </listitem>
            <listitem>
               <para>The service is added to the Framework service registry and may now be
 used by other bundles.</para>
            </listitem>
            <listitem>
               <para>A service event of type <link linkend="org.osgi.framework.ServiceEvent.REGISTERED">ServiceEvent.REGISTERED</link> is fired.</para>
            </listitem>
            <listitem>
               <para>A <code>ServiceRegistration</code> object for this registration is
 returned.</para>
            </listitem>
         </orderedlist>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A <code>ServiceRegistration</code> object for use by the bundle
         registering the service to update the service's properties or to
         unregister the service.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If one of the following is true:
         <itemizedlist>
                  <listitem>
                     <para>
                        <code>service</code> is <code>null</code>.</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>service</code> does
         not implement <code>ServiceFactory</code> and is not an instance of
         all the specified classes.</para>
                  </listitem>
                  <listitem>
                     <para>
                        <code>properties</code> contains
         case variants of the same key name.</para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have the
         <code>ServicePermission</code> to register the service for all the
         named classes and the Java Runtime Environment supports
         permissions.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this BundleContext is no longer valid.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.ServiceRegistration">ServiceRegistration</link>, <link linkend="org.osgi.framework.PrototypeServiceFactory">PrototypeServiceFactory</link>, <link linkend="org.osgi.framework.ServiceFactory">ServiceFactory</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="registerService(String,Object,Dictionary)" role="method" xml:id="org.osgi.framework.BundleContext.registerService-String-Object-Dictionary-">
         <title>public ServiceRegistration&lt;?&gt; registerService(String clazz, Object service, Dictionary&lt;String, ?&gt; properties)</title>
         <formalpara role="parameter">
            <title>clazz</title>
            <para>The class name under which the service can be located.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>service</title>
            <para>The service object or an object implementing
        <code>ServiceFactory</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>properties</title>
            <para>The properties for this service.</para>
         </formalpara>
         <para role="description">
Registers the specified service object with the specified properties
 under the specified class name with the Framework.

 </para>
         <para>
 This method is otherwise identical to
 <link linkend="org.osgi.framework.BundleContext.registerService-String---Object-Dictionary-">registerService(String[], Object, Dictionary)</link> and is provided as
 a convenience when <code>service</code> will only be registered under a single
 class name. Note that even in this case the value of the service's
 <link linkend="org.osgi.framework.Constants.OBJECTCLASS">Constants.OBJECTCLASS</link> property will be an array of string, rather
 than just a single string.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A <code>ServiceRegistration</code> object for use by the bundle
         registering the service to update the service's properties or to
         unregister the service.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this BundleContext is no longer valid.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.BundleContext.registerService-String---Object-Dictionary-">registerService(String[], Object, Dictionary)</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="registerService(Class,S,Dictionary)" role="method" xml:id="org.osgi.framework.BundleContext.registerService-Class-S-Dictionary-">
         <title>public ServiceRegistration&lt;S&gt; registerService(Class&lt;S&gt; clazz, S service, Dictionary&lt;String, ?&gt; properties)</title>
         <formalpara role="parameter">
            <title>Type Parameters</title>
            <para>
               <code>&lt;S&gt;</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>&lt;S&gt;</title>
            <para>Type of Service.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>clazz</title>
            <para>The class under whose name the service can be located.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>service</title>
            <para>The service object or an object implementing
        <code>ServiceFactory</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>properties</title>
            <para>The properties for this service.</para>
         </formalpara>
         <para role="description">
Registers the specified service object with the specified properties
 under the name of the specified class with the Framework.

 </para>
         <para>
 This method is otherwise identical to
 <link linkend="org.osgi.framework.BundleContext.registerService-String-Object-Dictionary-">registerService(String, Object, Dictionary)</link> and is provided to
 return a type safe <code>ServiceRegistration</code>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A <code>ServiceRegistration</code> object for use by the bundle
         registering the service to update the service's properties or to
         unregister the service.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this BundleContext is no longer valid.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.BundleContext.registerService-String-Object-Dictionary-">registerService(String, Object, Dictionary)</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.6</para>
         </formalpara>
      </section>
      <section xreflabel="registerService(Class,ServiceFactory,Dictionary)" role="method" xml:id="org.osgi.framework.BundleContext.registerService-Class-ServiceFactory-Dictionary-">
         <title>public ServiceRegistration&lt;S&gt; registerService(Class&lt;S&gt; clazz, ServiceFactory&lt;S&gt; factory, Dictionary&lt;String, ?&gt; properties)</title>
         <formalpara role="parameter">
            <title>Type Parameters</title>
            <para>
               <code>&lt;S&gt;</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>&lt;S&gt;</title>
            <para>Type of Service.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>clazz</title>
            <para>The class under whose name the service can be located.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>factory</title>
            <para>The <code>ServiceFactory</code> object.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>properties</title>
            <para>The properties for this service.</para>
         </formalpara>
         <para role="description">
Registers the specified service factory object with the specified
 properties under the name of the specified class with the Framework.

 </para>
         <para>
 This method is otherwise identical to
 <link linkend="org.osgi.framework.BundleContext.registerService-Class-S-Dictionary-">registerService(Class, Object, Dictionary)</link> and is provided to
 return a type safe <code>ServiceRegistration</code> when registering a
 <link linkend="org.osgi.framework.ServiceFactory">ServiceFactory</link>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A <code>ServiceRegistration</code> object for use by the bundle
         registering the service to update the service's properties or to
         unregister the service.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this BundleContext is no longer valid.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.BundleContext.registerService-Class-S-Dictionary-">registerService(Class, Object, Dictionary)</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.8</para>
         </formalpara>
      </section>
      <section xreflabel="removeBundleListener(BundleListener)" role="method" xml:id="org.osgi.framework.BundleContext.removeBundleListener-BundleListener-">
         <title>public void removeBundleListener(BundleListener listener)</title>
         <formalpara role="parameter">
            <title>listener</title>
            <para>The <code>BundleListener</code> object to be removed.</para>
         </formalpara>
         <para role="description">
Removes the specified <code>BundleListener</code> object from the context
 bundle's list of listeners.

 </para>
         <para>
 If <code>listener</code> is not contained in the context bundle's list of
 listeners, this method does nothing.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this BundleContext is no longer valid.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If listener is a
         <code>SynchronousBundleListener</code> and the caller does not have
         the appropriate <code>AdminPermission[context bundle,LISTENER]</code>,
         and the Java Runtime Environment supports permissions.</para>
         </formalpara>
      </section>
      <section xreflabel="removeFrameworkListener(FrameworkListener)" role="method" xml:id="org.osgi.framework.BundleContext.removeFrameworkListener-FrameworkListener-">
         <title>public void removeFrameworkListener(FrameworkListener listener)</title>
         <formalpara role="parameter">
            <title>listener</title>
            <para>The <code>FrameworkListener</code> object to be removed.</para>
         </formalpara>
         <para role="description">
Removes the specified <code>FrameworkListener</code> object from the context
 bundle's list of listeners.

 </para>
         <para>
 If <code>listener</code> is not contained in the context bundle's list of
 listeners, this method does nothing.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this BundleContext is no longer valid.</para>
         </formalpara>
      </section>
      <section xreflabel="removeServiceListener(ServiceListener)" role="method" xml:id="org.osgi.framework.BundleContext.removeServiceListener-ServiceListener-">
         <title>public void removeServiceListener(ServiceListener listener)</title>
         <formalpara role="parameter">
            <title>listener</title>
            <para>The <code>ServiceListener</code> to be removed.</para>
         </formalpara>
         <para role="description">
Removes the specified <code>ServiceListener</code> object from the context
 bundle's list of listeners.

 </para>
         <para>
 If <code>listener</code> is not contained in this context bundle's list of
 listeners, this method does nothing.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this BundleContext is no longer valid.</para>
         </formalpara>
      </section>
      <section xreflabel="ungetService(ServiceReference)" role="method" xml:id="org.osgi.framework.BundleContext.ungetService-ServiceReference-">
         <title>public boolean ungetService(ServiceReference&lt;?&gt; reference)</title>
         <formalpara role="parameter">
            <title>reference</title>
            <para>A reference to the service to be released.</para>
         </formalpara>
         <para role="description">
Releases the service object for the service referenced by the specified
 <code>ServiceReference</code> object. If the context bundle's use count for
 the service is zero, this method returns <code>false</code>. Otherwise, the
 context bundle's use count for the service is decremented by one.

 </para>
         <para>
 The service object must no longer be used and all references to it should
 be destroyed when a bundle's use count for the service drops to zero.

 </para>
         <para>
 The following steps are required to release the service object:
 </para>
         <orderedlist>
            <listitem>
               <para>If the context bundle's use count for the service is zero or the
 service has been unregistered, <code>false</code> is returned.</para>
            </listitem>
            <listitem>
               <para>The context bundle's use count for the service is decremented by one.
 </para>
            </listitem>
            <listitem>
               <para>If the context bundle's use count for the service is now zero and the
 service has <link linkend="org.osgi.framework.Constants.SCOPE_BUNDLE">bundle</link> or
 <link linkend="org.osgi.framework.Constants.SCOPE_PROTOTYPE">prototype</link> scope, the
 <link linkend="org.osgi.framework.ServiceFactory.ungetService-Bundle-ServiceRegistration-S-">ServiceFactory.ungetService(Bundle, ServiceRegistration, Object)</link>
 method is called to release the service object for the context bundle.</para>
            </listitem>
            <listitem>
               <para>
                  <code>true</code> is returned.</para>
            </listitem>
         </orderedlist>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>false</code> if the context bundle's use count for the service
         is zero or if the service has been unregistered; <code>true</code>
         otherwise.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this BundleContext is no longer valid.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the specified
         <code>ServiceReference</code> was not created by the same framework
         instance as this <code>BundleContext</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.BundleContext.getService-ServiceReference-">getService(ServiceReference)</link>, <link linkend="org.osgi.framework.ServiceFactory">ServiceFactory</link>
            </para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="BundleEvent" role="class" xml:id="org.osgi.framework.BundleEvent">
      <title>public class BundleEvent<?line-break?> extends EventObject</title>
      <para>
An event from the Framework describing a bundle lifecycle change.
 </para>
      <para>
         <code>BundleEvent</code> objects are delivered to
 <code>SynchronousBundleListener</code>s and <code>BundleListener</code>s when a change
 occurs in a bundle's lifecycle. A type code is used to identify the event
 type for future extendability.

 </para>
      <para>
 OSGi Working Group reserves the right to extend the set of types.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.framework.BundleListener">BundleListener</link>, <link linkend="org.osgi.framework.SynchronousBundleListener">SynchronousBundleListener</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section xreflabel="INSTALLED" role="field" xml:id="org.osgi.framework.BundleEvent.INSTALLED">
         <title>public static final int INSTALLED = 1</title>
         <para>
The bundle has been installed.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.BundleContext.installBundle-String-">BundleContext.installBundle(String)</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="LAZY_ACTIVATION" role="field" xml:id="org.osgi.framework.BundleEvent.LAZY_ACTIVATION">
         <title>public static final int LAZY_ACTIVATION = 512</title>
         <para>
The bundle will be lazily activated.
 </para>
         <para>
 The bundle has a <link linkend="org.osgi.framework.Constants.ACTIVATION_LAZY">lazy activation policy</link>
 and is waiting to be activated. It is now in the <link linkend="org.osgi.framework.Bundle.STARTING">STARTING</link> state and has a valid <code>BundleContext</code>. This event is only
 delivered to <link linkend="org.osgi.framework.SynchronousBundleListener">SynchronousBundleListener</link>s. It is not delivered to
 <code>BundleListener</code>s.</para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.4</para>
         </formalpara>
      </section>
      <section xreflabel="RESOLVED" role="field" xml:id="org.osgi.framework.BundleEvent.RESOLVED">
         <title>public static final int RESOLVED = 32</title>
         <para>
The bundle has been resolved.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Bundle.RESOLVED">Bundle.RESOLVED</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="STARTED" role="field" xml:id="org.osgi.framework.BundleEvent.STARTED">
         <title>public static final int STARTED = 2</title>
         <para>
The bundle has been started.
 </para>
         <para>
 The bundle's <link linkend="org.osgi.framework.BundleActivator.start-BundleContext-">BundleActivator
 start</link> method has been executed if the bundle has a bundle activator
 class.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Bundle.start--">Bundle.start()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="STARTING" role="field" xml:id="org.osgi.framework.BundleEvent.STARTING">
         <title>public static final int STARTING = 128</title>
         <para>
The bundle is about to be activated.
 </para>
         <para>
 The bundle's <link linkend="org.osgi.framework.BundleActivator.start-BundleContext-">BundleActivator
 start</link> method is about to be called if the bundle has a bundle activator
 class. This event is only delivered to <link linkend="org.osgi.framework.SynchronousBundleListener">SynchronousBundleListener</link>
 s. It is not delivered to <code>BundleListener</code>s.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Bundle.start--">Bundle.start()</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="STOPPED" role="field" xml:id="org.osgi.framework.BundleEvent.STOPPED">
         <title>public static final int STOPPED = 4</title>
         <para>
The bundle has been stopped.
 </para>
         <para>
 The bundle's <link linkend="org.osgi.framework.BundleActivator.stop-BundleContext-">BundleActivator
 stop</link> method has been executed if the bundle has a bundle activator
 class.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Bundle.stop--">Bundle.stop()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="STOPPING" role="field" xml:id="org.osgi.framework.BundleEvent.STOPPING">
         <title>public static final int STOPPING = 256</title>
         <para>
The bundle is about to deactivated.
 </para>
         <para>
 The bundle's <link linkend="org.osgi.framework.BundleActivator.stop-BundleContext-">BundleActivator
 stop</link> method is about to be called if the bundle has a bundle activator
 class. This event is only delivered to <link linkend="org.osgi.framework.SynchronousBundleListener">SynchronousBundleListener</link>
 s. It is not delivered to <code>BundleListener</code>s.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Bundle.stop--">Bundle.stop()</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="UNINSTALLED" role="field" xml:id="org.osgi.framework.BundleEvent.UNINSTALLED">
         <title>public static final int UNINSTALLED = 16</title>
         <para>
The bundle has been uninstalled.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Bundle.uninstall--">Bundle.uninstall()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="UNRESOLVED" role="field" xml:id="org.osgi.framework.BundleEvent.UNRESOLVED">
         <title>public static final int UNRESOLVED = 64</title>
         <para>
The bundle has been unresolved.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Bundle.INSTALLED">Bundle.INSTALLED</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="UPDATED" role="field" xml:id="org.osgi.framework.BundleEvent.UPDATED">
         <title>public static final int UPDATED = 8</title>
         <para>
The bundle has been updated.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Bundle.update--">Bundle.update()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="BundleEvent(int,Bundle,Bundle)" role="method" xml:id="org.osgi.framework.BundleEvent.BundleEvent-int-Bundle-Bundle-">
         <title>public  BundleEvent(int type, Bundle bundle, Bundle origin)</title>
         <formalpara role="parameter">
            <title>type</title>
            <para>The event type.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>bundle</title>
            <para>The bundle which had a lifecycle change.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>origin</title>
            <para>The bundle which is the origin of the event. For the event
        type <link linkend="org.osgi.framework.BundleEvent.INSTALLED">INSTALLED</link>, this is the bundle whose context was used
        to install the bundle. Otherwise it is the bundle itself.</para>
         </formalpara>
         <para role="description">
Creates a bundle event of the specified type.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.6</para>
         </formalpara>
      </section>
      <section xreflabel="BundleEvent(int,Bundle)" role="method" xml:id="org.osgi.framework.BundleEvent.BundleEvent-int-Bundle-">
         <title>public  BundleEvent(int type, Bundle bundle)</title>
         <formalpara role="parameter">
            <title>type</title>
            <para>The event type.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>bundle</title>
            <para>The bundle which had a lifecycle change. This bundle is
        used as the origin of the event.</para>
         </formalpara>
         <para role="description">
Creates a bundle event of the specified type.
   </para>
      </section>
      <section xreflabel="getBundle()" role="method" xml:id="org.osgi.framework.BundleEvent.getBundle--">
         <title>public Bundle getBundle()</title>
         <para role="description">
Returns the bundle which had a lifecycle change. This bundle is the
 source of the event.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The bundle that had a change occur in its lifecycle.</para>
         </formalpara>
      </section>
      <section xreflabel="getOrigin()" role="method" xml:id="org.osgi.framework.BundleEvent.getOrigin--">
         <title>public Bundle getOrigin()</title>
         <para role="description">
Returns the bundle that was the origin of the event.

 </para>
         <para>
 For the event type <link linkend="org.osgi.framework.BundleEvent.INSTALLED">INSTALLED</link>, this is the bundle whose context
 was used to install the bundle. Otherwise it is the bundle itself.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The bundle that was the origin of the event.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.6</para>
         </formalpara>
      </section>
      <section xreflabel="getType()" role="method" xml:id="org.osgi.framework.BundleEvent.getType--">
         <title>public int getType()</title>
         <para role="description">
Returns the type of lifecyle event. The type values are:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.framework.BundleEvent.INSTALLED">INSTALLED</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.framework.BundleEvent.RESOLVED">RESOLVED</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.framework.BundleEvent.LAZY_ACTIVATION">LAZY_ACTIVATION</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.framework.BundleEvent.STARTING">STARTING</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.framework.BundleEvent.STARTED">STARTED</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.framework.BundleEvent.STOPPING">STOPPING</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.framework.BundleEvent.STOPPED">STOPPED</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.framework.BundleEvent.UPDATED">UPDATED</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.framework.BundleEvent.UNRESOLVED">UNRESOLVED</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.framework.BundleEvent.UNINSTALLED">UNINSTALLED</link>
               </para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The type of lifecycle event.</para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="BundleException" role="class" xml:id="org.osgi.framework.BundleException">
      <title>public class BundleException<?line-break?> extends Exception</title>
      <para>
A Framework exception used to indicate that a bundle lifecycle problem
 occurred.

 </para>
      <para>
 A <code>BundleException</code> object is created by the Framework to denote an
 exception condition in the lifecycle of a bundle. <code>BundleException</code>s
 should not be created by bundle developers. A type code is used to identify
 the exception type for future extendability.

 </para>
      <para>
 OSGi Working Group reserves the right to extend the set of types.

 </para>
      <para>
 This exception conforms to the general purpose exception chaining mechanism.</para>
      <section xreflabel="ACTIVATOR_ERROR" role="field" xml:id="org.osgi.framework.BundleException.ACTIVATOR_ERROR">
         <title>public static final int ACTIVATOR_ERROR = 5</title>
         <para>
The bundle activator was in error.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="DUPLICATE_BUNDLE_ERROR" role="field" xml:id="org.osgi.framework.BundleException.DUPLICATE_BUNDLE_ERROR">
         <title>public static final int DUPLICATE_BUNDLE_ERROR = 9</title>
         <para>
The install or update operation failed because another already installed
 bundle has the same symbolic name and version. This exception type will
 only occur if the framework is configured to only allow a single bundle
 to be installed for a given symbolic name and version.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.FRAMEWORK_BSNVERSION">Constants.FRAMEWORK_BSNVERSION</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="INVALID_OPERATION" role="field" xml:id="org.osgi.framework.BundleException.INVALID_OPERATION">
         <title>public static final int INVALID_OPERATION = 2</title>
         <para>
The operation was invalid.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="MANIFEST_ERROR" role="field" xml:id="org.osgi.framework.BundleException.MANIFEST_ERROR">
         <title>public static final int MANIFEST_ERROR = 3</title>
         <para>
The bundle manifest was in error.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="NATIVECODE_ERROR" role="field" xml:id="org.osgi.framework.BundleException.NATIVECODE_ERROR">
         <title>public static final int NATIVECODE_ERROR = 8</title>
         <para>
The bundle could not be resolved due to an error with the
 Bundle-NativeCode header.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="READ_ERROR" role="field" xml:id="org.osgi.framework.BundleException.READ_ERROR">
         <title>public static final int READ_ERROR = 11</title>
         <para>
The framework received an error while reading the input stream for a
 bundle.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.6</para>
         </formalpara>
      </section>
      <section xreflabel="REJECTED_BY_HOOK" role="field" xml:id="org.osgi.framework.BundleException.REJECTED_BY_HOOK">
         <title>public static final int REJECTED_BY_HOOK = 12</title>
         <para>
A framework hook rejected the operation.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.6</para>
         </formalpara>
      </section>
      <section xreflabel="RESOLVE_ERROR" role="field" xml:id="org.osgi.framework.BundleException.RESOLVE_ERROR">
         <title>public static final int RESOLVE_ERROR = 4</title>
         <para>
The bundle was not resolved.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="SECURITY_ERROR" role="field" xml:id="org.osgi.framework.BundleException.SECURITY_ERROR">
         <title>public static final int SECURITY_ERROR = 6</title>
         <para>
The operation failed due to insufficient permissions.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="START_TRANSIENT_ERROR" role="field" xml:id="org.osgi.framework.BundleException.START_TRANSIENT_ERROR">
         <title>public static final int START_TRANSIENT_ERROR = 10</title>
         <para>
The start transient operation failed because the start level of the
 bundle is greater than the current framework start level
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="STATECHANGE_ERROR" role="field" xml:id="org.osgi.framework.BundleException.STATECHANGE_ERROR">
         <title>public static final int STATECHANGE_ERROR = 7</title>
         <para>
The operation failed to complete the requested lifecycle state change.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="UNSPECIFIED" role="field" xml:id="org.osgi.framework.BundleException.UNSPECIFIED">
         <title>public static final int UNSPECIFIED = 0</title>
         <para>
No exception type is specified.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="UNSUPPORTED_OPERATION" role="field" xml:id="org.osgi.framework.BundleException.UNSUPPORTED_OPERATION">
         <title>public static final int UNSUPPORTED_OPERATION = 1</title>
         <para>
The operation was unsupported. This type can be used anywhere a
 BundleException can be thrown.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="BundleException(String,Throwable)" role="method" xml:id="org.osgi.framework.BundleException.BundleException-String-Throwable-">
         <title>public  BundleException(String msg, Throwable cause)</title>
         <formalpara role="parameter">
            <title>msg</title>
            <para>The associated message.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>cause</title>
            <para>The cause of this exception.</para>
         </formalpara>
         <para role="description">
Creates a <code>BundleException</code> with the specified message and
 exception cause.
   </para>
      </section>
      <section xreflabel="BundleException(String)" role="method" xml:id="org.osgi.framework.BundleException.BundleException-String-">
         <title>public  BundleException(String msg)</title>
         <formalpara role="parameter">
            <title>msg</title>
            <para>The message.</para>
         </formalpara>
         <para role="description">
Creates a <code>BundleException</code> with the specified message.
   </para>
      </section>
      <section xreflabel="BundleException(String,int,Throwable)" role="method" xml:id="org.osgi.framework.BundleException.BundleException-String-int-Throwable-">
         <title>public  BundleException(String msg, int type, Throwable cause)</title>
         <formalpara role="parameter">
            <title>msg</title>
            <para>The associated message.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>type</title>
            <para>The type for this exception.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>cause</title>
            <para>The cause of this exception.</para>
         </formalpara>
         <para role="description">
Creates a <code>BundleException</code> with the specified message, type and
 exception cause.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="BundleException(String,int)" role="method" xml:id="org.osgi.framework.BundleException.BundleException-String-int-">
         <title>public  BundleException(String msg, int type)</title>
         <formalpara role="parameter">
            <title>msg</title>
            <para>The message.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>type</title>
            <para>The type for this exception.</para>
         </formalpara>
         <para role="description">
Creates a <code>BundleException</code> with the specified message and type.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="getCause()" role="method" xml:id="org.osgi.framework.BundleException.getCause--">
         <title>public Throwable getCause()</title>
         <para role="description">
Returns the cause of this exception or <code>null</code> if no cause was set.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The cause of this exception or <code>null</code> if no cause was set.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getNestedException()" role="method" xml:id="org.osgi.framework.BundleException.getNestedException--">
         <title>public Throwable getNestedException()</title>
         <para role="description">
Returns the cause of this exception or <code>null</code> if no cause was
 specified when this exception was created.

 </para>
         <para>
 This method predates the general purpose exception chaining mechanism.
 The <code>getCause()</code> method is now the preferred means of obtaining
 this information.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The result of calling <code>getCause()</code>.</para>
         </formalpara>
      </section>
      <section xreflabel="getType()" role="method" xml:id="org.osgi.framework.BundleException.getType--">
         <title>public int getType()</title>
         <para role="description">
Returns the type for this exception or <code>UNSPECIFIED</code> if the type
 was unspecified or unknown.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The type of this exception.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="initCause(Throwable)" role="method" xml:id="org.osgi.framework.BundleException.initCause-Throwable-">
         <title>public Throwable initCause(Throwable cause)</title>
         <formalpara role="parameter">
            <title>cause</title>
            <para>The cause of this exception.</para>
         </formalpara>
         <para role="description">
Initializes the cause of this exception to the specified value.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>This exception.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the specified cause is this
         exception.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If the cause of this exception has already
         been set.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
         <para/>
      </section>
   </section>
   <section xreflabel="BundleListener" role="class" xml:id="org.osgi.framework.BundleListener">
      <title>public interface BundleListener<?line-break?> extends EventListener</title>
      <para>
A <code>BundleEvent</code> listener. <code>BundleListener</code> is a listener
 interface that may be implemented by a bundle developer. When a
 <code>BundleEvent</code> is fired, it is asynchronously delivered to a
 <code>BundleListener</code>. The Framework delivers <code>BundleEvent</code> objects to
 a <code>BundleListener</code> in order and must not concurrently call a
 <code>BundleListener</code>.
 </para>
      <para>
 A <code>BundleListener</code> object is registered with the Framework using the
 <link linkend="org.osgi.framework.BundleContext.addBundleListener-BundleListener-">BundleContext.addBundleListener(BundleListener)</link> method.
 <code>BundleListener</code>s are called with a <code>BundleEvent</code> object when a
 bundle has been installed, resolved, started, stopped, updated, unresolved,
 or uninstalled.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.framework.BundleEvent">BundleEvent</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <section xreflabel="bundleChanged(BundleEvent)" role="method" xml:id="org.osgi.framework.BundleListener.bundleChanged-BundleEvent-">
         <title>public void bundleChanged(BundleEvent event)</title>
         <formalpara role="parameter">
            <title>event</title>
            <para>The <code>BundleEvent</code>.</para>
         </formalpara>
         <para role="description">
Receives notification that a bundle has had a lifecycle change.
   </para>
      </section>
   </section>
   <section xreflabel="BundlePermission" role="class" xml:id="org.osgi.framework.BundlePermission">
      <title>public final class BundlePermission<?line-break?> extends BasicPermission</title>
      <para>
A bundle's authority to require or provide a bundle or to receive or attach
 fragments.

 </para>
      <para>
 A bundle symbolic name defines a unique fully qualified name. Wildcards may
 be used.

 </para>
      <programlisting> name ::= &lt;symbolic name&gt; | &lt;symbolic name ending in ".*"&gt; | *</programlisting>
      <para>

 Examples:

 </para>
      <programlisting> org.osgi.example.bundle
 org.osgi.example.*
 *</programlisting>
      <para>
         <code>BundlePermission</code> has four actions: <code>provide</code>, <code>require</code>,
 <code>host</code>, and <code>fragment</code>. The <code>provide</code> action implies the
 <code>require</code> action.</para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.3</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section xreflabel="FRAGMENT" role="field" xml:id="org.osgi.framework.BundlePermission.FRAGMENT">
         <title>public static final String FRAGMENT = "fragment"</title>
         <para>
The action string <code>fragment</code>.
   </para>
      </section>
      <section xreflabel="HOST" role="field" xml:id="org.osgi.framework.BundlePermission.HOST">
         <title>public static final String HOST = "host"</title>
         <para>
The action string <code>host</code>.
   </para>
      </section>
      <section xreflabel="PROVIDE" role="field" xml:id="org.osgi.framework.BundlePermission.PROVIDE">
         <title>public static final String PROVIDE = "provide"</title>
         <para>
The action string <code>provide</code>. The <code>provide</code> action implies the
 <code>require</code> action.
   </para>
      </section>
      <section xreflabel="REQUIRE" role="field" xml:id="org.osgi.framework.BundlePermission.REQUIRE">
         <title>public static final String REQUIRE = "require"</title>
         <para>
The action string <code>require</code>. The <code>require</code> action is implied
 by the <code>provide</code> action.
   </para>
      </section>
      <section xreflabel="BundlePermission(String,String)" role="method" xml:id="org.osgi.framework.BundlePermission.BundlePermission-String-String-">
         <title>public  BundlePermission(String symbolicName, String actions)</title>
         <formalpara role="parameter">
            <title>symbolicName</title>
            <para>The bundle symbolic name.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>actions</title>
            <para>
               <code>provide</code>,<code>require</code>, <code>host</code>,
        <code>fragment</code> (canonical order).</para>
         </formalpara>
         <para role="description">
Defines the authority to provide and/or require and or specify a host
 fragment symbolic name within the OSGi environment.
 </para>
         <para>
 Bundle Permissions are granted over all possible versions of a bundle.

 A bundle that needs to provide a bundle must have the appropriate
 <code>BundlePermission</code> for the symbolic name; a bundle that requires a
 bundle must have the appropriate <code>BundlePermssion</code> for that
 symbolic name; a bundle that specifies a fragment host must have the
 appropriate <code>BundlePermission</code> for that symbolic name.</para>
      </section>
      <section xreflabel="equals(Object)" role="method" xml:id="org.osgi.framework.BundlePermission.equals-Object-">
         <title>public boolean equals(Object obj)</title>
         <formalpara role="parameter">
            <title>obj</title>
            <para>The object to test for equality with this
        <code>BundlePermission</code> object.</para>
         </formalpara>
         <para role="description">
Determines the equality of two <code>BundlePermission</code> objects.

 This method checks that specified bundle has the same bundle symbolic
 name and <code>BundlePermission</code> actions as this
 <code>BundlePermission</code> object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if <code>obj</code> is a <code>BundlePermission</code>, and
         has the same bundle symbolic name and actions as this
         <code>BundlePermission</code> object; <code>false</code> otherwise.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getActions()" role="method" xml:id="org.osgi.framework.BundlePermission.getActions--">
         <title>public String getActions()</title>
         <para role="description">
Returns the canonical string representation of the
 <code>BundlePermission</code> actions.

 </para>
         <para>
 Always returns present <code>BundlePermission</code> actions in the following
 order: <code>provide</code>, <code>require</code>, <code>host</code>, <code>fragment</code>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Canonical string representation of the <code>BundlePermission</code> actions.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="hashCode()" role="method" xml:id="org.osgi.framework.BundlePermission.hashCode--">
         <title>public int hashCode()</title>
         <para role="description">
Returns the hash code value for this object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A hash code value for this object.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="implies(Permission)" role="method" xml:id="org.osgi.framework.BundlePermission.implies-Permission-">
         <title>public boolean implies(Permission p)</title>
         <formalpara role="parameter">
            <title>p</title>
            <para>The requested permission.</para>
         </formalpara>
         <para role="description">
Determines if the specified permission is implied by this object.

 </para>
         <para>
 This method checks that the symbolic name of the target is implied by the
 symbolic name of this object. The list of <code>BundlePermission</code>
 actions must either match or allow for the list of the target object to
 imply the target <code>BundlePermission</code> action.
 </para>
         <para>
 The permission to provide a bundle implies the permission to require the
 named symbolic name.

 </para>
         <programlisting>       x.y.*,"provide" -&gt; x.y.z,"provide" is true
       *,"require" -&gt; x.y, "require"      is true
       *,"provide" -&gt; x.y, "require"      is true
       x.y,"provide" -&gt; x.y.z, "provide"  is false</programlisting>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the specified <code>BundlePermission</code> action is
         implied by this object; <code>false</code> otherwise.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="newPermissionCollection()" role="method" xml:id="org.osgi.framework.BundlePermission.newPermissionCollection--">
         <title>public PermissionCollection newPermissionCollection()</title>
         <para role="description">
Returns a new <code>PermissionCollection</code> object suitable for storing
 <code>BundlePermission</code> objects.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A new <code>PermissionCollection</code> object.</para>
         </formalpara>
         <para/>
      </section>
   </section>
   <section xreflabel="BundleReference" role="class" xml:id="org.osgi.framework.BundleReference">
      <title>public interface BundleReference</title>
      <para>
A reference to a Bundle.
   </para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.5</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section xreflabel="getBundle()" role="method" xml:id="org.osgi.framework.BundleReference.getBundle--">
         <title>public Bundle getBundle()</title>
         <para role="description">
Returns the <code>Bundle</code> object associated with this
 <code>BundleReference</code>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The <code>Bundle</code> object associated with this
         <code>BundleReference</code>.</para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="CapabilityPermission" role="class" xml:id="org.osgi.framework.CapabilityPermission">
      <title>public final class CapabilityPermission<?line-break?> extends BasicPermission</title>
      <para>
A bundle's authority to provide or require a capability.
 </para>
      <itemizedlist>
         <listitem>
            <para>The <code>provide</code> action allows a bundle to provide a capability
 matching the specified filter.</para>
         </listitem>
         <listitem>
            <para>The <code>require</code> action allows a bundle to require a capability
 matching the specified filter.</para>
         </listitem>
      </itemizedlist>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.6</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section xreflabel="PROVIDE" role="field" xml:id="org.osgi.framework.CapabilityPermission.PROVIDE">
         <title>public static final String PROVIDE = "provide"</title>
         <para>
The action string <code>provide</code>.
   </para>
      </section>
      <section xreflabel="REQUIRE" role="field" xml:id="org.osgi.framework.CapabilityPermission.REQUIRE">
         <title>public static final String REQUIRE = "require"</title>
         <para>
The action string <code>require</code>.
   </para>
      </section>
      <section xreflabel="CapabilityPermission(String,String)" role="method" xml:id="org.osgi.framework.CapabilityPermission.CapabilityPermission-String-String-">
         <title>public  CapabilityPermission(String name, String actions)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The capability namespace or a filter over the attributes.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>actions</title>
            <para>
               <code>require</code>,<code>provide</code> (canonical order)</para>
         </formalpara>
         <para role="description">
Create a new CapabilityPermission.

 </para>
         <para>
 The name is specified as a dot-separated string. Wildcards may be used.

 </para>
         <programlisting> name ::= &lt;namespace&gt; | &lt;namespace ending in ".*"&gt; | *</programlisting>
         <para>

 Examples:

 </para>
         <programlisting> com.acme.capability.*
 org.foo.capability
 *</programlisting>
         <para>

 For the <code>require</code> action, the name can also be a filter expression.
 The filter gives access to the capability attributes as well as the
 following attributes:
 </para>
         <itemizedlist>
            <listitem>
               <para>signer - A Distinguished Name chain used to sign the bundle providing
 the capability. Wildcards in a DN are not matched according to the filter
 string rules, but according to the rules defined for a DN chain.</para>
            </listitem>
            <listitem>
               <para>location - The location of the bundle providing the capability.</para>
            </listitem>
            <listitem>
               <para>id - The bundle ID of the bundle providing the capability.</para>
            </listitem>
            <listitem>
               <para>name - The symbolic name of the bundle providing the capability.</para>
            </listitem>
            <listitem>
               <para>capability.namespace - The namespace of the required capability.</para>
            </listitem>
         </itemizedlist>
         <para>
 Since the above attribute names may conflict with attribute names of a
 capability, you can prefix an attribute name with '@' in the filter
 expression to match against the capability attributes and not one of the
 above attributes. Filter attribute names are processed in a case
 sensitive manner.

 </para>
         <para>
 There are two possible actions: <code>require</code> and <code>provide</code>. The
 <code>require</code> permission allows the owner of this permission to require
 a capability matching the attributes. The <code>provide</code> permission
 allows the bundle to provide a capability in the specified capability
 namespace.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the specified name is a filter
         expression and either the specified action is not <code>require</code>
         or the filter has an invalid syntax.</para>
         </formalpara>
      </section>
      <section xreflabel="CapabilityPermission(String,Map,Bundle,String)" role="method" xml:id="org.osgi.framework.CapabilityPermission.CapabilityPermission-String-Map-Bundle-String-">
         <title>public  CapabilityPermission(String namespace, Map&lt;String, ?&gt; attributes, Bundle providingBundle, String actions)</title>
         <formalpara role="parameter">
            <title>namespace</title>
            <para>The requested capability namespace.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>attributes</title>
            <para>The requested capability attributes.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>providingBundle</title>
            <para>The bundle providing the requested capability.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>actions</title>
            <para>The action <code>require</code>.</para>
         </formalpara>
         <para role="description">
Creates a new requested <code>CapabilityPermission</code> object to be used by
 code that must perform <code>checkPermission</code> for the <code>require</code>
 action. <code>CapabilityPermission</code> objects created with this
 constructor cannot be added to a <code>CapabilityPermission</code> permission
 collection.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the specified action is not
         <code>require</code> or attributes or providingBundle are <code>null</code>
         .</para>
         </formalpara>
      </section>
      <section xreflabel="equals(Object)" role="method" xml:id="org.osgi.framework.CapabilityPermission.equals-Object-">
         <title>public boolean equals(Object obj)</title>
         <formalpara role="parameter">
            <title>obj</title>
            <para>The object to test for equality.</para>
         </formalpara>
         <para role="description">
Determines the equality of two CapabilityPermission objects.

 Checks that specified object has the same name and action as this
 <code>CapabilityPermission</code>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>true if obj is a <code>CapabilityPermission</code>, and has the same
         name and actions as this <code>CapabilityPermission</code> object;
         <code>false</code> otherwise.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getActions()" role="method" xml:id="org.osgi.framework.CapabilityPermission.getActions--">
         <title>public String getActions()</title>
         <para role="description">
Returns the canonical string representation of the actions. Always
 returns present actions in the following order: <code>require</code>,
 <code>provide</code>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The canonical string representation of the actions.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="hashCode()" role="method" xml:id="org.osgi.framework.CapabilityPermission.hashCode--">
         <title>public int hashCode()</title>
         <para role="description">
Returns the hash code value for this object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Hash code value for this object.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="implies(Permission)" role="method" xml:id="org.osgi.framework.CapabilityPermission.implies-Permission-">
         <title>public boolean implies(Permission p)</title>
         <formalpara role="parameter">
            <title>p</title>
            <para>The target permission to check.</para>
         </formalpara>
         <para role="description">
Determines if a <code>CapabilityPermission</code> object "implies" the
 specified permission.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the specified permission is implied by this
         object; <code>false</code> otherwise.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="newPermissionCollection()" role="method" xml:id="org.osgi.framework.CapabilityPermission.newPermissionCollection--">
         <title>public PermissionCollection newPermissionCollection()</title>
         <para role="description">
Returns a new <code>PermissionCollection</code> object for storing
 <code>CapabilityPermission</code> objects.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A new <code>PermissionCollection</code> object suitable for storing
         <code>CapabilityPermission</code> objects.</para>
         </formalpara>
         <para/>
      </section>
   </section>
   <section xreflabel="Configurable" role="class" xml:id="org.osgi.framework.Configurable">
      <title>public interface Configurable</title>
      <para>
Supports a configuration object.

 </para>
      <para>
         <code>Configurable</code> is an interface that should be used by a bundle
 developer in support of a configurable service. Bundles that need to
 configure a service may test to determine if the service object is an
 <code>instanceof Configurable</code>.</para>
      <formalpara role="parameter">
         <title>Deprecated</title>
         <para>As of 1.2. Please use Configuration Admin service.</para>
      </formalpara>
      <section xreflabel="getConfigurationObject()" role="method" xml:id="org.osgi.framework.Configurable.getConfigurationObject--">
         <title>public Object getConfigurationObject()</title>
         <para role="description">
Returns this service's configuration object.

 </para>
         <para>
 Services implementing <code>Configurable</code> should take care when
 returning a service configuration object since this object is probably
 sensitive.
 </para>
         <para>
 If the Java Runtime Environment supports permissions, it is recommended
 that the caller is checked for some appropriate permission before
 returning the configuration object.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The configuration object for this service.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have an appropriate
         permission and the Java Runtime Environment supports permissions.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Deprecated</title>
            <para>As of 1.2. Please use Configuration Admin service.</para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="Constants" role="class" xml:id="org.osgi.framework.Constants">
      <title>public interface Constants</title>
      <para>
Defines standard names for the OSGi environment system properties, service
 properties, and Manifest header attribute keys.

 </para>
      <para>
 The values associated with these keys are of type <code>String</code>, unless
 otherwise indicated.</para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.1</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section xreflabel="ACTIVATION_LAZY" role="field" xml:id="org.osgi.framework.Constants.ACTIVATION_LAZY">
         <title>public static final String ACTIVATION_LAZY = "lazy"</title>
         <para>
Bundle activation policy declaring the bundle must be activated when the
 first class load is made from the bundle.
 </para>
         <para>
 A bundle with the lazy activation policy that is started with the
 <link linkend="org.osgi.framework.Bundle.START_ACTIVATION_POLICY">START_ACTIVATION_POLICY</link> option
 will wait in the <link linkend="org.osgi.framework.Bundle.STARTING">STARTING</link> state until the first
 class load from the bundle occurs. The bundle will then be activated
 before the class is returned to the requester.
 </para>
         <para>
 The activation policy value is specified as in the
 Bundle-ActivationPolicy manifest header like:

 </para>
         <programlisting>       Bundle-ActivationPolicy: lazy</programlisting>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.BUNDLE_ACTIVATIONPOLICY">BUNDLE_ACTIVATIONPOLICY</link>, <link linkend="org.osgi.framework.Bundle.start-int-">Bundle.start(int)</link>, <link linkend="org.osgi.framework.Bundle.START_ACTIVATION_POLICY">Bundle.START_ACTIVATION_POLICY</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.4</para>
         </formalpara>
      </section>
      <section xreflabel="BUNDLE_ACTIVATIONPOLICY" role="field" xml:id="org.osgi.framework.Constants.BUNDLE_ACTIVATIONPOLICY">
         <title>public static final String BUNDLE_ACTIVATIONPOLICY = "Bundle-ActivationPolicy"</title>
         <para>
Manifest header identifying the bundle's activation policy.
 </para>
         <para>
 The header value may be retrieved from the <code>Dictionary</code> object
 returned by the <code>Bundle.getHeaders</code> method.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.ACTIVATION_LAZY">ACTIVATION_LAZY</link>, <link linkend="org.osgi.framework.Constants.INCLUDE_DIRECTIVE">INCLUDE_DIRECTIVE</link>, <link linkend="org.osgi.framework.Constants.EXCLUDE_DIRECTIVE">EXCLUDE_DIRECTIVE</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.4</para>
         </formalpara>
      </section>
      <section xreflabel="BUNDLE_ACTIVATOR" role="field" xml:id="org.osgi.framework.Constants.BUNDLE_ACTIVATOR">
         <title>public static final String BUNDLE_ACTIVATOR = "Bundle-Activator"</title>
         <para>
Manifest header identifying the bundle's activator class.

 </para>
         <para>
 If present, this header specifies the name of the bundle resource class
 that implements the <code>BundleActivator</code> interface and whose
 <code>start</code> and <code>stop</code> methods are called by the Framework when
 the bundle is started and stopped, respectively.

 </para>
         <para>
 The header value may be retrieved from the <code>Dictionary</code> object
 returned by the <code>Bundle.getHeaders</code> method.</para>
      </section>
      <section xreflabel="BUNDLE_CATEGORY" role="field" xml:id="org.osgi.framework.Constants.BUNDLE_CATEGORY">
         <title>public static final String BUNDLE_CATEGORY = "Bundle-Category"</title>
         <para>
Manifest header identifying the bundle's category.
 </para>
         <para>
 The header value may be retrieved from the <code>Dictionary</code> object
 returned by the <code>Bundle.getHeaders</code> method.</para>
      </section>
      <section xreflabel="BUNDLE_CLASSPATH" role="field" xml:id="org.osgi.framework.Constants.BUNDLE_CLASSPATH">
         <title>public static final String BUNDLE_CLASSPATH = "Bundle-ClassPath"</title>
         <para>
Manifest header identifying a list of directories and embedded JAR files,
 which are bundle resources used to extend the bundle's classpath.

 </para>
         <para>
 The header value may be retrieved from the <code>Dictionary</code> object
 returned by the <code>Bundle.getHeaders</code> method.</para>
      </section>
      <section xreflabel="BUNDLE_CONTACTADDRESS" role="field" xml:id="org.osgi.framework.Constants.BUNDLE_CONTACTADDRESS">
         <title>public static final String BUNDLE_CONTACTADDRESS = "Bundle-ContactAddress"</title>
         <para>
Manifest header identifying the contact address where problems with the
 bundle may be reported; for example, an email address.

 </para>
         <para>
 The header value may be retrieved from the <code>Dictionary</code> object
 returned by the <code>Bundle.getHeaders</code> method.</para>
      </section>
      <section xreflabel="BUNDLE_COPYRIGHT" role="field" xml:id="org.osgi.framework.Constants.BUNDLE_COPYRIGHT">
         <title>public static final String BUNDLE_COPYRIGHT = "Bundle-Copyright"</title>
         <para>
Manifest header identifying the bundle's copyright information.
 </para>
         <para>
 The header value may be retrieved from the <code>Dictionary</code> object
 returned by the <code>Bundle.getHeaders</code> method.</para>
      </section>
      <section xreflabel="BUNDLE_DESCRIPTION" role="field" xml:id="org.osgi.framework.Constants.BUNDLE_DESCRIPTION">
         <title>public static final String BUNDLE_DESCRIPTION = "Bundle-Description"</title>
         <para>
Manifest header containing a brief description of the bundle's
 functionality.
 </para>
         <para>
 The header value may be retrieved from the <code>Dictionary</code> object
 returned by the <code>Bundle.getHeaders</code> method.</para>
      </section>
      <section xreflabel="BUNDLE_DEVELOPERS" role="field" xml:id="org.osgi.framework.Constants.BUNDLE_DEVELOPERS">
         <title>public static final String BUNDLE_DEVELOPERS = "Bundle-Developers"</title>
         <para>
Manifest header identifying the bundle's developers.
 </para>
         <para>
 The header value may be retrieved from the <code>Dictionary</code> object
 returned by the <code>Bundle.getHeaders</code> method.</para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.9</para>
         </formalpara>
      </section>
      <section xreflabel="BUNDLE_DOCURL" role="field" xml:id="org.osgi.framework.Constants.BUNDLE_DOCURL">
         <title>public static final String BUNDLE_DOCURL = "Bundle-DocURL"</title>
         <para>
Manifest header identifying the bundle's documentation URL, from which
 further information about the bundle may be obtained.

 </para>
         <para>
 The header value may be retrieved from the <code>Dictionary</code> object
 returned by the <code>Bundle.getHeaders</code> method.</para>
      </section>
      <section xreflabel="BUNDLE_ICON" role="field" xml:id="org.osgi.framework.Constants.BUNDLE_ICON">
         <title>public static final String BUNDLE_ICON = "Bundle-Icon"</title>
         <para>
Manifest header identifying the bundle's icon URLs.

 </para>
         <para>
 The header value may be retrieved from the <code>Dictionary</code> object
 returned by the <code>Bundle.getHeaders</code> method.</para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.8</para>
         </formalpara>
      </section>
      <section xreflabel="BUNDLE_LICENSE" role="field" xml:id="org.osgi.framework.Constants.BUNDLE_LICENSE">
         <title>public static final String BUNDLE_LICENSE = "Bundle-License"</title>
         <para>
Manifest header identifying the bundle's license information.

 </para>
         <para>
 The header value may be retrieved from the <code>Dictionary</code> object
 returned by the <code>Bundle.getHeaders</code> method.</para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.8</para>
         </formalpara>
      </section>
      <section xreflabel="BUNDLE_LOCALIZATION" role="field" xml:id="org.osgi.framework.Constants.BUNDLE_LOCALIZATION">
         <title>public static final String BUNDLE_LOCALIZATION = "Bundle-Localization"</title>
         <para>
Manifest header identifying the base name of the bundle's localization
 entries.

 </para>
         <para>
 The header value may be retrieved from the <code>Dictionary</code> object
 returned by the <code>Bundle.getHeaders</code> method.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.BUNDLE_LOCALIZATION_DEFAULT_BASENAME">BUNDLE_LOCALIZATION_DEFAULT_BASENAME</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="BUNDLE_LOCALIZATION_DEFAULT_BASENAME" role="field" xml:id="org.osgi.framework.Constants.BUNDLE_LOCALIZATION_DEFAULT_BASENAME">
         <title>public static final String BUNDLE_LOCALIZATION_DEFAULT_BASENAME = "OSGI-INF/l10n/bundle"</title>
         <para>
Default value for the <code>Bundle-Localization</code> manifest header.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.BUNDLE_LOCALIZATION">BUNDLE_LOCALIZATION</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="BUNDLE_MANIFESTVERSION" role="field" xml:id="org.osgi.framework.Constants.BUNDLE_MANIFESTVERSION">
         <title>public static final String BUNDLE_MANIFESTVERSION = "Bundle-ManifestVersion"</title>
         <para>
Manifest header identifying the bundle manifest version. A bundle
 manifest may express the version of the syntax in which it is written by
 specifying a bundle manifest version. Bundles exploiting OSGi Release 4,
 or later, syntax must specify a bundle manifest version.
 </para>
         <para>
 The bundle manifest version defined by OSGi Release 4 or, more
 specifically, by version 1.3 of the OSGi Core Specification is "2".

 </para>
         <para>
 The header value may be retrieved from the <code>Dictionary</code> object
 returned by the <code>Bundle.getHeaders</code> method.</para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="BUNDLE_NAME" role="field" xml:id="org.osgi.framework.Constants.BUNDLE_NAME">
         <title>public static final String BUNDLE_NAME = "Bundle-Name"</title>
         <para>
Manifest header identifying the bundle's name.
 </para>
         <para>
 The header value may be retrieved from the <code>Dictionary</code> object
 returned by the <code>Bundle.getHeaders</code> method.</para>
      </section>
      <section xreflabel="BUNDLE_NATIVECODE" role="field" xml:id="org.osgi.framework.Constants.BUNDLE_NATIVECODE">
         <title>public static final String BUNDLE_NATIVECODE = "Bundle-NativeCode"</title>
         <para>
Manifest header identifying a number of hardware environments and the
 native language code libraries that the bundle is carrying for each of
 these environments.

 </para>
         <para>
 The header value may be retrieved from the <code>Dictionary</code> object
 returned by the <code>Bundle.getHeaders</code> method.</para>
      </section>
      <section xreflabel="BUNDLE_NATIVECODE_LANGUAGE" role="field" xml:id="org.osgi.framework.Constants.BUNDLE_NATIVECODE_LANGUAGE">
         <title>public static final String BUNDLE_NATIVECODE_LANGUAGE = "language"</title>
         <para>
Manifest header attribute identifying the language in which the native
 bundle code is written specified in the Bundle-NativeCode manifest
 header. See ISO 639 for possible values.
 </para>
         <para>
 The attribute value is encoded in the Bundle-NativeCode manifest header
 like:

 </para>
         <programlisting>     Bundle-NativeCode: http.so ; language=nl_be ...</programlisting>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.BUNDLE_NATIVECODE">BUNDLE_NATIVECODE</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="BUNDLE_NATIVECODE_OSNAME" role="field" xml:id="org.osgi.framework.Constants.BUNDLE_NATIVECODE_OSNAME">
         <title>public static final String BUNDLE_NATIVECODE_OSNAME = "osname"</title>
         <para>
Manifest header attribute identifying the operating system required to
 run native bundle code specified in the Bundle-NativeCode manifest
 header).
 </para>
         <para>
 The attribute value is encoded in the Bundle-NativeCode manifest header
 like:

 </para>
         <programlisting>     Bundle-NativeCode: http.so ; osname=Linux ...</programlisting>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.BUNDLE_NATIVECODE">BUNDLE_NATIVECODE</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="BUNDLE_NATIVECODE_OSVERSION" role="field" xml:id="org.osgi.framework.Constants.BUNDLE_NATIVECODE_OSVERSION">
         <title>public static final String BUNDLE_NATIVECODE_OSVERSION = "osversion"</title>
         <para>
Manifest header attribute identifying the operating system version
 required to run native bundle code specified in the Bundle-NativeCode
 manifest header).
 </para>
         <para>
 The attribute value is encoded in the Bundle-NativeCode manifest header
 like:

 </para>
         <programlisting>     Bundle-NativeCode: http.so ; osversion="2.34" ...</programlisting>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.BUNDLE_NATIVECODE">BUNDLE_NATIVECODE</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="BUNDLE_NATIVECODE_PROCESSOR" role="field" xml:id="org.osgi.framework.Constants.BUNDLE_NATIVECODE_PROCESSOR">
         <title>public static final String BUNDLE_NATIVECODE_PROCESSOR = "processor"</title>
         <para>
Manifest header attribute identifying the processor required to run
 native bundle code specified in the Bundle-NativeCode manifest header).

 </para>
         <para>
 The attribute value is encoded in the Bundle-NativeCode manifest header
 like:

 </para>
         <programlisting>     Bundle-NativeCode: http.so ; processor=x86 ...</programlisting>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.BUNDLE_NATIVECODE">BUNDLE_NATIVECODE</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="BUNDLE_REQUIREDEXECUTIONENVIRONMENT" role="field" xml:id="org.osgi.framework.Constants.BUNDLE_REQUIREDEXECUTIONENVIRONMENT">
         <title>public static final String BUNDLE_REQUIREDEXECUTIONENVIRONMENT = "Bundle-RequiredExecutionEnvironment"</title>
         <para>
Manifest header identifying the required execution environment for the
 bundle. The service platform may run this bundle if any of the execution
 environments named in this header matches one of the execution
 environments it implements.

 </para>
         <para>
 The header value may be retrieved from the <code>Dictionary</code> object
 returned by the <code>Bundle.getHeaders</code> method.</para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.2</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Deprecated</title>
            <para>As of 1.6. Replaced by the <code>osgi.ee</code> capability.</para>
         </formalpara>
      </section>
      <section xreflabel="BUNDLE_SCM" role="field" xml:id="org.osgi.framework.Constants.BUNDLE_SCM">
         <title>public static final String BUNDLE_SCM = "Bundle-SCM"</title>
         <para>
Manifest header identifying the bundle's software configuration
 management system.
 </para>
         <para>
 The header value may be retrieved from the <code>Dictionary</code> object
 returned by the <code>Bundle.getHeaders</code> method.</para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.9</para>
         </formalpara>
      </section>
      <section xreflabel="BUNDLE_SYMBOLICNAME" role="field" xml:id="org.osgi.framework.Constants.BUNDLE_SYMBOLICNAME">
         <title>public static final String BUNDLE_SYMBOLICNAME = "Bundle-SymbolicName"</title>
         <para>
Manifest header identifying the bundle's symbolic name.

 </para>
         <para>
 The header value may be retrieved from the <code>Dictionary</code> object
 returned by the <code>Bundle.getHeaders</code> method.</para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="BUNDLE_SYMBOLICNAME_ATTRIBUTE" role="field" xml:id="org.osgi.framework.Constants.BUNDLE_SYMBOLICNAME_ATTRIBUTE">
         <title>public static final String BUNDLE_SYMBOLICNAME_ATTRIBUTE = "bundle-symbolic-name"</title>
         <para>
Manifest header attribute identifying the symbolic name of a bundle that
 exports a package specified in the Import-Package manifest header.

 </para>
         <para>
 The attribute value is encoded in the Import-Package manifest header
 like:

 </para>
         <programlisting>     Import-Package: org.osgi.framework;
       bundle-symbolic-name="com.acme.module.test"</programlisting>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.IMPORT_PACKAGE">IMPORT_PACKAGE</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="BUNDLE_UPDATELOCATION" role="field" xml:id="org.osgi.framework.Constants.BUNDLE_UPDATELOCATION">
         <title>public static final String BUNDLE_UPDATELOCATION = "Bundle-UpdateLocation"</title>
         <para>
Manifest header identifying the location from which a new bundle version
 is obtained during a bundle update operation.

 </para>
         <para>
 The header value may be retrieved from the <code>Dictionary</code> object
 returned by the <code>Bundle.getHeaders</code> method.</para>
      </section>
      <section xreflabel="BUNDLE_VENDOR" role="field" xml:id="org.osgi.framework.Constants.BUNDLE_VENDOR">
         <title>public static final String BUNDLE_VENDOR = "Bundle-Vendor"</title>
         <para>
Manifest header identifying the bundle's vendor.

 </para>
         <para>
 The header value may be retrieved from the <code>Dictionary</code> object
 returned by the <code>Bundle.getHeaders</code> method.</para>
      </section>
      <section xreflabel="BUNDLE_VERSION" role="field" xml:id="org.osgi.framework.Constants.BUNDLE_VERSION">
         <title>public static final String BUNDLE_VERSION = "Bundle-Version"</title>
         <para>
Manifest header identifying the bundle's version.

 </para>
         <para>
 The header value may be retrieved from the <code>Dictionary</code> object
 returned by the <code>Bundle.getHeaders</code> method.</para>
      </section>
      <section xreflabel="BUNDLE_VERSION_ATTRIBUTE" role="field" xml:id="org.osgi.framework.Constants.BUNDLE_VERSION_ATTRIBUTE">
         <title>public static final String BUNDLE_VERSION_ATTRIBUTE = "bundle-version"</title>
         <para>
Manifest header attribute identifying a range of versions for a bundle
 specified in the <code>Require-Bundle</code> or <code>Fragment-Host</code> manifest
 headers. The default value is <code>0.0.0</code>.

 </para>
         <para>
 The attribute value is encoded in the Require-Bundle manifest header
 like:

 </para>
         <programlisting>     Require-Bundle: com.acme.module.test; bundle-version="1.1"
     Require-Bundle: com.acme.module.test; bundle-version="[1.0,2.0)"</programlisting>
         <para>
 The bundle-version attribute value uses a mathematical interval notation
 to specify a range of bundle versions. A bundle-version attribute value
 specified as a single version means a version range that includes any
 bundle version greater than or equal to the specified version.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.REQUIRE_BUNDLE">REQUIRE_BUNDLE</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="DYNAMICIMPORT_PACKAGE" role="field" xml:id="org.osgi.framework.Constants.DYNAMICIMPORT_PACKAGE">
         <title>public static final String DYNAMICIMPORT_PACKAGE = "DynamicImport-Package"</title>
         <para>
Manifest header identifying the packages that the bundle may dynamically
 import during execution.

 </para>
         <para>
 The header value may be retrieved from the <code>Dictionary</code> object
 returned by the <code>Bundle.getHeaders</code> method.</para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.2</para>
         </formalpara>
      </section>
      <section xreflabel="EFFECTIVE_ACTIVE" role="field" xml:id="org.osgi.framework.Constants.EFFECTIVE_ACTIVE">
         <title>public static final String EFFECTIVE_ACTIVE = "active"</title>
         <para>
Manifest header directive value identifying a capability that is
 effective at active time. Capabilities with an effective time of active
 are ignored by the resolver.

 </para>
         <para>
 The directive value is encoded in the Provide-Capability manifest header
 like:

 </para>
         <programlisting>     Provide-Capability: com.acme.capability; effective:="active"</programlisting>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.EFFECTIVE_DIRECTIVE">EFFECTIVE_DIRECTIVE</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.6</para>
         </formalpara>
      </section>
      <section xreflabel="EFFECTIVE_DIRECTIVE" role="field" xml:id="org.osgi.framework.Constants.EFFECTIVE_DIRECTIVE">
         <title>public static final String EFFECTIVE_DIRECTIVE = "effective"</title>
         <para>
Manifest header directive identifying the effective time of the provided
 capability. The default value is <link linkend="org.osgi.framework.Constants.EFFECTIVE_RESOLVE">resolve</link>.

 </para>
         <para>
 The directive value is encoded in the Provide-Capability manifest header
 like:

 </para>
         <programlisting>     Provide-Capability: com.acme.capability; effective:="resolve"</programlisting>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.PROVIDE_CAPABILITY">PROVIDE_CAPABILITY</link>, <link linkend="org.osgi.framework.Constants.EFFECTIVE_RESOLVE">EFFECTIVE_RESOLVE</link>, <link linkend="org.osgi.framework.Constants.EFFECTIVE_ACTIVE">EFFECTIVE_ACTIVE</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.6</para>
         </formalpara>
      </section>
      <section xreflabel="EFFECTIVE_RESOLVE" role="field" xml:id="org.osgi.framework.Constants.EFFECTIVE_RESOLVE">
         <title>public static final String EFFECTIVE_RESOLVE = "resolve"</title>
         <para>
Manifest header directive value identifying a capability that is
 effective at resolve time. Capabilities with an effective time of resolve
 are the only capabilities which are processed by the resolver.

 </para>
         <para>
 The directive value is encoded in the Provide-Capability manifest header
 like:

 </para>
         <programlisting>     Provide-Capability: com.acme.capability; effective:="resolve"</programlisting>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.EFFECTIVE_DIRECTIVE">EFFECTIVE_DIRECTIVE</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.6</para>
         </formalpara>
      </section>
      <section xreflabel="EXCLUDE_DIRECTIVE" role="field" xml:id="org.osgi.framework.Constants.EXCLUDE_DIRECTIVE">
         <title>public static final String EXCLUDE_DIRECTIVE = "exclude"</title>
         <para>
Manifest header directive identifying a list of classes to exclude in the
 exported package..
 </para>
         <para>
 This directive is used by the Export-Package manifest header to identify
 a list of classes of the specified package which must not be allowed to
 be exported. The directive value is encoded in the Export-Package
 manifest header like:

 </para>
         <programlisting>     Export-Package: org.osgi.framework; exclude:="*Impl"</programlisting>
         <para>
 This directive is also used by the Bundle-ActivationPolicy manifest
 header to identify the packages from which class loads will not trigger
 lazy activation. The directive value is encoded in the
 Bundle-ActivationPolicy manifest header like:

 </para>
         <programlisting>     Bundle-ActivationPolicy: lazy; exclude:="org.osgi.framework"</programlisting>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.EXPORT_PACKAGE">EXPORT_PACKAGE</link>, <link linkend="org.osgi.framework.Constants.BUNDLE_ACTIVATIONPOLICY">BUNDLE_ACTIVATIONPOLICY</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="EXPORT_PACKAGE" role="field" xml:id="org.osgi.framework.Constants.EXPORT_PACKAGE">
         <title>public static final String EXPORT_PACKAGE = "Export-Package"</title>
         <para>
Manifest header identifying the packages that the bundle offers to the
 Framework for export.

 </para>
         <para>
 The header value may be retrieved from the <code>Dictionary</code> object
 returned by the <code>Bundle.getHeaders</code> method.</para>
      </section>
      <section xreflabel="EXPORT_SERVICE" role="field" xml:id="org.osgi.framework.Constants.EXPORT_SERVICE">
         <title>public static final String EXPORT_SERVICE = "Export-Service"</title>
         <para>
Manifest header identifying the fully qualified class names of the
 services that the bundle may register (used for informational purposes
 only).

 </para>
         <para>
 The header value may be retrieved from the <code>Dictionary</code> object
 returned by the <code>Bundle.getHeaders</code> method.</para>
         <formalpara role="parameter">
            <title>Deprecated</title>
            <para>As of 1.2.</para>
         </formalpara>
      </section>
      <section xreflabel="EXTENSION_BOOTCLASSPATH" role="field" xml:id="org.osgi.framework.Constants.EXTENSION_BOOTCLASSPATH">
         <title>public static final String EXTENSION_BOOTCLASSPATH = "bootclasspath"</title>
         <para>
Manifest header directive value identifying the type of extension
 fragment. An extension fragment type of bootclasspath indicates that the
 extension fragment is to be loaded by the boot class loader.
 </para>
         <para>
 The directive value is encoded in the Fragment-Host manifest header like:

 </para>
         <programlisting>     Fragment-Host: system.bundle; extension:="bootclasspath"</programlisting>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.EXTENSION_DIRECTIVE">EXTENSION_DIRECTIVE</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Deprecated</title>
            <para>As of 1.9.</para>
         </formalpara>
      </section>
      <section xreflabel="EXTENSION_BUNDLE_ACTIVATOR" role="field" xml:id="org.osgi.framework.Constants.EXTENSION_BUNDLE_ACTIVATOR">
         <title>public static final String EXTENSION_BUNDLE_ACTIVATOR = "ExtensionBundle-Activator"</title>
         <para>
Manifest header identifying the extension bundle's activator class.

 </para>
         <para>
 If present, this header specifies the name of the extension bundle
 resource class that implements the <code>BundleActivator</code> interface and
 whose <code>start</code> and <code>stop</code> methods are called by the Framework
 when the Framework is initialized and shutdown, respectively.</para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.8</para>
         </formalpara>
      </section>
      <section xreflabel="EXTENSION_DIRECTIVE" role="field" xml:id="org.osgi.framework.Constants.EXTENSION_DIRECTIVE">
         <title>public static final String EXTENSION_DIRECTIVE = "extension"</title>
         <para>
Manifest header directive identifying the type of the extension fragment.

 </para>
         <para>
 The directive value is encoded in the Fragment-Host manifest header like:

 </para>
         <programlisting>     Fragment-Host: system.bundle; extension:="framework"</programlisting>
         <para>
 The default value is <link linkend="org.osgi.framework.Constants.EXTENSION_FRAMEWORK">framework</link>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.FRAGMENT_HOST">FRAGMENT_HOST</link>, <link linkend="org.osgi.framework.Constants.EXTENSION_FRAMEWORK">EXTENSION_FRAMEWORK</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="EXTENSION_FRAMEWORK" role="field" xml:id="org.osgi.framework.Constants.EXTENSION_FRAMEWORK">
         <title>public static final String EXTENSION_FRAMEWORK = "framework"</title>
         <para>
Manifest header directive value identifying the type of extension
 fragment. An extension fragment type of framework indicates that the
 extension fragment is to be loaded by the framework's class loader.

 </para>
         <para>
 The directive value is encoded in the Fragment-Host manifest header like:

 </para>
         <programlisting>     Fragment-Host: system.bundle; extension:="framework"</programlisting>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.EXTENSION_DIRECTIVE">EXTENSION_DIRECTIVE</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="FILTER_DIRECTIVE" role="field" xml:id="org.osgi.framework.Constants.FILTER_DIRECTIVE">
         <title>public static final String FILTER_DIRECTIVE = "filter"</title>
         <para>
Manifest header directive identifying the capability filter specified in
 the Require-Capability manifest header.

 </para>
         <para>
 The directive value is encoded in the Require-Capability manifest header
 like:

 </para>
         <programlisting>     Require-Capability: com.acme.capability; filter:="(someattr=somevalue)"</programlisting>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.REQUIRE_CAPABILITY">REQUIRE_CAPABILITY</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.6</para>
         </formalpara>
      </section>
      <section xreflabel="FRAGMENT_ATTACHMENT_ALWAYS" role="field" xml:id="org.osgi.framework.Constants.FRAGMENT_ATTACHMENT_ALWAYS">
         <title>public static final String FRAGMENT_ATTACHMENT_ALWAYS = "always"</title>
         <para>
Manifest header directive value identifying a fragment attachment type of
 always. A fragment attachment type of always indicates that fragments are
 allowed to attach to the host bundle at any time (while the host is
 resolved or during the process of resolving the host bundle).

 </para>
         <para>
 The directive value is encoded in the Bundle-SymbolicName manifest header
 like:

 </para>
         <programlisting>     Bundle-SymbolicName: com.acme.module.test; fragment-attachment:="always"</programlisting>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.FRAGMENT_ATTACHMENT_DIRECTIVE">FRAGMENT_ATTACHMENT_DIRECTIVE</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="FRAGMENT_ATTACHMENT_DIRECTIVE" role="field" xml:id="org.osgi.framework.Constants.FRAGMENT_ATTACHMENT_DIRECTIVE">
         <title>public static final String FRAGMENT_ATTACHMENT_DIRECTIVE = "fragment-attachment"</title>
         <para>
Manifest header directive identifying if and when a fragment may attach
 to a host bundle. The default value is
 <link linkend="org.osgi.framework.Constants.FRAGMENT_ATTACHMENT_ALWAYS">always</link>.

 </para>
         <para>
 The directive value is encoded in the Bundle-SymbolicName manifest header
 like:

 </para>
         <programlisting>     Bundle-SymbolicName: com.acme.module.test; fragment-attachment:="never"</programlisting>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.BUNDLE_SYMBOLICNAME">BUNDLE_SYMBOLICNAME</link>, <link linkend="org.osgi.framework.Constants.FRAGMENT_ATTACHMENT_ALWAYS">FRAGMENT_ATTACHMENT_ALWAYS</link>, <link linkend="org.osgi.framework.Constants.FRAGMENT_ATTACHMENT_RESOLVETIME">FRAGMENT_ATTACHMENT_RESOLVETIME</link>, <link linkend="org.osgi.framework.Constants.FRAGMENT_ATTACHMENT_NEVER">FRAGMENT_ATTACHMENT_NEVER</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="FRAGMENT_ATTACHMENT_NEVER" role="field" xml:id="org.osgi.framework.Constants.FRAGMENT_ATTACHMENT_NEVER">
         <title>public static final String FRAGMENT_ATTACHMENT_NEVER = "never"</title>
         <para>
Manifest header directive value identifying a fragment attachment type of
 never. A fragment attachment type of never indicates that no fragments
 are allowed to attach to the host bundle at any time.

 </para>
         <para>
 The directive value is encoded in the Bundle-SymbolicName manifest header
 like:

 </para>
         <programlisting>     Bundle-SymbolicName: com.acme.module.test; fragment-attachment:="never"</programlisting>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.FRAGMENT_ATTACHMENT_DIRECTIVE">FRAGMENT_ATTACHMENT_DIRECTIVE</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="FRAGMENT_ATTACHMENT_RESOLVETIME" role="field" xml:id="org.osgi.framework.Constants.FRAGMENT_ATTACHMENT_RESOLVETIME">
         <title>public static final String FRAGMENT_ATTACHMENT_RESOLVETIME = "resolve-time"</title>
         <para>
Manifest header directive value identifying a fragment attachment type of
 resolve-time. A fragment attachment type of resolve-time indicates that
 fragments are allowed to attach to the host bundle only during the
 process of resolving the host bundle.

 </para>
         <para>
 The directive value is encoded in the Bundle-SymbolicName manifest header
 like:

 </para>
         <programlisting>     Bundle-SymbolicName: com.acme.module.test;
       fragment-attachment:="resolve-time"</programlisting>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.FRAGMENT_ATTACHMENT_DIRECTIVE">FRAGMENT_ATTACHMENT_DIRECTIVE</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="FRAGMENT_HOST" role="field" xml:id="org.osgi.framework.Constants.FRAGMENT_HOST">
         <title>public static final String FRAGMENT_HOST = "Fragment-Host"</title>
         <para>
Manifest header identifying the symbolic name of another bundle for which
 that the bundle is a fragment.

 </para>
         <para>
 The header value may be retrieved from the <code>Dictionary</code> object
 returned by the <code>Bundle.getHeaders</code> method.</para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="FRAMEWORK_BEGINNING_STARTLEVEL" role="field" xml:id="org.osgi.framework.Constants.FRAMEWORK_BEGINNING_STARTLEVEL">
         <title>public static final String FRAMEWORK_BEGINNING_STARTLEVEL = "org.osgi.framework.startlevel.beginning"</title>
         <para>
Framework launching property specifying the beginning start level of the
 framework.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>Core Specification, Starting the Framework.</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="FRAMEWORK_BOOTDELEGATION" role="field" xml:id="org.osgi.framework.Constants.FRAMEWORK_BOOTDELEGATION">
         <title>public static final String FRAMEWORK_BOOTDELEGATION = "org.osgi.framework.bootdelegation"</title>
         <para>
Framework launching property identifying packages for which the Framework
 must delegate class loading to the parent class loader of the bundle.

 </para>
         <para>
 The value of this property may be retrieved by calling the
 <code>BundleContext.getProperty</code> method.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.FRAMEWORK_BUNDLE_PARENT">FRAMEWORK_BUNDLE_PARENT</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="FRAMEWORK_BSNVERSION" role="field" xml:id="org.osgi.framework.Constants.FRAMEWORK_BSNVERSION">
         <title>public static final String FRAMEWORK_BSNVERSION = "org.osgi.framework.bsnversion"</title>
         <para>
Framework launching property specifying whether multiple bundles having
 the same <link linkend="org.osgi.framework.Constants.BUNDLE_SYMBOLICNAME">symbolic name</link> and
 <link linkend="org.osgi.framework.Constants.BUNDLE_VERSION">version</link> may be installed.

 </para>
         <para>
 Default value is <link linkend="org.osgi.framework.Constants.FRAMEWORK_BSNVERSION_MANAGED">managed</link> in this
 release of the specification. This default may change in a future
 specification release. Therefore, code must not assume the default
 behavior is <code>managed</code> and should interrogate the value of this
 property to determine the behavior.

 </para>
         <para>
 The value of this property may be retrieved by calling the
 <code>BundleContext.getProperty</code> method.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.FRAMEWORK_BSNVERSION_MULTIPLE">FRAMEWORK_BSNVERSION_MULTIPLE</link>, <link linkend="org.osgi.framework.Constants.FRAMEWORK_BSNVERSION_SINGLE">FRAMEWORK_BSNVERSION_SINGLE</link>, <link linkend="org.osgi.framework.Constants.FRAMEWORK_BSNVERSION_MANAGED">FRAMEWORK_BSNVERSION_MANAGED</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.6</para>
         </formalpara>
      </section>
      <section xreflabel="FRAMEWORK_BSNVERSION_MANAGED" role="field" xml:id="org.osgi.framework.Constants.FRAMEWORK_BSNVERSION_MANAGED">
         <title>public static final String FRAMEWORK_BSNVERSION_MANAGED = "managed"</title>
         <para>
Specifies the framework must consult the <link linkend="org.osgi.framework.hooks.bundle.CollisionHook">bundle
 collision hook</link> services to determine if it will be an error to install a
 bundle or update a bundle to have the same symbolic name and version as
 another installed bundle. If no bundle collision hook services are
 registered, then it will be an error to install a bundle or update a
 bundle to have the same symbolic name and version as another installed
 bundle.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.FRAMEWORK_BSNVERSION">FRAMEWORK_BSNVERSION</link>, <link linkend="org.osgi.framework.BundleException.DUPLICATE_BUNDLE_ERROR">BundleException.DUPLICATE_BUNDLE_ERROR</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.7</para>
         </formalpara>
      </section>
      <section xreflabel="FRAMEWORK_BSNVERSION_MULTIPLE" role="field" xml:id="org.osgi.framework.Constants.FRAMEWORK_BSNVERSION_MULTIPLE">
         <title>public static final String FRAMEWORK_BSNVERSION_MULTIPLE = "multiple"</title>
         <para>
Specifies the framework will allow multiple bundles to be installed
 having the same symbolic name and version.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.FRAMEWORK_BSNVERSION">FRAMEWORK_BSNVERSION</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.6</para>
         </formalpara>
      </section>
      <section xreflabel="FRAMEWORK_BSNVERSION_SINGLE" role="field" xml:id="org.osgi.framework.Constants.FRAMEWORK_BSNVERSION_SINGLE">
         <title>public static final String FRAMEWORK_BSNVERSION_SINGLE = "single"</title>
         <para>
Specifies the framework will only allow a single bundle to be installed
 for a given symbolic name and version. It will be an error to install a
 bundle or update a bundle to have the same symbolic name and version as
 another installed bundle.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.FRAMEWORK_BSNVERSION">FRAMEWORK_BSNVERSION</link>, <link linkend="org.osgi.framework.BundleException.DUPLICATE_BUNDLE_ERROR">BundleException.DUPLICATE_BUNDLE_ERROR</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.6</para>
         </formalpara>
      </section>
      <section xreflabel="FRAMEWORK_BUNDLE_PARENT" role="field" xml:id="org.osgi.framework.Constants.FRAMEWORK_BUNDLE_PARENT">
         <title>public static final String FRAMEWORK_BUNDLE_PARENT = "org.osgi.framework.bundle.parent"</title>
         <para>
Framework launching property specifying the parent class loader type for
 all bundle class loaders. Default value is
 <link linkend="org.osgi.framework.Constants.FRAMEWORK_BUNDLE_PARENT_BOOT">boot</link>.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.FRAMEWORK_BUNDLE_PARENT_BOOT">FRAMEWORK_BUNDLE_PARENT_BOOT</link>, <link linkend="org.osgi.framework.Constants.FRAMEWORK_BUNDLE_PARENT_EXT">FRAMEWORK_BUNDLE_PARENT_EXT</link>, <link linkend="org.osgi.framework.Constants.FRAMEWORK_BUNDLE_PARENT_APP">FRAMEWORK_BUNDLE_PARENT_APP</link>, <link linkend="org.osgi.framework.Constants.FRAMEWORK_BUNDLE_PARENT_FRAMEWORK">FRAMEWORK_BUNDLE_PARENT_FRAMEWORK</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="FRAMEWORK_BUNDLE_PARENT_APP" role="field" xml:id="org.osgi.framework.Constants.FRAMEWORK_BUNDLE_PARENT_APP">
         <title>public static final String FRAMEWORK_BUNDLE_PARENT_APP = "app"</title>
         <para>
Specifies to use the application class loader as the parent class loader
 for all bundle class loaders. Depending on how the framework is launched,
 this may refer to the same class loader as
 <link linkend="org.osgi.framework.Constants.FRAMEWORK_BUNDLE_PARENT_FRAMEWORK">FRAMEWORK_BUNDLE_PARENT_FRAMEWORK</link>.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.FRAMEWORK_BUNDLE_PARENT">FRAMEWORK_BUNDLE_PARENT</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="FRAMEWORK_BUNDLE_PARENT_BOOT" role="field" xml:id="org.osgi.framework.Constants.FRAMEWORK_BUNDLE_PARENT_BOOT">
         <title>public static final String FRAMEWORK_BUNDLE_PARENT_BOOT = "boot"</title>
         <para>
Specifies to use of the boot class loader as the parent class loader for
 all bundle class loaders.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.FRAMEWORK_BUNDLE_PARENT">FRAMEWORK_BUNDLE_PARENT</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="FRAMEWORK_BUNDLE_PARENT_EXT" role="field" xml:id="org.osgi.framework.Constants.FRAMEWORK_BUNDLE_PARENT_EXT">
         <title>public static final String FRAMEWORK_BUNDLE_PARENT_EXT = "ext"</title>
         <para>
Specifies to use the extension class loader as the parent class loader
 for all bundle class loaders.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.FRAMEWORK_BUNDLE_PARENT">FRAMEWORK_BUNDLE_PARENT</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="FRAMEWORK_BUNDLE_PARENT_FRAMEWORK" role="field" xml:id="org.osgi.framework.Constants.FRAMEWORK_BUNDLE_PARENT_FRAMEWORK">
         <title>public static final String FRAMEWORK_BUNDLE_PARENT_FRAMEWORK = "framework"</title>
         <para>
Specifies to use the framework class loader as the parent class loader
 for all bundle class loaders. The framework class loader is the class
 loader used to load the framework implementation. Depending on how the
 framework is launched, this may refer to the same class loader as
 <link linkend="org.osgi.framework.Constants.FRAMEWORK_BUNDLE_PARENT_APP">FRAMEWORK_BUNDLE_PARENT_APP</link>.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.FRAMEWORK_BUNDLE_PARENT">FRAMEWORK_BUNDLE_PARENT</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="FRAMEWORK_COMMAND_ABSPATH" role="field" xml:id="org.osgi.framework.Constants.FRAMEWORK_COMMAND_ABSPATH">
         <title>public static final String FRAMEWORK_COMMAND_ABSPATH = "abspath"</title>
         <para>
Specified the substitution string for the absolute path of a file.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.FRAMEWORK_EXECPERMISSION">FRAMEWORK_EXECPERMISSION</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.6</para>
         </formalpara>
      </section>
      <section xreflabel="FRAMEWORK_EXECPERMISSION" role="field" xml:id="org.osgi.framework.Constants.FRAMEWORK_EXECPERMISSION">
         <title>public static final String FRAMEWORK_EXECPERMISSION = "org.osgi.framework.command.execpermission"</title>
         <para>
Framework launching property specifying an optional OS specific command
 to set file permissions on extracted native code. On some operating
 systems, it is required that native libraries be set to executable. This
 optional property allows you to specify the command. For example, on a
 UNIX style OS, this property could have the following value.

 </para>
         <programlisting> chmod +rx ${abspath}</programlisting>
         <para>

 The <code>${abspath}</code> is used by the framework to substitute the
 actual absolute file path.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="FRAMEWORK_EXECUTIONENVIRONMENT" role="field" xml:id="org.osgi.framework.Constants.FRAMEWORK_EXECUTIONENVIRONMENT">
         <title>public static final String FRAMEWORK_EXECUTIONENVIRONMENT = "org.osgi.framework.executionenvironment"</title>
         <para>
Framework launching property identifying execution environments provided
 by the Framework.

 </para>
         <para>
 The value of this property may be retrieved by calling the
 <code>BundleContext.getProperty</code> method.</para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.2</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Deprecated</title>
            <para>As of 1.6. Replaced by the <code>osgi.ee</code> capability.</para>
         </formalpara>
      </section>
      <section xreflabel="FRAMEWORK_LANGUAGE" role="field" xml:id="org.osgi.framework.Constants.FRAMEWORK_LANGUAGE">
         <title>public static final String FRAMEWORK_LANGUAGE = "org.osgi.framework.language"</title>
         <para>
Framework launching property identifying the Framework implementation
 language (see ISO 639 for possible values).

 </para>
         <para>
 The value of this property may be retrieved by calling the
 <code>BundleContext.getProperty</code> method.</para>
      </section>
      <section xreflabel="FRAMEWORK_LIBRARY_EXTENSIONS" role="field" xml:id="org.osgi.framework.Constants.FRAMEWORK_LIBRARY_EXTENSIONS">
         <title>public static final String FRAMEWORK_LIBRARY_EXTENSIONS = "org.osgi.framework.library.extensions"</title>
         <para>
Framework launching property specifying a comma separated list of
 additional library file extensions that must be used when a bundle's
 class loader is searching for native libraries. If this property is not
 set, then only the library name returned by
 <code>System.mapLibraryName(String)</code> will be used to search. This is
 needed for certain operating systems which allow more than one extension
 for a library. For example, AIX allows library extensions of <code>.a</code>
 and <code>.so</code>, but <code>System.mapLibraryName(String)</code> will only
 return names with the <code>.a</code> extension.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="FRAMEWORK_OS_NAME" role="field" xml:id="org.osgi.framework.Constants.FRAMEWORK_OS_NAME">
         <title>public static final String FRAMEWORK_OS_NAME = "org.osgi.framework.os.name"</title>
         <para>
Framework launching property identifying the Framework host-computer's
 operating system.

 </para>
         <para>
 The value of this property may be retrieved by calling the
 <code>BundleContext.getProperty</code> method.</para>
      </section>
      <section xreflabel="FRAMEWORK_OS_VERSION" role="field" xml:id="org.osgi.framework.Constants.FRAMEWORK_OS_VERSION">
         <title>public static final String FRAMEWORK_OS_VERSION = "org.osgi.framework.os.version"</title>
         <para>
Framework launching property identifying the Framework host-computer's
 operating system version number.

 </para>
         <para>
 The value of this property may be retrieved by calling the
 <code>BundleContext.getProperty</code> method.</para>
      </section>
      <section xreflabel="FRAMEWORK_PROCESSOR" role="field" xml:id="org.osgi.framework.Constants.FRAMEWORK_PROCESSOR">
         <title>public static final String FRAMEWORK_PROCESSOR = "org.osgi.framework.processor"</title>
         <para>
Framework launching property identifying the Framework host-computer's
 processor name.

 </para>
         <para>
 The value of this property may be retrieved by calling the
 <code>BundleContext.getProperty</code> method.</para>
      </section>
      <section xreflabel="FRAMEWORK_SECURITY" role="field" xml:id="org.osgi.framework.Constants.FRAMEWORK_SECURITY">
         <title>public static final String FRAMEWORK_SECURITY = "org.osgi.framework.security"</title>
         <para>
Framework launching property specifying the type of security manager the
 framework must use. If not specified then the framework will not set the
 VM security manager.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.FRAMEWORK_SECURITY_OSGI">FRAMEWORK_SECURITY_OSGI</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="FRAMEWORK_SECURITY_OSGI" role="field" xml:id="org.osgi.framework.Constants.FRAMEWORK_SECURITY_OSGI">
         <title>public static final String FRAMEWORK_SECURITY_OSGI = "osgi"</title>
         <para>
Specifies that a security manager that supports all security aspects of
 the OSGi core specification including postponed conditions must be
 installed.

 </para>
         <para>
 If this value is specified and there is a security manager already
 installed, then a <code>SecurityException</code> must be thrown when the
 Framework is initialized.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.FRAMEWORK_SECURITY">FRAMEWORK_SECURITY</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="FRAMEWORK_STORAGE" role="field" xml:id="org.osgi.framework.Constants.FRAMEWORK_STORAGE">
         <title>public static final String FRAMEWORK_STORAGE = "org.osgi.framework.storage"</title>
         <para>
Framework launching property specifying the persistent storage area used
 by the framework. The value of this property must be a valid file path in
 the file system to a directory. If the specified directory does not exist
 then the framework will create the directory. If the specified path
 exists but is not a directory or if the framework fails to create the
 storage directory, then framework initialization must fail. The framework
 is free to use this directory as it sees fit. This area can not be shared
 with anything else.
 </para>
         <para>
 If this property is not set, the framework should use a reasonable
 platform default for the persistent storage area.</para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="FRAMEWORK_STORAGE_CLEAN" role="field" xml:id="org.osgi.framework.Constants.FRAMEWORK_STORAGE_CLEAN">
         <title>public static final String FRAMEWORK_STORAGE_CLEAN = "org.osgi.framework.storage.clean"</title>
         <para>
Framework launching property specifying if and when the persistent
 storage area for the framework should be cleaned. If this property is not
 set, then the framework storage area must not be cleaned.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.FRAMEWORK_STORAGE_CLEAN_ONFIRSTINIT">FRAMEWORK_STORAGE_CLEAN_ONFIRSTINIT</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="FRAMEWORK_STORAGE_CLEAN_ONFIRSTINIT" role="field" xml:id="org.osgi.framework.Constants.FRAMEWORK_STORAGE_CLEAN_ONFIRSTINIT">
         <title>public static final String FRAMEWORK_STORAGE_CLEAN_ONFIRSTINIT = "onFirstInit"</title>
         <para>
Specifies that the framework storage area must be cleaned before the
 framework is initialized for the first time. Subsequent inits, starts or
 updates of the framework will not result in cleaning the framework
 storage area.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="FRAMEWORK_SYSTEMCAPABILITIES" role="field" xml:id="org.osgi.framework.Constants.FRAMEWORK_SYSTEMCAPABILITIES">
         <title>public static final String FRAMEWORK_SYSTEMCAPABILITIES = "org.osgi.framework.system.capabilities"</title>
         <para>
Framework launching property identifying capabilities which the system
 bundle must provide.

 </para>
         <para>
 If this property is not specified then the framework must calculate a
 reasonable default value for the current execution environment.

 </para>
         <para>
 The value of this property may be retrieved by calling the
 <code>BundleContext.getProperty</code> method.</para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.6</para>
         </formalpara>
      </section>
      <section xreflabel="FRAMEWORK_SYSTEMCAPABILITIES_EXTRA" role="field" xml:id="org.osgi.framework.Constants.FRAMEWORK_SYSTEMCAPABILITIES_EXTRA">
         <title>public static final String FRAMEWORK_SYSTEMCAPABILITIES_EXTRA = "org.osgi.framework.system.capabilities.extra"</title>
         <para>
Framework launching property identifying extra capabilities which the
 system bundle must additionally provide.

 </para>
         <para>
 This property is useful for configuring extra system capabilities in
 addition to the system capabilities calculated by the framework.

 </para>
         <para>
 The value of this property may be retrieved by calling the
 <code>BundleContext.getProperty</code> method.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.FRAMEWORK_SYSTEMCAPABILITIES">FRAMEWORK_SYSTEMCAPABILITIES</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.6</para>
         </formalpara>
      </section>
      <section xreflabel="FRAMEWORK_SYSTEMPACKAGES" role="field" xml:id="org.osgi.framework.Constants.FRAMEWORK_SYSTEMPACKAGES">
         <title>public static final String FRAMEWORK_SYSTEMPACKAGES = "org.osgi.framework.system.packages"</title>
         <para>
Framework launching property identifying packages which the system bundle
 must export.

 </para>
         <para>
 If this property is not specified then the framework must calculate a
 reasonable default value for the current execution environment.

 </para>
         <para>
 The value of this property may be retrieved by calling the
 <code>BundleContext.getProperty</code> method.</para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="FRAMEWORK_SYSTEMPACKAGES_EXTRA" role="field" xml:id="org.osgi.framework.Constants.FRAMEWORK_SYSTEMPACKAGES_EXTRA">
         <title>public static final String FRAMEWORK_SYSTEMPACKAGES_EXTRA = "org.osgi.framework.system.packages.extra"</title>
         <para>
Framework launching property identifying extra packages which the system
 bundle must export from the current execution environment.

 </para>
         <para>
 This property is useful for configuring extra system packages in addition
 to the system packages calculated by the framework.

 </para>
         <para>
 The value of this property may be retrieved by calling the
 <code>BundleContext.getProperty</code> method.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.FRAMEWORK_SYSTEMPACKAGES">FRAMEWORK_SYSTEMPACKAGES</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="FRAMEWORK_TRUST_REPOSITORIES" role="field" xml:id="org.osgi.framework.Constants.FRAMEWORK_TRUST_REPOSITORIES">
         <title>public static final String FRAMEWORK_TRUST_REPOSITORIES = "org.osgi.framework.trust.repositories"</title>
         <para>
Framework launching property specifying the trust repositories used by
 the framework. The value is a <code>java.io.File.pathSeparator</code>
 separated list of valid file paths to files that contain key stores. Key
 stores of type <code>JKS</code> must be supported and other key store types
 may be supported. The framework will use the key stores as trust
 repositories to authenticate certificates of trusted signers. The key
 stores are only used as read-only trust repositories to access public
 keys. No passwords are required to access the key stores' public keys.
 </para>
         <para>
 Note that framework implementations are allowed to use other trust
 repositories in addition to the trust repositories specified by this
 property. How these other trust repositories are configured and populated
 is implementation specific.</para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="FRAMEWORK_UUID" role="field" xml:id="org.osgi.framework.Constants.FRAMEWORK_UUID">
         <title>public static final String FRAMEWORK_UUID = "org.osgi.framework.uuid"</title>
         <para>
Framework environment property identifying the Framework's universally
 unique identifier (UUID). A UUID represents a 128-bit value. A new UUID
 is generated by the <link linkend="org.osgi.framework.launch.Framework.init--">Framework.init()</link> method each time a framework
 is initialized. The value of this property must conform to the UUID
 string representation specified in <link xlink:href="http://www.ietf.org/rfc/rfc4122.txt">RFC 4122</link>.

 </para>
         <para>
 The value of this property may be retrieved by calling the
 <code>BundleContext.getProperty</code> method.</para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.6</para>
         </formalpara>
      </section>
      <section xreflabel="FRAMEWORK_VENDOR" role="field" xml:id="org.osgi.framework.Constants.FRAMEWORK_VENDOR">
         <title>public static final String FRAMEWORK_VENDOR = "org.osgi.framework.vendor"</title>
         <para>
Framework environment property identifying the Framework implementation
 vendor.

 </para>
         <para>
 The value of this property may be retrieved by calling the
 <code>BundleContext.getProperty</code> method.</para>
      </section>
      <section xreflabel="FRAMEWORK_VERSION" role="field" xml:id="org.osgi.framework.Constants.FRAMEWORK_VERSION">
         <title>public static final String FRAMEWORK_VERSION = "org.osgi.framework.version"</title>
         <para>
Framework environment property identifying the Framework version.

 </para>
         <para>
 The value of this property may be retrieved by calling the
 <code>BundleContext.getProperty</code> method.</para>
      </section>
      <section xreflabel="FRAMEWORK_WINDOWSYSTEM" role="field" xml:id="org.osgi.framework.Constants.FRAMEWORK_WINDOWSYSTEM">
         <title>public static final String FRAMEWORK_WINDOWSYSTEM = "org.osgi.framework.windowsystem"</title>
         <para>
Framework launching property specifying the current windowing system. The
 framework should provide a reasonable default if this is not set.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="IMPORT_PACKAGE" role="field" xml:id="org.osgi.framework.Constants.IMPORT_PACKAGE">
         <title>public static final String IMPORT_PACKAGE = "Import-Package"</title>
         <para>
Manifest header identifying the packages on which the bundle depends.

 </para>
         <para>
 The header value may be retrieved from the <code>Dictionary</code> object
 returned by the <code>Bundle.getHeaders</code> method.</para>
      </section>
      <section xreflabel="IMPORT_SERVICE" role="field" xml:id="org.osgi.framework.Constants.IMPORT_SERVICE">
         <title>public static final String IMPORT_SERVICE = "Import-Service"</title>
         <para>
Manifest header identifying the fully qualified class names of the
 services that the bundle requires (used for informational purposes only).

 </para>
         <para>
 The header value may be retrieved from the <code>Dictionary</code> object
 returned by the <code>Bundle.getHeaders</code> method.</para>
         <formalpara role="parameter">
            <title>Deprecated</title>
            <para>As of 1.2.</para>
         </formalpara>
      </section>
      <section xreflabel="INCLUDE_DIRECTIVE" role="field" xml:id="org.osgi.framework.Constants.INCLUDE_DIRECTIVE">
         <title>public static final String INCLUDE_DIRECTIVE = "include"</title>
         <para>
Manifest header directive identifying a list of classes to include in the
 exported package.

 </para>
         <para>
 This directive is used by the Export-Package manifest header to identify
 a list of classes of the specified package which must be allowed to be
 exported. The directive value is encoded in the Export-Package manifest
 header like:

 </para>
         <programlisting>     Export-Package: org.osgi.framework; include:="MyClass*"</programlisting>
         <para>
 This directive is also used by the Bundle-ActivationPolicy manifest
 header to identify the packages from which class loads will trigger lazy
 activation. The directive value is encoded in the Bundle-ActivationPolicy
 manifest header like:

 </para>
         <programlisting>     Bundle-ActivationPolicy: lazy; include:="org.osgi.framework"</programlisting>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.EXPORT_PACKAGE">EXPORT_PACKAGE</link>, <link linkend="org.osgi.framework.Constants.BUNDLE_ACTIVATIONPOLICY">BUNDLE_ACTIVATIONPOLICY</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="INTENT_ASYNC" role="field" xml:id="org.osgi.framework.Constants.INTENT_ASYNC">
         <title>public static final String INTENT_ASYNC = "osgi.async"</title>
         <para>
Intent supported by Remote Service implementations that support
 Asynchronous Remote Services as defined for the <code>osgi.async</code>
 intent.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.9</para>
         </formalpara>
      </section>
      <section xreflabel="INTENT_BASIC" role="field" xml:id="org.osgi.framework.Constants.INTENT_BASIC">
         <title>public static final String INTENT_BASIC = "osgi.basic"</title>
         <para>
Intent supported by Remote Services implementations that support Basic
 Remote Services as defined for the <code>osgi.basic</code> intent.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.9</para>
         </formalpara>
      </section>
      <section xreflabel="INTENT_CONFIDENTIAL" role="field" xml:id="org.osgi.framework.Constants.INTENT_CONFIDENTIAL">
         <title>public static final String INTENT_CONFIDENTIAL = "osgi.confidential"</title>
         <para>
Intent supported by Remote Service implementation that provide
 confidential communications as defined for the <code>osgi.confidential</code>
 intent.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.9</para>
         </formalpara>
      </section>
      <section xreflabel="INTENT_PRIVATE" role="field" xml:id="org.osgi.framework.Constants.INTENT_PRIVATE">
         <title>public static final String INTENT_PRIVATE = "osgi.private"</title>
         <para>
Intent supported by Remote Service implementations that provide private
 communications as defined for the <code>osgi.private</code> intent.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.9</para>
         </formalpara>
      </section>
      <section xreflabel="MANDATORY_DIRECTIVE" role="field" xml:id="org.osgi.framework.Constants.MANDATORY_DIRECTIVE">
         <title>public static final String MANDATORY_DIRECTIVE = "mandatory"</title>
         <para>
Manifest header directive identifying names of matching attributes which
 must be specified by matching Import-Package statements in the
 Export-Package manifest header.

 </para>
         <para>
 The directive value is encoded in the Export-Package manifest header
 like:

 </para>
         <programlisting>     Export-Package: org.osgi.framework; mandatory:="bundle-symbolic-name"</programlisting>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.EXPORT_PACKAGE">EXPORT_PACKAGE</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="OBJECTCLASS" role="field" xml:id="org.osgi.framework.Constants.OBJECTCLASS">
         <title>public static final String OBJECTCLASS = "objectClass"</title>
         <para>
Service property identifying all of the class names under which a service
 was registered in the Framework. The value of this property must be of
 type <code>String[]</code>.

 </para>
         <para>
 This property is set by the Framework when a service is registered.</para>
      </section>
      <section xreflabel="PACKAGE_SPECIFICATION_VERSION" role="field" xml:id="org.osgi.framework.Constants.PACKAGE_SPECIFICATION_VERSION">
         <title>public static final String PACKAGE_SPECIFICATION_VERSION = "specification-version"</title>
         <para>
Manifest header attribute identifying the version of a package specified
 in the Export-Package or Import-Package manifest header.
   </para>
         <formalpara role="parameter">
            <title>Deprecated</title>
            <para>As of 1.3. This has been replaced by
             <link linkend="org.osgi.framework.Constants.VERSION_ATTRIBUTE">VERSION_ATTRIBUTE</link>.</para>
         </formalpara>
      </section>
      <section xreflabel="PROVIDE_CAPABILITY" role="field" xml:id="org.osgi.framework.Constants.PROVIDE_CAPABILITY">
         <title>public static final String PROVIDE_CAPABILITY = "Provide-Capability"</title>
         <para>
Manifest header identifying the capabilities that the bundle offers to
 provide to other bundles.

 </para>
         <para>
 The header value may be retrieved from the <code>Dictionary</code> object
 returned by the <code>Bundle.getHeaders</code> method.</para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.6</para>
         </formalpara>
      </section>
      <section xreflabel="REMOTE_CONFIGS_SUPPORTED" role="field" xml:id="org.osgi.framework.Constants.REMOTE_CONFIGS_SUPPORTED">
         <title>public static final String REMOTE_CONFIGS_SUPPORTED = "remote.configs.supported"</title>
         <para>
Service property identifying the configuration types supported by a
 distribution provider. Registered by the distribution provider on one of
 its services to indicate the supported configuration types.

 </para>
         <para>
 The value of this property must be of type <code>String</code>,
 <code>String[]</code>, or <code>Collection</code> of <code>String</code>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>Remote Services Specification</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.6</para>
         </formalpara>
      </section>
      <section xreflabel="REMOTE_INTENTS_SUPPORTED" role="field" xml:id="org.osgi.framework.Constants.REMOTE_INTENTS_SUPPORTED">
         <title>public static final String REMOTE_INTENTS_SUPPORTED = "remote.intents.supported"</title>
         <para>
Service property identifying the intents supported by a distribution
 provider. Registered by the distribution provider on one of its services
 to indicate the vocabulary of implemented intents.

 </para>
         <para>
 The value of this property must be of type <code>String</code>,
 <code>String[]</code>, or <code>Collection</code> of <code>String</code>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>Remote Services Specification</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.6</para>
         </formalpara>
      </section>
      <section xreflabel="REQUIRE_BUNDLE" role="field" xml:id="org.osgi.framework.Constants.REQUIRE_BUNDLE">
         <title>public static final String REQUIRE_BUNDLE = "Require-Bundle"</title>
         <para>
Manifest header identifying the symbolic names of other bundles required
 by the bundle.

 </para>
         <para>
 The header value may be retrieved from the <code>Dictionary</code> object
 returned by the <code>Bundle.getHeaders</code> method.</para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="REQUIRE_CAPABILITY" role="field" xml:id="org.osgi.framework.Constants.REQUIRE_CAPABILITY">
         <title>public static final String REQUIRE_CAPABILITY = "Require-Capability"</title>
         <para>
Manifest header identifying the capabilities on which the bundle depends.

 </para>
         <para>
 The header value may be retrieved from the <code>Dictionary</code> object
 returned by the <code>Bundle.getHeaders</code> method.</para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.6</para>
         </formalpara>
      </section>
      <section xreflabel="RESOLUTION_DIRECTIVE" role="field" xml:id="org.osgi.framework.Constants.RESOLUTION_DIRECTIVE">
         <title>public static final String RESOLUTION_DIRECTIVE = "resolution"</title>
         <para>
Manifest header directive identifying the resolution type in the
 Import-Package, Require-Bundle or Require-Capability manifest header. The
 default value is <link linkend="org.osgi.framework.Constants.RESOLUTION_MANDATORY">mandatory</link>.

 </para>
         <para>
 The directive value is encoded in the Import-Package, Require-Bundle or
 Require-Capability manifest header like:

 </para>
         <programlisting>     Import-Package: org.osgi.framework; resolution:="optional"
     Require-Bundle: com.acme.module.test; resolution:="optional"
     Require-Capability: com.acme.capability; resolution:="optional"</programlisting>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.IMPORT_PACKAGE">IMPORT_PACKAGE</link>, <link linkend="org.osgi.framework.Constants.REQUIRE_BUNDLE">REQUIRE_BUNDLE</link>, <link linkend="org.osgi.framework.Constants.REQUIRE_CAPABILITY">REQUIRE_CAPABILITY</link>, <link linkend="org.osgi.framework.Constants.RESOLUTION_MANDATORY">RESOLUTION_MANDATORY</link>, <link linkend="org.osgi.framework.Constants.RESOLUTION_OPTIONAL">RESOLUTION_OPTIONAL</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="RESOLUTION_MANDATORY" role="field" xml:id="org.osgi.framework.Constants.RESOLUTION_MANDATORY">
         <title>public static final String RESOLUTION_MANDATORY = "mandatory"</title>
         <para>
Manifest header directive value identifying a mandatory resolution type.
 A mandatory resolution type indicates that the import package, require
 bundle or require capability must be resolved when the bundle is
 resolved. If such an import, require bundle or require capability cannot
 be resolved, the module fails to resolve.

 </para>
         <para>
 The directive value is encoded in the Import-Package, Require-Bundle or
 Require-Capability manifest header like:

 </para>
         <programlisting>     Import-Package: org.osgi.framework; resolution:="mandatory"
     Require-Bundle: com.acme.module.test; resolution:="mandatory"
     Require-Capability: com.acme.capability; resolution:="mandatory"</programlisting>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.RESOLUTION_DIRECTIVE">RESOLUTION_DIRECTIVE</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="RESOLUTION_OPTIONAL" role="field" xml:id="org.osgi.framework.Constants.RESOLUTION_OPTIONAL">
         <title>public static final String RESOLUTION_OPTIONAL = "optional"</title>
         <para>
Manifest header directive value identifying an optional resolution type.
 An optional resolution type indicates that the import, require bundle or
 require capability is optional and the bundle may be resolved without the
 import, require bundle or require capability being resolved. If the
 import, require bundle or require capability is not resolved when the
 bundle is resolved, the import, require bundle or require capability may
 not be resolved until the bundle is refreshed.

 </para>
         <para>
 The directive value is encoded in the Import-Package, Require-Bundle or
 Require-Capability manifest header like:

 </para>
         <programlisting>     Import-Package: org.osgi.framework; resolution:="optional"
     Require-Bundle: com.acme.module.test; resolution:="optional"
     Require-Capability: com.acme.capability; resolution:="optional"</programlisting>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.RESOLUTION_DIRECTIVE">RESOLUTION_DIRECTIVE</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="SCOPE_BUNDLE" role="field" xml:id="org.osgi.framework.Constants.SCOPE_BUNDLE">
         <title>public static final String SCOPE_BUNDLE = "bundle"</title>
         <para>
Service scope is bundle. Each bundle using the service receives a
 customized service object.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.SERVICE_SCOPE">SERVICE_SCOPE</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.8</para>
         </formalpara>
      </section>
      <section xreflabel="SCOPE_PROTOTYPE" role="field" xml:id="org.osgi.framework.Constants.SCOPE_PROTOTYPE">
         <title>public static final String SCOPE_PROTOTYPE = "prototype"</title>
         <para>
Service scope is prototype. Each bundle using the service receives either
 a customized service object or can request multiple customized service
 objects via <link linkend="org.osgi.framework.ServiceObjects">ServiceObjects</link>.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.SERVICE_SCOPE">SERVICE_SCOPE</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.8</para>
         </formalpara>
      </section>
      <section xreflabel="SCOPE_SINGLETON" role="field" xml:id="org.osgi.framework.Constants.SCOPE_SINGLETON">
         <title>public static final String SCOPE_SINGLETON = "singleton"</title>
         <para>
Service scope is singleton. All bundles using the service receive the
 same service object.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.SERVICE_SCOPE">SERVICE_SCOPE</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.8</para>
         </formalpara>
      </section>
      <section xreflabel="SELECTION_FILTER_ATTRIBUTE" role="field" xml:id="org.osgi.framework.Constants.SELECTION_FILTER_ATTRIBUTE">
         <title>public static final String SELECTION_FILTER_ATTRIBUTE = "selection-filter"</title>
         <para>
Manifest header attribute is used for selection by filtering based upon
 system properties.

 </para>
         <para>
 The attribute value is encoded in manifest headers like:

 </para>
         <programlisting>     Bundle-NativeCode: libgtk.so; selection-filter="(ws=gtk)"; ...</programlisting>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.BUNDLE_NATIVECODE">BUNDLE_NATIVECODE</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="SERVICE_BUNDLEID" role="field" xml:id="org.osgi.framework.Constants.SERVICE_BUNDLEID">
         <title>public static final String SERVICE_BUNDLEID = "service.bundleid"</title>
         <para>
Service property identifying the <link linkend="org.osgi.framework.Bundle.getBundleId--">bundle id</link>
 of the <link linkend="org.osgi.framework.ServiceReference.getBundle--">bundle registering the
 service</link>.

 </para>
         <para>
 This property is set by the Framework when a service is registered. The
 value of this property must be of type <code>Long</code>.</para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.8</para>
         </formalpara>
      </section>
      <section xreflabel="SERVICE_CHANGECOUNT" role="field" xml:id="org.osgi.framework.Constants.SERVICE_CHANGECOUNT">
         <title>public static final String SERVICE_CHANGECOUNT = "service.changecount"</title>
         <para>
Service property identifying the monotonically increasing change count of
 a service.
 </para>
         <para>
 A service may provide this property to indicate there has been a change
 in some data provided by the service. The change count must be
 incremented with a positive value every time the data provided by the
 service is changed. The service announces the modified change count by
 updating its service properties with the new value for this service
 property.
 </para>
         <para>
 The value of this property must be of type <code>Long</code>.</para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.9</para>
         </formalpara>
      </section>
      <section xreflabel="SERVICE_DESCRIPTION" role="field" xml:id="org.osgi.framework.Constants.SERVICE_DESCRIPTION">
         <title>public static final String SERVICE_DESCRIPTION = "service.description"</title>
         <para>
Service property identifying a service's description.

 </para>
         <para>
 This property may be supplied in the properties <code>Dictionary</code> object
 passed to the <code>BundleContext.registerService</code> method.</para>
      </section>
      <section xreflabel="SERVICE_EXPORTED_CONFIGS" role="field" xml:id="org.osgi.framework.Constants.SERVICE_EXPORTED_CONFIGS">
         <title>public static final String SERVICE_EXPORTED_CONFIGS = "service.exported.configs"</title>
         <para>
Service property identifying the configuration types that should be used
 to export the service. Each configuration type represents the
 configuration parameters for an endpoint. A distribution provider should
 create an endpoint for each configuration type that it supports.

 </para>
         <para>
 This property may be supplied in the <code>properties</code>
            <code>Dictionary</code> object passed to the
 <code>BundleContext.registerService</code> method. The value of this property
 must be of type <code>String</code>, <code>String[]</code>, or <code>Collection</code>
 of <code>String</code>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>Remote Services Specification</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.6</para>
         </formalpara>
      </section>
      <section xreflabel="SERVICE_EXPORTED_INTENTS" role="field" xml:id="org.osgi.framework.Constants.SERVICE_EXPORTED_INTENTS">
         <title>public static final String SERVICE_EXPORTED_INTENTS = "service.exported.intents"</title>
         <para>
Service property identifying the intents that the distribution provider
 must implement to distribute the service. Intents listed in this property
 are reserved for intents that are critical for the code to function
 correctly, for example, ordering of messages. These intents should not be
 configurable.

 </para>
         <para>
 This property may be supplied in the <code>properties</code>
            <code>Dictionary</code> object passed to the
 <code>BundleContext.registerService</code> method. The value of this property
 must be of type <code>String</code>, <code>String[]</code>, or <code>Collection</code>
 of <code>String</code>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>Remote Services Specification</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.6</para>
         </formalpara>
      </section>
      <section xreflabel="SERVICE_EXPORTED_INTENTS_EXTRA" role="field" xml:id="org.osgi.framework.Constants.SERVICE_EXPORTED_INTENTS_EXTRA">
         <title>public static final String SERVICE_EXPORTED_INTENTS_EXTRA = "service.exported.intents.extra"</title>
         <para>
Service property identifying the extra intents that the distribution
 provider must implement to distribute the service. This property is
 merged with the <code>service.exported.intents</code> property before the
 distribution provider interprets the listed intents; it has therefore the
 same semantics but the property should be configurable so the
 administrator can choose the intents based on the topology. Bundles
 should therefore make this property configurable, for example through the
 Configuration Admin service.

 </para>
         <para>
 This property may be supplied in the <code>properties</code>
            <code>Dictionary</code> object passed to the
 <code>BundleContext.registerService</code> method. The value of this property
 must be of type <code>String</code>, <code>String[]</code>, or <code>Collection</code>
 of <code>String</code>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>Remote Services Specification</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.6</para>
         </formalpara>
      </section>
      <section xreflabel="SERVICE_EXPORTED_INTERFACES" role="field" xml:id="org.osgi.framework.Constants.SERVICE_EXPORTED_INTERFACES">
         <title>public static final String SERVICE_EXPORTED_INTERFACES = "service.exported.interfaces"</title>
         <para>
Service property marking the service for export. It defines the
 interfaces under which this service can be exported. This list must be a
 subset of the types under which the service was registered. The single
 value of an asterisk (<code>'*'</code> \u002A) indicates all the interface
 types under which the service was registered excluding the non-interface
 types. It is strongly recommended to only export interface types and not
 concrete classes due to the complexity of creating proxies for some type
 of concrete classes.

 </para>
         <para>
 This property may be supplied in the <code>properties</code>
            <code>Dictionary</code> object passed to the
 <code>BundleContext.registerService</code> method. The value of this property
 must be of type <code>String</code>, <code>String[]</code>, or <code>Collection</code>
 of <code>String</code>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>Remote Services Specification</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.6</para>
         </formalpara>
      </section>
      <section xreflabel="SERVICE_ID" role="field" xml:id="org.osgi.framework.Constants.SERVICE_ID">
         <title>public static final String SERVICE_ID = "service.id"</title>
         <para>
Service property identifying a service's registration number. The value
 of this property must be of type <code>Long</code>.

 </para>
         <para>
 The value of this property is assigned by the Framework when a service is
 registered. The Framework assigns a unique, non-negative value that is
 larger than all previously assigned values since the Framework was
 started. These values are NOT persistent across restarts of the
 Framework.</para>
      </section>
      <section xreflabel="SERVICE_IMPORTED" role="field" xml:id="org.osgi.framework.Constants.SERVICE_IMPORTED">
         <title>public static final String SERVICE_IMPORTED = "service.imported"</title>
         <para>
Service property identifying the service as imported. This service
 property must be set by a distribution provider to any value when it
 registers the endpoint proxy as an imported service. A bundle can use
 this property to filter out imported services.

 </para>
         <para>
 The value of this property may be of any type.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>Remote Services Specification</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.6</para>
         </formalpara>
      </section>
      <section xreflabel="SERVICE_IMPORTED_CONFIGS" role="field" xml:id="org.osgi.framework.Constants.SERVICE_IMPORTED_CONFIGS">
         <title>public static final String SERVICE_IMPORTED_CONFIGS = "service.imported.configs"</title>
         <para>
Service property identifying the configuration types used to import the
 service. Any associated properties for this configuration types must be
 properly mapped to the importing system. For example, a URL in these
 properties must point to a valid resource when used in the importing
 framework. If multiple configuration types are listed in this property,
 then they must be synonyms for exactly the same remote endpoint that is
 used to export this service.

 </para>
         <para>
 The value of this property must be of type <code>String</code>,
 <code>String[]</code>, or <code>Collection</code> of <code>String</code>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>Remote Services Specification</code>, <link linkend="org.osgi.framework.Constants.SERVICE_EXPORTED_CONFIGS">SERVICE_EXPORTED_CONFIGS</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.6</para>
         </formalpara>
      </section>
      <section xreflabel="SERVICE_INTENTS" role="field" xml:id="org.osgi.framework.Constants.SERVICE_INTENTS">
         <title>public static final String SERVICE_INTENTS = "service.intents"</title>
         <para>
Service property identifying the intents that this service implements.
 This property has a dual purpose:
 </para>
         <itemizedlist>
            <listitem>
               <para>A bundle can use this service property to notify the distribution
 provider that these intents are already implemented by the exported
 service object.</para>
            </listitem>
            <listitem>
               <para>A distribution provider must use this property to convey the combined
 intents of: the exporting service, the intents that the exporting
 distribution provider adds, and the intents that the importing
 distribution provider adds.</para>
            </listitem>
         </itemizedlist>
         <para>

 To export a service, a distribution provider must expand any qualified
 intents. Both the exporting and importing distribution providers must
 recognize all intents before a service can be distributed.

 </para>
         <para>
 The value of this property must be of type <code>String</code>,
 <code>String[]</code>, or <code>Collection</code> of <code>String</code>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>Remote Services Specification</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.6</para>
         </formalpara>
      </section>
      <section xreflabel="SERVICE_PID" role="field" xml:id="org.osgi.framework.Constants.SERVICE_PID">
         <title>public static final String SERVICE_PID = "service.pid"</title>
         <para>
Service property identifying a service's persistent identifier.

 </para>
         <para>
 This property may be supplied in the <code>properties</code>
            <code>Dictionary</code> object passed to the
 <code>BundleContext.registerService</code> method. The value of this property
 must be of type <code>String</code>, <code>String[]</code>, or <code>Collection</code>
 of <code>String</code>.

 </para>
         <para>
 A service's persistent identifier uniquely identifies the service and
 persists across multiple Framework invocations.

 </para>
         <para>
 By convention, every bundle has its own unique namespace, starting with
 the bundle's identifier (see <link linkend="org.osgi.framework.Bundle.getBundleId--">Bundle.getBundleId()</link>) and followed
 by a dot (.). A bundle may use this as the prefix of the persistent
 identifiers for the services it registers.</para>
      </section>
      <section xreflabel="SERVICE_RANKING" role="field" xml:id="org.osgi.framework.Constants.SERVICE_RANKING">
         <title>public static final String SERVICE_RANKING = "service.ranking"</title>
         <para>
Service property identifying a service's ranking number.

 </para>
         <para>
 This property may be supplied in the <code>properties
 Dictionary</code> object passed to the <code>BundleContext.registerService</code>
 method. The value of this property must be of type <code>Integer</code>.

 </para>
         <para>
 The service ranking is used by the Framework to determine the <emphasis>natural
 order</emphasis> of services, see <link linkend="org.osgi.framework.ServiceReference.compareTo-Object-">ServiceReference.compareTo(Object)</link>,
 and the <emphasis>default</emphasis> service to be returned from a call to the
 <link linkend="org.osgi.framework.BundleContext.getServiceReference-Class-">BundleContext.getServiceReference(Class)</link> or
 <link linkend="org.osgi.framework.BundleContext.getServiceReference-String-">BundleContext.getServiceReference(String)</link> method.

 </para>
         <para>
 The default ranking is zero (0). A service with a ranking of
 <code>Integer.MAX_VALUE</code> is very likely to be returned as the default
 service, whereas a service with a ranking of <code>Integer.MIN_VALUE</code> is
 very unlikely to be returned.

 </para>
         <para>
 If the supplied property value is not of type <code>Integer</code>, it is
 deemed to have a ranking value of zero.</para>
      </section>
      <section xreflabel="SERVICE_SCOPE" role="field" xml:id="org.osgi.framework.Constants.SERVICE_SCOPE">
         <title>public static final String SERVICE_SCOPE = "service.scope"</title>
         <para>
Service property identifying a service's scope.

 </para>
         <para>
 This property is set by the Framework when a service is registered. If
 the registered object implements <link linkend="org.osgi.framework.PrototypeServiceFactory">PrototypeServiceFactory</link>, then
 the value of this service property will be <link linkend="org.osgi.framework.Constants.SCOPE_PROTOTYPE">SCOPE_PROTOTYPE</link>.
 Otherwise, if the registered object implements <link linkend="org.osgi.framework.ServiceFactory">ServiceFactory</link>,
 then the value of this service property will be <link linkend="org.osgi.framework.Constants.SCOPE_BUNDLE">SCOPE_BUNDLE</link>.
 Otherwise, the value of this service property will be
 <link linkend="org.osgi.framework.Constants.SCOPE_SINGLETON">SCOPE_SINGLETON</link>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.SCOPE_SINGLETON">SCOPE_SINGLETON</link>, <link linkend="org.osgi.framework.Constants.SCOPE_BUNDLE">SCOPE_BUNDLE</link>, <link linkend="org.osgi.framework.Constants.SCOPE_PROTOTYPE">SCOPE_PROTOTYPE</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.8</para>
         </formalpara>
      </section>
      <section xreflabel="SERVICE_VENDOR" role="field" xml:id="org.osgi.framework.Constants.SERVICE_VENDOR">
         <title>public static final String SERVICE_VENDOR = "service.vendor"</title>
         <para>
Service property identifying a service's vendor.

 </para>
         <para>
 This property may be supplied in the properties <code>Dictionary</code> object
 passed to the <code>BundleContext.registerService</code> method.</para>
      </section>
      <section xreflabel="SINGLETON_DIRECTIVE" role="field" xml:id="org.osgi.framework.Constants.SINGLETON_DIRECTIVE">
         <title>public static final String SINGLETON_DIRECTIVE = "singleton"</title>
         <para>
Manifest header directive identifying whether a bundle is a singleton.
 The default value is <code>false</code>.

 </para>
         <para>
 The directive value is encoded in the Bundle-SymbolicName manifest header
 like:

 </para>
         <programlisting>     Bundle-SymbolicName: com.acme.module.test; singleton:=true</programlisting>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.BUNDLE_SYMBOLICNAME">BUNDLE_SYMBOLICNAME</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="SUPPORTS_BOOTCLASSPATH_EXTENSION" role="field" xml:id="org.osgi.framework.Constants.SUPPORTS_BOOTCLASSPATH_EXTENSION">
         <title>public static final String SUPPORTS_BOOTCLASSPATH_EXTENSION = "org.osgi.supports.bootclasspath.extension"</title>
         <para>
Framework environment property identifying whether the Framework supports
 bootclasspath extension bundles.
 </para>
         <para>
 If the value of this property is <code>true</code>, then the Framework
 supports bootclasspath extension bundles. The default value is
 <code>false</code>.
 </para>
         <para>
 The value of this property may be retrieved by calling the
 <code>BundleContext.getProperty</code> method.</para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Deprecated</title>
            <para>As of 1.10.</para>
         </formalpara>
      </section>
      <section xreflabel="SUPPORTS_FRAMEWORK_EXTENSION" role="field" xml:id="org.osgi.framework.Constants.SUPPORTS_FRAMEWORK_EXTENSION">
         <title>public static final String SUPPORTS_FRAMEWORK_EXTENSION = "org.osgi.supports.framework.extension"</title>
         <para>
Framework environment property identifying whether the Framework supports
 framework extension bundles.

 </para>
         <para>
 As of version 1.4, the value of this property must be <code>true</code>. The
 Framework must support framework extension bundles.

 </para>
         <para>
 The value of this property may be retrieved by calling the
 <code>BundleContext.getProperty</code> method.</para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="SUPPORTS_FRAMEWORK_FRAGMENT" role="field" xml:id="org.osgi.framework.Constants.SUPPORTS_FRAMEWORK_FRAGMENT">
         <title>public static final String SUPPORTS_FRAMEWORK_FRAGMENT = "org.osgi.supports.framework.fragment"</title>
         <para>
Framework environment property identifying whether the Framework supports
 fragment bundles.

 </para>
         <para>
 As of version 1.4, the value of this property must be <code>true</code>. The
 Framework must support fragment bundles.
 </para>
         <para>
 The value of this property may be retrieved by calling the
 <code>BundleContext.getProperty</code> method.</para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="SUPPORTS_FRAMEWORK_REQUIREBUNDLE" role="field" xml:id="org.osgi.framework.Constants.SUPPORTS_FRAMEWORK_REQUIREBUNDLE">
         <title>public static final String SUPPORTS_FRAMEWORK_REQUIREBUNDLE = "org.osgi.supports.framework.requirebundle"</title>
         <para>
Framework environment property identifying whether the Framework supports
 the <link linkend="org.osgi.framework.Constants.REQUIRE_BUNDLE">Require-Bundle</link> manifest header.

 </para>
         <para>
 As of version 1.4, the value of this property must be <code>true</code>. The
 Framework must support the <code>Require-Bundle</code> manifest header.
 </para>
         <para>
 The value of this property may be retrieved by calling the
 <code>BundleContext.getProperty</code> method.</para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="SYSTEM_BUNDLE_ID" role="field" xml:id="org.osgi.framework.Constants.SYSTEM_BUNDLE_ID">
         <title>public static final long SYSTEM_BUNDLE_ID = 0L</title>
         <para>
Identifier of the OSGi <emphasis>system bundle </emphasis>, which is defined to be
 <code>0</code>.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.8</para>
         </formalpara>
      </section>
      <section xreflabel="SYSTEM_BUNDLE_LOCATION" role="field" xml:id="org.osgi.framework.Constants.SYSTEM_BUNDLE_LOCATION">
         <title>public static final String SYSTEM_BUNDLE_LOCATION = "System Bundle"</title>
         <para>
Location identifier of the OSGi <emphasis>system bundle </emphasis>, which is defined
 to be "System Bundle".
   </para>
      </section>
      <section xreflabel="SYSTEM_BUNDLE_SYMBOLICNAME" role="field" xml:id="org.osgi.framework.Constants.SYSTEM_BUNDLE_SYMBOLICNAME">
         <title>public static final String SYSTEM_BUNDLE_SYMBOLICNAME = "system.bundle"</title>
         <para>
Alias for the symbolic name of the OSGi <emphasis>system bundle </emphasis>. It is
 defined to be "system.bundle".
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="USES_DIRECTIVE" role="field" xml:id="org.osgi.framework.Constants.USES_DIRECTIVE">
         <title>public static final String USES_DIRECTIVE = "uses"</title>
         <para>
Manifest header directive identifying a list of packages that an exported
 package or provided capability uses.

 </para>
         <para>
 The directive value is encoded in the Export-Package or
 Provide-Capability manifest header like:

 </para>
         <programlisting>     Export-Package: org.osgi.util.tracker; uses:="org.osgi.framework"
     Provide-Capability: com.acme.capability; uses:="com.acme.service"</programlisting>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.EXPORT_PACKAGE">EXPORT_PACKAGE</link>, <link linkend="org.osgi.framework.Constants.PROVIDE_CAPABILITY">PROVIDE_CAPABILITY</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="VERSION_ATTRIBUTE" role="field" xml:id="org.osgi.framework.Constants.VERSION_ATTRIBUTE">
         <title>public static final String VERSION_ATTRIBUTE = "version"</title>
         <para>
Manifest header attribute identifying the version of a package specified
 in the Export-Package or Import-Package manifest header.

 </para>
         <para>
 The attribute value is encoded in the Export-Package or Import-Package
 manifest header like:

 </para>
         <programlisting>     Export-Package: org.osgi.framework; version="1.1"</programlisting>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.EXPORT_PACKAGE">EXPORT_PACKAGE</link>, <link linkend="org.osgi.framework.Constants.IMPORT_PACKAGE">IMPORT_PACKAGE</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="VISIBILITY_DIRECTIVE" role="field" xml:id="org.osgi.framework.Constants.VISIBILITY_DIRECTIVE">
         <title>public static final String VISIBILITY_DIRECTIVE = "visibility"</title>
         <para>
Manifest header directive identifying the visibility of a required bundle
 in the Require-Bundle manifest header. The default value is
 <link linkend="org.osgi.framework.Constants.VISIBILITY_PRIVATE">private</link>.

 </para>
         <para>
 The directive value is encoded in the Require-Bundle manifest header
 like:

 </para>
         <programlisting>     Require-Bundle: com.acme.module.test; visibility:="reexport"</programlisting>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.REQUIRE_BUNDLE">REQUIRE_BUNDLE</link>, <link linkend="org.osgi.framework.Constants.VISIBILITY_PRIVATE">VISIBILITY_PRIVATE</link>, <link linkend="org.osgi.framework.Constants.VISIBILITY_REEXPORT">VISIBILITY_REEXPORT</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="VISIBILITY_PRIVATE" role="field" xml:id="org.osgi.framework.Constants.VISIBILITY_PRIVATE">
         <title>public static final String VISIBILITY_PRIVATE = "private"</title>
         <para>
Manifest header directive value identifying a private visibility type. A
 private visibility type indicates that any packages that are exported by
 the required bundle are not made visible on the export signature of the
 requiring bundle.

 </para>
         <para>
 The directive value is encoded in the Require-Bundle manifest header
 like:

 </para>
         <programlisting>     Require-Bundle: com.acme.module.test; visibility:="private"</programlisting>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.VISIBILITY_DIRECTIVE">VISIBILITY_DIRECTIVE</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="VISIBILITY_REEXPORT" role="field" xml:id="org.osgi.framework.Constants.VISIBILITY_REEXPORT">
         <title>public static final String VISIBILITY_REEXPORT = "reexport"</title>
         <para>
Manifest header directive value identifying a reexport visibility type. A
 reexport visibility type indicates any packages that are exported by the
 required bundle are re-exported by the requiring bundle. Any arbitrary
 matching attributes with which they were exported by the required bundle
 are deleted.
 </para>
         <para>
 The directive value is encoded in the Require-Bundle manifest header
 like:

 </para>
         <programlisting>     Require-Bundle: com.acme.module.test; visibility:="reexport"</programlisting>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.VISIBILITY_DIRECTIVE">VISIBILITY_DIRECTIVE</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="Filter" role="class" xml:id="org.osgi.framework.Filter">
      <title>public interface Filter</title>
      <para>
An <link xlink:href="http://www.ietf.org/rfc/rfc1960.txt">RFC 1960</link>-based Filter.
 </para>
      <para>
         <code>Filter</code>s can be created by calling
 <link linkend="org.osgi.framework.BundleContext.createFilter-String-">BundleContext.createFilter(String)</link> or
 <link linkend="org.osgi.framework.FrameworkUtil.createFilter-String-">FrameworkUtil.createFilter(String)</link> with a filter string.
 </para>
      <para>
 A <code>Filter</code> can be used numerous times to determine if the match
 argument matches the filter string that was used to create the <code>Filter</code>.
 </para>
      <para>
 Some examples of LDAP filters are:

 </para>
      <programlisting>  "(cn=Babs Jensen)"
  "(!(cn=Tim Howes))"
  "(&amp;(" + Constants.OBJECTCLASS + "=Person)(|(sn=Jensen)(cn=Babs J*)))"
  "(o=univ*of*mich*)"</programlisting>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <code>Core Specification, Filters, for a description of the filter string syntax.</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.1</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section xreflabel="equals(Object)" role="method" xml:id="org.osgi.framework.Filter.equals-Object-">
         <title>public boolean equals(Object obj)</title>
         <formalpara role="parameter">
            <title>obj</title>
            <para>The object to compare against this <code>Filter</code>.</para>
         </formalpara>
         <para role="description">
Compares this <code>Filter</code> to another <code>Filter</code>.

 </para>
         <para>
 This implementation returns the result of calling
 <code>this.toString().equals(obj.toString())</code>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>If the other object is a <code>Filter</code> object, then returns the
         result of calling <code>this.toString().equals(obj.toString())</code>;
         <code>false</code> otherwise.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="hashCode()" role="method" xml:id="org.osgi.framework.Filter.hashCode--">
         <title>public int hashCode()</title>
         <para role="description">
Returns the hashCode for this <code>Filter</code>.

 </para>
         <para>
 This implementation returns the result of calling
 <code>this.toString().hashCode()</code>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The hashCode of this <code>Filter</code>.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="match(ServiceReference)" role="method" xml:id="org.osgi.framework.Filter.match-ServiceReference-">
         <title>public boolean match(ServiceReference&lt;?&gt; reference)</title>
         <formalpara role="parameter">
            <title>reference</title>
            <para>The reference to the service whose properties are used
        in the match.</para>
         </formalpara>
         <para role="description">
Filter using a service's properties.
 </para>
         <para>
 This <code>Filter</code> is executed using the keys and values of the
 referenced service's properties. The keys are looked up in a case
 insensitive manner.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the service's properties match this
         <code>Filter</code>; <code>false</code> otherwise.</para>
         </formalpara>
      </section>
      <section xreflabel="match(Dictionary)" role="method" xml:id="org.osgi.framework.Filter.match-Dictionary-">
         <title>public boolean match(Dictionary&lt;String, ?&gt; dictionary)</title>
         <formalpara role="parameter">
            <title>dictionary</title>
            <para>The <code>Dictionary</code> whose key/value pairs are used
        in the match.</para>
         </formalpara>
         <para role="description">
Filter using a <code>Dictionary</code> with case insensitive key lookup. This
 <code>Filter</code> is executed using the specified <code>Dictionary</code>'s keys
 and values. The keys are looked up in a case insensitive manner.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the <code>Dictionary</code>'s values match this
         filter; <code>false</code> otherwise.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If <code>dictionary</code> contains case
         variants of the same key name.</para>
         </formalpara>
      </section>
      <section xreflabel="matchCase(Dictionary)" role="method" xml:id="org.osgi.framework.Filter.matchCase-Dictionary-">
         <title>public boolean matchCase(Dictionary&lt;String, ?&gt; dictionary)</title>
         <formalpara role="parameter">
            <title>dictionary</title>
            <para>The <code>Dictionary</code> whose key/value pairs are used
        in the match.</para>
         </formalpara>
         <para role="description">
Filter using a <code>Dictionary</code>. This <code>Filter</code> is executed using
 the specified <code>Dictionary</code>'s keys and values. The keys are looked
 up in a normal manner respecting case.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the <code>Dictionary</code>'s values match this
         filter; <code>false</code> otherwise.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="matches(Map)" role="method" xml:id="org.osgi.framework.Filter.matches-Map-">
         <title>public boolean matches(Map&lt;String, ?&gt; map)</title>
         <formalpara role="parameter">
            <title>map</title>
            <para>The <code>Map</code> whose key/value pairs are used in the match.
        Maps with <code>null</code> key or values are not supported. A
        <code>null</code> value is considered not present to the filter.</para>
         </formalpara>
         <para role="description">
Filter using a <code>Map</code>. This <code>Filter</code> is executed using the
 specified <code>Map</code>'s keys and values. The keys are looked up in a
 normal manner respecting case.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the <code>Map</code>'s values match this filter;
         <code>false</code> otherwise.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.6</para>
         </formalpara>
      </section>
      <section xreflabel="toString()" role="method" xml:id="org.osgi.framework.Filter.toString--">
         <title>public String toString()</title>
         <para role="description">
Returns this <code>Filter</code>'s filter string.
 </para>
         <para>
 The filter string is normalized by removing whitespace which does not
 affect the meaning of the filter.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>This <code>Filter</code>'s filter string.</para>
         </formalpara>
         <para/>
      </section>
   </section>
   <section xreflabel="FrameworkEvent" role="class" xml:id="org.osgi.framework.FrameworkEvent">
      <title>public class FrameworkEvent<?line-break?> extends EventObject</title>
      <para>
A general event from the Framework.

 </para>
      <para>
         <code>FrameworkEvent</code> objects are delivered to <code>FrameworkListener</code>s
 when a general event occurs within the OSGi environment. A type code is used
 to identify the event type for future extendability.

 </para>
      <para>
 OSGi Working Group reserves the right to extend the set of event types.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.framework.FrameworkListener">FrameworkListener</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section xreflabel="ERROR" role="field" xml:id="org.osgi.framework.FrameworkEvent.ERROR">
         <title>public static final int ERROR = 2</title>
         <para>
An error has occurred.

 </para>
         <para>
 There was an error associated with a bundle.</para>
      </section>
      <section xreflabel="INFO" role="field" xml:id="org.osgi.framework.FrameworkEvent.INFO">
         <title>public static final int INFO = 32</title>
         <para>
An informational event has occurred.

 </para>
         <para>
 There was an informational event associated with a bundle.</para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="PACKAGES_REFRESHED" role="field" xml:id="org.osgi.framework.FrameworkEvent.PACKAGES_REFRESHED">
         <title>public static final int PACKAGES_REFRESHED = 4</title>
         <para>
A FrameworkWiring.refreshBundles operation has completed.

 </para>
         <para>
 This event is fired when the Framework has completed the refresh bundles
 operation initiated by a call to the FrameworkWiring.refreshBundles
 method. The source of this event is the System Bundle.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.wiring.FrameworkWiring.refreshBundles-Collection-FrameworkListener...-">FrameworkWiring.refreshBundles(java.util.Collection,
      FrameworkListener...)</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.2</para>
         </formalpara>
      </section>
      <section xreflabel="STARTED" role="field" xml:id="org.osgi.framework.FrameworkEvent.STARTED">
         <title>public static final int STARTED = 1</title>
         <para>
The Framework has started.

 </para>
         <para>
 This event is fired when the Framework has started after all installed
 bundles that are marked to be started have been started and the Framework
 has reached the initial start level. The source of this event is the
 System Bundle.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>The Start Level Specification</code>
            </para>
         </formalpara>
      </section>
      <section xreflabel="STARTLEVEL_CHANGED" role="field" xml:id="org.osgi.framework.FrameworkEvent.STARTLEVEL_CHANGED">
         <title>public static final int STARTLEVEL_CHANGED = 8</title>
         <para>
A FrameworkStartLevel.setStartLevel operation has completed.

 </para>
         <para>
 This event is fired when the Framework has completed changing the active
 start level initiated by a call to the StartLevel.setStartLevel method.
 The source of this event is the System Bundle.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.startlevel.FrameworkStartLevel.setStartLevel-int-FrameworkListener...-">FrameworkStartLevel.setStartLevel(int, FrameworkListener...)</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.2</para>
         </formalpara>
      </section>
      <section xreflabel="STOPPED" role="field" xml:id="org.osgi.framework.FrameworkEvent.STOPPED">
         <title>public static final int STOPPED = 64</title>
         <para>
The Framework has stopped.

 </para>
         <para>
 This event is fired when the Framework has been stopped because of a stop
 operation on the system bundle. The source of this event is the System
 Bundle.</para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="STOPPED_BOOTCLASSPATH_MODIFIED" role="field" xml:id="org.osgi.framework.FrameworkEvent.STOPPED_BOOTCLASSPATH_MODIFIED">
         <title>public static final int STOPPED_BOOTCLASSPATH_MODIFIED = 256</title>
         <para>
The Framework has stopped and the boot class path has changed.
 </para>
         <para>
 This event is fired when the Framework has been stopped because of a stop
 operation on the system bundle and a bootclasspath extension bundle has
 been installed or updated. The source of this event is the System Bundle.</para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Deprecated</title>
            <para>As of 1.10.</para>
         </formalpara>
      </section>
      <section xreflabel="STOPPED_SYSTEM_REFRESHED" role="field" xml:id="org.osgi.framework.FrameworkEvent.STOPPED_SYSTEM_REFRESHED">
         <title>public static final int STOPPED_SYSTEM_REFRESHED = 1024</title>
         <para>
The Framework has stopped and the framework requires a new class loader
 to restart.
 </para>
         <para>
 This event is fired when the Framework has been stopped because of a
 refresh operation on the system bundle and the framework requires a new
 class loader to be used to restart. For example, if a framework extension
 bundle has been refreshed. The source of this event is the System Bundle.</para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.9</para>
         </formalpara>
      </section>
      <section xreflabel="STOPPED_UPDATE" role="field" xml:id="org.osgi.framework.FrameworkEvent.STOPPED_UPDATE">
         <title>public static final int STOPPED_UPDATE = 128</title>
         <para>
The Framework has stopped during update.

 </para>
         <para>
 This event is fired when the Framework has been stopped because of an
 update operation on the system bundle. The Framework will be restarted
 after this event is fired. The source of this event is the System Bundle.</para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="WAIT_TIMEDOUT" role="field" xml:id="org.osgi.framework.FrameworkEvent.WAIT_TIMEDOUT">
         <title>public static final int WAIT_TIMEDOUT = 512</title>
         <para>
The Framework did not stop before the wait timeout expired.

 </para>
         <para>
 This event is fired when the Framework did not stop before the wait
 timeout expired. The source of this event is the System Bundle.</para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="WARNING" role="field" xml:id="org.osgi.framework.FrameworkEvent.WARNING">
         <title>public static final int WARNING = 16</title>
         <para>
A warning has occurred.

 </para>
         <para>
 There was a warning associated with a bundle.</para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="FrameworkEvent(int,Object)" role="method" xml:id="org.osgi.framework.FrameworkEvent.FrameworkEvent-int-Object-">
         <title>public  FrameworkEvent(int type, Object source)</title>
         <formalpara role="parameter">
            <title>type</title>
            <para>The event type.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>source</title>
            <para>The event source object. This may not be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Creates a Framework event.
   </para>
         <formalpara role="parameter">
            <title>Deprecated</title>
            <para>As of 1.2. This constructor is deprecated in favor of using
             the other constructor with the System Bundle as the event
             source.</para>
         </formalpara>
      </section>
      <section xreflabel="FrameworkEvent(int,Bundle,Throwable)" role="method" xml:id="org.osgi.framework.FrameworkEvent.FrameworkEvent-int-Bundle-Throwable-">
         <title>public  FrameworkEvent(int type, Bundle bundle, Throwable throwable)</title>
         <formalpara role="parameter">
            <title>type</title>
            <para>The event type.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>bundle</title>
            <para>The event source.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>throwable</title>
            <para>The related exception. This argument may be <code>null</code>
        if there is no related exception.</para>
         </formalpara>
         <para role="description">
Creates a Framework event regarding the specified bundle.
   </para>
      </section>
      <section xreflabel="getBundle()" role="method" xml:id="org.osgi.framework.FrameworkEvent.getBundle--">
         <title>public Bundle getBundle()</title>
         <para role="description">
Returns the bundle associated with the event. This bundle is also the
 source of the event.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The bundle associated with the event.</para>
         </formalpara>
      </section>
      <section xreflabel="getThrowable()" role="method" xml:id="org.osgi.framework.FrameworkEvent.getThrowable--">
         <title>public Throwable getThrowable()</title>
         <para role="description">
Returns the exception related to this event.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The related exception or <code>null</code> if none.</para>
         </formalpara>
      </section>
      <section xreflabel="getType()" role="method" xml:id="org.osgi.framework.FrameworkEvent.getType--">
         <title>public int getType()</title>
         <para role="description">
Returns the type of framework event.
 </para>
         <para>
 The type values are:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.framework.FrameworkEvent.STARTED">STARTED</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.framework.FrameworkEvent.ERROR">ERROR</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.framework.FrameworkEvent.WARNING">WARNING</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.framework.FrameworkEvent.INFO">INFO</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.framework.FrameworkEvent.PACKAGES_REFRESHED">PACKAGES_REFRESHED</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.framework.FrameworkEvent.STARTLEVEL_CHANGED">STARTLEVEL_CHANGED</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.framework.FrameworkEvent.STOPPED">STOPPED</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.framework.FrameworkEvent.STOPPED_UPDATE">STOPPED_UPDATE</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.framework.FrameworkEvent.WAIT_TIMEDOUT">WAIT_TIMEDOUT</link>
               </para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The type of state change.</para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="FrameworkListener" role="class" xml:id="org.osgi.framework.FrameworkListener">
      <title>public interface FrameworkListener<?line-break?> extends EventListener</title>
      <para>
A <code>FrameworkEvent</code> listener. <code>FrameworkListener</code> is a listener
 interface that may be implemented by a bundle developer. When a
 <code>FrameworkEvent</code> is fired, it is asynchronously delivered to a
 <code>FrameworkListener</code>. The Framework delivers <code>FrameworkEvent</code>
 objects to a <code>FrameworkListener</code> in order and must not concurrently
 call a <code>FrameworkListener</code>.

 </para>
      <para>
 A <code>FrameworkListener</code> object is registered with the Framework using the
 <link linkend="org.osgi.framework.BundleContext.addFrameworkListener-FrameworkListener-">BundleContext.addFrameworkListener(FrameworkListener)</link> method.
 <code>FrameworkListener</code> objects are called with a <code>FrameworkEvent</code>
 objects when the Framework starts and when asynchronous errors occur.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.framework.FrameworkEvent">FrameworkEvent</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <section xreflabel="frameworkEvent(FrameworkEvent)" role="method" xml:id="org.osgi.framework.FrameworkListener.frameworkEvent-FrameworkEvent-">
         <title>public void frameworkEvent(FrameworkEvent event)</title>
         <formalpara role="parameter">
            <title>event</title>
            <para>The <code>FrameworkEvent</code> object.</para>
         </formalpara>
         <para role="description">
Receives notification of a general <code>FrameworkEvent</code> object.
   </para>
      </section>
   </section>
   <section xreflabel="FrameworkUtil" role="class" xml:id="org.osgi.framework.FrameworkUtil">
      <title>public class FrameworkUtil</title>
      <para>
Framework Utility class.

 </para>
      <para>
 This class contains utility methods which access Framework functions that may
 be useful to bundles.</para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.3</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section xreflabel="asDictionary(Map)" role="method" xml:id="org.osgi.framework.FrameworkUtil.asDictionary-Map-">
         <title>public static Dictionary&lt;K, V&gt; asDictionary(Map&lt;? extends K, ? extends V&gt; map)</title>
         <formalpara role="parameter">
            <title>Type Parameters</title>
            <para>
               <code>&lt;K, V&gt;</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>&lt;K&gt;</title>
            <para>The type of the key.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>&lt;V&gt;</title>
            <para>The type of the value.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>map</title>
            <para>The map to wrap.</para>
         </formalpara>
         <para role="description">
Return a Dictionary wrapper around a Map.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A Dictionary object which wraps the specified map. If the
         specified map can be cast to a Dictionary, then the specified map
         is returned.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.10</para>
         </formalpara>
      </section>
      <section xreflabel="asMap(Dictionary)" role="method" xml:id="org.osgi.framework.FrameworkUtil.asMap-Dictionary-">
         <title>public static Map&lt;K, V&gt; asMap(Dictionary&lt;? extends K, ? extends V&gt; dictionary)</title>
         <formalpara role="parameter">
            <title>Type Parameters</title>
            <para>
               <code>&lt;K, V&gt;</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>&lt;K&gt;</title>
            <para>The type of the key.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>&lt;V&gt;</title>
            <para>The type of the value.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>dictionary</title>
            <para>The dictionary to wrap.</para>
         </formalpara>
         <para role="description">
Return a Map wrapper around a Dictionary.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A Map object which wraps the specified dictionary. If the
         specified dictionary can be cast to a Map, then the specified
         dictionary is returned.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.10</para>
         </formalpara>
      </section>
      <section xreflabel="createFilter(String)" role="method" xml:id="org.osgi.framework.FrameworkUtil.createFilter-String-">
         <title>public static Filter createFilter(String filter) throws InvalidSyntaxException</title>
         <formalpara role="parameter">
            <title>filter</title>
            <para>The filter string.</para>
         </formalpara>
         <para role="description">
Creates a <code>Filter</code> object. This <code>Filter</code> object may be used
 to match a <code>ServiceReference</code> object or a <code>Dictionary</code>
 object.

 </para>
         <para>
 If the filter cannot be parsed, an <link linkend="org.osgi.framework.InvalidSyntaxException">InvalidSyntaxException</link> will be
 thrown with a human readable message where the filter became unparsable.

 </para>
         <para>
 This method returns a Filter implementation which may not perform as well
 as the framework implementation-specific Filter implementation returned
 by <link linkend="org.osgi.framework.BundleContext.createFilter-String-">BundleContext.createFilter(String)</link>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A <code>Filter</code> object encapsulating the filter string.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>InvalidSyntaxException</code>– If <code>filter</code> contains an invalid
         filter string that cannot be parsed.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>NullPointerException</code>– If <code>filter</code> is null.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Filter">Filter</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="getBundle(ClassLoader)" role="method" xml:id="org.osgi.framework.FrameworkUtil.getBundle-ClassLoader-">
         <title>public static Optional&lt;Bundle&gt; getBundle(ClassLoader bundleClassLoader)</title>
         <formalpara role="parameter">
            <title>bundleClassLoader</title>
            <para>A bundle class loader.</para>
         </formalpara>
         <para role="description">
Return a <code>Bundle</code> for the specified bundle class loader.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An Optional containing <code>Bundle</code> for the specified bundle
         class loader or an empty Optional if the specified class loader
         is not associated with a specific bundle.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.10</para>
         </formalpara>
      </section>
      <section xreflabel="getBundle(Class)" role="method" xml:id="org.osgi.framework.FrameworkUtil.getBundle-Class-">
         <title>public static Bundle getBundle(Class&lt;?&gt; classFromBundle)</title>
         <formalpara role="parameter">
            <title>classFromBundle</title>
            <para>A class defined by a bundle.</para>
         </formalpara>
         <para role="description">
Return a <code>Bundle</code> for the specified bundle class.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A <code>Bundle</code> for the specified bundle class or <code>null</code>
         if the specified class was not defined by a bundle.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="matchDistinguishedNameChain(String,List)" role="method" xml:id="org.osgi.framework.FrameworkUtil.matchDistinguishedNameChain-String-List-">
         <title>public static boolean matchDistinguishedNameChain(String matchPattern, List&lt;String&gt; dnChain)</title>
         <formalpara role="parameter">
            <title>matchPattern</title>
            <para>The pattern against which to match the DN chain.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>dnChain</title>
            <para>The DN chain to match against the specified pattern. Each
        element of the chain must be of type <code>String</code> and use the
        format defined in <link xlink:href="http://www.ietf.org/rfc/rfc2253.txt">RFC 2253</link>.</para>
         </formalpara>
         <para role="description">
Match a Distinguished Name (DN) chain against a pattern. DNs can be
 matched using wildcards. A wildcard (<code>'*'</code> \u002A) replaces all
 possible values. Due to the structure of the DN, the comparison is more
 complicated than string-based wildcard matching.
 </para>
         <para>
 A wildcard can stand for zero or more DNs in a chain, a number of
 relative distinguished names (RDNs) within a DN, or the value of a single
 RDN. The DNs in the chain and the matching pattern are canonicalized
 before processing. This means, among other things, that spaces must be
 ignored, except in values.
 </para>
         <para>
 The format of a wildcard match pattern is:

 </para>
         <programlisting> matchPattern ::= dn-match ( ';' dn-match ) *
 dn-match     ::= ( '*' | rdn-match ) ( ',' rdn-match ) * | '-'
 rdn-match    ::= name '=' value-match
 value-match  ::= '*' | value-star
 value-star   ::= &lt; value, requires escaped '*' and '-' &gt;</programlisting>
         <para>
 The most simple case is a single wildcard; it must match any DN. A
 wildcard can also replace the first list of RDNs of a DN. The first RDNs
 are the least significant. Such lists of matched RDNs can be empty.
 </para>
         <para>
 For example, a match pattern with a wildcard that matches all DNs that
 end with RDNs of o=ACME and c=US would look like this:

 </para>
         <programlisting> *, o=ACME, c=US</programlisting>
         <para>

 This match pattern would match the following DNs:

 </para>
         <programlisting> cn = Bugs Bunny, o = ACME, c = US
 ou = Carrots, cn=Daffy Duck, o=ACME, c=US
 street = 9C\, Avenue St. Drézéry, o=ACME, c=US
 dc=www, dc=acme, dc=com, o=ACME, c=US
 o=ACME, c=US</programlisting>
         <para>

 The following DNs would not match:

 </para>
         <programlisting> street = 9C\, Avenue St. Drézéry, o=ACME, c=FR
 dc=www, dc=acme, dc=com, c=US</programlisting>
         <para>

 If a wildcard is used for a value of an RDN, the value must be exactly *.
 The wildcard must match any value, and no substring matching must be
 done. For example:

 </para>
         <programlisting> cn=*,o=ACME,c=*</programlisting>
         <para>

 This match pattern with wildcard must match the following DNs:

 </para>
         <programlisting> cn=Bugs Bunny,o=ACME,c=US
 cn = Daffy Duck , o = ACME , c = US
 cn=Road Runner, o=ACME, c=NL</programlisting>
         <para>

 But not:

 </para>
         <programlisting> o=ACME, c=NL
 dc=acme.com, cn=Bugs Bunny, o=ACME, c=US</programlisting>
         <para>
 A match pattern may contain a chain of DN match patterns. The semicolon(
 <code>';'</code> \u003B) must be used to separate DN match patterns in a
 chain. Wildcards can also be used to match against a complete DN within a
 chain.
 </para>
         <para>
 The following example matches a certificate signed by Tweety Inc. in the
 US.
 </para>
         <programlisting> * ; ou=S &amp; V, o=Tweety Inc., c=US</programlisting>
         <para>
 The wildcard ('*') matches zero or one DN in the chain, however,
 sometimes it is necessary to match a longer chain. The minus sign (
 <code>'-'</code> \u002D) represents zero or more DNs, whereas the asterisk
 only represents a single DN. For example, to match a DN where the Tweety
 Inc. is in the DN chain, use the following expression:
 </para>
         <programlisting> - ; *, o=Tweety Inc., c=US</programlisting>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> If the pattern matches the DN chain; otherwise
         <code>false</code> is returned.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the specified match pattern or DN
         chain is invalid.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="InvalidSyntaxException" role="class" xml:id="org.osgi.framework.InvalidSyntaxException">
      <title>public class InvalidSyntaxException<?line-break?> extends Exception</title>
      <para>
A Framework exception used to indicate that a filter string has an invalid
 syntax.

 </para>
      <para>
 An <code>InvalidSyntaxException</code> object indicates that a filter string
 parameter has an invalid syntax and cannot be parsed. See <link linkend="org.osgi.framework.Filter">Filter</link> for
 a description of the filter string syntax.

 </para>
      <para>
 This exception conforms to the general purpose exception chaining mechanism.</para>
      <section xreflabel="InvalidSyntaxException(String,String)" role="method" xml:id="org.osgi.framework.InvalidSyntaxException.InvalidSyntaxException-String-String-">
         <title>public  InvalidSyntaxException(String msg, String filter)</title>
         <formalpara role="parameter">
            <title>msg</title>
            <para>The message.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>filter</title>
            <para>The invalid filter string.</para>
         </formalpara>
         <para role="description">
Creates an exception of type <code>InvalidSyntaxException</code>.

 </para>
         <para>
 This method creates an <code>InvalidSyntaxException</code> object with the
 specified message and the filter string which generated the exception.</para>
      </section>
      <section xreflabel="InvalidSyntaxException(String,String,Throwable)" role="method" xml:id="org.osgi.framework.InvalidSyntaxException.InvalidSyntaxException-String-String-Throwable-">
         <title>public  InvalidSyntaxException(String msg, String filter, Throwable cause)</title>
         <formalpara role="parameter">
            <title>msg</title>
            <para>The message.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>filter</title>
            <para>The invalid filter string.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>cause</title>
            <para>The cause of this exception.</para>
         </formalpara>
         <para role="description">
Creates an exception of type <code>InvalidSyntaxException</code>.

 </para>
         <para>
 This method creates an <code>InvalidSyntaxException</code> object with the
 specified message and the filter string which generated the exception.</para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="getCause()" role="method" xml:id="org.osgi.framework.InvalidSyntaxException.getCause--">
         <title>public Throwable getCause()</title>
         <para role="description">
Returns the cause of this exception or <code>null</code> if no cause was set.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The cause of this exception or <code>null</code> if no cause was set.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getFilter()" role="method" xml:id="org.osgi.framework.InvalidSyntaxException.getFilter--">
         <title>public String getFilter()</title>
         <para role="description">
Returns the filter string that generated the
 <code>InvalidSyntaxException</code> object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The invalid filter string.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.BundleContext.getServiceReferences-Class-String-">BundleContext.getServiceReferences(Class, String)</link>, <link linkend="org.osgi.framework.BundleContext.getServiceReferences-String-String-">BundleContext.getServiceReferences(String, String)</link>, <link linkend="org.osgi.framework.BundleContext.addServiceListener-ServiceListener-String-">BundleContext.addServiceListener(ServiceListener,String)</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="initCause(Throwable)" role="method" xml:id="org.osgi.framework.InvalidSyntaxException.initCause-Throwable-">
         <title>public Throwable initCause(Throwable cause)</title>
         <formalpara role="parameter">
            <title>cause</title>
            <para>The cause of this exception.</para>
         </formalpara>
         <para role="description">
Initializes the cause of this exception to the specified value.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>This exception.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the specified cause is this
         exception.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If the cause of this exception has already
         been set.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
         <para/>
      </section>
   </section>
   <section xreflabel="PackagePermission" role="class" xml:id="org.osgi.framework.PackagePermission">
      <title>public final class PackagePermission<?line-break?> extends BasicPermission</title>
      <para>
A bundle's authority to import or export a package.

 </para>
      <para>
 A package is a dot-separated string that defines a fully qualified Java
 package.
 </para>
      <para>
 For example:

 </para>
      <programlisting> org.osgi.service.http</programlisting>
      <para>
         <code>PackagePermission</code> has three actions: <code>exportonly</code>,
 <code>import</code> and <code>export</code>. The <code>export</code> action, which is
 deprecated, implies the <code>import</code> action.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section xreflabel="EXPORT" role="field" xml:id="org.osgi.framework.PackagePermission.EXPORT">
         <title>public static final String EXPORT = "export"</title>
         <para>
The action string <code>export</code>. The <code>export</code> action implies the
 <code>import</code> action.
   </para>
         <formalpara role="parameter">
            <title>Deprecated</title>
            <para>As of 1.5. Use <code>exportonly</code> instead.</para>
         </formalpara>
      </section>
      <section xreflabel="EXPORTONLY" role="field" xml:id="org.osgi.framework.PackagePermission.EXPORTONLY">
         <title>public static final String EXPORTONLY = "exportonly"</title>
         <para>
The action string <code>exportonly</code>. The <code>exportonly</code> action does
 not imply the <code>import</code> action.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="IMPORT" role="field" xml:id="org.osgi.framework.PackagePermission.IMPORT">
         <title>public static final String IMPORT = "import"</title>
         <para>
The action string <code>import</code>.
   </para>
      </section>
      <section xreflabel="PackagePermission(String,String)" role="method" xml:id="org.osgi.framework.PackagePermission.PackagePermission-String-String-">
         <title>public  PackagePermission(String name, String actions)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>Package name or filter expression. A filter expression can
        only be specified if the specified action is <code>import</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>actions</title>
            <para>
               <code>exportonly</code>,<code>import</code> (canonical order).</para>
         </formalpara>
         <para role="description">
Creates a new <code>PackagePermission</code> object.

 </para>
         <para>
 The name is specified as a normal Java package name: a dot-separated
 string. Wildcards may be used.

 </para>
         <programlisting> name ::= &lt;package name&gt; | &lt;package name ending in ".*"&gt; | *</programlisting>
         <para>

 Examples:

 </para>
         <programlisting> org.osgi.service.http
 javax.servlet.*
 *</programlisting>
         <para>

 For the <code>import</code> action, the name can also be a filter expression.
 The filter gives access to the following attributes:
 </para>
         <itemizedlist>
            <listitem>
               <para>signer - A Distinguished Name chain used to sign the exporting
 bundle. Wildcards in a DN are not matched according to the filter string
 rules, but according to the rules defined for a DN chain.</para>
            </listitem>
            <listitem>
               <para>location - The location of the exporting bundle.</para>
            </listitem>
            <listitem>
               <para>id - The bundle ID of the exporting bundle.</para>
            </listitem>
            <listitem>
               <para>name - The symbolic name of the exporting bundle.</para>
            </listitem>
            <listitem>
               <para>package.name - The name of the requested package.</para>
            </listitem>
         </itemizedlist>
         <para>
 Filter attribute names are processed in a case sensitive manner.

 </para>
         <para>
 Package Permissions are granted over all possible versions of a package.

 A bundle that needs to export a package must have the appropriate
 <code>PackagePermission</code> for that package; similarly, a bundle that
 needs to import a package must have the appropriate
 <code>PackagePermssion</code> for that package.
 </para>
         <para>
 Permission is granted for both classes and resources.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the specified name is a filter
         expression and either the specified action is not <code>import</code>
         or the filter has an invalid syntax.</para>
         </formalpara>
      </section>
      <section xreflabel="PackagePermission(String,Bundle,String)" role="method" xml:id="org.osgi.framework.PackagePermission.PackagePermission-String-Bundle-String-">
         <title>public  PackagePermission(String name, Bundle exportingBundle, String actions)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The name of the requested package to import.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>exportingBundle</title>
            <para>The bundle exporting the requested package.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>actions</title>
            <para>The action <code>import</code>.</para>
         </formalpara>
         <para role="description">
Creates a new requested <code>PackagePermission</code> object to be used by
 code that must perform <code>checkPermission</code> for the <code>import</code>
 action. <code>PackagePermission</code> objects created with this constructor
 cannot be added to a <code>PackagePermission</code> permission collection.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the specified action is not
         <code>import</code> or the name is a filter expression.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="equals(Object)" role="method" xml:id="org.osgi.framework.PackagePermission.equals-Object-">
         <title>public boolean equals(Object obj)</title>
         <formalpara role="parameter">
            <title>obj</title>
            <para>The object to test for equality with this
        <code>PackagePermission</code> object.</para>
         </formalpara>
         <para role="description">
Determines the equality of two <code>PackagePermission</code> objects.

 This method checks that specified package has the same package name and
 <code>PackagePermission</code> actions as this <code>PackagePermission</code>
 object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if <code>obj</code> is a <code>PackagePermission</code>, and
         has the same package name and actions as this
         <code>PackagePermission</code> object; <code>false</code> otherwise.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getActions()" role="method" xml:id="org.osgi.framework.PackagePermission.getActions--">
         <title>public String getActions()</title>
         <para role="description">
Returns the canonical string representation of the
 <code>PackagePermission</code> actions.

 </para>
         <para>
 Always returns present <code>PackagePermission</code> actions in the following
 order: <code>EXPORTONLY</code>,<code>IMPORT</code>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Canonical string representation of the <code>PackagePermission</code>
         actions.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="hashCode()" role="method" xml:id="org.osgi.framework.PackagePermission.hashCode--">
         <title>public int hashCode()</title>
         <para role="description">
Returns the hash code value for this object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A hash code value for this object.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="implies(Permission)" role="method" xml:id="org.osgi.framework.PackagePermission.implies-Permission-">
         <title>public boolean implies(Permission p)</title>
         <formalpara role="parameter">
            <title>p</title>
            <para>The requested permission.</para>
         </formalpara>
         <para role="description">
Determines if the specified permission is implied by this object.

 </para>
         <para>
 This method checks that the package name of the target is implied by the
 package name of this object. The list of <code>PackagePermission</code>
 actions must either match or allow for the list of the target object to
 imply the target <code>PackagePermission</code> action.
 </para>
         <para>
 The permission to export a package implies the permission to import the
 named package.

 </para>
         <programlisting> x.y.*,"export" -&gt; x.y.z,"export" is true
 *,"import" -&gt; x.y, "import"      is true
 *,"export" -&gt; x.y, "import"      is true
 x.y,"export" -&gt; x.y.z, "export"  is false</programlisting>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the specified permission is implied by this
         object; <code>false</code> otherwise.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="newPermissionCollection()" role="method" xml:id="org.osgi.framework.PackagePermission.newPermissionCollection--">
         <title>public PermissionCollection newPermissionCollection()</title>
         <para role="description">
Returns a new <code>PermissionCollection</code> object suitable for storing
 <code>PackagePermission</code> objects.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A new <code>PermissionCollection</code> object.</para>
         </formalpara>
         <para/>
      </section>
   </section>
   <section xreflabel="PrototypeServiceFactory" role="class" xml:id="org.osgi.framework.PrototypeServiceFactory">
      <title>public interface PrototypeServiceFactory&lt;S&gt;<?line-break?> extends ServiceFactory&lt;S&gt;</title>
      <formalpara role="parameter">
         <title>&lt;S&gt;</title>
         <para>Type of Service</para>
      </formalpara>
      <para>
A factory for <link linkend="org.osgi.framework.Constants.SCOPE_PROTOTYPE">prototype scope</link> services. The
 factory can provide multiple, customized service objects in the OSGi
 environment.

 </para>
      <para>
 When registering a service, a <code>PrototypeServiceFactory</code> object can be
 used instead of a service object, so that the bundle developer can create a
 customized service object for each caller that is using the service.

 </para>
      <para>
 When a caller uses a <link linkend="org.osgi.framework.ServiceObjects">ServiceObjects</link> to
 <link linkend="org.osgi.framework.ServiceObjects.getService--">request</link> a service object, the framework
 calls the <link linkend="org.osgi.framework.PrototypeServiceFactory.getService-Bundle-ServiceRegistration-">getService</link> method
 to return a service object customized for the requesting caller. The caller
 can <link linkend="org.osgi.framework.ServiceObjects.ungetService-S-">release</link> the returned service
 object and the framework will call the
 <link linkend="org.osgi.framework.PrototypeServiceFactory.ungetService-Bundle-ServiceRegistration-S-">ungetService</link>
 method with the service object.

 </para>
      <para>
 When a bundle uses the <link linkend="org.osgi.framework.BundleContext.getService-ServiceReference-">BundleContext.getService(ServiceReference)</link>
 method to obtain a service object, the framework must act as if the service
 has <link linkend="org.osgi.framework.Constants.SCOPE_BUNDLE">bundle scope</link>. That is, the framework will
 call the <link linkend="org.osgi.framework.PrototypeServiceFactory.getService-Bundle-ServiceRegistration-">getService</link> method
 to obtain a bundle-scoped service object which will be cached and have a use
 count. See <link linkend="org.osgi.framework.ServiceFactory">ServiceFactory</link>.

 </para>
      <para>
 A bundle can use both <link linkend="org.osgi.framework.ServiceObjects">ServiceObjects</link> and
 <link linkend="org.osgi.framework.BundleContext.getService-ServiceReference-">BundleContext.getService(ServiceReference)</link> to obtain a service object
 for a service. <link linkend="org.osgi.framework.ServiceObjects.getService--">ServiceObjects.getService()</link> will always return a
 service object provided by a call to
 <link linkend="org.osgi.framework.PrototypeServiceFactory.getService-Bundle-ServiceRegistration-">getService(Bundle, ServiceRegistration)</link> and
 <link linkend="org.osgi.framework.BundleContext.getService-ServiceReference-">BundleContext.getService(ServiceReference)</link> will always return the
 bundle-scoped service object.

 </para>
      <para>
         <code>PrototypeServiceFactory</code> objects are only used by the Framework and
 are not made available to other bundles in the OSGi environment. The
 Framework may concurrently call a <code>PrototypeServiceFactory</code>.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.framework.BundleContext.getServiceObjects-ServiceReference-">BundleContext.getServiceObjects(ServiceReference)</link>, <link linkend="org.osgi.framework.ServiceObjects">ServiceObjects</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.8</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section xreflabel="getService(Bundle,ServiceRegistration)" role="method" xml:id="org.osgi.framework.PrototypeServiceFactory.getService-Bundle-ServiceRegistration-">
         <title>public S getService(Bundle bundle, ServiceRegistration&lt;S&gt; registration)</title>
         <formalpara role="parameter">
            <title>bundle</title>
            <para>The bundle requesting the service.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>registration</title>
            <para>The <code>ServiceRegistration</code> object for the
        requested service.</para>
         </formalpara>
         <para role="description">
Returns a service object for a caller.

 </para>
         <para>
 The Framework invokes this method for each caller requesting a service
 object using <link linkend="org.osgi.framework.ServiceObjects.getService--">ServiceObjects.getService()</link>. The factory can then
 return a customized service object for the caller.

 </para>
         <para>
 The Framework must check that the returned service object is valid. If
 the returned service object is <code>null</code> or is not an
 <code>instanceof</code> all the classes named when the service was registered,
 a framework event of type <link linkend="org.osgi.framework.FrameworkEvent.ERROR">FrameworkEvent.ERROR</link> is fired
 containing a service exception of type
 <link linkend="org.osgi.framework.ServiceException.FACTORY_ERROR">ServiceException.FACTORY_ERROR</link> and <code>null</code> is returned to
 the caller. If this method throws an exception, a framework event of type
 <link linkend="org.osgi.framework.FrameworkEvent.ERROR">FrameworkEvent.ERROR</link> is fired containing a service exception of
 type <link linkend="org.osgi.framework.ServiceException.FACTORY_EXCEPTION">ServiceException.FACTORY_EXCEPTION</link> with the thrown exception
 as the cause and <code>null</code> is returned to the caller.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A service object that <emphasis role="strong">must</emphasis> be an instance of all
         the classes named when the service was registered.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.ServiceObjects.getService--">ServiceObjects.getService()</link>
            </para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="ungetService(Bundle,ServiceRegistration,S)" role="method" xml:id="org.osgi.framework.PrototypeServiceFactory.ungetService-Bundle-ServiceRegistration-S-">
         <title>public void ungetService(Bundle bundle, ServiceRegistration&lt;S&gt; registration, S service)</title>
         <formalpara role="parameter">
            <title>bundle</title>
            <para>The bundle releasing the service.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>registration</title>
            <para>The <code>ServiceRegistration</code> object for the
        service being released.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>service</title>
            <para>The service object returned by a previous call to the
        <link linkend="org.osgi.framework.PrototypeServiceFactory.getService-Bundle-ServiceRegistration-">getService</link>
        method.</para>
         </formalpara>
         <para role="description">
Releases a service object customized for a caller.

 </para>
         <para>
 The Framework invokes this method when a service has been released by a
 bundle such as by calling <link linkend="org.osgi.framework.ServiceObjects.ungetService-S-">ServiceObjects.ungetService(Object)</link>.
 The service object may then be destroyed.

 </para>
         <para>
 If this method throws an exception, a framework event of type
 <link linkend="org.osgi.framework.FrameworkEvent.ERROR">FrameworkEvent.ERROR</link> is fired containing a service exception of
 type <link linkend="org.osgi.framework.ServiceException.FACTORY_EXCEPTION">ServiceException.FACTORY_EXCEPTION</link> with the thrown exception
 as the cause.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.ServiceObjects.ungetService-S-">ServiceObjects.ungetService(Object)</link>
            </para>
         </formalpara>
         <para/>
      </section>
   </section>
   <section xreflabel="ServiceEvent" role="class" xml:id="org.osgi.framework.ServiceEvent">
      <title>public class ServiceEvent<?line-break?> extends EventObject</title>
      <para>
An event from the Framework describing a service lifecycle change.
 </para>
      <para>
         <code>ServiceEvent</code> objects are delivered to <code>ServiceListener</code>s and
 <code>AllServiceListener</code>s when a change occurs in this service's lifecycle.
 A type code is used to identify the event type for future extendability.

 </para>
      <para>
 OSGi Working Group reserves the right to extend the set of types.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.framework.ServiceListener">ServiceListener</link>, <link linkend="org.osgi.framework.AllServiceListener">AllServiceListener</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section xreflabel="MODIFIED" role="field" xml:id="org.osgi.framework.ServiceEvent.MODIFIED">
         <title>public static final int MODIFIED = 2</title>
         <para>
The properties of a registered service have been modified.
 </para>
         <para>
 This event is synchronously delivered <emphasis role="strong">after</emphasis> the service
 properties have been modified.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.ServiceRegistration.setProperties-Dictionary-">ServiceRegistration.setProperties(Dictionary)</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="MODIFIED_ENDMATCH" role="field" xml:id="org.osgi.framework.ServiceEvent.MODIFIED_ENDMATCH">
         <title>public static final int MODIFIED_ENDMATCH = 8</title>
         <para>
The properties of a registered service have been modified and the new
 properties no longer match the listener's filter.
 </para>
         <para>
 This event is synchronously delivered <emphasis role="strong">after</emphasis> the service
 properties have been modified. This event is only delivered to listeners
 which were added with a non-<code>null</code> filter where the filter matched
 the service properties prior to the modification but the filter does not
 match the modified service properties.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.ServiceRegistration.setProperties-Dictionary-">ServiceRegistration.setProperties(Dictionary)</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="REGISTERED" role="field" xml:id="org.osgi.framework.ServiceEvent.REGISTERED">
         <title>public static final int REGISTERED = 1</title>
         <para>
This service has been registered.
 </para>
         <para>
 This event is synchronously delivered <emphasis role="strong">after</emphasis> the service
 has been registered with the Framework.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.BundleContext.registerService-String---Object-Dictionary-">BundleContext.registerService(String[],Object,Dictionary)</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="UNREGISTERING" role="field" xml:id="org.osgi.framework.ServiceEvent.UNREGISTERING">
         <title>public static final int UNREGISTERING = 4</title>
         <para>
This service is in the process of being unregistered.
 </para>
         <para>
 This event is synchronously delivered <emphasis role="strong">before</emphasis> the service
 has completed unregistering.

 </para>
         <para>
 If a bundle is using a service that is <code>UNREGISTERING</code>, the bundle
 should release its use of the service when it receives this event. If the
 bundle does not release its use of the service when it receives this
 event, the Framework will automatically release the bundle's use of the
 service while completing the service unregistration operation.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.ServiceRegistration.unregister--">ServiceRegistration.unregister()</link>, <link linkend="org.osgi.framework.BundleContext.ungetService-ServiceReference-">BundleContext.ungetService(ServiceReference)</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="ServiceEvent(int,ServiceReference)" role="method" xml:id="org.osgi.framework.ServiceEvent.ServiceEvent-int-ServiceReference-">
         <title>public  ServiceEvent(int type, ServiceReference&lt;?&gt; reference)</title>
         <formalpara role="parameter">
            <title>type</title>
            <para>The event type.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>reference</title>
            <para>A <code>ServiceReference</code> object to the service that
        had a lifecycle change.</para>
         </formalpara>
         <para role="description">
Creates a new service event object.
   </para>
      </section>
      <section xreflabel="getServiceReference()" role="method" xml:id="org.osgi.framework.ServiceEvent.getServiceReference--">
         <title>public ServiceReference&lt;?&gt; getServiceReference()</title>
         <para role="description">
Returns a reference to the service that had a change occur in its
 lifecycle.
 </para>
         <para>
 This reference is the source of the event.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Reference to the service that had a lifecycle change.</para>
         </formalpara>
      </section>
      <section xreflabel="getType()" role="method" xml:id="org.osgi.framework.ServiceEvent.getType--">
         <title>public int getType()</title>
         <para role="description">
Returns the type of event. The event type values are:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.framework.ServiceEvent.REGISTERED">REGISTERED</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.framework.ServiceEvent.MODIFIED">MODIFIED</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.framework.ServiceEvent.MODIFIED_ENDMATCH">MODIFIED_ENDMATCH</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.framework.ServiceEvent.UNREGISTERING">UNREGISTERING</link>
               </para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Type of service lifecycle change.</para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="ServiceException" role="class" xml:id="org.osgi.framework.ServiceException">
      <title>public class ServiceException<?line-break?> extends RuntimeException</title>
      <para>
A service exception used to indicate that a service problem occurred.

 </para>
      <para>
 A <code>ServiceException</code> object is created by the Framework or service
 implementation to denote an exception condition in the service. A type code
 is used to identify the exception type for future extendability. Service
 implementations may also create subclasses of <code>ServiceException</code>. When
 subclassing, the subclass should set the type to <link linkend="org.osgi.framework.ServiceException.SUBCLASSED">SUBCLASSED</link> to
 indicate that <code>ServiceException</code> has been subclassed.

 </para>
      <para>
 This exception conforms to the general purpose exception chaining mechanism.</para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.5</para>
      </formalpara>
      <section xreflabel="ASYNC_ERROR" role="field" xml:id="org.osgi.framework.ServiceException.ASYNC_ERROR">
         <title>public static final int ASYNC_ERROR = 7</title>
         <para>
An asynchronous operation was unable to obtain the service.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.8</para>
         </formalpara>
      </section>
      <section xreflabel="FACTORY_ERROR" role="field" xml:id="org.osgi.framework.ServiceException.FACTORY_ERROR">
         <title>public static final int FACTORY_ERROR = 2</title>
         <para>
The service factory produced an invalid service object.
   </para>
      </section>
      <section xreflabel="FACTORY_EXCEPTION" role="field" xml:id="org.osgi.framework.ServiceException.FACTORY_EXCEPTION">
         <title>public static final int FACTORY_EXCEPTION = 3</title>
         <para>
The service factory threw an exception.
   </para>
      </section>
      <section xreflabel="FACTORY_RECURSION" role="field" xml:id="org.osgi.framework.ServiceException.FACTORY_RECURSION">
         <title>public static final int FACTORY_RECURSION = 6</title>
         <para>
The service factory resulted in a recursive call to itself for the
 requesting bundle.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.6</para>
         </formalpara>
      </section>
      <section xreflabel="REMOTE" role="field" xml:id="org.osgi.framework.ServiceException.REMOTE">
         <title>public static final int REMOTE = 5</title>
         <para>
An error occurred invoking a remote service.
   </para>
      </section>
      <section xreflabel="SUBCLASSED" role="field" xml:id="org.osgi.framework.ServiceException.SUBCLASSED">
         <title>public static final int SUBCLASSED = 4</title>
         <para>
The exception is a subclass of ServiceException. The subclass should be
 examined for the type of the exception.
   </para>
      </section>
      <section xreflabel="UNREGISTERED" role="field" xml:id="org.osgi.framework.ServiceException.UNREGISTERED">
         <title>public static final int UNREGISTERED = 1</title>
         <para>
The service has been unregistered.
   </para>
      </section>
      <section xreflabel="UNSPECIFIED" role="field" xml:id="org.osgi.framework.ServiceException.UNSPECIFIED">
         <title>public static final int UNSPECIFIED = 0</title>
         <para>
No exception type is unspecified.
   </para>
      </section>
      <section xreflabel="ServiceException(String,Throwable)" role="method" xml:id="org.osgi.framework.ServiceException.ServiceException-String-Throwable-">
         <title>public  ServiceException(String msg, Throwable cause)</title>
         <formalpara role="parameter">
            <title>msg</title>
            <para>The associated message.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>cause</title>
            <para>The cause of this exception.</para>
         </formalpara>
         <para role="description">
Creates a <code>ServiceException</code> with the specified message and
 exception cause.
   </para>
      </section>
      <section xreflabel="ServiceException(String)" role="method" xml:id="org.osgi.framework.ServiceException.ServiceException-String-">
         <title>public  ServiceException(String msg)</title>
         <formalpara role="parameter">
            <title>msg</title>
            <para>The message.</para>
         </formalpara>
         <para role="description">
Creates a <code>ServiceException</code> with the specified message.
   </para>
      </section>
      <section xreflabel="ServiceException(String,int,Throwable)" role="method" xml:id="org.osgi.framework.ServiceException.ServiceException-String-int-Throwable-">
         <title>public  ServiceException(String msg, int type, Throwable cause)</title>
         <formalpara role="parameter">
            <title>msg</title>
            <para>The associated message.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>type</title>
            <para>The type for this exception.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>cause</title>
            <para>The cause of this exception.</para>
         </formalpara>
         <para role="description">
Creates a <code>ServiceException</code> with the specified message, type and
 exception cause.
   </para>
      </section>
      <section xreflabel="ServiceException(String,int)" role="method" xml:id="org.osgi.framework.ServiceException.ServiceException-String-int-">
         <title>public  ServiceException(String msg, int type)</title>
         <formalpara role="parameter">
            <title>msg</title>
            <para>The message.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>type</title>
            <para>The type for this exception.</para>
         </formalpara>
         <para role="description">
Creates a <code>ServiceException</code> with the specified message and type.
   </para>
      </section>
      <section xreflabel="getType()" role="method" xml:id="org.osgi.framework.ServiceException.getType--">
         <title>public int getType()</title>
         <para role="description">
Returns the type for this exception or <code>UNSPECIFIED</code> if the type
 was unspecified or unknown.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The type of this exception.</para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="ServiceFactory" role="class" xml:id="org.osgi.framework.ServiceFactory">
      <title>public interface ServiceFactory&lt;S&gt;</title>
      <formalpara role="parameter">
         <title>&lt;S&gt;</title>
         <para>Type of Service</para>
      </formalpara>
      <para>
A factory for <link linkend="org.osgi.framework.Constants.SCOPE_BUNDLE">bundle scope</link> services. The
 factory can provide service objects customized for each bundle in the OSGi
 environment.

 </para>
      <para>
 When registering a service, a <code>ServiceFactory</code> object can be used
 instead of a service object, so that the bundle developer can create a
 customized service object for each bundle that is using the service.

 </para>
      <para>
 When a bundle <link linkend="org.osgi.framework.BundleContext.getService-ServiceReference-">requests</link> the
 service object, the framework calls the
 <link linkend="org.osgi.framework.ServiceFactory.getService-Bundle-ServiceRegistration-">getService</link> method to return
 a service object customized for the requesting bundle. The returned service
 object is cached by the Framework for subsequent calls to
 <link linkend="org.osgi.framework.BundleContext.getService-ServiceReference-">BundleContext.getService(ServiceReference)</link> until the bundle releases
 its use of the service.

 </para>
      <para>
 When the bundle's use count for the service is
 <link linkend="org.osgi.framework.BundleContext.ungetService-ServiceReference-">decremented</link> to zero
 (including the bundle stopping or the service being unregistered), the
 framework will call the
 <link linkend="org.osgi.framework.ServiceFactory.ungetService-Bundle-ServiceRegistration-S-">ungetService</link>
 method.

 </para>
      <para>
         <code>ServiceFactory</code> objects are only used by the Framework and are not
 made available to other bundles in the OSGi environment. The Framework may
 concurrently call a <code>ServiceFactory</code>.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.framework.BundleContext.getService-ServiceReference-">BundleContext.getService(ServiceReference)</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section xreflabel="getService(Bundle,ServiceRegistration)" role="method" xml:id="org.osgi.framework.ServiceFactory.getService-Bundle-ServiceRegistration-">
         <title>public S getService(Bundle bundle, ServiceRegistration&lt;S&gt; registration)</title>
         <formalpara role="parameter">
            <title>bundle</title>
            <para>The bundle requesting the service.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>registration</title>
            <para>The <code>ServiceRegistration</code> object for the
        requested service.</para>
         </formalpara>
         <para role="description">
Returns a service object for a bundle.

 </para>
         <para>
 The Framework invokes this method the first time the specified
 <code>bundle</code> requests a service object using the
 <link linkend="org.osgi.framework.BundleContext.getService-ServiceReference-">BundleContext.getService(ServiceReference)</link> method. The factory
 can then return a customized service object for each bundle.

 </para>
         <para>
 The Framework must check that the returned service object is valid. If
 the returned service object is <code>null</code> or is not an
 <code>instanceof</code> all the classes named when the service was registered,
 a framework event of type <link linkend="org.osgi.framework.FrameworkEvent.ERROR">FrameworkEvent.ERROR</link> is fired
 containing a service exception of type
 <link linkend="org.osgi.framework.ServiceException.FACTORY_ERROR">ServiceException.FACTORY_ERROR</link> and <code>null</code> is returned to
 the bundle. If this method throws an exception, a framework event of type
 <link linkend="org.osgi.framework.FrameworkEvent.ERROR">FrameworkEvent.ERROR</link> is fired containing a service exception of
 type <link linkend="org.osgi.framework.ServiceException.FACTORY_EXCEPTION">ServiceException.FACTORY_EXCEPTION</link> with the thrown exception
 as the cause and <code>null</code> is returned to the bundle. If this method
 is recursively called for the specified bundle, a framework event of type
 <link linkend="org.osgi.framework.FrameworkEvent.ERROR">FrameworkEvent.ERROR</link> is fired containing a service exception of
 type <link linkend="org.osgi.framework.ServiceException.FACTORY_RECURSION">ServiceException.FACTORY_RECURSION</link> and <code>null</code> is
 returned to the bundle.

 </para>
         <para>
 The Framework caches the valid service object and will return the same
 service object on any future call to
 <link linkend="org.osgi.framework.BundleContext.getService-ServiceReference-">BundleContext.getService(ServiceReference)</link> for the specified
 bundle. This means the Framework must not allow this method to be
 concurrently called for the specified bundle.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A service object that <emphasis role="strong">must</emphasis> be an instance of all
         the classes named when the service was registered.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.BundleContext.getService-ServiceReference-">BundleContext.getService(ServiceReference)</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="ungetService(Bundle,ServiceRegistration,S)" role="method" xml:id="org.osgi.framework.ServiceFactory.ungetService-Bundle-ServiceRegistration-S-">
         <title>public void ungetService(Bundle bundle, ServiceRegistration&lt;S&gt; registration, S service)</title>
         <formalpara role="parameter">
            <title>bundle</title>
            <para>The bundle releasing the service.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>registration</title>
            <para>The <code>ServiceRegistration</code> object for the
        service being released.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>service</title>
            <para>The service object returned by a previous call to the
        <link linkend="org.osgi.framework.ServiceFactory.getService-Bundle-ServiceRegistration-">getService</link>
        method.</para>
         </formalpara>
         <para role="description">
Releases a service object customized for a bundle.

 </para>
         <para>
 The Framework invokes this method when a service has been released by a
 bundle. The service object may then be destroyed.

 </para>
         <para>
 If this method throws an exception, a framework event of type
 <link linkend="org.osgi.framework.FrameworkEvent.ERROR">FrameworkEvent.ERROR</link> is fired containing a service exception of
 type <link linkend="org.osgi.framework.ServiceException.FACTORY_EXCEPTION">ServiceException.FACTORY_EXCEPTION</link> with the thrown exception
 as the cause.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.BundleContext.ungetService-ServiceReference-">BundleContext.ungetService(ServiceReference)</link>
            </para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="ServiceListener" role="class" xml:id="org.osgi.framework.ServiceListener">
      <title>public interface ServiceListener<?line-break?> extends EventListener</title>
      <para>
A <code>ServiceEvent</code> listener. <code>ServiceListener</code> is a listener
 interface that may be implemented by a bundle developer. When a
 <code>ServiceEvent</code> is fired, it is synchronously delivered to a
 <code>ServiceListener</code>. The Framework may deliver <code>ServiceEvent</code>
 objects to a <code>ServiceListener</code> out of order and may concurrently call
 and/or reenter a <code>ServiceListener</code>.

 </para>
      <para>
 A <code>ServiceListener</code> object is registered with the Framework using the
 <code>BundleContext.addServiceListener</code> method. <code>ServiceListener</code>
 objects are called with a <code>ServiceEvent</code> object when a service is
 registered, modified, or is in the process of unregistering.

 </para>
      <para>
         <code>ServiceEvent</code> object delivery to <code>ServiceListener</code> objects is
 filtered by the filter specified when the listener was registered. If the
 Java Runtime Environment supports permissions, then additional filtering is
 done. <code>ServiceEvent</code> objects are only delivered to the listener if the
 bundle which defines the listener object's class has the appropriate
 <code>ServicePermission</code> to get the service using at least one of the named
 classes under which the service was registered.

 </para>
      <para>
         <code>ServiceEvent</code> object delivery to <code>ServiceListener</code> objects is
 further filtered according to package sources as defined in
 <link linkend="org.osgi.framework.ServiceReference.isAssignableTo-Bundle-String-">ServiceReference.isAssignableTo(Bundle, String)</link>.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.framework.ServiceEvent">ServiceEvent</link>, <link linkend="org.osgi.framework.ServicePermission">ServicePermission</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section xreflabel="serviceChanged(ServiceEvent)" role="method" xml:id="org.osgi.framework.ServiceListener.serviceChanged-ServiceEvent-">
         <title>public void serviceChanged(ServiceEvent event)</title>
         <formalpara role="parameter">
            <title>event</title>
            <para>The <code>ServiceEvent</code> object.</para>
         </formalpara>
         <para role="description">
Receives notification that a service has had a lifecycle change.
   </para>
      </section>
   </section>
   <section xreflabel="ServiceObjects" role="class" xml:id="org.osgi.framework.ServiceObjects">
      <title>public interface ServiceObjects&lt;S&gt;</title>
      <formalpara role="parameter">
         <title>&lt;S&gt;</title>
         <para>Type of Service</para>
      </formalpara>
      <para>
Allows multiple service objects for a service to be obtained.
 </para>
      <para>
 For services with <link linkend="org.osgi.framework.Constants.SCOPE_PROTOTYPE">prototype</link> scope, multiple
 service objects for the service can be obtained. Since implementations of
 <link linkend="org.osgi.framework.PrototypeServiceFactory">PrototypeServiceFactory</link> can return the same service object
 repeatedly, the framework must use count the returned service objects to
 release the service object only when its use count returns to zero.
 </para>
      <para>
 For services with <link linkend="org.osgi.framework.Constants.SCOPE_SINGLETON">singleton</link> or
 <link linkend="org.osgi.framework.Constants.SCOPE_BUNDLE">bundle</link> scope, only one, use-counted service
 object is available to a requesting bundle.
 </para>
      <para>
 Any unreleased service objects obtained from this <code>ServiceObjects</code>
 object are automatically released by the framework when the bundle associated
 with the BundleContext used to create this <code>ServiceObjects</code> object is
 stopped.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.framework.BundleContext.getServiceObjects-ServiceReference-">BundleContext.getServiceObjects(ServiceReference)</link>, <link linkend="org.osgi.framework.PrototypeServiceFactory">PrototypeServiceFactory</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.8</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section xreflabel="getService()" role="method" xml:id="org.osgi.framework.ServiceObjects.getService--">
         <title>public S getService()</title>
         <para role="description">
Returns a service object for the <link linkend="org.osgi.framework.ServiceObjects.getServiceReference--">associated</link> service.
 </para>
         <para>
 This <code>ServiceObjects</code> object can be used to obtain multiple service
 objects for the associated service if the service has
 <link linkend="org.osgi.framework.Constants.SCOPE_PROTOTYPE">prototype</link> scope.
 </para>
         <para>
 If the associated service has <link linkend="org.osgi.framework.Constants.SCOPE_SINGLETON">singleton</link>
 or <link linkend="org.osgi.framework.Constants.SCOPE_BUNDLE">bundle</link> scope, this method behaves the
 same as calling the <link linkend="org.osgi.framework.BundleContext.getService-ServiceReference-">BundleContext.getService(ServiceReference)</link>
 method for the associated service. That is, only one, use-counted service
 object is available from this <link linkend="org.osgi.framework.ServiceObjects">ServiceObjects</link> object.
 </para>
         <para>
 This method will always return <code>null</code> when the associated service
 has been unregistered.
 </para>
         <para>
 For a prototype scope service, the following steps are required to obtain
 a service object:
 </para>
         <orderedlist>
            <listitem>
               <para>If the associated service has been unregistered, <code>null</code> is
 returned.</para>
            </listitem>
            <listitem>
               <para>The
 <link linkend="org.osgi.framework.PrototypeServiceFactory.getService-Bundle-ServiceRegistration-">PrototypeServiceFactory.getService(Bundle, ServiceRegistration)</link>
 method is called to supply a customized service object for the caller.
 </para>
            </listitem>
            <listitem>
               <para>If the service object returned by the <code>PrototypeServiceFactory</code>
 object is <code>null</code>, not an <code>instanceof</code> all the classes named
 when the service was registered or the <code>PrototypeServiceFactory</code>
 object throws an exception, <code>null</code> is returned and a Framework
 event of type <link linkend="org.osgi.framework.FrameworkEvent.ERROR">FrameworkEvent.ERROR</link> containing a
 <link linkend="org.osgi.framework.ServiceException">ServiceException</link> describing the error is fired.</para>
            </listitem>
            <listitem>
               <para>The use count for the customized service object is incremented by
 one.</para>
            </listitem>
            <listitem>
               <para>The customized service object is returned.</para>
            </listitem>
         </orderedlist>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A service object for the associated service or <code>null</code> if
         the service is not registered, the customized service object
         returned by a <code>ServiceFactory</code> does not implement the
         classes under which it was registered or the
         <code>ServiceFactory</code> threw an exception.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If the BundleContext used to create this
             <code>ServiceObjects</code> object is no longer valid.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.ServiceObjects.ungetService-S-">ungetService(Object)</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="getServiceReference()" role="method" xml:id="org.osgi.framework.ServiceObjects.getServiceReference--">
         <title>public ServiceReference&lt;S&gt; getServiceReference()</title>
         <para role="description">
Returns the <link linkend="org.osgi.framework.ServiceReference">ServiceReference</link> for the service associated with this
 <code>ServiceObjects</code> object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The <link linkend="org.osgi.framework.ServiceReference">ServiceReference</link> for the service associated with this
         <code>ServiceObjects</code> object.</para>
         </formalpara>
      </section>
      <section xreflabel="ungetService(S)" role="method" xml:id="org.osgi.framework.ServiceObjects.ungetService-S-">
         <title>public void ungetService(S service)</title>
         <formalpara role="parameter">
            <title>service</title>
            <para>A service object previously provided by this
            <code>ServiceObjects</code> object.</para>
         </formalpara>
         <para role="description">
Releases a service object for the <link linkend="org.osgi.framework.ServiceObjects.getServiceReference--">associated</link> service.
 </para>
         <para>
 This <code>ServiceObjects</code> object can be used to obtain multiple service
 objects for the associated service if the service has
 <link linkend="org.osgi.framework.Constants.SCOPE_PROTOTYPE">prototype</link> scope. If the associated
 service has <link linkend="org.osgi.framework.Constants.SCOPE_SINGLETON">singleton</link> or
 <link linkend="org.osgi.framework.Constants.SCOPE_BUNDLE">bundle</link> scope, this method behaves the same
 as calling the <link linkend="org.osgi.framework.BundleContext.ungetService-ServiceReference-">BundleContext.ungetService(ServiceReference)</link>
 method for the associated service. That is, only one, use-counted service
 object is available from this <link linkend="org.osgi.framework.ServiceObjects">ServiceObjects</link> object.
 </para>
         <para>
 For a prototype scope service, the following steps are required to
 release a service object:
 </para>
         <orderedlist>
            <listitem>
               <para>If the associated service has been unregistered, this method returns
 without doing anything.</para>
            </listitem>
            <listitem>
               <para>The use count for the specified service object is decremented by one.
 </para>
            </listitem>
            <listitem>
               <para>If the use count for the specified service object is now zero, the
 <link linkend="org.osgi.framework.PrototypeServiceFactory.ungetService-Bundle-ServiceRegistration-S-">PrototypeServiceFactory.ungetService(Bundle, ServiceRegistration, Object)</link>
 method is called to release the specified service object.</para>
            </listitem>
         </orderedlist>
         <para>
 The specified service object must no longer be used and all references to
 it should be destroyed after calling this method when the use count has
 returned to zero.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If the BundleContext used to create this
             <code>ServiceObjects</code> object is no longer valid.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the specified service object is
             <code>null</code> or was not provided by a <code>ServiceObjects</code>
             object for the associated service.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.ServiceObjects.getService--">getService()</link>
            </para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="ServicePermission" role="class" xml:id="org.osgi.framework.ServicePermission">
      <title>public final class ServicePermission<?line-break?> extends BasicPermission</title>
      <para>
A bundle's authority to register or get a service.
 </para>
      <itemizedlist>
         <listitem>
            <para>The <code>register</code> action allows a bundle to register a service on the
 specified names.</para>
         </listitem>
         <listitem>
            <para>The <code>get</code> action allows a bundle to detect a service and get it.</para>
         </listitem>
      </itemizedlist>
      <para>
 Permission to get a service is required in order to detect events regarding
 the service. Untrusted bundles should not be able to detect the presence of
 certain services unless they have the appropriate <code>ServicePermission</code>
 to get the specific service.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section xreflabel="GET" role="field" xml:id="org.osgi.framework.ServicePermission.GET">
         <title>public static final String GET = "get"</title>
         <para>
The action string <code>get</code>.
   </para>
      </section>
      <section xreflabel="REGISTER" role="field" xml:id="org.osgi.framework.ServicePermission.REGISTER">
         <title>public static final String REGISTER = "register"</title>
         <para>
The action string <code>register</code>.
   </para>
      </section>
      <section xreflabel="ServicePermission(String,String)" role="method" xml:id="org.osgi.framework.ServicePermission.ServicePermission-String-String-">
         <title>public  ServicePermission(String name, String actions)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The service class name</para>
         </formalpara>
         <formalpara role="parameter">
            <title>actions</title>
            <para>
               <code>get</code>,<code>register</code> (canonical order)</para>
         </formalpara>
         <para role="description">
Create a new ServicePermission.

 </para>
         <para>
 The name of the service is specified as a fully qualified class name.
 Wildcards may be used.

 </para>
         <programlisting> name ::= &lt;class name&gt; | &lt;class name ending in ".*"&gt; | *</programlisting>
         <para>

 Examples:

 </para>
         <programlisting> org.osgi.service.http.HttpService
 org.osgi.service.http.*
 *</programlisting>
         <para>

 For the <code>get</code> action, the name can also be a filter expression. The
 filter gives access to the service properties as well as the following
 attributes:
 </para>
         <itemizedlist>
            <listitem>
               <para>signer - A Distinguished Name chain used to sign the bundle
 publishing the service. Wildcards in a DN are not matched according to
 the filter string rules, but according to the rules defined for a DN
 chain.</para>
            </listitem>
            <listitem>
               <para>location - The location of the bundle publishing the service.</para>
            </listitem>
            <listitem>
               <para>id - The bundle ID of the bundle publishing the service.</para>
            </listitem>
            <listitem>
               <para>name - The symbolic name of the bundle publishing the service.</para>
            </listitem>
         </itemizedlist>
         <para>
 Since the above attribute names may conflict with service property names
 used by a service, you can prefix an attribute name with '@' in the
 filter expression to match against the service property and not one of
 the above attributes. Filter attribute names are processed in a case
 sensitive manner unless the attribute references a service property.
 Service properties names are case insensitive.

 </para>
         <para>
 There are two possible actions: <code>get</code> and <code>register</code>. The
 <code>get</code> permission allows the owner of this permission to obtain a
 service with this name. The <code>register</code> permission allows the bundle
 to register a service under that name.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the specified name is a filter
         expression and either the specified action is not <code>get</code> or
         the filter has an invalid syntax.</para>
         </formalpara>
      </section>
      <section xreflabel="ServicePermission(ServiceReference,String)" role="method" xml:id="org.osgi.framework.ServicePermission.ServicePermission-ServiceReference-String-">
         <title>public  ServicePermission(ServiceReference&lt;?&gt; reference, String actions)</title>
         <formalpara role="parameter">
            <title>reference</title>
            <para>The requested service.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>actions</title>
            <para>The action <code>get</code>.</para>
         </formalpara>
         <para role="description">
Creates a new requested <code>ServicePermission</code> object to be used by
 code that must perform <code>checkPermission</code> for the <code>get</code>
 action. <code>ServicePermission</code> objects created with this constructor
 cannot be added to a <code>ServicePermission</code> permission collection.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the specified action is not
         <code>get</code> or reference is <code>null</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="equals(Object)" role="method" xml:id="org.osgi.framework.ServicePermission.equals-Object-">
         <title>public boolean equals(Object obj)</title>
         <formalpara role="parameter">
            <title>obj</title>
            <para>The object to test for equality.</para>
         </formalpara>
         <para role="description">
Determines the equality of two ServicePermission objects.

 Checks that specified object has the same class name and action as this
 <code>ServicePermission</code>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>true if obj is a <code>ServicePermission</code>, and has the same
         class name and actions as this <code>ServicePermission</code> object;
         <code>false</code> otherwise.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getActions()" role="method" xml:id="org.osgi.framework.ServicePermission.getActions--">
         <title>public String getActions()</title>
         <para role="description">
Returns the canonical string representation of the actions. Always
 returns present actions in the following order: <code>get</code>,
 <code>register</code>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The canonical string representation of the actions.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="hashCode()" role="method" xml:id="org.osgi.framework.ServicePermission.hashCode--">
         <title>public int hashCode()</title>
         <para role="description">
Returns the hash code value for this object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Hash code value for this object.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="implies(Permission)" role="method" xml:id="org.osgi.framework.ServicePermission.implies-Permission-">
         <title>public boolean implies(Permission p)</title>
         <formalpara role="parameter">
            <title>p</title>
            <para>The target permission to check.</para>
         </formalpara>
         <para role="description">
Determines if a <code>ServicePermission</code> object "implies" the specified
 permission.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the specified permission is implied by this
         object; <code>false</code> otherwise.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="newPermissionCollection()" role="method" xml:id="org.osgi.framework.ServicePermission.newPermissionCollection--">
         <title>public PermissionCollection newPermissionCollection()</title>
         <para role="description">
Returns a new <code>PermissionCollection</code> object for storing
 <code>ServicePermission</code> objects.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A new <code>PermissionCollection</code> object suitable for storing
         <code>ServicePermission</code> objects.</para>
         </formalpara>
         <para/>
      </section>
   </section>
   <section xreflabel="ServiceReference" role="class" xml:id="org.osgi.framework.ServiceReference">
      <title>public interface ServiceReference&lt;S&gt;<?line-break?> extends Comparable&lt;Object&gt;, BundleReference</title>
      <formalpara role="parameter">
         <title>&lt;S&gt;</title>
         <para>Type of Service.</para>
      </formalpara>
      <para>
A reference to a service.

 </para>
      <para>
 The Framework returns <code>ServiceReference</code> objects from the
 <code>BundleContext.getServiceReference</code> and
 <code>BundleContext.getServiceReferences</code> methods.
 </para>
      <para>
 A <code>ServiceReference</code> object may be shared between bundles and can be
 used to examine the properties of the service and to get the service object.
 </para>
      <para>
 Every service registered in the Framework has a unique
 <code>ServiceRegistration</code> object and may have multiple, distinct
 <code>ServiceReference</code> objects referring to it. <code>ServiceReference</code>
 objects associated with a <code>ServiceRegistration</code> object have the same
 <code>hashCode</code> and are considered equal (more specifically, their
 <code>equals()</code> method will return <code>true</code> when compared).
 </para>
      <para>
 If the same service object is registered multiple times,
 <code>ServiceReference</code> objects associated with different
 <code>ServiceRegistration</code> objects are not equal.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.framework.BundleContext.getServiceReference-Class-">BundleContext.getServiceReference(Class)</link>, <link linkend="org.osgi.framework.BundleContext.getServiceReference-String-">BundleContext.getServiceReference(String)</link>, <link linkend="org.osgi.framework.BundleContext.getServiceReferences-Class-String-">BundleContext.getServiceReferences(Class, String)</link>, <link linkend="org.osgi.framework.BundleContext.getServiceReferences-String-String-">BundleContext.getServiceReferences(String, String)</link>, <link linkend="org.osgi.framework.BundleContext.getService-ServiceReference-">BundleContext.getService(ServiceReference)</link>, <link linkend="org.osgi.framework.BundleContext.getServiceObjects-ServiceReference-">BundleContext.getServiceObjects(ServiceReference)</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section xreflabel="adapt(Class)" role="method" xml:id="org.osgi.framework.ServiceReference.adapt-Class-">
         <title>public A adapt(Class&lt;A&gt; type)</title>
         <formalpara role="parameter">
            <title>Type Parameters</title>
            <para>
               <code>&lt;A&gt;</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>&lt;A&gt;</title>
            <para>The type to which this <code>ServiceReference</code> object is to
            be adapted.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>type</title>
            <para>Class object for the type to which this
            <code>ServiceReference</code> object is to be adapted.</para>
         </formalpara>
         <para role="description">
Adapt this <code>ServiceReference</code> object to the specified type.
 </para>
         <para>
 Adapting this <code>ServiceReference</code> object to the specified type may
 require certain checks, including security checks, to succeed. If a check
 does not succeed, then this <code>ServiceReference</code> object cannot be
 adapted and <code>null</code> is returned.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The object, of the specified type, to which this
         <code>ServiceReference</code> object has been adapted or <code>null</code>
         if this <code>ServiceReference</code> object cannot be adapted to the
         specified type.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have the appropriate
             <code>AdaptPermission[type,this,ADAPT]</code>, and the Java
             Runtime Environment supports permissions.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.10</para>
         </formalpara>
      </section>
      <section xreflabel="compareTo(Object)" role="method" xml:id="org.osgi.framework.ServiceReference.compareTo-Object-">
         <title>public int compareTo(Object reference)</title>
         <formalpara role="parameter">
            <title>reference</title>
            <para>The <code>ServiceReference</code> to be compared.</para>
         </formalpara>
         <para role="description">
Compares this <code>ServiceReference</code> with the specified
 <code>ServiceReference</code> for order.

 </para>
         <para>
 If this <code>ServiceReference</code> and the specified
 <code>ServiceReference</code> have the same <link linkend="org.osgi.framework.Constants.SERVICE_ID">service id</link> they are equal. This <code>ServiceReference</code> is less than
 the specified <code>ServiceReference</code> if it has a lower
 <link linkend="org.osgi.framework.Constants.SERVICE_RANKING">service ranking</link> and greater if it has a
 higher service ranking. Otherwise, if this <code>ServiceReference</code> and
 the specified <code>ServiceReference</code> have the same
 <link linkend="org.osgi.framework.Constants.SERVICE_RANKING">service ranking</link>, this
 <code>ServiceReference</code> is less than the specified
 <code>ServiceReference</code> if it has a higher <link linkend="org.osgi.framework.Constants.SERVICE_ID">service id</link> and greater if it has a lower service id.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Returns a negative integer, zero, or a positive integer if this
         <code>ServiceReference</code> is less than, equal to, or greater than
         the specified <code>ServiceReference</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the specified
         <code>ServiceReference</code> was not created by the same framework
         instance as this <code>ServiceReference</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.4</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getBundle()" role="method" xml:id="org.osgi.framework.ServiceReference.getBundle--">
         <title>public Bundle getBundle()</title>
         <para role="description">
Returns the bundle that registered the service referenced by this
 <code>ServiceReference</code> object.

 </para>
         <para>
 This method must return <code>null</code> when the service has been
 unregistered. This can be used to determine if the service has been
 unregistered.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The bundle that registered the service referenced by this
         <code>ServiceReference</code> object; <code>null</code> if that service has
         already been unregistered.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.BundleContext.registerService-String---Object-Dictionary-">BundleContext.registerService(String[],Object,Dictionary)</link>
            </para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getProperties()" role="method" xml:id="org.osgi.framework.ServiceReference.getProperties--">
         <title>public Dictionary&lt;String, Object&gt; getProperties()</title>
         <para role="description">
Returns a copy of the properties of the service referenced by this
 <code>ServiceReference</code> object.
 </para>
         <para>
 This method will continue to return the properties after the service has
 been unregistered. This is so references to unregistered services (for
 example, <code>ServiceReference</code> objects stored in the log) can still be
 interrogated.
 </para>
         <para>
 The returned <code>Dictionary</code> object:
 </para>
         <itemizedlist>
            <listitem>
               <para>Must map property values by using property keys in a
 <emphasis>case-insensitive manner</emphasis>.</para>
            </listitem>
            <listitem>
               <para>Must return property keys is a <emphasis>case-preserving</emphasis> manner. This
 means that the keys must have the same case as the corresponding key in
 the properties <code>Dictionary</code> that was passed to the
 <link linkend="org.osgi.framework.BundleContext.registerService-String---Object-Dictionary-">BundleContext.registerService(String[],Object,Dictionary)</link> or
 <link linkend="org.osgi.framework.ServiceRegistration.setProperties-Dictionary-">ServiceRegistration.setProperties(Dictionary)</link> methods.</para>
            </listitem>
            <listitem>
               <para>Is the property of the caller and can be modified by the caller but
 any changes are not reflected in the properties of the service.
 <link linkend="org.osgi.framework.ServiceRegistration.setProperties-Dictionary-">ServiceRegistration.setProperties(Dictionary)</link> must be called to
 modify the properties of the service.</para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A copy of the properties of the service referenced by this
         <code>ServiceReference</code> object</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.9</para>
         </formalpara>
      </section>
      <section xreflabel="getProperty(String)" role="method" xml:id="org.osgi.framework.ServiceReference.getProperty-String-">
         <title>public Object getProperty(String key)</title>
         <formalpara role="parameter">
            <title>key</title>
            <para>The property key.</para>
         </formalpara>
         <para role="description">
Returns the property value to which the specified property key is mapped
 in the properties <code>Dictionary</code> object of the service referenced by
 this <code>ServiceReference</code> object.

 </para>
         <para>
 Property keys are case-insensitive.

 </para>
         <para>
 This method must continue to return property values after the service has
 been unregistered. This is so references to unregistered services (for
 example, <code>ServiceReference</code> objects stored in the log) can still be
 interrogated.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The property value to which the key is mapped; <code>null</code> if
         there is no property named after the key.</para>
         </formalpara>
      </section>
      <section xreflabel="getPropertyKeys()" role="method" xml:id="org.osgi.framework.ServiceReference.getPropertyKeys--">
         <title>public String[] getPropertyKeys()</title>
         <para role="description">
Returns an array of the keys in the properties <code>Dictionary</code> object
 of the service referenced by this <code>ServiceReference</code> object.

 </para>
         <para>
 This method will continue to return the keys after the service has been
 unregistered. This is so references to unregistered services (for
 example, <code>ServiceReference</code> objects stored in the log) can still be
 interrogated.

 </para>
         <para>
 This method is <emphasis>case-preserving </emphasis>; this means that every key in the
 returned array must have the same case as the corresponding key in the
 properties <code>Dictionary</code> that was passed to the
 <link linkend="org.osgi.framework.BundleContext.registerService-String---Object-Dictionary-">BundleContext.registerService(String[],Object,Dictionary)</link> or
 <link linkend="org.osgi.framework.ServiceRegistration.setProperties-Dictionary-">ServiceRegistration.setProperties(Dictionary)</link> methods.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An array of property keys.</para>
         </formalpara>
      </section>
      <section xreflabel="getUsingBundles()" role="method" xml:id="org.osgi.framework.ServiceReference.getUsingBundles--">
         <title>public Bundle[] getUsingBundles()</title>
         <para role="description">
Returns the bundles that are using the service referenced by this
 <code>ServiceReference</code> object. Specifically, this method returns the
 bundles whose usage count for that service is greater than zero.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An array of bundles whose usage count for the service referenced
         by this <code>ServiceReference</code> object is greater than zero;
         <code>null</code> if no bundles are currently using that service.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section xreflabel="isAssignableTo(Bundle,String)" role="method" xml:id="org.osgi.framework.ServiceReference.isAssignableTo-Bundle-String-">
         <title>public boolean isAssignableTo(Bundle bundle, String className)</title>
         <formalpara role="parameter">
            <title>bundle</title>
            <para>The <code>Bundle</code> object to check.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>className</title>
            <para>The class name to check.</para>
         </formalpara>
         <para role="description">
Tests if the bundle that registered the service referenced by this
 <code>ServiceReference</code> and the specified bundle use the same source for
 the package of the specified class name.
 </para>
         <para>
 This method performs the following checks:
 </para>
         <orderedlist>
            <listitem>
               <para>If the specified bundle is equal to the bundle that registered the
 service referenced by this <code>ServiceReference</code> (registrant bundle)
 return <code>true</code>.</para>
            </listitem>
            <listitem>
               <para>Get the package name from the specified class name.</para>
            </listitem>
            <listitem>
               <para>For the specified bundle; find the source for the package. If no
 source is found then return <code>true</code> (use of reflection is assumed by
 the specified bundle).</para>
            </listitem>
            <listitem>
               <para>For the registrant bundle; find the source for the package. If the
 package source is found then return <code>true</code> if the package source
 equals the package source of the specified bundle; otherwise return
 <code>false</code>.</para>
            </listitem>
            <listitem>
               <para>If no package source is found for the registrant bundle then
 determine the package source based on the service object. If the service
 object is a <code>ServiceFactory</code> and the factory implementation is not
 from the registrant bundle return <code>true</code>; otherwise attempt to find
 the package source based on the service object class. If the package
 source is found and is equal to package source of the specified bundle
 return <code>true</code>; otherwise return <code>false</code>.</para>
            </listitem>
         </orderedlist>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the bundle which registered the service
         referenced by this <code>ServiceReference</code> and the specified
         bundle use the same source for the package of the specified class
         name. Otherwise <code>false</code> is returned.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the specified <code>Bundle</code> was not
             created by the same framework instance as this
             <code>ServiceReference</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="ServiceRegistration" role="class" xml:id="org.osgi.framework.ServiceRegistration">
      <title>public interface ServiceRegistration&lt;S&gt;</title>
      <formalpara role="parameter">
         <title>&lt;S&gt;</title>
         <para>Type of Service.</para>
      </formalpara>
      <para>
A registered service.

 </para>
      <para>
 The Framework returns a <code>ServiceRegistration</code> object when a
 <code>BundleContext.registerService</code> method invocation is successful. The
 <code>ServiceRegistration</code> object is for the private use of the registering
 bundle and should not be shared with other bundles.
 </para>
      <para>
 The <code>ServiceRegistration</code> object may be used to update the properties
 of the service or to unregister the service.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.framework.BundleContext.registerService-String---Object-Dictionary-">BundleContext.registerService(String[],Object,Dictionary)</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section xreflabel="getReference()" role="method" xml:id="org.osgi.framework.ServiceRegistration.getReference--">
         <title>public ServiceReference&lt;S&gt; getReference()</title>
         <para role="description">
Returns a <code>ServiceReference</code> object for a service being registered.
 </para>
         <para>
 The <code>ServiceReference</code> object may be shared with other bundles.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>ServiceReference</code> object.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this <code>ServiceRegistration</code> object
         has already been unregistered.</para>
         </formalpara>
      </section>
      <section xreflabel="setProperties(Dictionary)" role="method" xml:id="org.osgi.framework.ServiceRegistration.setProperties-Dictionary-">
         <title>public void setProperties(Dictionary&lt;String, ?&gt; properties)</title>
         <formalpara role="parameter">
            <title>properties</title>
            <para>The properties for this service. See <link linkend="org.osgi.framework.Constants">Constants</link>
        for a list of standard service property keys. Changes should not
        be made to this object after calling this method. To update the
        service's properties this method should be called again.</para>
         </formalpara>
         <para role="description">
Updates the properties associated with a service.

 </para>
         <para>
 The <link linkend="org.osgi.framework.Constants.OBJECTCLASS">Constants.OBJECTCLASS</link>, <link linkend="org.osgi.framework.Constants.SERVICE_BUNDLEID">Constants.SERVICE_BUNDLEID</link>,
 <link linkend="org.osgi.framework.Constants.SERVICE_ID">Constants.SERVICE_ID</link> and <link linkend="org.osgi.framework.Constants.SERVICE_SCOPE">Constants.SERVICE_SCOPE</link> keys
 cannot be modified by this method. These values are set by the Framework
 when the service is registered in the OSGi environment.

 </para>
         <para>
 The following steps are required to modify service properties:
 </para>
         <orderedlist>
            <listitem>
               <para>The service's properties are replaced with the provided properties.</para>
            </listitem>
            <listitem>
               <para>A service event of type <link linkend="org.osgi.framework.ServiceEvent.MODIFIED">ServiceEvent.MODIFIED</link> is fired.</para>
            </listitem>
         </orderedlist>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this <code>ServiceRegistration</code> object
         has already been unregistered.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If <code>properties</code> contains case
         variants of the same key name.</para>
         </formalpara>
      </section>
      <section xreflabel="unregister()" role="method" xml:id="org.osgi.framework.ServiceRegistration.unregister--">
         <title>public void unregister()</title>
         <para role="description">
Unregisters a service. Remove a <code>ServiceRegistration</code> object from
 the Framework service registry. All <code>ServiceReference</code> objects
 associated with this <code>ServiceRegistration</code> object can no longer be
 used to interact with the service once unregistration is complete.

 </para>
         <para>
 The following steps are required to unregister a service:
 </para>
         <orderedlist>
            <listitem>
               <para>The service is removed from the Framework service registry so that it
 can no longer be obtained.</para>
            </listitem>
            <listitem>
               <para>A service event of type <link linkend="org.osgi.framework.ServiceEvent.UNREGISTERING">ServiceEvent.UNREGISTERING</link> is fired
 so that bundles using this service can release their use of the service.
 Once delivery of the service event is complete, the
 <code>ServiceReference</code> objects for the service may no longer be used to
 get a service object for the service.</para>
            </listitem>
            <listitem>
               <para>For each bundle whose use count for this service is greater than
 zero:
 </para>
               <itemizedlist>
                  <listitem>
                     <para>The bundle's use count for this service is set to zero.</para>
                  </listitem>
                  <listitem>
                     <para>If the service was registered with a <link linkend="org.osgi.framework.ServiceFactory">ServiceFactory</link> object,
 the <code>ServiceFactory.ungetService</code> method is called to release the
 service object for the bundle.</para>
                  </listitem>
               </itemizedlist>
            </listitem>
         </orderedlist>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this <code>ServiceRegistration</code> object
         has already been unregistered.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.BundleContext.ungetService-ServiceReference-">BundleContext.ungetService(ServiceReference)</link>, <link linkend="org.osgi.framework.ServiceFactory.ungetService-Bundle-ServiceRegistration-S-">ServiceFactory.ungetService(Bundle, ServiceRegistration, Object)</link>
            </para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="SynchronousBundleListener" role="class" xml:id="org.osgi.framework.SynchronousBundleListener">
      <title>public interface SynchronousBundleListener<?line-break?> extends BundleListener</title>
      <para>
A synchronous <code>BundleEvent</code> listener. <code>SynchronousBundleListener</code>
 is a listener interface that may be implemented by a bundle developer. When a
 <code>BundleEvent</code> is fired, it is synchronously delivered to a
 <code>SynchronousBundleListener</code>. The Framework may deliver
 <code>BundleEvent</code> objects to a <code>SynchronousBundleListener</code> out of
 order and may concurrently call and/or reenter a
 <code>SynchronousBundleListener</code>.

 </para>
      <para>
 For <code>BundleEvent</code> types <link linkend="org.osgi.framework.BundleEvent.STARTED">STARTED</link> and
 <link linkend="org.osgi.framework.BundleEvent.LAZY_ACTIVATION">LAZY_ACTIVATION</link>, the Framework must not
 hold the referenced bundle's "state change" lock when the
 <code>BundleEvent</code> is delivered to a <code>SynchronousBundleListener</code>. For
 the other <code>BundleEvent</code> types, the Framework must hold the referenced
 bundle's "state change" lock when the <code>BundleEvent</code> is
 delivered to a <code>SynchronousBundleListener</code>. A
 <code>SynchronousBundleListener</code> cannot directly call life cycle methods on
 the referenced bundle when the Framework is holding the referenced bundle's
 "state change" lock.

 </para>
      <para>
 A <code>SynchronousBundleListener</code> object is registered with the Framework
 using the <link linkend="org.osgi.framework.BundleContext.addBundleListener-BundleListener-">BundleContext.addBundleListener(BundleListener)</link> method.
 <code>SynchronousBundleListener</code> objects are called with a
 <code>BundleEvent</code> object when a bundle has been installed, resolved,
 starting, started, stopping, stopped, updated, unresolved, or uninstalled.
 </para>
      <para>
 Unlike normal <code>BundleListener</code> objects,
 <code>SynchronousBundleListener</code>s are synchronously called during bundle
 lifecycle processing. The bundle lifecycle processing will not proceed until
 all <code>SynchronousBundleListener</code>s have completed.
 <code>SynchronousBundleListener</code> objects will be called prior to
 <code>BundleListener</code> objects.
 </para>
      <para>
         <code>AdminPermission[bundle,LISTENER]</code> is required to add or remove a
 <code>SynchronousBundleListener</code> object.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.framework.BundleEvent">BundleEvent</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.1</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
   </section>
   <section xreflabel="UnfilteredServiceListener" role="class" xml:id="org.osgi.framework.UnfilteredServiceListener">
      <title>public interface UnfilteredServiceListener<?line-break?> extends ServiceListener</title>
      <para>
A <code>ServiceEvent</code> listener that does <emphasis>not</emphasis> filter based upon any
 filter string specified to
 <link linkend="org.osgi.framework.BundleContext.addServiceListener-ServiceListener-String-">BundleContext.addServiceListener(ServiceListener, String)</link>. Using an
 <code>UnfilteredServiceListener</code> and specifying a filter string to
 <link linkend="org.osgi.framework.BundleContext.addServiceListener-ServiceListener-String-">BundleContext.addServiceListener(ServiceListener, String)</link> allows the
 listener to receive all <code>ServiceEvent</code> objects while still advising
 <link linkend="org.osgi.framework.hooks.service.ListenerHook">ListenerHook</link> implementation of the service interests in the filter
 string.

 For example, an implementation of Declarative Services would add an
 <code>UnfilteredServiceListener</code> with a filter string listing all the
 services referenced by all the service components. The Declarative Services
 implementation would receive all <code>ServiceEvent</code> objects for internal
 processing and a Remote Services discovery service implementation can observe
 the service interests of the service components using a <link linkend="org.osgi.framework.hooks.service.ListenerHook">ListenerHook</link>.
 When the set of service components being processed changes, the Declarative
 Services implementation would re-add the <code>UnfilteredServiceListener</code>
 with an updated filter string.

 </para>
      <para>
 When a <code>ServiceEvent</code> is fired, it is synchronously delivered to an
 <code>UnfilteredServiceListener</code>. The Framework may deliver
 <code>ServiceEvent</code> objects to an <code>UnfilteredServiceListener</code> out of
 order and may concurrently call and/or reenter an
 <code>UnfilteredServiceListener</code>.

 </para>
      <para>
 An <code>UnfilteredServiceListener</code> object is registered with the Framework
 using the <code>BundleContext.addServiceListener</code> method.
 <code>UnfilteredServiceListener</code> objects are called with a
 <code>ServiceEvent</code> object when a service is registered, modified, or is in
 the process of unregistering.

 </para>
      <para>
         <code>ServiceEvent</code> object delivery to <code>UnfilteredServiceListener</code>
 objects are <emphasis>not</emphasis> filtered by the filter specified when the listener was
 registered. If the Java Runtime Environment supports permissions, then some
 filtering is done. <code>ServiceEvent</code> objects are only delivered to the
 listener if the bundle which defines the listener object's class has the
 appropriate <code>ServicePermission</code> to get the service using at least one
 of the named classes under which the service was registered.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.framework.ServiceEvent">ServiceEvent</link>, <link linkend="org.osgi.framework.ServicePermission">ServicePermission</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.7</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
   </section>
   <section xreflabel="Version" role="class" xml:id="org.osgi.framework.Version">
      <title>public class Version<?line-break?> implements Comparable&lt;Version&gt;</title>
      <para>
Version identifier for capabilities such as bundles and packages.

 </para>
      <para>
 Version identifiers have four components.
 </para>
      <orderedlist>
         <listitem>
            <para>Major version. A non-negative integer.</para>
         </listitem>
         <listitem>
            <para>Minor version. A non-negative integer.</para>
         </listitem>
         <listitem>
            <para>Micro version. A non-negative integer.</para>
         </listitem>
         <listitem>
            <para>Qualifier. A text string. See <code>Version(String)</code> for the format of
 the qualifier string.</para>
         </listitem>
      </orderedlist>
      <para>
         <code>Version</code> objects are immutable.</para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.3</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section xreflabel="emptyVersion" role="field" xml:id="org.osgi.framework.Version.emptyVersion">
         <title>public static final Version emptyVersion</title>
         <para>
The empty version "0.0.0".
   </para>
      </section>
      <section xreflabel="Version(int,int,int)" role="method" xml:id="org.osgi.framework.Version.Version-int-int-int-">
         <title>public  Version(int major, int minor, int micro)</title>
         <formalpara role="parameter">
            <title>major</title>
            <para>Major component of the version identifier.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>minor</title>
            <para>Minor component of the version identifier.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>micro</title>
            <para>Micro component of the version identifier.</para>
         </formalpara>
         <para role="description">
Creates a version identifier from the specified numerical components.

 </para>
         <para>
 The qualifier is set to the empty string.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the numerical components are
         negative.</para>
         </formalpara>
      </section>
      <section xreflabel="Version(int,int,int,String)" role="method" xml:id="org.osgi.framework.Version.Version-int-int-int-String-">
         <title>public  Version(int major, int minor, int micro, String qualifier)</title>
         <formalpara role="parameter">
            <title>major</title>
            <para>Major component of the version identifier.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>minor</title>
            <para>Minor component of the version identifier.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>micro</title>
            <para>Micro component of the version identifier.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>qualifier</title>
            <para>Qualifier component of the version identifier. If
        <code>null</code> is specified, then the qualifier will be set to the
        empty string.</para>
         </formalpara>
         <para role="description">
Creates a version identifier from the specified components.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the numerical components are negative
         or the qualifier string is invalid.</para>
         </formalpara>
      </section>
      <section xreflabel="Version(String)" role="method" xml:id="org.osgi.framework.Version.Version-String-">
         <title>public  Version(String version)</title>
         <formalpara role="parameter">
            <title>version</title>
            <para>String representation of the version identifier. There
        must be no whitespace in the argument.</para>
         </formalpara>
         <para role="description">
Creates a version identifier from the specified string.

 </para>
         <para>
 Version string grammar:

 </para>
         <programlisting> version ::= major('.'minor('.'micro('.'qualifier)?)?)?
 major ::= digit+
 minor ::= digit+
 micro ::= digit+
 qualifier ::= (alpha|digit|'_'|'-')+
 digit ::= [0..9]
 alpha ::= [a..zA..Z]</programlisting>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If <code>version</code> is improperly
         formatted.</para>
         </formalpara>
      </section>
      <section xreflabel="compareTo(Version)" role="method" xml:id="org.osgi.framework.Version.compareTo-Version-">
         <title>public int compareTo(Version other)</title>
         <formalpara role="parameter">
            <title>other</title>
            <para>The <code>Version</code> object to be compared.</para>
         </formalpara>
         <para role="description">
Compares this <code>Version</code> object to another <code>Version</code>.

 </para>
         <para>
 A version is considered to be <emphasis role="strong">less than</emphasis> another version if its
 major component is less than the other version's major component, or the
 major components are equal and its minor component is less than the other
 version's minor component, or the major and minor components are equal
 and its micro component is less than the other version's micro component,
 or the major, minor and micro components are equal and it's qualifier
 component is less than the other version's qualifier component (using
 <code>String.compareTo</code>).

 </para>
         <para>
 A version is considered to be <emphasis role="strong">equal to</emphasis> another version if the
 major, minor and micro components are equal and the qualifier component
 is equal (using <code>String.compareTo</code>).</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A negative integer, zero, or a positive integer if this version
         is less than, equal to, or greater than the specified
         <code>Version</code> object.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>ClassCastException</code>– If the specified object is not a
         <code>Version</code> object.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="equals(Object)" role="method" xml:id="org.osgi.framework.Version.equals-Object-">
         <title>public boolean equals(Object object)</title>
         <formalpara role="parameter">
            <title>object</title>
            <para>The <code>Version</code> object to be compared.</para>
         </formalpara>
         <para role="description">
Compares this <code>Version</code> object to another object.

 </para>
         <para>
 A version is considered to be <emphasis role="strong">equal to </emphasis> another version if the
 major, minor and micro components are equal and the qualifier component
 is equal (using <code>String.equals</code>).</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if <code>object</code> is a <code>Version</code> and is equal
         to this object; <code>false</code> otherwise.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getMajor()" role="method" xml:id="org.osgi.framework.Version.getMajor--">
         <title>public int getMajor()</title>
         <para role="description">
Returns the major component of this version identifier.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The major component.</para>
         </formalpara>
      </section>
      <section xreflabel="getMicro()" role="method" xml:id="org.osgi.framework.Version.getMicro--">
         <title>public int getMicro()</title>
         <para role="description">
Returns the micro component of this version identifier.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The micro component.</para>
         </formalpara>
      </section>
      <section xreflabel="getMinor()" role="method" xml:id="org.osgi.framework.Version.getMinor--">
         <title>public int getMinor()</title>
         <para role="description">
Returns the minor component of this version identifier.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The minor component.</para>
         </formalpara>
      </section>
      <section xreflabel="getQualifier()" role="method" xml:id="org.osgi.framework.Version.getQualifier--">
         <title>public String getQualifier()</title>
         <para role="description">
Returns the qualifier component of this version identifier.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The qualifier component.</para>
         </formalpara>
      </section>
      <section xreflabel="hashCode()" role="method" xml:id="org.osgi.framework.Version.hashCode--">
         <title>public int hashCode()</title>
         <para role="description">
Returns a hash code value for the object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An integer which is a hash code value for this object.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="parseVersion(String)" role="method" xml:id="org.osgi.framework.Version.parseVersion-String-">
         <title>public static Version parseVersion(String version)</title>
         <formalpara role="parameter">
            <title>version</title>
            <para>String representation of the version identifier. Leading
        and trailing whitespace will be ignored.</para>
         </formalpara>
         <para role="description">
Parses a version identifier from the specified string.

 </para>
         <para>
 See <link linkend="org.osgi.framework.Version.Version-String-">Version(String)</link> for the format of the version string.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A <code>Version</code> object representing the version identifier. If
         <code>version</code> is <code>null</code> or the empty string then
         <link linkend="org.osgi.framework.Version.emptyVersion">emptyVersion</link> will be returned.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If <code>version</code> is improperly
         formatted.</para>
         </formalpara>
      </section>
      <section xreflabel="toString()" role="method" xml:id="org.osgi.framework.Version.toString--">
         <title>public String toString()</title>
         <para role="description">
Returns the string representation of this version identifier.

 </para>
         <para>
 The format of the version string will be <code>major.minor.micro</code> if
 qualifier is the empty string or <code>major.minor.micro.qualifier</code>
 otherwise.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The string representation of this version identifier.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="valueOf(String)" role="method" xml:id="org.osgi.framework.Version.valueOf-String-">
         <title>public static Version valueOf(String version)</title>
         <formalpara role="parameter">
            <title>version</title>
            <para>String representation of the version identifier. Leading
        and trailing whitespace will be ignored. Must not be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Returns a <code>Version</code> object holding the version identifier in the
 specified <code>String</code>.

 </para>
         <para>
 See <link linkend="org.osgi.framework.Version.Version-String-">Version(String)</link> for the format of the version string.

 </para>
         <para>
 This method performs a similar function as <link linkend="org.osgi.framework.Version.parseVersion-String-">parseVersion(String)</link>
 but has the static factory <code>valueOf(String)</code> method signature.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A <code>Version</code> object representing the version identifier. If
         <code>version</code> is the empty string then <link linkend="org.osgi.framework.Version.emptyVersion">emptyVersion</link>
         will be returned.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If <code>version</code> is improperly
         formatted.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.8</para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="VersionRange" role="class" xml:id="org.osgi.framework.VersionRange">
      <title>public class VersionRange</title>
      <para>
Version range. A version range is an interval describing a set of
 <link linkend="org.osgi.framework.Version">versions</link>.

 </para>
      <para>
 A range has a left (lower) endpoint and a right (upper) endpoint. Each
 endpoint can be open (excluded from the set) or closed (included in the set).

 </para>
      <para>
         <code>VersionRange</code> objects are immutable.</para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.7</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section xreflabel="LEFT_CLOSED" role="field" xml:id="org.osgi.framework.VersionRange.LEFT_CLOSED">
         <title>public static final char LEFT_CLOSED = 91</title>
         <para>
The left endpoint is closed and is included in the range.
 </para>
         <para>
 The value of <code>LEFT_CLOSED</code> is <code>'['</code>.</para>
      </section>
      <section xreflabel="LEFT_OPEN" role="field" xml:id="org.osgi.framework.VersionRange.LEFT_OPEN">
         <title>public static final char LEFT_OPEN = 40</title>
         <para>
The left endpoint is open and is excluded from the range.
 </para>
         <para>
 The value of <code>LEFT_OPEN</code> is <code>'('</code>.</para>
      </section>
      <section xreflabel="RIGHT_CLOSED" role="field" xml:id="org.osgi.framework.VersionRange.RIGHT_CLOSED">
         <title>public static final char RIGHT_CLOSED = 93</title>
         <para>
The right endpoint is closed and is included in the range.
 </para>
         <para>
 The value of <code>RIGHT_CLOSED</code> is <code>']'</code>.</para>
      </section>
      <section xreflabel="RIGHT_OPEN" role="field" xml:id="org.osgi.framework.VersionRange.RIGHT_OPEN">
         <title>public static final char RIGHT_OPEN = 41</title>
         <para>
The right endpoint is open and is excluded from the range.
 </para>
         <para>
 The value of <code>RIGHT_OPEN</code> is <code>')'</code>.</para>
      </section>
      <section xreflabel="VersionRange(char,Version,Version,char)" role="method" xml:id="org.osgi.framework.VersionRange.VersionRange-char-Version-Version-char-">
         <title>public  VersionRange(char leftType, Version leftEndpoint, Version rightEndpoint, char rightType)</title>
         <formalpara role="parameter">
            <title>leftType</title>
            <para>Must be either <link linkend="org.osgi.framework.VersionRange.LEFT_CLOSED">LEFT_CLOSED</link> or <link linkend="org.osgi.framework.VersionRange.LEFT_OPEN">LEFT_OPEN</link>
        .</para>
         </formalpara>
         <formalpara role="parameter">
            <title>leftEndpoint</title>
            <para>Left endpoint of range. Must not be <code>null</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>rightEndpoint</title>
            <para>Right endpoint of range. May be <code>null</code> to
        indicate the right endpoint is <emphasis>Infinity</emphasis>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>rightType</title>
            <para>Must be either <link linkend="org.osgi.framework.VersionRange.RIGHT_CLOSED">RIGHT_CLOSED</link> or
        <link linkend="org.osgi.framework.VersionRange.RIGHT_OPEN">RIGHT_OPEN</link>.</para>
         </formalpara>
         <para role="description">
Creates a version range from the specified versions.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the arguments are invalid.</para>
         </formalpara>
      </section>
      <section xreflabel="VersionRange(String)" role="method" xml:id="org.osgi.framework.VersionRange.VersionRange-String-">
         <title>public  VersionRange(String range)</title>
         <formalpara role="parameter">
            <title>range</title>
            <para>String representation of the version range. The versions in
        the range must contain no whitespace. Other whitespace in the
        range string is ignored. Must not be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Creates a version range from the specified string.

 </para>
         <para>
 Version range string grammar:

 </para>
         <programlisting> range ::= interval | atleast
 interval ::= ( '[' | '(' ) left ',' right ( ']' | ')' )
 left ::= version
 right ::= version
 atleast ::= version</programlisting>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If <code>range</code> is improperly
         formatted.</para>
         </formalpara>
      </section>
      <section xreflabel="equals(Object)" role="method" xml:id="org.osgi.framework.VersionRange.equals-Object-">
         <title>public boolean equals(Object object)</title>
         <formalpara role="parameter">
            <title>object</title>
            <para>The <code>VersionRange</code> object to be compared.</para>
         </formalpara>
         <para role="description">
Compares this <code>VersionRange</code> object to another object.

 </para>
         <para>
 A version range is considered to be <emphasis role="strong">equal to </emphasis> another version
 range if both the endpoints and their types are equal or if both version
 ranges are <link linkend="org.osgi.framework.VersionRange.isEmpty--">empty</link>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if <code>object</code> is a <code>VersionRange</code> and is
         equal to this object; <code>false</code> otherwise.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getLeft()" role="method" xml:id="org.osgi.framework.VersionRange.getLeft--">
         <title>public Version getLeft()</title>
         <para role="description">
Returns the left endpoint of this version range.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The left endpoint.</para>
         </formalpara>
      </section>
      <section xreflabel="getLeftType()" role="method" xml:id="org.osgi.framework.VersionRange.getLeftType--">
         <title>public char getLeftType()</title>
         <para role="description">
Returns the type of the left endpoint of this version range.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <link linkend="org.osgi.framework.VersionRange.LEFT_CLOSED">LEFT_CLOSED</link> if the left endpoint is closed or
         <link linkend="org.osgi.framework.VersionRange.LEFT_OPEN">LEFT_OPEN</link> if the left endpoint is open.</para>
         </formalpara>
      </section>
      <section xreflabel="getRight()" role="method" xml:id="org.osgi.framework.VersionRange.getRight--">
         <title>public Version getRight()</title>
         <para role="description">
Returns the right endpoint of this version range.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The right endpoint. May be <code>null</code> which indicates the right
         endpoint is <emphasis>Infinity</emphasis>.</para>
         </formalpara>
      </section>
      <section xreflabel="getRightType()" role="method" xml:id="org.osgi.framework.VersionRange.getRightType--">
         <title>public char getRightType()</title>
         <para role="description">
Returns the type of the right endpoint of this version range.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <link linkend="org.osgi.framework.VersionRange.RIGHT_CLOSED">RIGHT_CLOSED</link> if the right endpoint is closed or
         <link linkend="org.osgi.framework.VersionRange.RIGHT_OPEN">RIGHT_OPEN</link> if the right endpoint is open.</para>
         </formalpara>
      </section>
      <section xreflabel="hashCode()" role="method" xml:id="org.osgi.framework.VersionRange.hashCode--">
         <title>public int hashCode()</title>
         <para role="description">
Returns a hash code value for the object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An integer which is a hash code value for this object.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="includes(Version)" role="method" xml:id="org.osgi.framework.VersionRange.includes-Version-">
         <title>public boolean includes(Version version)</title>
         <formalpara role="parameter">
            <title>version</title>
            <para>The version to test for inclusion in this version range.</para>
         </formalpara>
         <para role="description">
Returns whether this version range includes the specified version.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the specified version is included in this version
         range; <code>false</code> otherwise.</para>
         </formalpara>
      </section>
      <section xreflabel="intersection(VersionRange...)" role="method" xml:id="org.osgi.framework.VersionRange.intersection-VersionRange...-">
         <title>public VersionRange intersection(VersionRange... ranges)</title>
         <formalpara role="parameter">
            <title>ranges</title>
            <para>The version ranges to intersect with this version range.</para>
         </formalpara>
         <para role="description">
Returns the intersection of this version range with the specified version
 ranges.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A version range representing the intersection of this version
         range and the specified version ranges. If no version ranges are
         specified, then this version range is returned.</para>
         </formalpara>
      </section>
      <section xreflabel="isEmpty()" role="method" xml:id="org.osgi.framework.VersionRange.isEmpty--">
         <title>public boolean isEmpty()</title>
         <para role="description">
Returns whether this version range is empty. A version range is empty if
 the set of versions defined by the interval is empty.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if this version range is empty; <code>false</code>
         otherwise.</para>
         </formalpara>
      </section>
      <section xreflabel="isExact()" role="method" xml:id="org.osgi.framework.VersionRange.isExact--">
         <title>public boolean isExact()</title>
         <para role="description">
Returns whether this version range contains only a single version.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if this version range contains only a single
         version; <code>false</code> otherwise.</para>
         </formalpara>
      </section>
      <section xreflabel="toFilterString(String)" role="method" xml:id="org.osgi.framework.VersionRange.toFilterString-String-">
         <title>public String toFilterString(String attributeName)</title>
         <formalpara role="parameter">
            <title>attributeName</title>
            <para>The attribute name to use in the returned filter
        string.</para>
         </formalpara>
         <para role="description">
Returns the filter string for this version range using the specified
 attribute name.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A filter string for this version range using the specified
         attribute name.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the specified attribute name is not a
         valid attribute name.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>Core Specification, Filters, for a description of the filter string syntax.</code>
            </para>
         </formalpara>
      </section>
      <section xreflabel="toString()" role="method" xml:id="org.osgi.framework.VersionRange.toString--">
         <title>public String toString()</title>
         <para role="description">
Returns the string representation of this version range.

 </para>
         <para>
 The format of the version range string will be a version string if the
 right end point is <emphasis>Infinity</emphasis> (<code>null</code>) or an interval string.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The string representation of this version range.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="valueOf(String)" role="method" xml:id="org.osgi.framework.VersionRange.valueOf-String-">
         <title>public static VersionRange valueOf(String range)</title>
         <formalpara role="parameter">
            <title>range</title>
            <para>String representation of the version range. The versions in
        the range must contain no whitespace. Other whitespace in the
        range string is ignored. Must not be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Returns a <code>VersionRange</code> object holding the version range in the
 specified <code>String</code>.

 </para>
         <para>
 See <link linkend="org.osgi.framework.VersionRange.VersionRange-String-">VersionRange(String)</link> for the format of the version range
 string.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A <code>VersionRange</code> object representing the version range.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If <code>range</code> is improperly
         formatted.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.8</para>
         </formalpara>
      </section>
   </section>
</section>

  <section xreflabel="org.osgi.framework.launch" version="5" role="package" xml:id="org.osgi.framework.launch" xml:base="010/../../../generated/javadoc/docbook/org.osgi.framework.launch.xml">
   <title>org.osgi.framework.launch</title>
   <info>
      <releaseinfo xml:id="org.osgi.framework.launch-version">Version 1.2</releaseinfo>
      <edition xml:id="org.osgi.framework.launch-version.number">1.2</edition>
   </info>
   <para>
Framework Launch Package Version 1.2.

 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest.

 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.framework.launch; version="[1.2,2.0)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.launch.Framework">
                  <code>Framework</code>
               </link> -
A Framework instance.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.launch.FrameworkFactory">
                  <code>FrameworkFactory</code>
               </link> -
A factory for creating <link linkend="org.osgi.framework.launch.Framework">Framework</link> instances.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section xreflabel="Framework" role="class" xml:id="org.osgi.framework.launch.Framework">
      <title>public interface Framework<?line-break?> extends Bundle</title>
      <para>
A Framework instance. A Framework is also known as a System Bundle.

 </para>
      <para>
 Framework instances are created using a <link linkend="org.osgi.framework.launch.FrameworkFactory">FrameworkFactory</link>. The methods
 of this interface can be used to manage and control the created framework
 instance.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section xreflabel="adapt(Class)" role="method" xml:id="org.osgi.framework.launch.Framework.adapt-Class-">
         <title>public A adapt(Class&lt;A&gt; type)</title>
         <formalpara role="parameter">
            <title>Type Parameters</title>
            <para>
               <code>&lt;A&gt;</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>&lt;A&gt;</title>
            <para>The type to which this Framework is to be adapted.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>type</title>
            <para>Class object for the type to which this Framework is to be
        adapted.</para>
         </formalpara>
         <para role="description">
Adapt this Framework to the specified type.

 </para>
         <para>
 Adapting this Framework to the specified type may require certain checks,
 including security checks, to succeed. If a check does not succeed, then
 this Framework cannot be adapted and <code>null</code> is returned. If this
 Framework is not <link linkend="org.osgi.framework.launch.Framework.init--">initialized</link>, then <code>null</code> is
 returned if the specified type is one of the OSGi defined types to which
 a system bundle can be adapted.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The object, of the specified type, to which this Framework has
         been adapted or <code>null</code> if this Framework cannot be adapted</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="findEntries(String,String,boolean)" role="method" xml:id="org.osgi.framework.launch.Framework.findEntries-String-String-boolean-">
         <title>public Enumeration&lt;URL&gt; findEntries(String path, String filePattern, boolean recurse)</title>
         <formalpara role="parameter">
            <title>path</title>
            <para>Ignored.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>filePattern</title>
            <para>Ignored.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>recurse</title>
            <para>Ignored.</para>
         </formalpara>
         <para role="description">
Returns <code>null</code> as a framework implementation does not have a proper
 bundle from which to return entries.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>null</code> as a framework implementation does not have a proper
         bundle from which to return entries.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getBundleId()" role="method" xml:id="org.osgi.framework.launch.Framework.getBundleId--">
         <title>public long getBundleId()</title>
         <para role="description">
Returns the Framework unique identifier. This Framework is assigned the
 unique identifier zero (0) since this Framework is also a System Bundle.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>0.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Bundle.getBundleId--">Bundle.getBundleId()</link>
            </para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getEntry(String)" role="method" xml:id="org.osgi.framework.launch.Framework.getEntry-String-">
         <title>public URL getEntry(String path)</title>
         <formalpara role="parameter">
            <title>path</title>
            <para>Ignored.</para>
         </formalpara>
         <para role="description">
Returns <code>null</code> as a framework implementation does not have a proper
 bundle from which to return an entry.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>null</code> as a framework implementation does not have a proper
         bundle from which to return an entry.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getEntryPaths(String)" role="method" xml:id="org.osgi.framework.launch.Framework.getEntryPaths-String-">
         <title>public Enumeration&lt;String&gt; getEntryPaths(String path)</title>
         <formalpara role="parameter">
            <title>path</title>
            <para>Ignored.</para>
         </formalpara>
         <para role="description">
Returns <code>null</code> as a framework implementation does not have a proper
 bundle from which to return entry paths.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>null</code> as a framework implementation does not have a proper
         bundle from which to return entry paths.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getLastModified()" role="method" xml:id="org.osgi.framework.launch.Framework.getLastModified--">
         <title>public long getLastModified()</title>
         <para role="description">
Returns the time when the set of bundles in this framework was last
 modified. The set of bundles is considered to be modified when a bundle
 is installed, updated or uninstalled.

 </para>
         <para>
 The time value is the number of milliseconds since January 1, 1970,
 00:00:00 UTC.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The time when the set of bundles in this framework was last
         modified.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getLocation()" role="method" xml:id="org.osgi.framework.launch.Framework.getLocation--">
         <title>public String getLocation()</title>
         <para role="description">
Returns the Framework location identifier. This Framework is assigned the
 unique location "<code>System Bundle</code>" since this Framework is
 also a System Bundle.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The string "<code>System Bundle</code>".</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have the appropriate
         <code>AdminPermission[this,METADATA]</code>, and the Java Runtime
         Environment supports permissions.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Bundle.getLocation--">Bundle.getLocation()</link>, <link linkend="org.osgi.framework.Constants.SYSTEM_BUNDLE_LOCATION">Constants.SYSTEM_BUNDLE_LOCATION</link>
            </para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getSymbolicName()" role="method" xml:id="org.osgi.framework.launch.Framework.getSymbolicName--">
         <title>public String getSymbolicName()</title>
         <para role="description">
Returns the symbolic name of this Framework. The symbolic name is unique
 for the implementation of the framework. However, the symbolic name
 "<code>system.bundle</code>" must be recognized as an alias to the
 implementation-defined symbolic name since this Framework is also a
 System Bundle.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The symbolic name of this Framework.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Bundle.getSymbolicName--">Bundle.getSymbolicName()</link>, <link linkend="org.osgi.framework.Constants.SYSTEM_BUNDLE_SYMBOLICNAME">Constants.SYSTEM_BUNDLE_SYMBOLICNAME</link>
            </para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="init()" role="method" xml:id="org.osgi.framework.launch.Framework.init--">
         <title>public void init() throws BundleException</title>
         <para role="description">
Initialize this Framework.
 </para>
         <para>
 This method performs the same function as calling
 <link linkend="org.osgi.framework.launch.Framework.init-FrameworkListener...-">init(FrameworkListener...)</link> with no framework listeners.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>BundleException</code>– If this Framework could not be initialized.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the Java Runtime Environment supports
         permissions and the caller does not have the appropriate
         <code>AdminPermission[this,EXECUTE]</code> or if there is a security
         manager already installed and the
         <link linkend="org.osgi.framework.Constants.FRAMEWORK_SECURITY">Constants.FRAMEWORK_SECURITY</link> configuration property is
         set.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.launch.Framework.init-FrameworkListener...-">init(FrameworkListener...)</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="init(FrameworkListener...)" role="method" xml:id="org.osgi.framework.launch.Framework.init-FrameworkListener...-">
         <title>public void init(FrameworkListener... listeners) throws BundleException</title>
         <formalpara role="parameter">
            <title>listeners</title>
            <para>Zero or more listeners to be notified when framework
        events occur while initializing the framework. The specified
        listeners do not need to be otherwise registered with the
        framework. If a specified listener is registered with the
        framework, it will be notified twice for each framework event.</para>
         </formalpara>
         <para role="description">
Initialize this Framework. After calling this method, this Framework
 must:
 </para>
         <itemizedlist>
            <listitem>
               <para>Have generated a new <link linkend="org.osgi.framework.Constants.FRAMEWORK_UUID">framework UUID</link>.
 </para>
            </listitem>
            <listitem>
               <para>Be in the <link linkend="org.osgi.framework.Bundle.STARTING">STARTING</link> state.</para>
            </listitem>
            <listitem>
               <para>Have a valid Bundle Context.</para>
            </listitem>
            <listitem>
               <para>Be at start level 0.</para>
            </listitem>
            <listitem>
               <para>Have event handling enabled.</para>
            </listitem>
            <listitem>
               <para>Have reified Bundle objects for all installed bundles.</para>
            </listitem>
            <listitem>
               <para>Have registered any framework services. For example,
 <code>ConditionalPermissionAdmin</code>.</para>
            </listitem>
            <listitem>
               <para>Be <link linkend="org.osgi.framework.launch.Framework.adapt-Class-">adaptable</link> to the OSGi defined types to which
 a system bundle can be adapted.</para>
            </listitem>
            <listitem>
               <para>Have called the <code>start</code> method of the extension bundle
 activator for all resolved extension bundles.</para>
            </listitem>
         </itemizedlist>
         <para>
 This Framework will not actually be started until <link linkend="org.osgi.framework.launch.Framework.start--">start</link>
 is called.

 </para>
         <para>
 This method does nothing if called when this Framework is in the
 <link linkend="org.osgi.framework.Bundle.STARTING">STARTING</link>, <link linkend="org.osgi.framework.Bundle.ACTIVE">ACTIVE</link> or <link linkend="org.osgi.framework.Bundle.STOPPING">STOPPING</link> states.

 </para>
         <para>
 All framework events fired by this method are also delivered to the
 specified FrameworkListeners in the order they are specified before
 returning from this method. After returning from this method the
 specified listeners are no longer notified of framework events.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>BundleException</code>– If this Framework could not be initialized.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the Java Runtime Environment supports
         permissions and the caller does not have the appropriate
         <code>AdminPermission[this,EXECUTE]</code> or if there is a security
         manager already installed and the
         <link linkend="org.osgi.framework.Constants.FRAMEWORK_SECURITY">Constants.FRAMEWORK_SECURITY</link> configuration property is
         set.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.2</para>
         </formalpara>
      </section>
      <section xreflabel="start()" role="method" xml:id="org.osgi.framework.launch.Framework.start--">
         <title>public void start() throws BundleException</title>
         <para role="description">
Start this Framework.

 </para>
         <para>
 The following steps are taken to start this Framework:
 </para>
         <orderedlist>
            <listitem>
               <para>If this Framework is not in the <link linkend="org.osgi.framework.Bundle.STARTING">STARTING</link> state,
 <link linkend="org.osgi.framework.launch.Framework.init--">initialize</link> this Framework.</para>
            </listitem>
            <listitem>
               <para>All installed bundles must be started in accordance with each
 bundle's persistent <emphasis>autostart setting</emphasis>. This means some bundles
 will not be started, some will be started with <emphasis>eager activation</emphasis>
 and some will be started with their <emphasis>declared activation</emphasis> policy.
 The start level of this Framework is moved to the start level specified
 by the <link linkend="org.osgi.framework.Constants.FRAMEWORK_BEGINNING_STARTLEVEL">beginning start
 level</link> framework property, as described in the <emphasis>Start Level
 Specification</emphasis>. If this framework property is not specified, then the
 start level of this Framework is moved to start level one (1). Any
 exceptions that occur during bundle starting must be wrapped in a
 <link linkend="org.osgi.framework.BundleException">BundleException</link> and then published as a framework event of type
 <link linkend="org.osgi.framework.FrameworkEvent.ERROR">FrameworkEvent.ERROR</link>
               </para>
            </listitem>
            <listitem>
               <para>This Framework's state is set to <link linkend="org.osgi.framework.Bundle.ACTIVE">ACTIVE</link>.</para>
            </listitem>
            <listitem>
               <para>A framework event of type <link linkend="org.osgi.framework.FrameworkEvent.STARTED">FrameworkEvent.STARTED</link> is fired</para>
            </listitem>
         </orderedlist>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>BundleException</code>– If this Framework could not be started.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have the appropriate
         <code>AdminPermission[this,EXECUTE]</code>, and the Java Runtime
         Environment supports permissions.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>Start Level Specification</code>
            </para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="start(int)" role="method" xml:id="org.osgi.framework.launch.Framework.start-int-">
         <title>public void start(int options) throws BundleException</title>
         <formalpara role="parameter">
            <title>options</title>
            <para>Ignored. There are no start options for the Framework.</para>
         </formalpara>
         <para role="description">
Start this Framework.

 </para>
         <para>
 Calling this method is the same as calling <link linkend="org.osgi.framework.launch.Framework.start--">start()</link>. There are no
 start options for the Framework.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>BundleException</code>– If this Framework could not be started.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have the appropriate
         <code>AdminPermission[this,EXECUTE]</code>, and the Java Runtime
         Environment supports permissions.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.launch.Framework.start--">start()</link>
            </para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="stop()" role="method" xml:id="org.osgi.framework.launch.Framework.stop--">
         <title>public void stop() throws BundleException</title>
         <para role="description">
Stop this Framework.

 </para>
         <para>
 The method returns immediately to the caller after initiating the
 following steps to be taken on another thread.
 </para>
         <orderedlist>
            <listitem>
               <para>This Framework's state is set to <link linkend="org.osgi.framework.Bundle.STOPPING">STOPPING</link>.</para>
            </listitem>
            <listitem>
               <para>All installed bundles must be stopped without changing each bundle's
 persistent <emphasis>autostart setting</emphasis>. The start level of this Framework is
 moved to start level zero (0), as described in the <emphasis>Start Level
 Specification</emphasis>. Any exceptions that occur during bundle stopping must
 be wrapped in a <link linkend="org.osgi.framework.BundleException">BundleException</link> and then published as a framework
 event of type <link linkend="org.osgi.framework.FrameworkEvent.ERROR">FrameworkEvent.ERROR</link>
               </para>
            </listitem>
            <listitem>
               <para>Unregister all services registered by this Framework.</para>
            </listitem>
            <listitem>
               <para>Event handling is disabled.</para>
            </listitem>
            <listitem>
               <para>This Framework's state is set to <link linkend="org.osgi.framework.Bundle.RESOLVED">RESOLVED</link>.</para>
            </listitem>
            <listitem>
               <para>All resources held by this Framework are released. This includes
 threads, bundle class loaders, open files, etc.</para>
            </listitem>
            <listitem>
               <para>Notify all threads that are waiting at <link linkend="org.osgi.framework.launch.Framework.waitForStop-long-">waitForStop</link> that the stop operation has completed.</para>
            </listitem>
         </orderedlist>
         <para>
 After being stopped, this Framework may be discarded, initialized or
 started.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>BundleException</code>– If stopping this Framework could not be
         initiated.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have the appropriate
         <code>AdminPermission[this,EXECUTE]</code>, and the Java Runtime
         Environment supports permissions.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>Start Level Specification</code>
            </para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="stop(int)" role="method" xml:id="org.osgi.framework.launch.Framework.stop-int-">
         <title>public void stop(int options) throws BundleException</title>
         <formalpara role="parameter">
            <title>options</title>
            <para>Ignored. There are no stop options for the Framework.</para>
         </formalpara>
         <para role="description">
Stop this Framework.

 </para>
         <para>
 Calling this method is the same as calling <link linkend="org.osgi.framework.launch.Framework.stop--">stop()</link>. There are no
 stop options for the Framework.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>BundleException</code>– If stopping this Framework could not be
         initiated.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have the appropriate
         <code>AdminPermission[this,EXECUTE]</code>, and the Java Runtime
         Environment supports permissions.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.launch.Framework.stop--">stop()</link>
            </para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="uninstall()" role="method" xml:id="org.osgi.framework.launch.Framework.uninstall--">
         <title>public void uninstall() throws BundleException</title>
         <para role="description">
The Framework cannot be uninstalled.

 </para>
         <para>
 This method always throws a BundleException.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>BundleException</code>– This Framework cannot be uninstalled.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have the appropriate
         <code>AdminPermission[this,LIFECYCLE]</code>, and the Java Runtime
         Environment supports permissions.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="update()" role="method" xml:id="org.osgi.framework.launch.Framework.update--">
         <title>public void update() throws BundleException</title>
         <para role="description">
Stop and restart this Framework.

 </para>
         <para>
 The method returns immediately to the caller after initiating the
 following steps to be taken on another thread.
 </para>
         <orderedlist>
            <listitem>
               <para>Perform the steps in the <link linkend="org.osgi.framework.launch.Framework.stop--">stop()</link> method to stop this
 Framework.</para>
            </listitem>
            <listitem>
               <para>Perform the steps in the <link linkend="org.osgi.framework.launch.Framework.start--">start()</link> method to start this
 Framework.</para>
            </listitem>
         </orderedlist>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>BundleException</code>– If stopping and restarting this Framework could
         not be initiated.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have the appropriate
         <code>AdminPermission[this,LIFECYCLE]</code>, and the Java Runtime
         Environment supports permissions.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="update(InputStream)" role="method" xml:id="org.osgi.framework.launch.Framework.update-InputStream-">
         <title>public void update(InputStream in) throws BundleException</title>
         <formalpara role="parameter">
            <title>in</title>
            <para>Any provided InputStream is immediately closed before returning
        from this method and otherwise ignored.</para>
         </formalpara>
         <para role="description">
Stop and restart this Framework.

 </para>
         <para>
 Calling this method is the same as calling <link linkend="org.osgi.framework.launch.Framework.update--">update()</link> except that
 any provided InputStream is immediately closed.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>BundleException</code>– If stopping and restarting this Framework could
         not be initiated.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have the appropriate
         <code>AdminPermission[this,LIFECYCLE]</code>, and the Java Runtime
         Environment supports permissions.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="waitForStop(long)" role="method" xml:id="org.osgi.framework.launch.Framework.waitForStop-long-">
         <title>public FrameworkEvent waitForStop(long timeout) throws InterruptedException</title>
         <formalpara role="parameter">
            <title>timeout</title>
            <para>Maximum number of milliseconds to wait until this
            Framework has completely stopped. A value of zero will wait
            indefinitely.</para>
         </formalpara>
         <para role="description">
Wait until this Framework has completely stopped. The <code>stop</code> and
 <code>update</code> methods on a Framework performs an asynchronous stop of
 the Framework. This method can be used to wait until the asynchronous
 stop of this Framework has completed. This method will only wait if
 called when this Framework is in the <link linkend="org.osgi.framework.Bundle.STARTING">STARTING</link>, <link linkend="org.osgi.framework.Bundle.ACTIVE">ACTIVE</link>,
 or <link linkend="org.osgi.framework.Bundle.STOPPING">STOPPING</link> states. Otherwise it will return immediately.
 </para>
         <para>
 A Framework Event is returned to indicate why this Framework has stopped.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A Framework Event indicating the reason this method returned. The
         following <code>FrameworkEvent</code> types may be returned by this
         method.
         <itemizedlist>
                  <listitem>
                     <para>
                        <link linkend="org.osgi.framework.FrameworkEvent.STOPPED">STOPPED</link> - This Framework has
         been stopped.</para>
                  </listitem>
                  <listitem>
                     <para>
                        <link linkend="org.osgi.framework.FrameworkEvent.STOPPED_UPDATE">STOPPED_UPDATE</link> - This
         Framework has been updated which has shutdown and will now
         restart.</para>
                  </listitem>
                  <listitem>
                     <para>
                        <link linkend="org.osgi.framework.FrameworkEvent.STOPPED_SYSTEM_REFRESHED">STOPPED_SYSTEM_REFRESHED</link> - The Framework has been stopped
         because of a refresh operation on the system bundle. A new class
         loader must be used to restart the Framework.</para>
                  </listitem>
                  <listitem>
                     <para>
                        <link linkend="org.osgi.framework.FrameworkEvent.ERROR">ERROR</link> - The Framework
         encountered an error while shutting down or an error has occurred
         which forced the framework to shutdown.</para>
                  </listitem>
                  <listitem>
                     <para>
                        <link linkend="org.osgi.framework.FrameworkEvent.WAIT_TIMEDOUT">WAIT_TIMEDOUT</link> - This
         method has timed out and returned before this Framework has
         stopped.</para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>InterruptedException</code>– If another thread interrupted the current
             thread before or while the current thread was waiting for
             this Framework to completely stop. The <emphasis>interrupted
             status</emphasis> of the current thread is cleared when this
             exception is thrown.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the value of timeout is negative.</para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="FrameworkFactory" role="class" xml:id="org.osgi.framework.launch.FrameworkFactory">
      <title>public interface FrameworkFactory</title>
      <para>
A factory for creating <link linkend="org.osgi.framework.launch.Framework">Framework</link> instances.

 </para>
      <para>
 A framework implementation jar must contain the following resource:

 </para>
      <programlisting> /META-INF/services/org.osgi.framework.launch.FrameworkFactory</programlisting>
      <para>

 This UTF-8 encoded resource must contain the name of the framework
 implementation's FrameworkFactory implementation class. Space and tab
 characters, including blank lines, in the resource must be ignored. The
 number sign (<code>'#'</code> \u0023) and all characters following it on each
 line are a comment and must be ignored.

 </para>
      <para>
 Launchers can find the name of the FrameworkFactory implementation class in
 the resource and then load and construct a FrameworkFactory object for the
 framework implementation. The FrameworkFactory implementation class must have
 a public, no-argument constructor. Java™ SE 6 introduced the
 <code>ServiceLoader</code> class which can create a FrameworkFactory instance from
 the resource.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section xreflabel="newFramework(Map)" role="method" xml:id="org.osgi.framework.launch.FrameworkFactory.newFramework-Map-">
         <title>public Framework newFramework(Map&lt;String, String&gt; configuration)</title>
         <formalpara role="parameter">
            <title>configuration</title>
            <para>The framework properties to configure the new
        framework instance. If framework properties are not provided by
        the configuration argument, the created framework instance must
        use some reasonable default configuration appropriate for the
        current VM. For example, the system packages for the current
        execution environment should be properly exported. The specified
        configuration argument may be <code>null</code>. The created framework
        instance must copy any information needed from the specified
        configuration argument since the configuration argument can be
        changed after the framework instance has been created.</para>
         </formalpara>
         <para role="description">
Create a new <link linkend="org.osgi.framework.launch.Framework">Framework</link> instance.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A new, configured <link linkend="org.osgi.framework.launch.Framework">Framework</link> instance. The framework
         instance must be in the <link linkend="org.osgi.framework.Bundle.INSTALLED">Bundle.INSTALLED</link> state.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have
         <code>AllPermission</code>, and the Java Runtime Environment supports
         permissions.</para>
         </formalpara>
      </section>
   </section>
</section>

  <section xreflabel="org.osgi.resource" version="5" role="package" xml:id="org.osgi.resource" xml:base="010/../../../generated/javadoc/docbook/org.osgi.resource.xml">
   <title>org.osgi.resource</title>
   <info>
      <releaseinfo xml:id="org.osgi.resource-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.resource-version.number">1.0</edition>
   </info>
   <para>
Resource Package Version 1.0.

 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. For example:

 </para>
   <programlisting> Import-Package: org.osgi.resource; version="[1.0,2.0)"</programlisting>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.resource.Capability">
                  <code>Capability</code>
               </link> -
A capability that has been declared from a <link linkend="org.osgi.resource.Resource">Resource</link>.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.resource.Namespace">
                  <code>Namespace</code>
               </link> -
Capability and Requirement Namespaces base class.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.resource.Requirement">
                  <code>Requirement</code>
               </link> -
A requirement that has been declared from a <link linkend="org.osgi.resource.Resource">Resource</link> .
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.resource.Resource">
                  <code>Resource</code>
               </link> -
A resource is the representation of a uniquely identified and typed data.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.resource.Wire">
                  <code>Wire</code>
               </link> -
A wire connecting a <link linkend="org.osgi.resource.Capability">Capability</link> to a <link linkend="org.osgi.resource.Requirement">Requirement</link>.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.resource.Wiring">
                  <code>Wiring</code>
               </link> -
A wiring for a resource.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section xreflabel="Capability" role="class" xml:id="org.osgi.resource.Capability">
      <title>public interface Capability</title>
      <para>
A capability that has been declared from a <link linkend="org.osgi.resource.Resource">Resource</link>.

 </para>
      <para>
 Instances of this type must be <emphasis>effectively immutable</emphasis>. That is, for a
 given instance of this interface, the methods defined by this interface must
 always return the same result.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section xreflabel="equals(Object)" role="method" xml:id="org.osgi.resource.Capability.equals-Object-">
         <title>public boolean equals(Object obj)</title>
         <formalpara role="parameter">
            <title>obj</title>
            <para>The object to compare against this <code>Capability</code>.</para>
         </formalpara>
         <para role="description">
Compares this <code>Capability</code> to another <code>Capability</code>.

 </para>
         <para>
 This <code>Capability</code> is equal to another <code>Capability</code> if they
 have the same namespace, directives and attributes and are declared by
 the same resource.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if this <code>Capability</code> is equal to the other
         object; <code>false</code> otherwise.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getAttributes()" role="method" xml:id="org.osgi.resource.Capability.getAttributes--">
         <title>public Map&lt;String, Object&gt; getAttributes()</title>
         <para role="description">
Returns the attributes of this capability.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An unmodifiable map of attribute names to attribute values for
         this capability, or an empty map if this capability has no
         attributes.</para>
         </formalpara>
      </section>
      <section xreflabel="getDirectives()" role="method" xml:id="org.osgi.resource.Capability.getDirectives--">
         <title>public Map&lt;String, String&gt; getDirectives()</title>
         <para role="description">
Returns the directives of this capability.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An unmodifiable map of directive names to directive values for
         this capability, or an empty map if this capability has no
         directives.</para>
         </formalpara>
      </section>
      <section xreflabel="getNamespace()" role="method" xml:id="org.osgi.resource.Capability.getNamespace--">
         <title>public String getNamespace()</title>
         <para role="description">
Returns the namespace of this capability.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The namespace of this capability.</para>
         </formalpara>
      </section>
      <section xreflabel="getResource()" role="method" xml:id="org.osgi.resource.Capability.getResource--">
         <title>public Resource getResource()</title>
         <para role="description">
Returns the resource declaring this capability.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The resource declaring this capability.</para>
         </formalpara>
      </section>
      <section xreflabel="hashCode()" role="method" xml:id="org.osgi.resource.Capability.hashCode--">
         <title>public int hashCode()</title>
         <para role="description">
Returns the hashCode of this <code>Capability</code>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The hashCode of this <code>Capability</code>.</para>
         </formalpara>
         <para/>
      </section>
   </section>
   <section xreflabel="Namespace" role="class" xml:id="org.osgi.resource.Namespace">
      <title>public abstract class Namespace</title>
      <para>
Capability and Requirement Namespaces base class.

 </para>
      <para>
 This class is the common class shared by all OSGi defined namespaces. It
 defines the names for the common attributes and directives for the OSGi
 specified namespaces.

 </para>
      <para>
 The OSGi Working Group reserves the right to extend the set of directives and
 attributes which have specified semantics for all of the specified
 namespaces.

 </para>
      <para>
 The values associated with these keys are of type <code>String</code>, unless
 otherwise indicated.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section xreflabel="CAPABILITY_EFFECTIVE_DIRECTIVE" role="field" xml:id="org.osgi.resource.Namespace.CAPABILITY_EFFECTIVE_DIRECTIVE">
         <title>public static final String CAPABILITY_EFFECTIVE_DIRECTIVE = "effective"</title>
         <para>
The capability directive used to specify the effective time for the
 capability. The default value is <link linkend="org.osgi.resource.Namespace.EFFECTIVE_RESOLVE">resolve</link>.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.resource.Namespace.EFFECTIVE_RESOLVE">resolve</link>, <link linkend="org.osgi.resource.Namespace.EFFECTIVE_ACTIVE">active</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="CAPABILITY_USES_DIRECTIVE" role="field" xml:id="org.osgi.resource.Namespace.CAPABILITY_USES_DIRECTIVE">
         <title>public static final String CAPABILITY_USES_DIRECTIVE = "uses"</title>
         <para>
The capability directive used to specify the comma separated list of
 package names used by a capability.
   </para>
      </section>
      <section xreflabel="CARDINALITY_MULTIPLE" role="field" xml:id="org.osgi.resource.Namespace.CARDINALITY_MULTIPLE">
         <title>public static final String CARDINALITY_MULTIPLE = "multiple"</title>
         <para>
The directive value identifying a multiple
 <link linkend="org.osgi.resource.Namespace.REQUIREMENT_CARDINALITY_DIRECTIVE">cardinality</link> type.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.resource.Namespace.REQUIREMENT_CARDINALITY_DIRECTIVE">REQUIREMENT_CARDINALITY_DIRECTIVE</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="CARDINALITY_SINGLE" role="field" xml:id="org.osgi.resource.Namespace.CARDINALITY_SINGLE">
         <title>public static final String CARDINALITY_SINGLE = "single"</title>
         <para>
The directive value identifying a
 <link linkend="org.osgi.resource.Namespace.REQUIREMENT_CARDINALITY_DIRECTIVE">cardinality</link> type of single.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.resource.Namespace.REQUIREMENT_CARDINALITY_DIRECTIVE">REQUIREMENT_CARDINALITY_DIRECTIVE</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="EFFECTIVE_ACTIVE" role="field" xml:id="org.osgi.resource.Namespace.EFFECTIVE_ACTIVE">
         <title>public static final String EFFECTIVE_ACTIVE = "active"</title>
         <para>
The directive value identifying a <link linkend="org.osgi.resource.Namespace.CAPABILITY_EFFECTIVE_DIRECTIVE">capability</link> or <link linkend="org.osgi.resource.Namespace.REQUIREMENT_EFFECTIVE_DIRECTIVE">requirement</link> that
 is effective at active time. Capabilities and requirements with an
 effective time of active are ignored while resolving a resource.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.resource.Namespace.REQUIREMENT_EFFECTIVE_DIRECTIVE">REQUIREMENT_EFFECTIVE_DIRECTIVE</link>, <link linkend="org.osgi.resource.Namespace.CAPABILITY_EFFECTIVE_DIRECTIVE">CAPABILITY_EFFECTIVE_DIRECTIVE</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="EFFECTIVE_RESOLVE" role="field" xml:id="org.osgi.resource.Namespace.EFFECTIVE_RESOLVE">
         <title>public static final String EFFECTIVE_RESOLVE = "resolve"</title>
         <para>
The directive value identifying a <link linkend="org.osgi.resource.Namespace.CAPABILITY_EFFECTIVE_DIRECTIVE">capability</link> or <link linkend="org.osgi.resource.Namespace.REQUIREMENT_EFFECTIVE_DIRECTIVE">requirement</link> that
 is effective at resolve time. Capabilities and requirements with an
 effective time of resolve are the only capabilities which are processed
 while resolving a resource.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.resource.Namespace.REQUIREMENT_EFFECTIVE_DIRECTIVE">REQUIREMENT_EFFECTIVE_DIRECTIVE</link>, <link linkend="org.osgi.resource.Namespace.CAPABILITY_EFFECTIVE_DIRECTIVE">CAPABILITY_EFFECTIVE_DIRECTIVE</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="REQUIREMENT_CARDINALITY_DIRECTIVE" role="field" xml:id="org.osgi.resource.Namespace.REQUIREMENT_CARDINALITY_DIRECTIVE">
         <title>public static final String REQUIREMENT_CARDINALITY_DIRECTIVE = "cardinality"</title>
         <para>
The requirement directive used to specify the cardinality for a
 requirement. The default value is <link linkend="org.osgi.resource.Namespace.CARDINALITY_SINGLE">single</link>.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.resource.Namespace.CARDINALITY_MULTIPLE">multiple</link>, <link linkend="org.osgi.resource.Namespace.CARDINALITY_SINGLE">single</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="REQUIREMENT_EFFECTIVE_DIRECTIVE" role="field" xml:id="org.osgi.resource.Namespace.REQUIREMENT_EFFECTIVE_DIRECTIVE">
         <title>public static final String REQUIREMENT_EFFECTIVE_DIRECTIVE = "effective"</title>
         <para>
The requirement directive used to specify the effective time for the
 requirement. The default value is <link linkend="org.osgi.resource.Namespace.EFFECTIVE_RESOLVE">resolve</link>.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.resource.Namespace.EFFECTIVE_RESOLVE">resolve</link>, <link linkend="org.osgi.resource.Namespace.EFFECTIVE_ACTIVE">active</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="REQUIREMENT_FILTER_DIRECTIVE" role="field" xml:id="org.osgi.resource.Namespace.REQUIREMENT_FILTER_DIRECTIVE">
         <title>public static final String REQUIREMENT_FILTER_DIRECTIVE = "filter"</title>
         <para>
The requirement directive used to specify a capability filter. This
 filter is used to match against a capability's attributes.
   </para>
      </section>
      <section xreflabel="REQUIREMENT_RESOLUTION_DIRECTIVE" role="field" xml:id="org.osgi.resource.Namespace.REQUIREMENT_RESOLUTION_DIRECTIVE">
         <title>public static final String REQUIREMENT_RESOLUTION_DIRECTIVE = "resolution"</title>
         <para>
The requirement directive used to specify the resolution type for a
 requirement. The default value is <link linkend="org.osgi.resource.Namespace.RESOLUTION_MANDATORY">mandatory</link>
 .
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.resource.Namespace.RESOLUTION_MANDATORY">mandatory</link>, <link linkend="org.osgi.resource.Namespace.RESOLUTION_OPTIONAL">optional</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="RESOLUTION_MANDATORY" role="field" xml:id="org.osgi.resource.Namespace.RESOLUTION_MANDATORY">
         <title>public static final String RESOLUTION_MANDATORY = "mandatory"</title>
         <para>
The directive value identifying a mandatory requirement resolution type.
 A mandatory resolution type indicates that the requirement must be
 resolved when the resource is resolved. If such a requirement cannot be
 resolved, the resource fails to resolve.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.resource.Namespace.REQUIREMENT_RESOLUTION_DIRECTIVE">REQUIREMENT_RESOLUTION_DIRECTIVE</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="RESOLUTION_OPTIONAL" role="field" xml:id="org.osgi.resource.Namespace.RESOLUTION_OPTIONAL">
         <title>public static final String RESOLUTION_OPTIONAL = "optional"</title>
         <para>
The directive value identifying an optional requirement resolution type.
 An optional resolution type indicates that the requirement is optional
 and the resource may be resolved without the requirement being resolved.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.resource.Namespace.REQUIREMENT_RESOLUTION_DIRECTIVE">REQUIREMENT_RESOLUTION_DIRECTIVE</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="Namespace()" role="method" xml:id="org.osgi.resource.Namespace.Namespace--">
         <title>protected  Namespace()</title>
         <para role="description">
Protected constructor for Namespace sub-types.
   </para>
      </section>
   </section>
   <section xreflabel="Requirement" role="class" xml:id="org.osgi.resource.Requirement">
      <title>public interface Requirement</title>
      <para>
A requirement that has been declared from a <link linkend="org.osgi.resource.Resource">Resource</link> .

 </para>
      <para>
 Instances of this type must be <emphasis>effectively immutable</emphasis>. That is, for a
 given instance of this interface, the methods defined by this interface must
 always return the same result.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section xreflabel="equals(Object)" role="method" xml:id="org.osgi.resource.Requirement.equals-Object-">
         <title>public boolean equals(Object obj)</title>
         <formalpara role="parameter">
            <title>obj</title>
            <para>The object to compare against this <code>Requirement</code>.</para>
         </formalpara>
         <para role="description">
Compares this <code>Requirement</code> to another <code>Requirement</code>.

 </para>
         <para>
 This <code>Requirement</code> is equal to another <code>Requirement</code> if they
 have the same namespace, directives and attributes and are declared by
 the same resource.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if this <code>Requirement</code> is equal to the other
         object; <code>false</code> otherwise.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getAttributes()" role="method" xml:id="org.osgi.resource.Requirement.getAttributes--">
         <title>public Map&lt;String, Object&gt; getAttributes()</title>
         <para role="description">
Returns the attributes of this requirement.

 </para>
         <para>
 Requirement attributes have no specified semantics and are considered
 extra user defined information.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An unmodifiable map of attribute names to attribute values for
         this requirement, or an empty map if this requirement has no
         attributes.</para>
         </formalpara>
      </section>
      <section xreflabel="getDirectives()" role="method" xml:id="org.osgi.resource.Requirement.getDirectives--">
         <title>public Map&lt;String, String&gt; getDirectives()</title>
         <para role="description">
Returns the directives of this requirement.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An unmodifiable map of directive names to directive values for
         this requirement, or an empty map if this requirement has no
         directives.</para>
         </formalpara>
      </section>
      <section xreflabel="getNamespace()" role="method" xml:id="org.osgi.resource.Requirement.getNamespace--">
         <title>public String getNamespace()</title>
         <para role="description">
Returns the namespace of this requirement.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The namespace of this requirement.</para>
         </formalpara>
      </section>
      <section xreflabel="getResource()" role="method" xml:id="org.osgi.resource.Requirement.getResource--">
         <title>public Resource getResource()</title>
         <para role="description">
Returns the resource declaring this requirement.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The resource declaring this requirement. This can be <code>null</code>
         if this requirement is synthesized.</para>
         </formalpara>
      </section>
      <section xreflabel="hashCode()" role="method" xml:id="org.osgi.resource.Requirement.hashCode--">
         <title>public int hashCode()</title>
         <para role="description">
Returns the hashCode of this <code>Requirement</code>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The hashCode of this <code>Requirement</code>.</para>
         </formalpara>
         <para/>
      </section>
   </section>
   <section xreflabel="Resource" role="class" xml:id="org.osgi.resource.Resource">
      <title>public interface Resource</title>
      <para>
A resource is the representation of a uniquely identified and typed data. A
 resource declares requirements that need to be satisfied by capabilities
 before it can provide its capabilities.

 </para>
      <para>
 Instances of this type must be <emphasis>effectively immutable</emphasis>. That is, for a
 given instance of this interface, the methods defined by this interface must
 always return the same result.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section xreflabel="equals(Object)" role="method" xml:id="org.osgi.resource.Resource.equals-Object-">
         <title>public boolean equals(Object obj)</title>
         <formalpara role="parameter">
            <title>obj</title>
            <para>The object to compare against this <code>Resource</code>.</para>
         </formalpara>
         <para role="description">
Compares this <code>Resource</code> to another <code>Resource</code>.

 </para>
         <para>
 This <code>Resource</code> is equal to another <code>Resource</code> if both have
 the same content and come from the same location. Location may be defined
 as the bundle location if the resource is an installed bundle or the
 repository location if the resource is in a repository.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if this <code>Resource</code> is equal to the other
         object; <code>false</code> otherwise.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getCapabilities(String)" role="method" xml:id="org.osgi.resource.Resource.getCapabilities-String-">
         <title>public List&lt;Capability&gt; getCapabilities(String namespace)</title>
         <formalpara role="parameter">
            <title>namespace</title>
            <para>The namespace of the declared capabilities to return or
        <code>null</code> to return the declared capabilities from all
        namespaces.</para>
         </formalpara>
         <para role="description">
Returns the capabilities declared by this resource.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An unmodifiable list containing the declared <link linkend="org.osgi.resource.Capability">Capability</link>s
         from the specified namespace. The returned list will be empty if
         this resource declares no capabilities in the specified
         namespace.</para>
         </formalpara>
      </section>
      <section xreflabel="getRequirements(String)" role="method" xml:id="org.osgi.resource.Resource.getRequirements-String-">
         <title>public List&lt;Requirement&gt; getRequirements(String namespace)</title>
         <formalpara role="parameter">
            <title>namespace</title>
            <para>The namespace of the declared requirements to return or
        <code>null</code> to return the declared requirements from all
        namespaces.</para>
         </formalpara>
         <para role="description">
Returns the requirements declared by this bundle resource.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An unmodifiable list containing the declared <link linkend="org.osgi.resource.Requirement">Requirement</link>
         s from the specified namespace. The returned list will be empty
         if this resource declares no requirements in the specified
         namespace.</para>
         </formalpara>
      </section>
      <section xreflabel="hashCode()" role="method" xml:id="org.osgi.resource.Resource.hashCode--">
         <title>public int hashCode()</title>
         <para role="description">
Returns the hashCode of this <code>Resource</code>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The hashCode of this <code>Resource</code>.</para>
         </formalpara>
         <para/>
      </section>
   </section>
   <section xreflabel="Wire" role="class" xml:id="org.osgi.resource.Wire">
      <title>public interface Wire</title>
      <para>
A wire connecting a <link linkend="org.osgi.resource.Capability">Capability</link> to a <link linkend="org.osgi.resource.Requirement">Requirement</link>.

 </para>
      <para>
 Instances of this type must be <emphasis>effectively immutable</emphasis>. That is, for a
 given instance of this interface, the methods defined by this interface must
 always return the same result.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section xreflabel="equals(Object)" role="method" xml:id="org.osgi.resource.Wire.equals-Object-">
         <title>public boolean equals(Object obj)</title>
         <formalpara role="parameter">
            <title>obj</title>
            <para>The object to compare against this <code>Wire</code>.</para>
         </formalpara>
         <para role="description">
Compares this <code>Wire</code> to another <code>Wire</code>.

 </para>
         <para>
 This <code>Wire</code> is equal to another <code>Wire</code> if they have the same
 capability, requirement, provider and requirer.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if this <code>Wire</code> is equal to the other object;
         <code>false</code> otherwise.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getCapability()" role="method" xml:id="org.osgi.resource.Wire.getCapability--">
         <title>public Capability getCapability()</title>
         <para role="description">
Returns the <link linkend="org.osgi.resource.Capability">Capability</link> for this wire.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The <link linkend="org.osgi.resource.Capability">Capability</link> for this wire.</para>
         </formalpara>
      </section>
      <section xreflabel="getProvider()" role="method" xml:id="org.osgi.resource.Wire.getProvider--">
         <title>public Resource getProvider()</title>
         <para role="description">
Returns the resource providing the <link linkend="org.osgi.resource.Wire.getCapability--">capability</link>.

 </para>
         <para>
 The returned resource may differ from the resource referenced by the
 <link linkend="org.osgi.resource.Wire.getCapability--">capability</link>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The resource providing the capability.</para>
         </formalpara>
      </section>
      <section xreflabel="getRequirement()" role="method" xml:id="org.osgi.resource.Wire.getRequirement--">
         <title>public Requirement getRequirement()</title>
         <para role="description">
Returns the <link linkend="org.osgi.resource.Requirement">Requirement</link> for this wire.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The <link linkend="org.osgi.resource.Requirement">Requirement</link> for this wire.</para>
         </formalpara>
      </section>
      <section xreflabel="getRequirer()" role="method" xml:id="org.osgi.resource.Wire.getRequirer--">
         <title>public Resource getRequirer()</title>
         <para role="description">
Returns the resource who <link linkend="org.osgi.resource.Wire.getRequirement--">requires</link> the
 <link linkend="org.osgi.resource.Wire.getCapability--">capability</link>.

 </para>
         <para>
 The returned resource may differ from the resource referenced by the
 <link linkend="org.osgi.resource.Wire.getRequirement--">requirement</link>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The resource who requires the capability.</para>
         </formalpara>
      </section>
      <section xreflabel="hashCode()" role="method" xml:id="org.osgi.resource.Wire.hashCode--">
         <title>public int hashCode()</title>
         <para role="description">
Returns the hashCode of this <code>Wire</code>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The hashCode of this <code>Wire</code>.</para>
         </formalpara>
         <para/>
      </section>
   </section>
   <section xreflabel="Wiring" role="class" xml:id="org.osgi.resource.Wiring">
      <title>public interface Wiring</title>
      <para>
A wiring for a resource. A wiring is associated with a resource and
 represents the dependencies with other wirings.

 </para>
      <para>
 Instances of this type must be <emphasis>effectively immutable</emphasis>. That is, for a
 given instance of this interface, the methods defined by this interface must
 always return the same result.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section xreflabel="getProvidedResourceWires(String)" role="method" xml:id="org.osgi.resource.Wiring.getProvidedResourceWires-String-">
         <title>public List&lt;Wire&gt; getProvidedResourceWires(String namespace)</title>
         <formalpara role="parameter">
            <title>namespace</title>
            <para>The namespace of the capabilities for which to return
        wires or <code>null</code> to return the wires for the capabilities in
        all namespaces.</para>
         </formalpara>
         <para role="description">
Returns the <link linkend="org.osgi.resource.Wire">Wire</link>s to the provided <link linkend="org.osgi.resource.Capability">capabilities</link>
 of this wiring.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A list containing a snapshot of the <link linkend="org.osgi.resource.Wire">Wire</link>s for the
         <link linkend="org.osgi.resource.Capability">capabilities</link> of this wiring, or an empty list
         if this wiring has no capabilities in the specified namespace.
         For a given namespace, the list contains the wires in the order
         the capabilities were specified in the manifests of the
         <link linkend="org.osgi.resource.Wiring.getResource--">resource</link> and the attached fragment
         resources of this wiring. There is no ordering defined between
         capabilities in different namespaces.</para>
         </formalpara>
      </section>
      <section xreflabel="getRequiredResourceWires(String)" role="method" xml:id="org.osgi.resource.Wiring.getRequiredResourceWires-String-">
         <title>public List&lt;Wire&gt; getRequiredResourceWires(String namespace)</title>
         <formalpara role="parameter">
            <title>namespace</title>
            <para>The namespace of the requirements for which to return
        wires or <code>null</code> to return the wires for the requirements in
        all namespaces.</para>
         </formalpara>
         <para role="description">
Returns the <link linkend="org.osgi.resource.Wire">Wire</link>s to the <link linkend="org.osgi.resource.Requirement">requirements</link> in use
 by this wiring.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A list containing a snapshot of the <link linkend="org.osgi.resource.Wire">Wire</link>s for the
         <link linkend="org.osgi.resource.Requirement">requirements</link> of this wiring, or an empty list
         if this wiring has no requirements in the specified namespace.
         For a given namespace, the list contains the wires in the order
         the requirements were specified in the manifests of the
         <link linkend="org.osgi.resource.Wiring.getResource--">resource</link> and the attached fragment
         resources of this wiring. There is no ordering defined between
         requirements in different namespaces.</para>
         </formalpara>
      </section>
      <section xreflabel="getResource()" role="method" xml:id="org.osgi.resource.Wiring.getResource--">
         <title>public Resource getResource()</title>
         <para role="description">
Returns the resource associated with this wiring.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The resource associated with this wiring.</para>
         </formalpara>
      </section>
      <section xreflabel="getResourceCapabilities(String)" role="method" xml:id="org.osgi.resource.Wiring.getResourceCapabilities-String-">
         <title>public List&lt;Capability&gt; getResourceCapabilities(String namespace)</title>
         <formalpara role="parameter">
            <title>namespace</title>
            <para>The namespace of the capabilities to return or
        <code>null</code> to return the capabilities from all namespaces.</para>
         </formalpara>
         <para role="description">
Returns the capabilities provided by this wiring.

 </para>
         <para>
 Only capabilities considered by the resolver are returned. For example,
 capabilities with <link linkend="org.osgi.resource.Namespace.CAPABILITY_EFFECTIVE_DIRECTIVE">effective</link> directive not equal to <link linkend="org.osgi.resource.Namespace.EFFECTIVE_RESOLVE">resolve</link> are not returned.

 </para>
         <para>
 A capability may not be required by any wiring and thus there may be no
 <link linkend="org.osgi.resource.Wiring.getProvidedResourceWires-String-">wires</link> for the capability.

 </para>
         <para>
 A wiring for a non-fragment resource provides a subset of the declared
 capabilities from the resource and all attached fragment
 resources<superscript>†</superscript>. Not all declared capabilities may be
 provided since some may be discarded. For example, if a package is
 declared to be both exported and imported, only one is selected and the
 other is discarded.
 </para>
         <para>
 A wiring for a fragment resource with a symbolic name must provide
 exactly one <code>osgi.identity</code> capability.
 </para>
         <para>
 † The <code>osgi.identity</code> capability provided by attached
 fragment resource must not be included in the capabilities of the host
 wiring.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A list containing a snapshot of the <link linkend="org.osgi.resource.Capability">Capability</link>s, or an
         empty list if this wiring provides no capabilities in the
         specified namespace. For a given namespace, the list contains the
         capabilities in the order the capabilities were specified in the
         manifests of the <link linkend="org.osgi.resource.Wiring.getResource--">resource</link> and the attached
         fragment resources<superscript>†</superscript> of this wiring. There is no
         ordering defined between capabilities in different namespaces.</para>
         </formalpara>
      </section>
      <section xreflabel="getResourceRequirements(String)" role="method" xml:id="org.osgi.resource.Wiring.getResourceRequirements-String-">
         <title>public List&lt;Requirement&gt; getResourceRequirements(String namespace)</title>
         <formalpara role="parameter">
            <title>namespace</title>
            <para>The namespace of the requirements to return or
            <code>null</code> to return the requirements from all namespaces.</para>
         </formalpara>
         <para role="description">
Returns the requirements of this wiring.
 </para>
         <para>
 Only requirements considered by the resolver are returned. For example,
 requirements with <link linkend="org.osgi.resource.Namespace.REQUIREMENT_EFFECTIVE_DIRECTIVE">effective</link> directive not equal to <link linkend="org.osgi.resource.Namespace.EFFECTIVE_RESOLVE">resolve</link> are not returned.
 </para>
         <para>
 A wiring for a non-fragment resource has a subset of the declared
 requirements from the resource and all attached fragment resources. Not
 all declared requirements may be present since some may be discarded. For
 example, if a package is declared to be both exported and imported, only
 one is selected and the other is discarded.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A list containing a snapshot of the <link linkend="org.osgi.resource.Requirement">Requirement</link>s, or an
         empty list if this wiring uses no requirements in the specified
         namespace. For a given namespace, the list contains the
         requirements in the order the requirements were specified in the
         manifests of the <link linkend="org.osgi.resource.Wiring.getResource--">resource</link> and the attached
         fragment resources of this wiring. There is no ordering defined
         between requirements in different namespaces.</para>
         </formalpara>
      </section>
   </section>
</section>

  <section xreflabel="org.osgi.framework.wiring" version="5" role="package" xml:id="org.osgi.framework.wiring" xml:base="010/../../../generated/javadoc/docbook/org.osgi.framework.wiring.xml">
   <title>org.osgi.framework.wiring</title>
   <info>
      <releaseinfo xml:id="org.osgi.framework.wiring-version">Version 1.2</releaseinfo>
      <edition xml:id="org.osgi.framework.wiring-version.number">1.2</edition>
   </info>
   <para>
Framework Wiring Package Version 1.2.

 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. For example:

 </para>
   <programlisting> Import-Package: org.osgi.framework.wiring; version="[1.2,2.0)"</programlisting>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.wiring.BundleCapability">
                  <code>BundleCapability</code>
               </link> -
A capability that has been declared from a <link linkend="org.osgi.framework.wiring.BundleRevision">bundle
 revision</link>.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.wiring.BundleRequirement">
                  <code>BundleRequirement</code>
               </link> -
A requirement that has been declared from a <link linkend="org.osgi.framework.wiring.BundleRevision">bundle
 revision</link>.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.wiring.BundleRevision">
                  <code>BundleRevision</code>
               </link> -
Bundle Revision.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.wiring.BundleRevisions">
                  <code>BundleRevisions</code>
               </link> -
The <link linkend="org.osgi.framework.wiring.BundleRevision">bundle revisions</link> of a bundle.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.wiring.BundleWire">
                  <code>BundleWire</code>
               </link> -
A wire connecting a <link linkend="org.osgi.framework.wiring.BundleCapability">BundleCapability</link> to a <link linkend="org.osgi.framework.wiring.BundleRequirement">BundleRequirement</link>.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.wiring.BundleWiring">
                  <code>BundleWiring</code>
               </link> -
A wiring for a bundle.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.wiring.FrameworkWiring">
                  <code>FrameworkWiring</code>
               </link> -
Query and modify wiring information for the framework.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section xreflabel="BundleCapability" role="class" xml:id="org.osgi.framework.wiring.BundleCapability">
      <title>public interface BundleCapability<?line-break?> extends Capability</title>
      <para>
A capability that has been declared from a <link linkend="org.osgi.framework.wiring.BundleRevision">bundle
 revision</link>.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section xreflabel="getAttributes()" role="method" xml:id="org.osgi.framework.wiring.BundleCapability.getAttributes--">
         <title>public Map&lt;String, Object&gt; getAttributes()</title>
         <para role="description">
Returns the attributes of this capability.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An unmodifiable map of attribute names to attribute values for
         this capability, or an empty map if this capability has no
         attributes.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getDirectives()" role="method" xml:id="org.osgi.framework.wiring.BundleCapability.getDirectives--">
         <title>public Map&lt;String, String&gt; getDirectives()</title>
         <para role="description">
Returns the directives of this capability.

 </para>
         <para>
 All capability directives not specified by the
 <link linkend="org.osgi.framework.namespace.AbstractWiringNamespace">wiring namespaces</link> have no specified
 semantics and are considered extra user defined information.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An unmodifiable map of directive names to directive values for
         this capability, or an empty map if this capability has no
         directives.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getNamespace()" role="method" xml:id="org.osgi.framework.wiring.BundleCapability.getNamespace--">
         <title>public String getNamespace()</title>
         <para role="description">
Returns the namespace of this capability.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The namespace of this capability.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getResource()" role="method" xml:id="org.osgi.framework.wiring.BundleCapability.getResource--">
         <title>public BundleRevision getResource()</title>
         <para role="description">
Returns the resource declaring this capability.

 </para>
         <para>
 This method returns the same value as <link linkend="org.osgi.framework.wiring.BundleCapability.getRevision--">getRevision()</link>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The resource declaring this capability.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getRevision()" role="method" xml:id="org.osgi.framework.wiring.BundleCapability.getRevision--">
         <title>public BundleRevision getRevision()</title>
         <para role="description">
Returns the bundle revision declaring this capability.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The bundle revision declaring this capability.</para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="BundleRequirement" role="class" xml:id="org.osgi.framework.wiring.BundleRequirement">
      <title>public interface BundleRequirement<?line-break?> extends Requirement</title>
      <para>
A requirement that has been declared from a <link linkend="org.osgi.framework.wiring.BundleRevision">bundle
 revision</link>.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section xreflabel="getAttributes()" role="method" xml:id="org.osgi.framework.wiring.BundleRequirement.getAttributes--">
         <title>public Map&lt;String, Object&gt; getAttributes()</title>
         <para role="description">
Returns the attributes of this requirement.

 </para>
         <para>
 Requirement attributes have no specified semantics and are considered
 extra user defined information.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An unmodifiable map of attribute names to attribute values for
         this requirement, or an empty map if this requirement has no
         attributes.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getDirectives()" role="method" xml:id="org.osgi.framework.wiring.BundleRequirement.getDirectives--">
         <title>public Map&lt;String, String&gt; getDirectives()</title>
         <para role="description">
Returns the directives of this requirement.

 </para>
         <para>
 All requirement directives not specified by the
 <link linkend="org.osgi.framework.namespace.AbstractWiringNamespace">wiring namespaces</link> have no specified
 semantics and are considered extra user defined information.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An unmodifiable map of directive names to directive values for
         this requirement, or an empty map if this requirement has no
         directives.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getNamespace()" role="method" xml:id="org.osgi.framework.wiring.BundleRequirement.getNamespace--">
         <title>public String getNamespace()</title>
         <para role="description">
Returns the namespace of this requirement.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The namespace of this requirement.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getResource()" role="method" xml:id="org.osgi.framework.wiring.BundleRequirement.getResource--">
         <title>public BundleRevision getResource()</title>
         <para role="description">
Returns the resource declaring this requirement.

 </para>
         <para>
 This method returns the same value as <link linkend="org.osgi.framework.wiring.BundleRequirement.getRevision--">getRevision()</link>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The resource declaring this requirement. This can be <code>null</code>
         if this requirement is synthesized.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getRevision()" role="method" xml:id="org.osgi.framework.wiring.BundleRequirement.getRevision--">
         <title>public BundleRevision getRevision()</title>
         <para role="description">
Returns the bundle revision declaring this requirement.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The bundle revision declaring this requirement.</para>
         </formalpara>
      </section>
      <section xreflabel="matches(BundleCapability)" role="method" xml:id="org.osgi.framework.wiring.BundleRequirement.matches-BundleCapability-">
         <title>public boolean matches(BundleCapability capability)</title>
         <formalpara role="parameter">
            <title>capability</title>
            <para>The capability to match to this requirement.</para>
         </formalpara>
         <para role="description">
Returns whether the specified capability matches this requirement.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the specified capability has the same
         <link linkend="org.osgi.framework.wiring.BundleRequirement.getNamespace--">namespace</link> as this requirement and the
         filter for this requirement matches the
         <link linkend="org.osgi.framework.wiring.BundleCapability.getAttributes--">attributes of the
         specified capability</link>; <code>false</code> otherwise.</para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="BundleRevision" role="class" xml:id="org.osgi.framework.wiring.BundleRevision">
      <title>public interface BundleRevision<?line-break?> extends BundleReference, Resource</title>
      <para>
Bundle Revision. When a bundle is installed and each time a bundle is
 updated, a new bundle revision of the bundle is created. Since a bundle
 update can change the entries in a bundle, different bundle wirings for the
 same bundle can be associated with different bundle revisions.

 </para>
      <para>
 For a bundle that has not been uninstalled, the most recent bundle revision
 is defined to be the current bundle revision. A bundle in the UNINSTALLED
 state does not have a current revision. The current bundle revision for a
 bundle can be obtained by calling <link linkend="org.osgi.framework.Bundle.adapt-Class-">bundle.adapt</link>
 (BundleRevision.class). Since a bundle in the UNINSTALLED state does not have
 a current revision, adapting such a bundle returns <code>null</code>.

 </para>
      <para>
 The framework defines namespaces for <link linkend="org.osgi.framework.namespace.PackageNamespace">package</link>,
 <link linkend="org.osgi.framework.namespace.BundleNamespace">bundle</link> and <link linkend="org.osgi.framework.namespace.HostNamespace">host</link> capabilities
 and requirements. These namespaces are defined only to express wiring
 information by the framework. They must not be used in
 <link linkend="org.osgi.framework.Constants.PROVIDE_CAPABILITY">Provide-Capability</link> and
 <link linkend="org.osgi.framework.Constants.REQUIRE_CAPABILITY">Require-Capability</link> manifest headers.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section xreflabel="BUNDLE_NAMESPACE" role="field" xml:id="org.osgi.framework.wiring.BundleRevision.BUNDLE_NAMESPACE">
         <title>public static final String BUNDLE_NAMESPACE = "osgi.wiring.bundle"</title>
         <para>
Namespace for bundle capabilities and requirements.

 </para>
         <para>
 The bundle symbolic name of the bundle is stored in the capability
 attribute of the same name as this namespace (osgi.wiring.bundle). The
 other directives and attributes of the bundle, from the
 <link linkend="org.osgi.framework.Constants.BUNDLE_SYMBOLICNAME">Bundle-SymbolicName</link> manifest
 header, can be found in the capability's
 <link linkend="org.osgi.framework.wiring.BundleCapability.getDirectives--">directives</link> and
 <link linkend="org.osgi.framework.wiring.BundleCapability.getAttributes--">attributes</link>. The
 <link linkend="org.osgi.framework.Constants.BUNDLE_VERSION_ATTRIBUTE">bundle-version</link> capability
 attribute must contain the <link linkend="org.osgi.framework.Version">Version</link> of the bundle from the
 <link linkend="org.osgi.framework.Constants.BUNDLE_VERSION">Bundle-Version</link> manifest header if one is
 specified or <link linkend="org.osgi.framework.Version.emptyVersion">Version.emptyVersion</link> if not specified.

 </para>
         <para>
 A non-fragment revision
 <link linkend="org.osgi.framework.wiring.BundleRevision.getDeclaredCapabilities-String-">declares</link> exactly
 one<superscript>†</superscript> bundle capability (that is, the bundle can be
 required by another bundle). A fragment revision must not declare a
 bundle capability.

 </para>
         <para>
 A bundle wiring for a non-fragment revision
 <link linkend="org.osgi.framework.wiring.BundleWiring.getCapabilities-String-">provides</link> exactly
 one<superscript>†</superscript> bundle capability (that is, the bundle can be
 required by another bundle) and
 <link linkend="org.osgi.framework.wiring.BundleWiring.getRequiredWires-String-">requires</link> zero or more
 bundle capabilities (that is, requires other bundles).

 </para>
         <para>
 † A bundle with no bundle symbolic name (that is, a bundle with
 <link linkend="org.osgi.framework.Constants.BUNDLE_MANIFESTVERSION">Bundle-ManifestVersion</link>
 &lt; 2) must not provide a bundle capability.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.namespace.BundleNamespace">BundleNamespace</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="HOST_NAMESPACE" role="field" xml:id="org.osgi.framework.wiring.BundleRevision.HOST_NAMESPACE">
         <title>public static final String HOST_NAMESPACE = "osgi.wiring.host"</title>
         <para>
Namespace for host capabilities and requirements.

 </para>
         <para>
 The bundle symbolic name of the bundle is stored in the capability
 attribute of the same name as this namespace (osgi.wiring.host). The
 other directives and attributes of the bundle, from the
 <link linkend="org.osgi.framework.Constants.BUNDLE_SYMBOLICNAME">Bundle-SymbolicName</link> manifest
 header, can be found in the capability's
 <link linkend="org.osgi.framework.wiring.BundleCapability.getDirectives--">directives</link> and
 <link linkend="org.osgi.framework.wiring.BundleCapability.getAttributes--">attributes</link>. The
 <link linkend="org.osgi.framework.Constants.BUNDLE_VERSION_ATTRIBUTE">bundle-version</link> capability
 attribute must contain the <link linkend="org.osgi.framework.Version">Version</link> of the bundle from the
 <link linkend="org.osgi.framework.Constants.BUNDLE_VERSION">Bundle-Version</link> manifest header if one is
 specified or <link linkend="org.osgi.framework.Version.emptyVersion">Version.emptyVersion</link> if not specified.

 </para>
         <para>
 A non-fragment revision
 <link linkend="org.osgi.framework.wiring.BundleRevision.getDeclaredCapabilities-String-">declares</link> zero or
 one<superscript>†</superscript> host capability if the bundle
 <link linkend="org.osgi.framework.Constants.FRAGMENT_ATTACHMENT_DIRECTIVE">allows fragments to be
 attached</link>. A fragment revision must
 <link linkend="org.osgi.framework.wiring.BundleRevision.getDeclaredRequirements-String-">declare</link> exactly
 one host requirement.

 </para>
         <para>
 A bundle wiring for a non-fragment revision
 <link linkend="org.osgi.framework.wiring.BundleWiring.getCapabilities-String-">provides</link> zero or
 one<superscript>†</superscript> host capability if the bundle
 <link linkend="org.osgi.framework.Constants.FRAGMENT_ATTACHMENT_DIRECTIVE">allows fragments to be
 attached</link>. A bundle wiring for a fragment revision
 <link linkend="org.osgi.framework.wiring.BundleWiring.getRequiredWires-String-">requires</link> a host capability
 for each host to which it is attached.

 </para>
         <para>
 † A bundle with no bundle symbolic name (that is, a bundle with
 <link linkend="org.osgi.framework.Constants.BUNDLE_MANIFESTVERSION">Bundle-ManifestVersion</link>
 &lt; 2) must not provide a host capability.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.namespace.HostNamespace">HostNamespace</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="PACKAGE_NAMESPACE" role="field" xml:id="org.osgi.framework.wiring.BundleRevision.PACKAGE_NAMESPACE">
         <title>public static final String PACKAGE_NAMESPACE = "osgi.wiring.package"</title>
         <para>
Namespace for package capabilities and requirements.

 </para>
         <para>
 The name of the package is stored in the capability attribute of the same
 name as this namespace (osgi.wiring.package). The other directives and
 attributes of the package, from the <link linkend="org.osgi.framework.Constants.EXPORT_PACKAGE">Export-Package</link> manifest header, can be found in the capability's
 <link linkend="org.osgi.framework.wiring.BundleCapability.getDirectives--">directives</link> and
 <link linkend="org.osgi.framework.wiring.BundleCapability.getAttributes--">attributes</link>. The
 <link linkend="org.osgi.framework.Constants.VERSION_ATTRIBUTE">version</link> capability attribute must
 contain the <link linkend="org.osgi.framework.Version">Version</link> of the package if one is specified or
 <link linkend="org.osgi.framework.Version.emptyVersion">Version.emptyVersion</link> if not specified. The
 <link linkend="org.osgi.framework.Constants.BUNDLE_SYMBOLICNAME_ATTRIBUTE">bundle-symbolic-name</link>
 capability attribute must contain the
 <link linkend="org.osgi.framework.wiring.BundleRevision.getSymbolicName--">symbolic name</link> of the provider if
 one is specified. The <link linkend="org.osgi.framework.Constants.BUNDLE_VERSION_ATTRIBUTE">bundle-version</link> capability attribute must contain the
 <link linkend="org.osgi.framework.wiring.BundleRevision.getVersion--">version</link> of the provider if one is
 specified or <link linkend="org.osgi.framework.Version.emptyVersion">Version.emptyVersion</link> if not specified.

 </para>
         <para>
 The package capabilities provided by the system bundle, that is the
 bundle with id zero, must include the package specified by the
 <link linkend="org.osgi.framework.Constants.FRAMEWORK_SYSTEMPACKAGES">Constants.FRAMEWORK_SYSTEMPACKAGES</link> and
 <link linkend="org.osgi.framework.Constants.FRAMEWORK_SYSTEMPACKAGES_EXTRA">Constants.FRAMEWORK_SYSTEMPACKAGES_EXTRA</link> framework properties as
 well as any other package exported by the framework implementation.

 </para>
         <para>
 A bundle revision <link linkend="org.osgi.framework.wiring.BundleRevision.getDeclaredCapabilities-String-">declares</link> zero or more package capabilities (this is, exported packages)
 and <link linkend="org.osgi.framework.wiring.BundleRevision.getDeclaredRequirements-String-">declares</link> zero
 or more package requirements.
 </para>
         <para>
 A bundle wiring <link linkend="org.osgi.framework.wiring.BundleWiring.getCapabilities-String-">provides</link>
 zero or more resolved package capabilities (that is, exported packages)
 and <link linkend="org.osgi.framework.wiring.BundleWiring.getRequiredWires-String-">requires</link> zero or more
 resolved package requirements (that is, imported packages). The number of
 package wires required by a bundle wiring may change as the bundle wiring
 may dynamically import additional packages.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.namespace.PackageNamespace">PackageNamespace</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="TYPE_FRAGMENT" role="field" xml:id="org.osgi.framework.wiring.BundleRevision.TYPE_FRAGMENT">
         <title>public static final int TYPE_FRAGMENT = 1</title>
         <para>
Bundle revision type indicating the bundle revision is a fragment.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.wiring.BundleRevision.getTypes--">getTypes()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="getCapabilities(String)" role="method" xml:id="org.osgi.framework.wiring.BundleRevision.getCapabilities-String-">
         <title>public List&lt;Capability&gt; getCapabilities(String namespace)</title>
         <formalpara role="parameter">
            <title>namespace</title>
            <para>The namespace of the declared capabilities to return or
        <code>null</code> to return the declared capabilities from all
        namespaces.</para>
         </formalpara>
         <para role="description">
Returns the capabilities declared by this resource.

 </para>
         <para>
 This method returns the same value as
 <link linkend="org.osgi.framework.wiring.BundleRevision.getDeclaredCapabilities-String-">getDeclaredCapabilities(String)</link>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An unmodifiable list containing the declared <link linkend="org.osgi.resource.Capability">Capability</link>s
         from the specified namespace. The returned list will be empty if
         this resource declares no capabilities in the specified
         namespace.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getDeclaredCapabilities(String)" role="method" xml:id="org.osgi.framework.wiring.BundleRevision.getDeclaredCapabilities-String-">
         <title>public List&lt;BundleCapability&gt; getDeclaredCapabilities(String namespace)</title>
         <formalpara role="parameter">
            <title>namespace</title>
            <para>The namespace of the declared capabilities to return or
        <code>null</code> to return the declared capabilities from all
        namespaces.</para>
         </formalpara>
         <para role="description">
Returns the capabilities declared by this bundle revision.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An unmodifiable list containing the declared
         <link linkend="org.osgi.framework.wiring.BundleCapability">BundleCapability</link>s from the specified namespace. The
         returned list will be empty if this bundle revision declares no
         capabilities in the specified namespace. The list contains the
         declared capabilities in the order they are specified in the
         manifest.</para>
         </formalpara>
      </section>
      <section xreflabel="getDeclaredRequirements(String)" role="method" xml:id="org.osgi.framework.wiring.BundleRevision.getDeclaredRequirements-String-">
         <title>public List&lt;BundleRequirement&gt; getDeclaredRequirements(String namespace)</title>
         <formalpara role="parameter">
            <title>namespace</title>
            <para>The namespace of the declared requirements to return or
        <code>null</code> to return the declared requirements from all
        namespaces.</para>
         </formalpara>
         <para role="description">
Returns the requirements declared by this bundle revision.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An unmodifiable list containing the declared
         <link linkend="org.osgi.framework.wiring.BundleRequirement">BundleRequirement</link>s from the specified namespace. The
         returned list will be empty if this bundle revision declares no
         requirements in the specified namespace. The list contains the
         declared requirements in the order they are specified in the
         manifest.</para>
         </formalpara>
      </section>
      <section xreflabel="getRequirements(String)" role="method" xml:id="org.osgi.framework.wiring.BundleRevision.getRequirements-String-">
         <title>public List&lt;Requirement&gt; getRequirements(String namespace)</title>
         <formalpara role="parameter">
            <title>namespace</title>
            <para>The namespace of the declared requirements to return or
        <code>null</code> to return the declared requirements from all
        namespaces.</para>
         </formalpara>
         <para role="description">
Returns the requirements declared by this bundle resource.

 </para>
         <para>
 This method returns the same value as
 <link linkend="org.osgi.framework.wiring.BundleRevision.getDeclaredRequirements-String-">getDeclaredRequirements(String)</link>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An unmodifiable list containing the declared <link linkend="org.osgi.resource.Requirement">Requirement</link>
         s from the specified namespace. The returned list will be empty
         if this resource declares no requirements in the specified
         namespace.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getSymbolicName()" role="method" xml:id="org.osgi.framework.wiring.BundleRevision.getSymbolicName--">
         <title>public String getSymbolicName()</title>
         <para role="description">
Returns the symbolic name for this bundle revision.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The symbolic name for this bundle revision.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Bundle.getSymbolicName--">Bundle.getSymbolicName()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="getTypes()" role="method" xml:id="org.osgi.framework.wiring.BundleRevision.getTypes--">
         <title>public int getTypes()</title>
         <para role="description">
Returns the special types of this bundle revision. The bundle revision
 type values are:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.framework.wiring.BundleRevision.TYPE_FRAGMENT">TYPE_FRAGMENT</link>
               </para>
            </listitem>
         </itemizedlist>
         <para>

 A bundle revision may be more than one type at a time. A type code is
 used to identify the bundle revision type for future extendability.

 </para>
         <para>
 If this bundle revision is not one or more of the defined types then 0 is
 returned.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The special types of this bundle revision. The type values are
         ORed together.</para>
         </formalpara>
      </section>
      <section xreflabel="getVersion()" role="method" xml:id="org.osgi.framework.wiring.BundleRevision.getVersion--">
         <title>public Version getVersion()</title>
         <para role="description">
Returns the version for this bundle revision.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The version for this bundle revision, or
         <link linkend="org.osgi.framework.Version.emptyVersion">Version.emptyVersion</link> if this bundle revision has no
         version information.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Bundle.getVersion--">Bundle.getVersion()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="getWiring()" role="method" xml:id="org.osgi.framework.wiring.BundleRevision.getWiring--">
         <title>public BundleWiring getWiring()</title>
         <para role="description">
Returns the bundle wiring which is using this bundle revision.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The bundle wiring which is using this bundle revision or
         <code>null</code> if no bundle wiring is using this bundle revision.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.wiring.BundleWiring.getRevision--">BundleWiring.getRevision()</link>
            </para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="BundleRevisions" role="class" xml:id="org.osgi.framework.wiring.BundleRevisions">
      <title>public interface BundleRevisions<?line-break?> extends BundleReference</title>
      <para>
The <link linkend="org.osgi.framework.wiring.BundleRevision">bundle revisions</link> of a bundle. When a bundle is
 installed and each time a bundle is updated, a new bundle revision of the
 bundle is created. For a bundle that has not been uninstalled, the most
 recent bundle revision is defined to be the current bundle revision. A bundle
 in the UNINSTALLED state does not have a current revision. An in use bundle
 revision is associated with an <link linkend="org.osgi.framework.wiring.BundleWiring.isInUse--">in use</link>
         <link linkend="org.osgi.framework.wiring.BundleWiring">BundleWiring</link>. The current bundle revision, if there is one, and all
 in use bundle revisions are returned.

 </para>
      <para>
 The bundle revisions for a bundle can be obtained by calling
 <link linkend="org.osgi.framework.Bundle.adapt-Class-">bundle.adapt</link>(<link linkend="org.osgi.framework.wiring.BundleRevisions">BundleRevisions</link>.class).
 <link linkend="org.osgi.framework.wiring.BundleRevisions.getRevisions--">getRevisions()</link> on the bundle.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section xreflabel="getRevisions()" role="method" xml:id="org.osgi.framework.wiring.BundleRevisions.getRevisions--">
         <title>public List&lt;BundleRevision&gt; getRevisions()</title>
         <para role="description">
Return the bundle revisions for the <link linkend="org.osgi.framework.BundleReference.getBundle--">referenced</link> bundle.

 </para>
         <para>
 The result is a list containing the current bundle revision, if there is
 one, and all in use bundle revisions. The list may also contain
 intermediate bundle revisions which are not in use.

 </para>
         <para>
 The list is ordered in reverse chronological order such that the first
 item is the most recent bundle revision and last item is the oldest
 bundle revision.

 </para>
         <para>
 Generally the list will have at least one bundle revision for the bundle:
 the current bundle revision. However, for an uninstalled bundle with no
 in use bundle revisions, the list may be empty.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A list containing a snapshot of the <link linkend="org.osgi.framework.wiring.BundleRevision">BundleRevision</link>s for
         the referenced bundle.</para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="BundleWire" role="class" xml:id="org.osgi.framework.wiring.BundleWire">
      <title>public interface BundleWire<?line-break?> extends Wire</title>
      <para>
A wire connecting a <link linkend="org.osgi.framework.wiring.BundleCapability">BundleCapability</link> to a <link linkend="org.osgi.framework.wiring.BundleRequirement">BundleRequirement</link>.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section xreflabel="getCapability()" role="method" xml:id="org.osgi.framework.wiring.BundleWire.getCapability--">
         <title>public BundleCapability getCapability()</title>
         <para role="description">
Returns the <link linkend="org.osgi.framework.wiring.BundleCapability">BundleCapability</link> for this wire.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The <link linkend="org.osgi.framework.wiring.BundleCapability">BundleCapability</link> for this wire.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getProvider()" role="method" xml:id="org.osgi.framework.wiring.BundleWire.getProvider--">
         <title>public BundleRevision getProvider()</title>
         <para role="description">
Returns the resource providing the <link linkend="org.osgi.framework.wiring.BundleWire.getCapability--">capability</link>.

 </para>
         <para>
 The returned resource may differ from the resource referenced by the
 <link linkend="org.osgi.framework.wiring.BundleWire.getCapability--">capability</link>.

 </para>
         <para>
 This method returns the same value as <link linkend="org.osgi.framework.wiring.BundleWire.getProviderWiring--">getProviderWiring()</link>.
 <link linkend="org.osgi.framework.wiring.BundleWiring.getRevision--">getRevision()</link>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The resource providing the capability.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getProviderWiring()" role="method" xml:id="org.osgi.framework.wiring.BundleWire.getProviderWiring--">
         <title>public BundleWiring getProviderWiring()</title>
         <para role="description">
Returns the bundle wiring <link linkend="org.osgi.framework.wiring.BundleWiring.getProvidedWires-String-">providing</link> the <link linkend="org.osgi.framework.wiring.BundleWire.getCapability--">capability</link>.

 </para>
         <para>
 The bundle revision referenced by the returned bundle wiring may differ
 from the bundle revision referenced by the <link linkend="org.osgi.framework.wiring.BundleWire.getCapability--">capability</link>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The bundle wiring providing the capability. If the bundle wiring
         providing the capability is not <link linkend="org.osgi.framework.wiring.BundleWiring.isInUse--">in
         use</link>, <code>null</code> will be returned.</para>
         </formalpara>
      </section>
      <section xreflabel="getRequirement()" role="method" xml:id="org.osgi.framework.wiring.BundleWire.getRequirement--">
         <title>public BundleRequirement getRequirement()</title>
         <para role="description">
Return the <link linkend="org.osgi.framework.wiring.BundleRequirement">BundleRequirement</link> for this wire.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The <link linkend="org.osgi.framework.wiring.BundleRequirement">BundleRequirement</link> for this wire.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getRequirer()" role="method" xml:id="org.osgi.framework.wiring.BundleWire.getRequirer--">
         <title>public BundleRevision getRequirer()</title>
         <para role="description">
Returns the resource who <link linkend="org.osgi.framework.wiring.BundleWire.getRequirement--">requires</link> the
 <link linkend="org.osgi.framework.wiring.BundleWire.getCapability--">capability</link>.

 </para>
         <para>
 The returned resource may differ from the resource referenced by the
 <link linkend="org.osgi.framework.wiring.BundleWire.getRequirement--">requirement</link>.

 </para>
         <para>
 This method returns the same value as <link linkend="org.osgi.framework.wiring.BundleWire.getRequirerWiring--">getRequirerWiring()</link>.
 <link linkend="org.osgi.framework.wiring.BundleWiring.getRevision--">getRevision()</link>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The resource who requires the capability.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getRequirerWiring()" role="method" xml:id="org.osgi.framework.wiring.BundleWire.getRequirerWiring--">
         <title>public BundleWiring getRequirerWiring()</title>
         <para role="description">
Returns the bundle wiring who
 <link linkend="org.osgi.framework.wiring.BundleWiring.getRequiredWires-String-">requires</link> the
 <link linkend="org.osgi.framework.wiring.BundleWire.getCapability--">capability</link>.

 </para>
         <para>
 The bundle revision referenced by the returned bundle wiring may differ
 from the bundle revision referenced by the <link linkend="org.osgi.framework.wiring.BundleWire.getRequirement--">requirement</link>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The bundle wiring whose requirement is wired to the capability.
         If the bundle wiring requiring the capability is not
         <link linkend="org.osgi.framework.wiring.BundleWiring.isInUse--">in use</link>, <code>null</code> will be
         returned.</para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="BundleWiring" role="class" xml:id="org.osgi.framework.wiring.BundleWiring">
      <title>public interface BundleWiring<?line-break?> extends BundleReference, Wiring</title>
      <para>
A wiring for a bundle. Each time a bundle is resolved, a new bundle wiring
 for the bundle is created. A bundle wiring is associated with a bundle
 revision and represents the dependencies with other bundle wirings.

 </para>
      <para>
 The bundle wiring for a bundle is the <link linkend="org.osgi.framework.wiring.BundleWiring.isCurrent--">current</link> bundle
 wiring if it is the most recent bundle wiring for the current bundle
 revision. A bundle wiring is <link linkend="org.osgi.framework.wiring.BundleWiring.isInUse--">in use</link> if it is the current
 bundle wiring or if some other in use bundle wiring is dependent upon it. For
 example, another bundle wiring is wired to a capability provided by the
 bundle wiring. An in use bundle wiring for a non-fragment bundle has a class
 loader. All bundles with non-current, in use bundle wirings are considered
 removal pending. Once a bundle wiring is no longer in use, it is considered
 stale and is discarded by the framework.

 </para>
      <para>
 The current bundle wiring for a bundle can be obtained by calling
 <link linkend="org.osgi.framework.Bundle.adapt-Class-">bundle.adapt</link>(BundleWiring.class). A bundle in the
 INSTALLED or UNINSTALLED state does not have a current wiring, adapting such
 a bundle returns <code>null</code>.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section xreflabel="FINDENTRIES_RECURSE" role="field" xml:id="org.osgi.framework.wiring.BundleWiring.FINDENTRIES_RECURSE">
         <title>public static final int FINDENTRIES_RECURSE = 1</title>
         <para>
The find entries operation must recurse into subdirectories.

 </para>
         <para>
 This bit may be set when calling
 <link linkend="org.osgi.framework.wiring.BundleWiring.findEntries-String-String-int-">findEntries(String, String, int)</link> to specify the result must
 include the matching entries from the specified path and its
 subdirectories. If this bit is not set, then the result must only include
 matching entries from the specified path.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.wiring.BundleWiring.findEntries-String-String-int-">findEntries(String, String, int)</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="LISTRESOURCES_LOCAL" role="field" xml:id="org.osgi.framework.wiring.BundleWiring.LISTRESOURCES_LOCAL">
         <title>public static final int LISTRESOURCES_LOCAL = 2</title>
         <para>
The list resource names operation must limit the result to the names of
 matching resources contained in this bundle wiring's
 <link linkend="org.osgi.framework.wiring.BundleWiring.getRevision--">bundle revision</link> and its attached fragment
 revisions. The result must not include resource names for resources in
 <link linkend="org.osgi.framework.namespace.PackageNamespace">package</link> names which are
 <link linkend="org.osgi.framework.wiring.BundleWiring.getRequiredWires-String-">imported</link> by this wiring.

 </para>
         <para>
 This bit may be set when calling
 <link linkend="org.osgi.framework.wiring.BundleWiring.listResources-String-String-int-">listResources(String, String, int)</link> to specify the result must
 only include the names of matching resources contained in this bundle
 wiring's bundle revision and its attached fragment revisions. If this bit
 is not set, then the result must include the names of matching resources
 reachable from this bundle wiring's class loader which may include the
 names of matching resources contained in imported packages and required
 bundles.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.wiring.BundleWiring.listResources-String-String-int-">listResources(String, String, int)</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="LISTRESOURCES_RECURSE" role="field" xml:id="org.osgi.framework.wiring.BundleWiring.LISTRESOURCES_RECURSE">
         <title>public static final int LISTRESOURCES_RECURSE = 1</title>
         <para>
The list resource names operation must recurse into subdirectories.

 </para>
         <para>
 This bit may be set when calling
 <link linkend="org.osgi.framework.wiring.BundleWiring.listResources-String-String-int-">listResources(String, String, int)</link> to specify the result must
 include the names of matching resources from the specified path and its
 subdirectories. If this bit is not set, then the result must only include
 names of matching resources from the specified path.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.wiring.BundleWiring.listResources-String-String-int-">listResources(String, String, int)</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="findEntries(String,String,int)" role="method" xml:id="org.osgi.framework.wiring.BundleWiring.findEntries-String-String-int-">
         <title>public List&lt;URL&gt; findEntries(String path, String filePattern, int options)</title>
         <formalpara role="parameter">
            <title>path</title>
            <para>The path name in which to look. The path is always relative
        to the root of this bundle wiring and may begin with
        "/". A path value of "/" indicates the root of
        this bundle wiring.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>filePattern</title>
            <para>The file name pattern for selecting entries in the
        specified path. The pattern is only matched against the last
        element of the entry path. If the entry is a directory then the
        trailing "/" is not used for pattern matching. Substring
        matching is supported, as specified in the Filter specification,
        using the wildcard character ("*"). If <code>null</code> is
        specified, this is equivalent to "*" and matches all
        files.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>options</title>
            <para>The options for listing resource names. See
        <link linkend="org.osgi.framework.wiring.BundleWiring.FINDENTRIES_RECURSE">FINDENTRIES_RECURSE</link>. The method must ignore unrecognized
        options.</para>
         </formalpara>
         <para role="description">
Returns entries in this bundle wiring's <link linkend="org.osgi.framework.wiring.BundleWiring.getRevision--">bundle
 revision</link> and its attached fragment revisions. This bundle wiring's class
 loader is not used to search for entries. Only the contents of this
 bundle wiring's bundle revision and its attached fragment revisions are
 searched for the specified entries.

 </para>
         <para>
 This method takes into account that the "contents" of this
 bundle wiring can have attached fragments. This "bundle space"
 is not a namespace with unique members; the same entry name can be
 present multiple times. This method therefore returns a list of URL
 objects. These URLs can come from different JARs but have the same path
 name. This method can either return only entries in the specified path or
 recurse into subdirectories returning entries in the directory tree
 beginning at the specified path.

 </para>
         <para>
 URLs for directory entries must have their path end with "/".
 </para>
         <para>
 Note: Jar and zip files are not required to include directory entries.
 URLs to directory entries will not be returned if the bundle contents do
 not contain directory entries.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An unmodifiable list of URL objects for each matching entry, or
         an empty list if no matching entry could be found, if this bundle
         wiring is for a fragment revision or if the caller does not have
         the appropriate <code>AdminPermission[bundle,RESOURCE]</code> and the
         Java Runtime Environment supports permissions. The list is
         ordered such that entries from the <link linkend="org.osgi.framework.wiring.BundleWiring.getRevision--">bundle
         revision</link> are returned first followed by the entries from
         attached fragment revisions in attachment order. If this bundle
         wiring is not <link linkend="org.osgi.framework.wiring.BundleWiring.isInUse--">in use</link>, <code>null</code> must be
         returned.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Bundle.findEntries-String-String-boolean-">Bundle.findEntries(String, String, boolean)</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="getCapabilities(String)" role="method" xml:id="org.osgi.framework.wiring.BundleWiring.getCapabilities-String-">
         <title>public List&lt;BundleCapability&gt; getCapabilities(String namespace)</title>
         <formalpara role="parameter">
            <title>namespace</title>
            <para>The namespace of the capabilities to return or
        <code>null</code> to return the capabilities from all namespaces.</para>
         </formalpara>
         <para role="description">
Returns the capabilities provided by this bundle wiring.

 </para>
         <para>
 Only capabilities considered by the resolver are returned. For example,
 capabilities with <link linkend="org.osgi.resource.Namespace.CAPABILITY_EFFECTIVE_DIRECTIVE">effective</link> directive not equal to <link linkend="org.osgi.resource.Namespace.EFFECTIVE_RESOLVE">resolve</link> are not returned.

 </para>
         <para>
 A capability may not be required by any bundle wiring and thus there may
 be no <link linkend="org.osgi.framework.wiring.BundleWiring.getProvidedWires-String-">wires</link> for the capability.

 </para>
         <para>
 A bundle wiring for a non-fragment revision provides a subset of the
 declared capabilities from the bundle revision and all attached fragment
 revisions<superscript>†</superscript>. Not all declared capabilities may be
 provided since some may be discarded. For example, if a package is
 declared to be both exported and imported, only one is selected and the
 other is discarded.
 </para>
         <para>
 A bundle wiring for a fragment revision with a symbolic name must provide
 exactly one <link linkend="org.osgi.framework.namespace.IdentityNamespace">identity</link> capability.
 </para>
         <para>
 † The <link linkend="org.osgi.framework.namespace.IdentityNamespace">identity</link> capability provided by
 attached fragment revisions must not be included in the capabilities of
 the host bundle wiring.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A list containing a snapshot of the <link linkend="org.osgi.framework.wiring.BundleCapability">BundleCapability</link>s, or
         an empty list if this bundle wiring provides no capabilities in
         the specified namespace. If this bundle wiring is not
         <link linkend="org.osgi.framework.wiring.BundleWiring.isInUse--">in use</link>, <code>null</code> will be returned. For a
         given namespace, the list contains the capabilities in the order
         the capabilities were specified in the manifests of the
         <link linkend="org.osgi.framework.wiring.BundleWiring.getRevision--">bundle revision</link> and the attached
         fragments<superscript>†</superscript> of this bundle wiring. There is no
         ordering defined between capabilities in different namespaces.</para>
         </formalpara>
      </section>
      <section xreflabel="getClassLoader()" role="method" xml:id="org.osgi.framework.wiring.BundleWiring.getClassLoader--">
         <title>public ClassLoader getClassLoader()</title>
         <para role="description">
Returns the class loader for this bundle wiring. Since a bundle refresh
 creates a new bundle wiring for a bundle, different bundle wirings for
 the same bundle will have different class loaders.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The class loader for this bundle wiring. If this bundle wiring is
         not <link linkend="org.osgi.framework.wiring.BundleWiring.isInUse--">in use</link> or this bundle wiring is for a
         fragment revision, <code>null</code> will be returned.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have the appropriate
         <code>RuntimePermission("getClassLoader")</code>, and the Java Runtime
         Environment supports permissions.</para>
         </formalpara>
      </section>
      <section xreflabel="getProvidedResourceWires(String)" role="method" xml:id="org.osgi.framework.wiring.BundleWiring.getProvidedResourceWires-String-">
         <title>public List&lt;Wire&gt; getProvidedResourceWires(String namespace)</title>
         <formalpara role="parameter">
            <title>namespace</title>
            <para>The namespace of the capabilities for which to return
        wires or <code>null</code> to return the wires for the capabilities in
        all namespaces.</para>
         </formalpara>
         <para role="description">
Returns the <link linkend="org.osgi.resource.Wire">Wire</link>s to the provided <link linkend="org.osgi.resource.Capability">capabilities</link>
 of this wiring.

 </para>
         <para>
 This method returns the same value as <link linkend="org.osgi.framework.wiring.BundleWiring.getProvidedWires-String-">getProvidedWires(String)</link>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A list containing a snapshot of the <link linkend="org.osgi.resource.Wire">Wire</link>s for the
         <link linkend="org.osgi.resource.Capability">capabilities</link> of this wiring, or an empty list
         if this wiring has no capabilities in the specified namespace.
         For a given namespace, the list contains the wires in the order
         the capabilities were specified in the manifests of the
         <link linkend="org.osgi.framework.wiring.BundleWiring.getResource--">resource</link> and the attached fragment
         resources of this wiring. There is no ordering defined between
         capabilities in different namespaces.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getProvidedWires(String)" role="method" xml:id="org.osgi.framework.wiring.BundleWiring.getProvidedWires-String-">
         <title>public List&lt;BundleWire&gt; getProvidedWires(String namespace)</title>
         <formalpara role="parameter">
            <title>namespace</title>
            <para>The namespace of the capabilities for which to return
        wires or <code>null</code> to return the wires for the capabilities in
        all namespaces.</para>
         </formalpara>
         <para role="description">
Returns the <link linkend="org.osgi.framework.wiring.BundleWire">BundleWire</link>s to the provided <link linkend="org.osgi.framework.wiring.BundleCapability">capabilities</link> of this bundle wiring.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A list containing a snapshot of the <link linkend="org.osgi.framework.wiring.BundleWire">BundleWire</link>s for the
         <link linkend="org.osgi.framework.wiring.BundleCapability">capabilities</link> of this bundle wiring, or
         an empty list if this bundle wiring has no capabilities in the
         specified namespace. If this bundle wiring is not
         <link linkend="org.osgi.framework.wiring.BundleWiring.isInUse--">in use</link>, <code>null</code> will be returned. For a
         given namespace, the list contains the wires in the order the
         capabilities were specified in the manifests of the
         <link linkend="org.osgi.framework.wiring.BundleWiring.getRevision--">bundle revision</link> and the attached fragments
         of this bundle wiring. There is no ordering defined between
         capabilities in different namespaces.</para>
         </formalpara>
      </section>
      <section xreflabel="getRequiredResourceWires(String)" role="method" xml:id="org.osgi.framework.wiring.BundleWiring.getRequiredResourceWires-String-">
         <title>public List&lt;Wire&gt; getRequiredResourceWires(String namespace)</title>
         <formalpara role="parameter">
            <title>namespace</title>
            <para>The namespace of the requirements for which to return
        wires or <code>null</code> to return the wires for the requirements in
        all namespaces.</para>
         </formalpara>
         <para role="description">
Returns the <link linkend="org.osgi.resource.Wire">Wire</link>s to the <link linkend="org.osgi.resource.Requirement">requirements</link> in use
 by this wiring.

 </para>
         <para>
 This method returns the same value as <link linkend="org.osgi.framework.wiring.BundleWiring.getRequiredWires-String-">getRequiredWires(String)</link>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A list containing a snapshot of the <link linkend="org.osgi.resource.Wire">Wire</link>s for the
         <link linkend="org.osgi.resource.Requirement">requirements</link> of this wiring, or an empty list
         if this wiring has no requirements in the specified namespace.
         For a given namespace, the list contains the wires in the order
         the requirements were specified in the manifests of the
         <link linkend="org.osgi.framework.wiring.BundleWiring.getResource--">resource</link> and the attached fragment
         resources of this wiring. There is no ordering defined between
         requirements in different namespaces.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getRequiredWires(String)" role="method" xml:id="org.osgi.framework.wiring.BundleWiring.getRequiredWires-String-">
         <title>public List&lt;BundleWire&gt; getRequiredWires(String namespace)</title>
         <formalpara role="parameter">
            <title>namespace</title>
            <para>The namespace of the requirements for which to return
        wires or <code>null</code> to return the wires for the requirements in
        all namespaces.</para>
         </formalpara>
         <para role="description">
Returns the <link linkend="org.osgi.framework.wiring.BundleWire">BundleWire</link>s to the <link linkend="org.osgi.framework.wiring.BundleRequirement">requirements</link> in use by this bundle wiring.

 </para>
         <para>
 This method may return different results if this bundle wiring
 establishes additional wires to more requirements. For example,
 dynamically importing a package will establish a new wire to the
 dynamically imported package.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A list containing a snapshot of the <link linkend="org.osgi.framework.wiring.BundleWire">BundleWire</link>s for the
         <link linkend="org.osgi.framework.wiring.BundleRequirement">requirements</link> of this bundle wiring, or
         an empty list if this bundle wiring has no requirements in the
         specified namespace. If this bundle wiring is not
         <link linkend="org.osgi.framework.wiring.BundleWiring.isInUse--">in use</link>, <code>null</code> will be returned. For a
         given namespace, the list contains the wires in the order the
         requirements were specified in the manifests of the
         <link linkend="org.osgi.framework.wiring.BundleWiring.getRevision--">bundle revision</link> and the attached fragments
         of this bundle wiring followed by dynamically established wires,
         if any, in the order they were established. There is no ordering
         defined between requirements in different namespaces.</para>
         </formalpara>
      </section>
      <section xreflabel="getRequirements(String)" role="method" xml:id="org.osgi.framework.wiring.BundleWiring.getRequirements-String-">
         <title>public List&lt;BundleRequirement&gt; getRequirements(String namespace)</title>
         <formalpara role="parameter">
            <title>namespace</title>
            <para>The namespace of the requirements to return or
            <code>null</code> to return the requirements from all namespaces.</para>
         </formalpara>
         <para role="description">
Returns the requirements of this bundle wiring.
 </para>
         <para>
 Only requirements considered by the resolver are returned. For example,
 requirements with <link linkend="org.osgi.resource.Namespace.REQUIREMENT_EFFECTIVE_DIRECTIVE">effective</link> directive not equal to <link linkend="org.osgi.resource.Namespace.EFFECTIVE_RESOLVE">resolve</link> are not returned.
 </para>
         <para>
 A bundle wiring for a non-fragment revision has a subset of the declared
 requirements from the bundle revision and all attached fragment
 revisions. Not all declared requirements may be present since some may be
 discarded. For example, if a package is declared to be both exported and
 imported, only one is selected and the other is discarded.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A list containing a snapshot of the <link linkend="org.osgi.framework.wiring.BundleRequirement">BundleRequirement</link>s,
         or an empty list if this bundle wiring uses no requirements in
         the specified namespace. If this bundle wiring is not
         <link linkend="org.osgi.framework.wiring.BundleWiring.isInUse--">in use</link>, <code>null</code> will be returned. For a
         given namespace, the list contains the requirements in the order
         the requirements were specified in the manifests of the
         <link linkend="org.osgi.framework.wiring.BundleWiring.getRevision--">bundle revision</link> and the attached fragments
         of this bundle wiring. There is no ordering defined between
         requirements in different namespaces.</para>
         </formalpara>
      </section>
      <section xreflabel="getResource()" role="method" xml:id="org.osgi.framework.wiring.BundleWiring.getResource--">
         <title>public BundleRevision getResource()</title>
         <para role="description">
Returns the resource associated with this wiring.

 </para>
         <para>
 This method returns the same value as <link linkend="org.osgi.framework.wiring.BundleWiring.getRevision--">getRevision()</link>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The resource associated with this wiring.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getResourceCapabilities(String)" role="method" xml:id="org.osgi.framework.wiring.BundleWiring.getResourceCapabilities-String-">
         <title>public List&lt;Capability&gt; getResourceCapabilities(String namespace)</title>
         <formalpara role="parameter">
            <title>namespace</title>
            <para>The namespace of the capabilities to return or
        <code>null</code> to return the capabilities from all namespaces.</para>
         </formalpara>
         <para role="description">
Returns the capabilities provided by this wiring.

 </para>
         <para>
 Only capabilities considered by the resolver are returned. For example,
 capabilities with <link linkend="org.osgi.resource.Namespace.CAPABILITY_EFFECTIVE_DIRECTIVE">effective</link> directive not equal to <link linkend="org.osgi.resource.Namespace.EFFECTIVE_RESOLVE">resolve</link> are not returned.

 </para>
         <para>
 A capability may not be required by any wiring and thus there may be no
 <link linkend="org.osgi.framework.wiring.BundleWiring.getProvidedResourceWires-String-">wires</link> for the capability.

 </para>
         <para>
 A wiring for a non-fragment resource provides a subset of the declared
 capabilities from the resource and all attached fragment
 resources<superscript>†</superscript>. Not all declared capabilities may be
 provided since some may be discarded. For example, if a package is
 declared to be both exported and imported, only one is selected and the
 other is discarded.
 </para>
         <para>
 A wiring for a fragment resource with a symbolic name must provide
 exactly one <code>osgi.identity</code> capability.
 </para>
         <para>
 † The <code>osgi.identity</code> capability provided by attached
 fragment resource must not be included in the capabilities of the host
 wiring.

 </para>
         <para>
 This method returns the same value as <link linkend="org.osgi.framework.wiring.BundleWiring.getCapabilities-String-">getCapabilities(String)</link>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A list containing a snapshot of the <link linkend="org.osgi.resource.Capability">Capability</link>s, or an
         empty list if this wiring provides no capabilities in the
         specified namespace. For a given namespace, the list contains the
         capabilities in the order the capabilities were specified in the
         manifests of the <link linkend="org.osgi.framework.wiring.BundleWiring.getResource--">resource</link> and the attached
         fragment resources<superscript>†</superscript> of this wiring. There is no
         ordering defined between capabilities in different namespaces.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getResourceRequirements(String)" role="method" xml:id="org.osgi.framework.wiring.BundleWiring.getResourceRequirements-String-">
         <title>public List&lt;Requirement&gt; getResourceRequirements(String namespace)</title>
         <formalpara role="parameter">
            <title>namespace</title>
            <para>The namespace of the requirements to return or
        <code>null</code> to return the requirements from all namespaces.</para>
         </formalpara>
         <para role="description">
Returns the requirements of this wiring.

 </para>
         <para>
 Only requirements considered by the resolver are returned. For example,
 requirements with <link linkend="org.osgi.resource.Namespace.REQUIREMENT_EFFECTIVE_DIRECTIVE">effective</link> directive not equal to <link linkend="org.osgi.resource.Namespace.EFFECTIVE_RESOLVE">resolve</link> are not returned.

 </para>
         <para>
 A wiring for a non-fragment resource has a subset of the declared
 requirements from the resource and all attached fragment resources. Not
 all declared requirements may be present since some may be discarded. For
 example, if a package is declared to be optionally imported and is not
 actually imported, the requirement must be discarded.

 </para>
         <para>
 This method returns the same value as <link linkend="org.osgi.framework.wiring.BundleWiring.getRequirements-String-">getRequirements(String)</link>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A list containing a snapshot of the <link linkend="org.osgi.resource.Requirement">Requirement</link>s, or an
         empty list if this wiring uses no requirements in the specified
         namespace. For a given namespace, the list contains the
         requirements in the order the requirements were specified in the
         manifests of the <link linkend="org.osgi.framework.wiring.BundleWiring.getResource--">resource</link> and the attached
         fragment resources of this wiring. There is no ordering defined
         between requirements in different namespaces.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getRevision()" role="method" xml:id="org.osgi.framework.wiring.BundleWiring.getRevision--">
         <title>public BundleRevision getRevision()</title>
         <para role="description">
Returns the bundle revision for the bundle in this bundle wiring. Since a
 bundle update can change the entries in a bundle, different bundle
 wirings for the same bundle can have different bundle revisions.

 </para>
         <para>
 The bundle object <link linkend="org.osgi.framework.BundleReference.getBundle--">referenced</link> by the
 returned <code>BundleRevision</code> may return different information than the
 returned <code>BundleRevision</code> since the returned <code>BundleRevision</code>
 may refer to an older revision of the bundle.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The bundle revision for this bundle wiring.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.wiring.BundleRevision.getWiring--">BundleRevision.getWiring()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="isCurrent()" role="method" xml:id="org.osgi.framework.wiring.BundleWiring.isCurrent--">
         <title>public boolean isCurrent()</title>
         <para role="description">
Returns <code>true</code> if this bundle wiring is the current bundle wiring.
 The bundle wiring for a bundle is the current bundle wiring if it is the
 most recent bundle wiring for the current bundle revision. All bundles
 with non-current, in use bundle wirings are considered
 <link linkend="org.osgi.framework.wiring.FrameworkWiring.getRemovalPendingBundles--">removal pending</link>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if this bundle wiring is the current bundle wiring;
         <code>false</code> otherwise.</para>
         </formalpara>
      </section>
      <section xreflabel="isInUse()" role="method" xml:id="org.osgi.framework.wiring.BundleWiring.isInUse--">
         <title>public boolean isInUse()</title>
         <para role="description">
Returns <code>true</code> if this bundle wiring is in use. A bundle wiring is
 in use if it is the <link linkend="org.osgi.framework.wiring.BundleWiring.isCurrent--">current</link> wiring or if some other
 in use bundle wiring is dependent upon it. Once a bundle wiring is no
 longer in use, it is considered stale and is discarded by the framework.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if this bundle wiring is in use; <code>false</code>
         otherwise.</para>
         </formalpara>
      </section>
      <section xreflabel="listResources(String,String,int)" role="method" xml:id="org.osgi.framework.wiring.BundleWiring.listResources-String-String-int-">
         <title>public Collection&lt;String&gt; listResources(String path, String filePattern, int options)</title>
         <formalpara role="parameter">
            <title>path</title>
            <para>The path name in which to look. The path is always relative
        to the root of this bundle wiring's class loader and may begin
        with "/". A path value of "/" indicates the
        root of this bundle wiring's class loader.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>filePattern</title>
            <para>The file name pattern for selecting resource names in
        the specified path. The pattern is only matched against the last
        element of the resource path. If the resource is a directory then
        the trailing "/" is not used for pattern matching.
        Substring matching is supported, as specified in the Filter
        specification, using the wildcard character ("*"). If
        <code>null</code> is specified, this is equivalent to "*" and
        matches all files.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>options</title>
            <para>The options for listing resource names. See
        <link linkend="org.osgi.framework.wiring.BundleWiring.LISTRESOURCES_LOCAL">LISTRESOURCES_LOCAL</link> and <link linkend="org.osgi.framework.wiring.BundleWiring.LISTRESOURCES_RECURSE">LISTRESOURCES_RECURSE</link>.
        This method must ignore unrecognized options.</para>
         </formalpara>
         <para role="description">
Returns the names of resources visible to this bundle wiring's
 <link linkend="org.osgi.framework.wiring.BundleWiring.getClassLoader--">class loader</link>. The returned names can be used to
 access the resources via this bundle wiring's class loader.

 </para>
         <itemizedlist>
            <listitem>
               <para>Only the resource names for resources in bundle wirings will be
 returned. The names of resources visible to a bundle wiring's parent
 class loader, such as the bootstrap class loader, must not be included in
 the result.</para>
            </listitem>
            <listitem>
               <para>Only established wires will be examined for resources. This method
 must not cause new wires for dynamic imports to be established.</para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An unmodifiable collection of resource names for each matching
         resource, or an empty collection if no matching resource could be
         found, if this bundle wiring is for a fragment revision or if the
         caller does not have the appropriate
         <code>AdminPermission[bundle,RESOURCE]</code> and the Java Runtime
         Environment supports permissions. The collection is unordered and
         must contain no duplicate resource names. If this bundle wiring
         is not <link linkend="org.osgi.framework.wiring.BundleWiring.isInUse--">in use</link>, <code>null</code> must be returned.</para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="FrameworkWiring" role="class" xml:id="org.osgi.framework.wiring.FrameworkWiring">
      <title>public interface FrameworkWiring<?line-break?> extends BundleReference</title>
      <para>
Query and modify wiring information for the framework. The framework wiring
 object for the framework can be obtained by calling
 <link linkend="org.osgi.framework.Bundle.adapt-Class-">bundle.adapt(FrameworkWiring.class)</link> on the system
 bundle. Only the system bundle can be adapted to a FrameworkWiring object.

 </para>
      <para>
 The system bundle associated with this FrameworkWiring object can be obtained
 by calling <link linkend="org.osgi.framework.BundleReference.getBundle--">BundleReference.getBundle()</link>.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section xreflabel="findProviders(Requirement)" role="method" xml:id="org.osgi.framework.wiring.FrameworkWiring.findProviders-Requirement-">
         <title>public Collection&lt;BundleCapability&gt; findProviders(Requirement requirement)</title>
         <formalpara role="parameter">
            <title>requirement</title>
            <para>The requirement to find matching bundle capabilities.
        Must not be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Find bundle capabilities that match the given requirement.

 </para>
         <para>
 The returned collection contains <link linkend="org.osgi.framework.wiring.BundleCapability">BundleCapability</link> objects where
 the revision must be the <link linkend="org.osgi.framework.wiring.BundleCapability.getRevision--">declaring
 revision</link> of the capability and the revision must either be the current
 bundle revision or an <link linkend="org.osgi.framework.wiring.BundleWiring.isInUse--">in use</link> bundle
 revision.

 </para>
         <para>
 Each returned capability must match the given requirement. This means
 that the filter in the requirement must match as well as any namespace
 specific directives. For example, the mandatory attributes for the
 osgi.wiring.package namespace.

 </para>
         <para>
 The returned collection has not been filtered to remove capabilities that
 are non-effective, substituted or for which the providing bundle does not
 have permission to provide. No resolve hooks are called to filter
 matching capabilities.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A collection of <link linkend="org.osgi.framework.wiring.BundleCapability">BundleCapability</link> objects that match the
         specified requirement.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.2</para>
         </formalpara>
      </section>
      <section xreflabel="getDependencyClosure(Collection)" role="method" xml:id="org.osgi.framework.wiring.FrameworkWiring.getDependencyClosure-Collection-">
         <title>public Collection&lt;Bundle&gt; getDependencyClosure(Collection&lt;Bundle&gt; bundles)</title>
         <formalpara role="parameter">
            <title>bundles</title>
            <para>The initial bundles for which to generate the dependency
        closure.</para>
         </formalpara>
         <para role="description">
Returns the dependency closure for the specified bundles.

 </para>
         <para>
 A graph of bundles is computed starting with the specified bundles. The
 graph is expanded by adding any bundle that is either wired to a package
 that is currently exported by a bundle in the graph or requires a bundle
 in the graph. The graph is fully constructed when there is no bundle
 outside the graph that is wired to a bundle in the graph. The graph may
 contain <code>UNINSTALLED</code> bundles that are
 <link linkend="org.osgi.framework.wiring.FrameworkWiring.getRemovalPendingBundles--">removal pending</link>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A collection containing a snapshot of the dependency closure of
         the specified bundles, or an empty collection if there were no
         specified bundles.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the specified <code>Bundle</code>s were
         not created by the same framework instance associated with this
         FrameworkWiring.</para>
         </formalpara>
      </section>
      <section xreflabel="getRemovalPendingBundles()" role="method" xml:id="org.osgi.framework.wiring.FrameworkWiring.getRemovalPendingBundles--">
         <title>public Collection&lt;Bundle&gt; getRemovalPendingBundles()</title>
         <para role="description">
Returns the bundles that have <link linkend="org.osgi.framework.wiring.BundleWiring.isCurrent--">non-current</link>, <link linkend="org.osgi.framework.wiring.BundleWiring.isInUse--">in use</link> bundle wirings. This
 is typically the bundles which have been updated or uninstalled since the
 last call to <link linkend="org.osgi.framework.wiring.FrameworkWiring.refreshBundles-Collection-FrameworkListener...-">refreshBundles(Collection, FrameworkListener...)</link>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A collection containing a snapshot of the <code>Bundle</code>s which
         have non-current, in use <code>BundleWiring</code>s, or an empty
         collection if there are no such bundles.</para>
         </formalpara>
      </section>
      <section xreflabel="refreshBundles(Collection,FrameworkListener...)" role="method" xml:id="org.osgi.framework.wiring.FrameworkWiring.refreshBundles-Collection-FrameworkListener...-">
         <title>public void refreshBundles(Collection&lt;Bundle&gt; bundles, FrameworkListener... listeners)</title>
         <formalpara role="parameter">
            <title>bundles</title>
            <para>The bundles to be refreshed, or <code>null</code> to refresh
        the <link linkend="org.osgi.framework.wiring.FrameworkWiring.getRemovalPendingBundles--">removal pending</link> bundles.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>listeners</title>
            <para>Zero or more listeners to be notified when the bundle
        refresh has been completed. The specified listeners do not need to
        be otherwise registered with the framework. If a specified
        listener is already registered with the framework, it will be
        notified twice.</para>
         </formalpara>
         <para role="description">
Refreshes the specified bundles. This forces the update (replacement) or
 removal of packages exported by the specified bundles.

 </para>
         <para>
 The technique by which the framework refreshes bundles may vary among
 different framework implementations. A permissible implementation is to
 stop and restart the framework.

 </para>
         <para>
 This method returns to the caller immediately and then performs the
 following steps on a separate thread:

 </para>
         <orderedlist>
            <listitem>
               <para>Compute the <link linkend="org.osgi.framework.wiring.FrameworkWiring.getDependencyClosure-Collection-">dependency
 closure</link> of the specified bundles. If no bundles are specified, compute
 the dependency closure of the <link linkend="org.osgi.framework.wiring.FrameworkWiring.getRemovalPendingBundles--">removal
 pending</link> bundles.</para>
            </listitem>
            <listitem>
               <para>Each bundle in the dependency closure that is in the <code>ACTIVE</code>
 state will be stopped as described in the <code>Bundle.stop</code> method.</para>
            </listitem>
            <listitem>
               <para>Each bundle in the dependency closure that is in the <code>RESOLVED</code>
 state is unresolved and thus moved to the <code>INSTALLED</code> state. The
 effect of this step is that bundles in the dependency closure are no
 longer <code>RESOLVED</code>.</para>
            </listitem>
            <listitem>
               <para>Each bundle in the dependency closure that is in the
 <code>UNINSTALLED</code> state is removed from the dependency closure and is
 now completely removed from the Framework.</para>
            </listitem>
            <listitem>
               <para>Each bundle in the dependency closure that was in the <code>ACTIVE</code>
 state prior to Step 2 is started as described in the <code>Bundle.start</code>
 method, causing all bundles required for the restart to be resolved. It
 is possible that, as a result of the previous steps, packages that were
 previously exported no longer are. Therefore, some bundles may be
 unresolvable until bundles satisfying the dependencies have been
 installed in the Framework.</para>
            </listitem>
         </orderedlist>
         <para>
 For any exceptions that are thrown during any of these steps, a framework
 event of type <code>FrameworkEvent.ERROR</code> is fired containing the
 exception. The source bundle for these events should be the specific
 bundle to which the exception is related. If no specific bundle can be
 associated with the exception then the System Bundle must be used as the
 source bundle for the event. All framework events fired by this method
 are also delivered to the specified <code>FrameworkListener</code>s in the
 order they are specified.

 </para>
         <para>
 When this process completes after the bundles are refreshed, the
 Framework will fire a Framework event of type
 <code>FrameworkEvent.PACKAGES_REFRESHED</code> to announce it has completed
 the bundle refresh. The specified <code>FrameworkListener</code>s are notified
 in the order specified. Each specified <code>FrameworkListener</code> will be
 called with a Framework event of type
 <code>FrameworkEvent.PACKAGES_REFRESHED</code>.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the specified <code>Bundle</code>s were
         not created by the same framework instance associated with this
         FrameworkWiring.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have
         <code>AdminPermission[System Bundle,RESOLVE]</code> and the Java
         runtime environment supports permissions.</para>
         </formalpara>
      </section>
      <section xreflabel="resolveBundles(Collection)" role="method" xml:id="org.osgi.framework.wiring.FrameworkWiring.resolveBundles-Collection-">
         <title>public boolean resolveBundles(Collection&lt;Bundle&gt; bundles)</title>
         <formalpara role="parameter">
            <title>bundles</title>
            <para>The bundles to resolve or <code>null</code> to resolve all
        unresolved bundles installed in the Framework.</para>
         </formalpara>
         <para role="description">
Resolves the specified bundles. The Framework must attempt to resolve the
 specified bundles that are unresolved. Additional bundles that are not
 included in the specified bundles may be resolved as a result of calling
 this method. A permissible implementation of this method is to attempt to
 resolve all unresolved bundles installed in the framework.

 </para>
         <para>
 If no bundles are specified, then the Framework will attempt to resolve
 all unresolved bundles. This method must not cause any bundle to be
 refreshed, stopped, or started. This method will not return until the
 operation has completed.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if all specified bundles are resolved; <code>false</code>
         otherwise.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the specified <code>Bundle</code>s were
         not created by the same framework instance associated with this
         FrameworkWiring.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have
         <code>AdminPermission[System Bundle,RESOLVE]</code> and the Java
         runtime environment supports permissions.</para>
         </formalpara>
      </section>
   </section>
</section>

  <section xreflabel="org.osgi.framework.startlevel" version="5" role="package" xml:id="org.osgi.framework.startlevel" xml:base="010/../../../generated/javadoc/docbook/org.osgi.framework.startlevel.xml">
   <title>org.osgi.framework.startlevel</title>
   <info>
      <releaseinfo xml:id="org.osgi.framework.startlevel-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.framework.startlevel-version.number">1.0</edition>
   </info>
   <para>
Framework Start Level Package Version 1.0.

 </para>
   <para>
 The Framework Start Level package allows management agents to manage a start
 level assigned to each bundle and the active start level of the Framework.
 This package is a replacement for the now deprecated
 <code>org.osgi.service.startlevel</code> package.

 </para>
   <para>
 A start level is defined to be a state of execution in which the Framework
 exists. Start level values are defined as unsigned integers with 0 (zero)
 being the state where the Framework is not launched. Progressively higher
 integral values represent progressively higher start levels. For example, 2
 is a higher start level than 1.

 </para>
   <para>
      <code>AdminPermission</code> is required to modify start level information.

 </para>
   <para>
 Start Level support in the Framework includes the ability to modify the
 active start level of the Framework and to assign a specific start level to a
 bundle. The beginning start level of a Framework is specified via the
 <link linkend="org.osgi.framework.Constants.FRAMEWORK_BEGINNING_STARTLEVEL">org.osgi.framework.Constants.FRAMEWORK_BEGINNING_STARTLEVEL</link> framework
 property when configuring a framework.

 </para>
   <para>
 When the Framework is first started it must be at start level zero. In this
 state, no bundles are running. This is the initial state of the Framework
 before it is launched. When the Framework is launched, the Framework will
 enter start level one and all bundles which are assigned to start level one
 and whose autostart setting indicates the bundle should be started are
 started as described in the <link linkend="org.osgi.framework.Bundle.start-int-">org.osgi.framework.Bundle.start(int)</link>
 method. The Framework will continue to increase the start level, starting
 bundles at each start level, until the Framework has reached a beginning
 start level. At this point the Framework has completed starting bundles and
 will then fire a Framework event of type
 <link linkend="org.osgi.framework.FrameworkEvent.STARTED">org.osgi.framework.FrameworkEvent.STARTED</link> to announce it has
 completed its launch.

 </para>
   <para>
 Within a start level, bundles may be started in an order defined by the
 Framework implementation. This may be something like ascending
 <link linkend="org.osgi.framework.Bundle.getBundleId--">org.osgi.framework.Bundle.getBundleId()</link> order or an order based upon
 dependencies between bundles. A similar but reversed order may be used when
 stopping bundles within a start level.

 </para>
   <para>
 The Framework Start Level package can be used by management bundles to alter
 the active start level of the framework.

 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. For example:

 </para>
   <programlisting> Import-Package: org.osgi.framework.startlevel; version="[1.0,2.0)"</programlisting>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.startlevel.BundleStartLevel">
                  <code>BundleStartLevel</code>
               </link> -
Query and modify the start level information for a bundle.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.startlevel.FrameworkStartLevel">
                  <code>FrameworkStartLevel</code>
               </link> -
Query and modify the start level information for the framework.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section xreflabel="BundleStartLevel" role="class" xml:id="org.osgi.framework.startlevel.BundleStartLevel">
      <title>public interface BundleStartLevel<?line-break?> extends BundleReference</title>
      <para>
Query and modify the start level information for a bundle. The start level
 object for a bundle can be obtained by calling <link linkend="org.osgi.framework.Bundle.adapt-Class-">bundle.adapt(BundleStartLevel.class)</link> on the bundle.

 </para>
      <para>
 The bundle associated with this BundleStartLevel object can be obtained by
 calling <link linkend="org.osgi.framework.BundleReference.getBundle--">BundleReference.getBundle()</link>.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section xreflabel="getStartLevel()" role="method" xml:id="org.osgi.framework.startlevel.BundleStartLevel.getStartLevel--">
         <title>public int getStartLevel()</title>
         <para role="description">
Return the assigned start level value for the bundle.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The start level value of the bundle.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If the bundle has been uninstalled.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.startlevel.BundleStartLevel.setStartLevel-int-">setStartLevel(int)</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="isActivationPolicyUsed()" role="method" xml:id="org.osgi.framework.startlevel.BundleStartLevel.isActivationPolicyUsed--">
         <title>public boolean isActivationPolicyUsed()</title>
         <para role="description">
Returns whether the bundle's autostart setting indicates that the
 activation policy declared in the bundle manifest must be used.
 </para>
         <para>
 The autostart setting of a bundle indicates whether the bundle's declared
 activation policy is to be used when the bundle is started.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the bundle's autostart setting indicates the
         activation policy declared in the manifest must be used.
         <code>false</code> if the bundle must be eagerly activated.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If the bundle has been uninstalled.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Bundle.START_ACTIVATION_POLICY">Bundle.START_ACTIVATION_POLICY</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="isPersistentlyStarted()" role="method" xml:id="org.osgi.framework.startlevel.BundleStartLevel.isPersistentlyStarted--">
         <title>public boolean isPersistentlyStarted()</title>
         <para role="description">
Returns whether the bundle's autostart setting indicates it must be
 started.
 </para>
         <para>
 The autostart setting of a bundle indicates whether the bundle is to be
 started when its start level is reached.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the autostart setting of the bundle indicates it
         is to be started. <code>false</code> otherwise.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this bundle has been uninstalled.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Bundle.START_TRANSIENT">Bundle.START_TRANSIENT</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="setStartLevel(int)" role="method" xml:id="org.osgi.framework.startlevel.BundleStartLevel.setStartLevel-int-">
         <title>public void setStartLevel(int startlevel)</title>
         <formalpara role="parameter">
            <title>startlevel</title>
            <para>The new start level for the bundle.</para>
         </formalpara>
         <para role="description">
Assign a start level value to the bundle.

 </para>
         <para>
 The bundle will be assigned the specified start level. The start level
 value assigned to the bundle will be persistently recorded by the
 Framework.
 </para>
         <para>
 If the new start level for the bundle is lower than or equal to the
 active start level of the Framework and the bundle's autostart setting
 indicates this bundle must be started, the Framework will start the
 bundle as described in the <link linkend="org.osgi.framework.Bundle.start-int-">Bundle.start(int)</link> method using the
 <link linkend="org.osgi.framework.Bundle.START_TRANSIENT">Bundle.START_TRANSIENT</link> option. The
 <link linkend="org.osgi.framework.Bundle.START_ACTIVATION_POLICY">Bundle.START_ACTIVATION_POLICY</link> option must also be used if
 <link linkend="org.osgi.framework.startlevel.BundleStartLevel.isActivationPolicyUsed--">isActivationPolicyUsed()</link> returns <code>true</code>. The actual
 starting of the bundle must occur asynchronously.
 </para>
         <para>
 If the new start level for the bundle is higher than the active start
 level of the Framework, the Framework will stop the bundle as described
 in the <link linkend="org.osgi.framework.Bundle.stop-int-">Bundle.stop(int)</link> method using the
 <link linkend="org.osgi.framework.Bundle.STOP_TRANSIENT">Bundle.STOP_TRANSIENT</link> option. The actual stopping of the bundle
 must occur asynchronously.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the specified start level is less
         than or equal to zero, or if the bundle is the system bundle.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If the bundle has been uninstalled.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have
         <code>AdminPermission[bundle,EXECUTE]</code> and the Java runtime
         environment supports permissions.</para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="FrameworkStartLevel" role="class" xml:id="org.osgi.framework.startlevel.FrameworkStartLevel">
      <title>public interface FrameworkStartLevel<?line-break?> extends BundleReference</title>
      <para>
Query and modify the start level information for the framework. The start
 level object for the framework can be obtained by calling
 <link linkend="org.osgi.framework.Bundle.adapt-Class-">bundle.adapt(FrameworkStartLevel.class)</link> on the
 system bundle. Only the system bundle can be adapted to a FrameworkStartLevel
 object.

 </para>
      <para>
 The system bundle associated with this FrameworkStartLevel object can be
 obtained by calling <link linkend="org.osgi.framework.BundleReference.getBundle--">BundleReference.getBundle()</link>.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section xreflabel="getInitialBundleStartLevel()" role="method" xml:id="org.osgi.framework.startlevel.FrameworkStartLevel.getInitialBundleStartLevel--">
         <title>public int getInitialBundleStartLevel()</title>
         <para role="description">
Return the initial start level value that is assigned to a Bundle when it
 is first installed.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The initial start level value for Bundles.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.startlevel.FrameworkStartLevel.setInitialBundleStartLevel-int-">setInitialBundleStartLevel(int)</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="getStartLevel()" role="method" xml:id="org.osgi.framework.startlevel.FrameworkStartLevel.getStartLevel--">
         <title>public int getStartLevel()</title>
         <para role="description">
Return the active start level value of the Framework.

 If the Framework is in the process of changing the start level this
 method must return the active start level if this differs from the
 requested start level.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The active start level value of the Framework.</para>
         </formalpara>
      </section>
      <section xreflabel="setInitialBundleStartLevel(int)" role="method" xml:id="org.osgi.framework.startlevel.FrameworkStartLevel.setInitialBundleStartLevel-int-">
         <title>public void setInitialBundleStartLevel(int startlevel)</title>
         <formalpara role="parameter">
            <title>startlevel</title>
            <para>The initial start level for newly installed bundles.</para>
         </formalpara>
         <para role="description">
Set the initial start level value that is assigned to a Bundle when it is
 first installed.

 </para>
         <para>
 The initial bundle start level will be set to the specified start level.
 The initial bundle start level value will be persistently recorded by the
 Framework.

 </para>
         <para>
 When a Bundle is installed via <code>BundleContext.installBundle</code>, it is
 assigned the initial bundle start level value.

 </para>
         <para>
 The default initial bundle start level value is 1 unless this method has
 been called to assign a different initial bundle start level value.

 </para>
         <para>
 This method does not change the start level values of installed bundles.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the specified start level is less
         than or equal to zero.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have
         <code>AdminPermission[System Bundle,STARTLEVEL]</code> and the Java
         runtime environment supports permissions.</para>
         </formalpara>
      </section>
      <section xreflabel="setStartLevel(int,FrameworkListener...)" role="method" xml:id="org.osgi.framework.startlevel.FrameworkStartLevel.setStartLevel-int-FrameworkListener...-">
         <title>public void setStartLevel(int startlevel, FrameworkListener... listeners)</title>
         <formalpara role="parameter">
            <title>startlevel</title>
            <para>The requested start level for the Framework.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>listeners</title>
            <para>Zero or more listeners to be notified when the start
        level change has been completed. The specified listeners do not
        need to be otherwise registered with the framework. If a specified
        listener is already registered with the framework, it will be
        notified twice.</para>
         </formalpara>
         <para role="description">
Modify the active start level of the Framework and notify when complete.

 </para>
         <para>
 The Framework will move to the requested start level. This method will
 return immediately to the caller and the start level change will occur
 asynchronously on another thread. The specified <code>FrameworkListener</code>
 s are notified, in the order specified, when the start level change is
 complete. When the start level change completes normally, each specified
 <code>FrameworkListener</code> will be called with a Framework event of type
 <code>FrameworkEvent.STARTLEVEL_CHANGED</code>. If the start level change does
 not complete normally, each specified <code>FrameworkListener</code> will be
 called with a Framework event of type <code>FrameworkEvent.ERROR</code>.

 </para>
         <para>
 If the specified start level is higher than the active start level, the
 Framework will continue to increase the start level until the Framework
 has reached the specified start level.

 At each intermediate start level value on the way to and including the
 target start level, the Framework must:
 </para>
         <orderedlist>
            <listitem>
               <para>Change the active start level to the intermediate start level value.</para>
            </listitem>
            <listitem>
               <para>Start bundles at the intermediate start level whose autostart setting
 indicate they must be started. They are started as described in the
 <link linkend="org.osgi.framework.Bundle.start-int-">Bundle.start(int)</link> method using the <link linkend="org.osgi.framework.Bundle.START_TRANSIENT">Bundle.START_TRANSIENT</link>
 option. The <link linkend="org.osgi.framework.Bundle.START_ACTIVATION_POLICY">Bundle.START_ACTIVATION_POLICY</link> option must also be
 used if <link linkend="org.osgi.framework.startlevel.BundleStartLevel.isActivationPolicyUsed--">BundleStartLevel.isActivationPolicyUsed()</link> returns
 <code>true</code> for the bundle.</para>
            </listitem>
         </orderedlist>
         <para>
 When this process completes after the specified start level is reached,
 the Framework will fire a Framework event of type
 <code>FrameworkEvent.STARTLEVEL_CHANGED</code> to announce it has moved to the
 specified start level.

 </para>
         <para>
 If the specified start level is lower than the active start level, the
 Framework will continue to decrease the start level until the Framework
 has reached the specified start level.

 At each intermediate start level value on the way to and including the
 specified start level, the framework must:
 </para>
         <orderedlist>
            <listitem>
               <para>Stop bundles at the intermediate start level as described in the
 <link linkend="org.osgi.framework.Bundle.stop-int-">Bundle.stop(int)</link> method using the <link linkend="org.osgi.framework.Bundle.STOP_TRANSIENT">Bundle.STOP_TRANSIENT</link>
 option.</para>
            </listitem>
            <listitem>
               <para>Change the active start level to the intermediate start level value.</para>
            </listitem>
         </orderedlist>
         <para>
 When this process completes after the specified start level is reached,
 the Framework will fire a Framework event of type
 <code>FrameworkEvent.STARTLEVEL_CHANGED</code> to announce it has moved to the
 specified start level.

 </para>
         <para>
 If the specified start level is equal to the active start level, then no
 bundles are started or stopped, however, the Framework must fire a
 Framework event of type <code>FrameworkEvent.STARTLEVEL_CHANGED</code> to
 announce it has finished moving to the specified start level. This event
 may arrive before this method returns.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the specified start level is less
         than or equal to zero.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have
         <code>AdminPermission[System Bundle,STARTLEVEL]</code> and the Java
         runtime environment supports permissions.</para>
         </formalpara>
      </section>
   </section>
</section>

  <section xreflabel="org.osgi.framework.namespace" version="5" role="package" xml:id="org.osgi.framework.namespace" xml:base="010/../../../generated/javadoc/docbook/org.osgi.framework.namespace.xml">
   <title>org.osgi.framework.namespace</title>
   <info>
      <releaseinfo xml:id="org.osgi.framework.namespace-version">Version 1.2</releaseinfo>
      <edition xml:id="org.osgi.framework.namespace-version.number">1.2</edition>
   </info>
   <para>
Namespace Package Version 1.2.

 </para>
   <para>
 Bundles should not need to import this package at runtime since all
 the types in this package just contain constants for capability and
 requirement namespaces specified by the OSGi Working Group.</para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.namespace.AbstractWiringNamespace">
                  <code>AbstractWiringNamespace</code>
               </link> -
Wiring Capability and Requirement Namespaces base class.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.namespace.BundleNamespace">
                  <code>BundleNamespace</code>
               </link> -
Bundle Capability and Requirement Namespace.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.namespace.ExecutionEnvironmentNamespace">
                  <code>ExecutionEnvironmentNamespace</code>
               </link> -
Execution Environment Capability and Requirement Namespace.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.namespace.HostNamespace">
                  <code>HostNamespace</code>
               </link> -
Host Capability and Requirement Namespace.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.namespace.IdentityNamespace">
                  <code>IdentityNamespace</code>
               </link> -
Identity Capability and Requirement Namespace.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.namespace.NativeNamespace">
                  <code>NativeNamespace</code>
               </link> -
Native Capability and Requirement Namespace.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.namespace.PackageNamespace">
                  <code>PackageNamespace</code>
               </link> -
Package Capability and Requirement Namespace.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section xreflabel="AbstractWiringNamespace" role="class" xml:id="org.osgi.framework.namespace.AbstractWiringNamespace">
      <title>public abstract class AbstractWiringNamespace<?line-break?> extends Namespace</title>
      <para>
Wiring Capability and Requirement Namespaces base class.

 </para>
      <para>
 This class is the common class shared by all OSGi defined wiring namespaces.
 It defines the names for the common attributes and directives for the OSGi
 specified wiring namespaces.

 </para>
      <para>
 The values associated with these keys are of type <code>String</code>, unless
 otherwise indicated.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section xreflabel="CAPABILITY_BUNDLE_VERSION_ATTRIBUTE" role="field" xml:id="org.osgi.framework.namespace.AbstractWiringNamespace.CAPABILITY_BUNDLE_VERSION_ATTRIBUTE">
         <title>public static final String CAPABILITY_BUNDLE_VERSION_ATTRIBUTE = "bundle-version"</title>
         <para>
The capability attribute contains the <code>Version</code> of the resource
 providing the capability if one is specified or <code>0.0.0</code> if not
 specified. The value of this attribute must be of type <code>Version</code>.
   </para>
      </section>
      <section xreflabel="CAPABILITY_MANDATORY_DIRECTIVE" role="field" xml:id="org.osgi.framework.namespace.AbstractWiringNamespace.CAPABILITY_MANDATORY_DIRECTIVE">
         <title>public static final String CAPABILITY_MANDATORY_DIRECTIVE = "mandatory"</title>
         <para>
The capability directive used to specify the comma separated list of
 mandatory attributes which must be specified in the
 <link linkend="org.osgi.resource.Namespace.REQUIREMENT_FILTER_DIRECTIVE">filter</link> of a requirement in
 order for the capability to match the requirement.
   </para>
      </section>
   </section>
   <section xreflabel="BundleNamespace" role="class" xml:id="org.osgi.framework.namespace.BundleNamespace">
      <title>public final class BundleNamespace<?line-break?> extends AbstractWiringNamespace</title>
      <para>
Bundle Capability and Requirement Namespace.

 </para>
      <para>
 This class defines the names for the attributes and directives for this
 namespace. All unspecified capability attributes are of type <code>String</code>
 and are used as arbitrary matching attributes for the capability. The values
 associated with the specified directive and attribute keys are of type
 <code>String</code>, unless otherwise indicated.

 </para>
      <para>
 Unless otherwise noted, all directives specified on the
 <code>Bundle-SymbolicName</code> header are visible in the capability and all
 directives specified on the <code>Require-Bundle</code> header are visible in the
 requirement.

 </para>
      <itemizedlist>
         <listitem>
            <para>The <link linkend="org.osgi.resource.Namespace.CAPABILITY_USES_DIRECTIVE">uses</link> directive must be
 ignored. A <code>uses</code> directive specified on the
 <code>Bundle-SymbolicName</code> header must be ignored. A <code>uses</code> directive
 must not be present in the capability.</para>
         </listitem>
         <listitem>
            <para>The <link linkend="org.osgi.resource.Namespace.CAPABILITY_EFFECTIVE_DIRECTIVE">effective</link>
               <link linkend="org.osgi.resource.Namespace.REQUIREMENT_EFFECTIVE_DIRECTIVE">directives</link> must be ignored.
 This namespace is only effective at <link linkend="org.osgi.resource.Namespace.EFFECTIVE_RESOLVE">resolve</link> time. An <code>effective</code> directive specified on the
 <code>Bundle-SymbolicName</code> or <code>Require-Bundle</code> headers must be
 ignored. An <code>effective</code> directive must not be present in a capability
 or requirement.</para>
         </listitem>
         <listitem>
            <para>The <link linkend="org.osgi.resource.Namespace.REQUIREMENT_CARDINALITY_DIRECTIVE">cardinality</link>
 directive must be ignored. A <code>cardinality</code> directive specified on the
 <code>Require-Bundle</code> header must be ignored. A <code>cardinality</code>
 directive must not be present in a requirement.</para>
         </listitem>
      </itemizedlist>
      <para>
 A non-fragment resource with the <link linkend="org.osgi.framework.namespace.IdentityNamespace.TYPE_BUNDLE">osgi.bundle</link> type <link linkend="org.osgi.framework.namespace.IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE">identity</link> provides exactly one<superscript>†</superscript> bundle capability (that is,
 the bundle can be required by another bundle). A fragment resource with the
 <link linkend="org.osgi.framework.namespace.IdentityNamespace.TYPE_FRAGMENT">osgi.fragment</link> type
 <link linkend="org.osgi.framework.namespace.IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE">identity</link> must not declare
 a bundle capability. A resource requires zero or more bundle requirements
 (that is, required bundles).
 </para>
      <para>
 † A resource with no symbolic name must not provide a bundle
 capability.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section xreflabel="BUNDLE_NAMESPACE" role="field" xml:id="org.osgi.framework.namespace.BundleNamespace.BUNDLE_NAMESPACE">
         <title>public static final String BUNDLE_NAMESPACE = "osgi.wiring.bundle"</title>
         <para>
Namespace name for bundle capabilities and requirements.

 </para>
         <para>
 Also, the capability attribute used to specify the symbolic name of the
 bundle.</para>
      </section>
      <section xreflabel="CAPABILITY_FRAGMENT_ATTACHMENT_DIRECTIVE" role="field" xml:id="org.osgi.framework.namespace.BundleNamespace.CAPABILITY_FRAGMENT_ATTACHMENT_DIRECTIVE">
         <title>public static final String CAPABILITY_FRAGMENT_ATTACHMENT_DIRECTIVE = "fragment-attachment"</title>
         <para>
The capability directive identifying if and when a fragment may attach to
 a host bundle.

 </para>
         <para>
 This directive should be examined using the <link linkend="org.osgi.framework.namespace.HostNamespace">host</link>
 namespace.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.namespace.HostNamespace.CAPABILITY_FRAGMENT_ATTACHMENT_DIRECTIVE">HostNamespace.CAPABILITY_FRAGMENT_ATTACHMENT_DIRECTIVE</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="CAPABILITY_SINGLETON_DIRECTIVE" role="field" xml:id="org.osgi.framework.namespace.BundleNamespace.CAPABILITY_SINGLETON_DIRECTIVE">
         <title>public static final String CAPABILITY_SINGLETON_DIRECTIVE = "singleton"</title>
         <para>
The capability directive identifying if the resource is a singleton. A
 <code>String</code> value of "<code>true</code>" indicates the resource
 is a singleton; any other value or <code>null</code> indicates the resource is
 not a singleton.

 </para>
         <para>
 This directive should be examined using the <link linkend="org.osgi.framework.namespace.IdentityNamespace">identity</link> namespace.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.namespace.IdentityNamespace.CAPABILITY_SINGLETON_DIRECTIVE">IdentityNamespace.CAPABILITY_SINGLETON_DIRECTIVE</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="REQUIREMENT_EXTENSION_DIRECTIVE" role="field" xml:id="org.osgi.framework.namespace.BundleNamespace.REQUIREMENT_EXTENSION_DIRECTIVE">
         <title>public static final String REQUIREMENT_EXTENSION_DIRECTIVE = "extension"</title>
         <para>
The requirement directive used to specify the type of the extension
 fragment.

 </para>
         <para>
 This directive should be examined using the <link linkend="org.osgi.framework.namespace.HostNamespace">host</link>
 namespace.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.namespace.HostNamespace.REQUIREMENT_EXTENSION_DIRECTIVE">HostNamespace.REQUIREMENT_EXTENSION_DIRECTIVE</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="REQUIREMENT_VISIBILITY_DIRECTIVE" role="field" xml:id="org.osgi.framework.namespace.BundleNamespace.REQUIREMENT_VISIBILITY_DIRECTIVE">
         <title>public static final String REQUIREMENT_VISIBILITY_DIRECTIVE = "visibility"</title>
         <para>
The requirement directive used to specify the visibility type for a
 requirement. The default value is <link linkend="org.osgi.framework.namespace.BundleNamespace.VISIBILITY_PRIVATE">private</link>.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.namespace.BundleNamespace.VISIBILITY_PRIVATE">private</link>, <link linkend="org.osgi.framework.namespace.BundleNamespace.VISIBILITY_REEXPORT">reexport</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="VISIBILITY_PRIVATE" role="field" xml:id="org.osgi.framework.namespace.BundleNamespace.VISIBILITY_PRIVATE">
         <title>public static final String VISIBILITY_PRIVATE = "private"</title>
         <para>
The directive value identifying a private
 <link linkend="org.osgi.framework.namespace.BundleNamespace.REQUIREMENT_VISIBILITY_DIRECTIVE">visibility</link> type. A private
 visibility type indicates that any <link linkend="org.osgi.framework.namespace.PackageNamespace">packages</link> that
 are exported by the required bundle are not made visible on the export
 signature of the requiring bundle. .
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.namespace.BundleNamespace.REQUIREMENT_VISIBILITY_DIRECTIVE">REQUIREMENT_VISIBILITY_DIRECTIVE</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="VISIBILITY_REEXPORT" role="field" xml:id="org.osgi.framework.namespace.BundleNamespace.VISIBILITY_REEXPORT">
         <title>public static final String VISIBILITY_REEXPORT = "reexport"</title>
         <para>
The directive value identifying a reexport
 <link linkend="org.osgi.framework.namespace.BundleNamespace.REQUIREMENT_VISIBILITY_DIRECTIVE">visibility</link> type. A reexport
 visibility type indicates any <link linkend="org.osgi.framework.namespace.PackageNamespace">packages</link> that are
 exported by the required bundle are re-exported by the requiring bundle.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.namespace.BundleNamespace.REQUIREMENT_VISIBILITY_DIRECTIVE">REQUIREMENT_VISIBILITY_DIRECTIVE</link>
            </para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="ExecutionEnvironmentNamespace" role="class" xml:id="org.osgi.framework.namespace.ExecutionEnvironmentNamespace">
      <title>public final class ExecutionEnvironmentNamespace<?line-break?> extends Namespace</title>
      <para>
Execution Environment Capability and Requirement Namespace.

 </para>
      <para>
 This class defines the names for the attributes and directives for this
 namespace. All unspecified capability attributes are of type <code>String</code>
 and are used as arbitrary matching attributes for the capability. The values
 associated with the specified directive and attribute keys are of type
 <code>String</code>, unless otherwise indicated.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section xreflabel="CAPABILITY_VERSION_ATTRIBUTE" role="field" xml:id="org.osgi.framework.namespace.ExecutionEnvironmentNamespace.CAPABILITY_VERSION_ATTRIBUTE">
         <title>public static final String CAPABILITY_VERSION_ATTRIBUTE = "version"</title>
         <para>
The capability attribute contains the versions of the execution
 environment. The value of this attribute must be of type
 <code>List&lt;Version&gt;</code>.
   </para>
      </section>
      <section xreflabel="EXECUTION_ENVIRONMENT_NAMESPACE" role="field" xml:id="org.osgi.framework.namespace.ExecutionEnvironmentNamespace.EXECUTION_ENVIRONMENT_NAMESPACE">
         <title>public static final String EXECUTION_ENVIRONMENT_NAMESPACE = "osgi.ee"</title>
         <para>
Namespace name for execution environment capabilities and requirements.

 </para>
         <para>
 Also, the capability attribute used to specify the name of the execution
 environment.</para>
      </section>
   </section>
   <section xreflabel="HostNamespace" role="class" xml:id="org.osgi.framework.namespace.HostNamespace">
      <title>public final class HostNamespace<?line-break?> extends AbstractWiringNamespace</title>
      <para>
Host Capability and Requirement Namespace.

 </para>
      <para>
 This class defines the names for the attributes and directives for this
 namespace. All unspecified capability attributes are of type <code>String</code>
 and are used as arbitrary matching attributes for the capability. The values
 associated with the specified directive and attribute keys are of type
 <code>String</code>, unless otherwise indicated.

 </para>
      <para>
 Unless otherwise noted, all directives specified on the
 <code>Bundle-SymbolicName</code> header are visible in the capability and all
 directives specified on the <code>Fragment-Host</code> header are visible in the
 requirement.

 </para>
      <itemizedlist>
         <listitem>
            <para>The <link linkend="org.osgi.resource.Namespace.CAPABILITY_USES_DIRECTIVE">uses</link> directive must be
 ignored. A <code>uses</code> directive specified on the
 <code>Bundle-SymbolicName</code> header must be ignored. A <code>uses</code> directive
 must not be present in the capability.</para>
         </listitem>
         <listitem>
            <para>The <link linkend="org.osgi.resource.Namespace.CAPABILITY_EFFECTIVE_DIRECTIVE">effective</link>
               <link linkend="org.osgi.resource.Namespace.REQUIREMENT_EFFECTIVE_DIRECTIVE">directives</link> must be ignored.
 This namespace is only effective at <link linkend="org.osgi.resource.Namespace.EFFECTIVE_RESOLVE">resolve</link> time. An <code>effective</code> directive specified on the
 <code>Bundle-SymbolicName</code> or <code>Fragment-Host</code> headers must be ignored.
 An <code>effective</code> directive must not be present in a capability or
 requirement.</para>
         </listitem>
         <listitem>
            <para>The <link linkend="org.osgi.resource.Namespace.REQUIREMENT_CARDINALITY_DIRECTIVE">cardinality</link>
 directive has limited applicability to this namespace. A <code>cardinality</code>
 directive specified on the <code>Fragment-Host</code> header must be ignored. All
 requirements must have the <code>cardinality</code> directive set to
 <link linkend="org.osgi.resource.Namespace.CARDINALITY_MULTIPLE">multiple</link>.</para>
         </listitem>
      </itemizedlist>
      <para>
 A non-fragment resource with the <link linkend="org.osgi.framework.namespace.IdentityNamespace.TYPE_BUNDLE">osgi.bundle</link> type <link linkend="org.osgi.framework.namespace.IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE">identity</link> provides zero or one<superscript>†</superscript> host capabilities. A
 fragment resource with the <link linkend="org.osgi.framework.namespace.IdentityNamespace.TYPE_FRAGMENT">osgi.fragment</link> type <link linkend="org.osgi.framework.namespace.IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE">identity</link> must not declare a host capability and must declare exactly one
 host requirement.
 </para>
      <para>
 † A resource with no bundle symbolic name must not provide a host
 capability.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section xreflabel="CAPABILITY_FRAGMENT_ATTACHMENT_DIRECTIVE" role="field" xml:id="org.osgi.framework.namespace.HostNamespace.CAPABILITY_FRAGMENT_ATTACHMENT_DIRECTIVE">
         <title>public static final String CAPABILITY_FRAGMENT_ATTACHMENT_DIRECTIVE = "fragment-attachment"</title>
         <para>
The capability directive identifying if and when a fragment may attach to
 a host bundle. The default value is <link linkend="org.osgi.framework.namespace.HostNamespace.FRAGMENT_ATTACHMENT_ALWAYS">always</link>.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.namespace.HostNamespace.FRAGMENT_ATTACHMENT_ALWAYS">FRAGMENT_ATTACHMENT_ALWAYS</link>, <link linkend="org.osgi.framework.namespace.HostNamespace.FRAGMENT_ATTACHMENT_RESOLVETIME">FRAGMENT_ATTACHMENT_RESOLVETIME</link>, <link linkend="org.osgi.framework.namespace.HostNamespace.FRAGMENT_ATTACHMENT_NEVER">FRAGMENT_ATTACHMENT_NEVER</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="CAPABILITY_SINGLETON_DIRECTIVE" role="field" xml:id="org.osgi.framework.namespace.HostNamespace.CAPABILITY_SINGLETON_DIRECTIVE">
         <title>public static final String CAPABILITY_SINGLETON_DIRECTIVE = "singleton"</title>
         <para>
The capability directive identifying if the resource is a singleton. A
 <code>String</code> value of "<code>true</code>" indicates the resource
 is a singleton; any other value or <code>null</code> indicates the resource is
 not a singleton.

 </para>
         <para>
 This directive should be examined using the <link linkend="org.osgi.framework.namespace.IdentityNamespace">identity</link> namespace.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.namespace.IdentityNamespace.CAPABILITY_SINGLETON_DIRECTIVE">IdentityNamespace.CAPABILITY_SINGLETON_DIRECTIVE</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="EXTENSION_BOOTCLASSPATH" role="field" xml:id="org.osgi.framework.namespace.HostNamespace.EXTENSION_BOOTCLASSPATH">
         <title>public static final String EXTENSION_BOOTCLASSPATH = "bootclasspath"</title>
         <para>
The directive value indicating that the extension fragment is to be
 loaded by the boot class loader.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.namespace.HostNamespace.REQUIREMENT_EXTENSION_DIRECTIVE">REQUIREMENT_EXTENSION_DIRECTIVE</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Deprecated</title>
            <para>As of 1.2.</para>
         </formalpara>
      </section>
      <section xreflabel="EXTENSION_FRAMEWORK" role="field" xml:id="org.osgi.framework.namespace.HostNamespace.EXTENSION_FRAMEWORK">
         <title>public static final String EXTENSION_FRAMEWORK = "framework"</title>
         <para>
The directive value indicating that the extension fragment is to be
 loaded by the framework's class loader.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.namespace.HostNamespace.REQUIREMENT_EXTENSION_DIRECTIVE">REQUIREMENT_EXTENSION_DIRECTIVE</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="FRAGMENT_ATTACHMENT_ALWAYS" role="field" xml:id="org.osgi.framework.namespace.HostNamespace.FRAGMENT_ATTACHMENT_ALWAYS">
         <title>public static final String FRAGMENT_ATTACHMENT_ALWAYS = "always"</title>
         <para>
The directive value indicating that fragments are allowed to attach to
 the host bundle at any time (while the host is resolved or during the
 process of resolving the host bundle).
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.namespace.HostNamespace.CAPABILITY_FRAGMENT_ATTACHMENT_DIRECTIVE">CAPABILITY_FRAGMENT_ATTACHMENT_DIRECTIVE</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="FRAGMENT_ATTACHMENT_NEVER" role="field" xml:id="org.osgi.framework.namespace.HostNamespace.FRAGMENT_ATTACHMENT_NEVER">
         <title>public static final String FRAGMENT_ATTACHMENT_NEVER = "never"</title>
         <para>
The directive value indicating that no fragments are allowed to attach to
 the host bundle at any time.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.namespace.HostNamespace.CAPABILITY_FRAGMENT_ATTACHMENT_DIRECTIVE">CAPABILITY_FRAGMENT_ATTACHMENT_DIRECTIVE</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="FRAGMENT_ATTACHMENT_RESOLVETIME" role="field" xml:id="org.osgi.framework.namespace.HostNamespace.FRAGMENT_ATTACHMENT_RESOLVETIME">
         <title>public static final String FRAGMENT_ATTACHMENT_RESOLVETIME = "resolve-time"</title>
         <para>
The directive value indicating that fragments are allowed to attach to
 the host bundle only during the process of resolving the host bundle.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.namespace.HostNamespace.CAPABILITY_FRAGMENT_ATTACHMENT_DIRECTIVE">CAPABILITY_FRAGMENT_ATTACHMENT_DIRECTIVE</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="HOST_NAMESPACE" role="field" xml:id="org.osgi.framework.namespace.HostNamespace.HOST_NAMESPACE">
         <title>public static final String HOST_NAMESPACE = "osgi.wiring.host"</title>
         <para>
Namespace name for host capabilities and requirements.

 </para>
         <para>
 Also, the capability attribute used to specify the symbolic name of the
 host.</para>
      </section>
      <section xreflabel="REQUIREMENT_EXTENSION_DIRECTIVE" role="field" xml:id="org.osgi.framework.namespace.HostNamespace.REQUIREMENT_EXTENSION_DIRECTIVE">
         <title>public static final String REQUIREMENT_EXTENSION_DIRECTIVE = "extension"</title>
         <para>
The requirement directive used to specify the type of the extension
 fragment. The default value is <link linkend="org.osgi.framework.namespace.HostNamespace.EXTENSION_FRAMEWORK">framework</link>.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.namespace.HostNamespace.EXTENSION_FRAMEWORK">EXTENSION_FRAMEWORK</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="REQUIREMENT_VISIBILITY_DIRECTIVE" role="field" xml:id="org.osgi.framework.namespace.HostNamespace.REQUIREMENT_VISIBILITY_DIRECTIVE">
         <title>public static final String REQUIREMENT_VISIBILITY_DIRECTIVE = "visibility"</title>
         <para>
The requirement directive used to specify the visibility type for a
 requirement.

 </para>
         <para>
 This directive should be examined using the <link linkend="org.osgi.framework.namespace.BundleNamespace">bundle</link> namespace.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.namespace.BundleNamespace.REQUIREMENT_VISIBILITY_DIRECTIVE">BundleNamespace.REQUIREMENT_VISIBILITY_DIRECTIVE</link>
            </para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="IdentityNamespace" role="class" xml:id="org.osgi.framework.namespace.IdentityNamespace">
      <title>public final class IdentityNamespace<?line-break?> extends Namespace</title>
      <para>
Identity Capability and Requirement Namespace.

 </para>
      <para>
 This class defines the names for the attributes and directives for this
 namespace. All unspecified capability attributes are of type <code>String</code>
 and are used as arbitrary matching attributes for the capability. The values
 associated with the specified directive and attribute keys are of type
 <code>String</code>, unless otherwise indicated.

 </para>
      <para>
 Each resource provides exactly one<superscript>†</superscript> identity capability that
 can be used to identify the resource.

 </para>
      <para>
 The bundle wiring for the bundle revision provides exactly
 one<superscript>†</superscript> identity capability.

 </para>
      <para>
 † A resource with no symbolic name must not provide an identity
 capability.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section xreflabel="CAPABILITY_COPYRIGHT_ATTRIBUTE" role="field" xml:id="org.osgi.framework.namespace.IdentityNamespace.CAPABILITY_COPYRIGHT_ATTRIBUTE">
         <title>public static final String CAPABILITY_COPYRIGHT_ATTRIBUTE = "copyright"</title>
         <para>
The capability attribute that contains a human readable copyright notice
 for the resource. See the <code>Bundle-Copyright</code> manifest header.
   </para>
      </section>
      <section xreflabel="CAPABILITY_DESCRIPTION_ATTRIBUTE" role="field" xml:id="org.osgi.framework.namespace.IdentityNamespace.CAPABILITY_DESCRIPTION_ATTRIBUTE">
         <title>public static final String CAPABILITY_DESCRIPTION_ATTRIBUTE = "description"</title>
         <para>
The capability attribute that contains a human readable description for
 the resource. See the <code>Bundle-Description</code> manifest header.
   </para>
      </section>
      <section xreflabel="CAPABILITY_DOCUMENTATION_ATTRIBUTE" role="field" xml:id="org.osgi.framework.namespace.IdentityNamespace.CAPABILITY_DOCUMENTATION_ATTRIBUTE">
         <title>public static final String CAPABILITY_DOCUMENTATION_ATTRIBUTE = "documentation"</title>
         <para>
The capability attribute that contains the URL to documentation for the
 resource. See the <code>Bundle-DocURL</code> manifest header.
   </para>
      </section>
      <section xreflabel="CAPABILITY_LICENSE_ATTRIBUTE" role="field" xml:id="org.osgi.framework.namespace.IdentityNamespace.CAPABILITY_LICENSE_ATTRIBUTE">
         <title>public static final String CAPABILITY_LICENSE_ATTRIBUTE = "license"</title>
         <para>
The capability attribute that contains the URL to the license for the
 resource. See the <code>name</code> portion of the <code>Bundle-License</code>
 manifest header.
   </para>
      </section>
      <section xreflabel="CAPABILITY_SINGLETON_DIRECTIVE" role="field" xml:id="org.osgi.framework.namespace.IdentityNamespace.CAPABILITY_SINGLETON_DIRECTIVE">
         <title>public static final String CAPABILITY_SINGLETON_DIRECTIVE = "singleton"</title>
         <para>
The capability directive identifying if the resource is a singleton. A
 <code>String</code> value of "true" indicates the resource is a
 singleton; any other value or <code>null</code> indicates the resource is not
 a singleton.
   </para>
      </section>
      <section xreflabel="CAPABILITY_TAGS_ATTRIBUTE" role="field" xml:id="org.osgi.framework.namespace.IdentityNamespace.CAPABILITY_TAGS_ATTRIBUTE">
         <title>public static final String CAPABILITY_TAGS_ATTRIBUTE = "tags"</title>
         <para>
The attribute value that contains tags for the resource. A tag is used to
 identify an aspect of the resource that is not otherwise expressed by the
 capabilities of the resource. The value of this attribute must be of type
 <code>List&lt;String&gt;</code>.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.2</para>
         </formalpara>
      </section>
      <section xreflabel="CAPABILITY_TYPE_ATTRIBUTE" role="field" xml:id="org.osgi.framework.namespace.IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE">
         <title>public static final String CAPABILITY_TYPE_ATTRIBUTE = "type"</title>
         <para>
The capability attribute identifying the resource type. If the resource
 has no type then the value <link linkend="org.osgi.framework.namespace.IdentityNamespace.TYPE_UNKNOWN">unknown</link> must be used for
 the attribute.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.namespace.IdentityNamespace.TYPE_BUNDLE">TYPE_BUNDLE</link>, <link linkend="org.osgi.framework.namespace.IdentityNamespace.TYPE_FRAGMENT">TYPE_FRAGMENT</link>, <link linkend="org.osgi.framework.namespace.IdentityNamespace.TYPE_UNKNOWN">TYPE_UNKNOWN</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="CAPABILITY_VERSION_ATTRIBUTE" role="field" xml:id="org.osgi.framework.namespace.IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE">
         <title>public static final String CAPABILITY_VERSION_ATTRIBUTE = "version"</title>
         <para>
The capability attribute identifying the <code>Version</code> of the resource
 if one is specified or <code>0.0.0</code> if not specified. The value of this
 attribute must be of type <code>Version</code>.
   </para>
      </section>
      <section xreflabel="CLASSIFIER_JAVADOC" role="field" xml:id="org.osgi.framework.namespace.IdentityNamespace.CLASSIFIER_JAVADOC">
         <title>public static final String CLASSIFIER_JAVADOC = "javadoc"</title>
         <para>
The attribute value identifying the resource
 <link linkend="org.osgi.framework.namespace.IdentityNamespace.REQUIREMENT_CLASSIFIER_DIRECTIVE">classifier</link> as an archive
 containing the javadoc in the same directory layout as the resource.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.namespace.IdentityNamespace.REQUIREMENT_CLASSIFIER_DIRECTIVE">REQUIREMENT_CLASSIFIER_DIRECTIVE</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="CLASSIFIER_SOURCES" role="field" xml:id="org.osgi.framework.namespace.IdentityNamespace.CLASSIFIER_SOURCES">
         <title>public static final String CLASSIFIER_SOURCES = "sources"</title>
         <para>
The attribute value identifying the resource
 <link linkend="org.osgi.framework.namespace.IdentityNamespace.REQUIREMENT_CLASSIFIER_DIRECTIVE">classifier</link> as an archive
 containing the source code in the same directory layout as the resource.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.namespace.IdentityNamespace.REQUIREMENT_CLASSIFIER_DIRECTIVE">REQUIREMENT_CLASSIFIER_DIRECTIVE</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="IDENTITY_NAMESPACE" role="field" xml:id="org.osgi.framework.namespace.IdentityNamespace.IDENTITY_NAMESPACE">
         <title>public static final String IDENTITY_NAMESPACE = "osgi.identity"</title>
         <para>
Namespace name for identity capabilities and requirements.

 </para>
         <para>
 Also, the capability attribute used to specify the symbolic name of the
 resource.</para>
      </section>
      <section xreflabel="REQUIREMENT_CLASSIFIER_DIRECTIVE" role="field" xml:id="org.osgi.framework.namespace.IdentityNamespace.REQUIREMENT_CLASSIFIER_DIRECTIVE">
         <title>public static final String REQUIREMENT_CLASSIFIER_DIRECTIVE = "classifier"</title>
         <para>
The requirement directive that classifies the relationship with another
 resource.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.namespace.IdentityNamespace.CLASSIFIER_SOURCES">CLASSIFIER_SOURCES</link>, <link linkend="org.osgi.framework.namespace.IdentityNamespace.CLASSIFIER_JAVADOC">CLASSIFIER_JAVADOC</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="TYPE_BUNDLE" role="field" xml:id="org.osgi.framework.namespace.IdentityNamespace.TYPE_BUNDLE">
         <title>public static final String TYPE_BUNDLE = "osgi.bundle"</title>
         <para>
The attribute value identifying the resource
 <link linkend="org.osgi.framework.namespace.IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE">type</link> as an OSGi bundle.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.namespace.IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE">CAPABILITY_TYPE_ATTRIBUTE</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="TYPE_FRAGMENT" role="field" xml:id="org.osgi.framework.namespace.IdentityNamespace.TYPE_FRAGMENT">
         <title>public static final String TYPE_FRAGMENT = "osgi.fragment"</title>
         <para>
The attribute value identifying the resource
 <link linkend="org.osgi.framework.namespace.IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE">type</link> as an OSGi fragment.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.namespace.IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE">CAPABILITY_TYPE_ATTRIBUTE</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="TYPE_UNKNOWN" role="field" xml:id="org.osgi.framework.namespace.IdentityNamespace.TYPE_UNKNOWN">
         <title>public static final String TYPE_UNKNOWN = "unknown"</title>
         <para>
The attribute value identifying the resource
 <link linkend="org.osgi.framework.namespace.IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE">type</link> as unknown.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.namespace.IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE">CAPABILITY_TYPE_ATTRIBUTE</link>
            </para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="NativeNamespace" role="class" xml:id="org.osgi.framework.namespace.NativeNamespace">
      <title>public final class NativeNamespace<?line-break?> extends Namespace</title>
      <para>
Native Capability and Requirement Namespace.

 </para>
      <para>
 This class defines the names for the attributes and directives for this
 namespace. All unspecified capability attributes are of type <code>String</code>
 and are used as arbitrary matching attributes for the capability. The values
 associated with the specified directive and attribute keys are of type
 <code>String</code>, unless otherwise indicated.</para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.1</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section xreflabel="CAPABILITY_LANGUAGE_ATTRIBUTE" role="field" xml:id="org.osgi.framework.namespace.NativeNamespace.CAPABILITY_LANGUAGE_ATTRIBUTE">
         <title>public static final String CAPABILITY_LANGUAGE_ATTRIBUTE = "osgi.native.language"</title>
         <para>
The capability attribute contains the
 <link linkend="org.osgi.framework.Constants.FRAMEWORK_LANGUAGE">org.osgi.framework.language</link>
 launching property value. The value of this attribute must be of type
 <code>String</code>.
   </para>
      </section>
      <section xreflabel="CAPABILITY_OSNAME_ATTRIBUTE" role="field" xml:id="org.osgi.framework.namespace.NativeNamespace.CAPABILITY_OSNAME_ATTRIBUTE">
         <title>public static final String CAPABILITY_OSNAME_ATTRIBUTE = "osgi.native.osname"</title>
         <para>
The capability attribute contains alias values of the
 <link linkend="org.osgi.framework.Constants.FRAMEWORK_OS_NAME">org.osgi.framework.os.name</link> launching
 property value according to the
 <link xlink:href="https://docs.osgi.org/reference/">OSGi
 Specification References</link>. The value of this attribute must be of type
 <code>List&lt;String&gt;</code>.
   </para>
      </section>
      <section xreflabel="CAPABILITY_OSVERSION_ATTRIBUTE" role="field" xml:id="org.osgi.framework.namespace.NativeNamespace.CAPABILITY_OSVERSION_ATTRIBUTE">
         <title>public static final String CAPABILITY_OSVERSION_ATTRIBUTE = "osgi.native.osversion"</title>
         <para>
The capability attribute contains a <code>Version</code> parsed from the
 <link linkend="org.osgi.framework.Constants.FRAMEWORK_OS_VERSION">org.osgi.framework.os.version</link>
 launching property value. The value of this attribute must be of type
 <code>Version</code>.
   </para>
      </section>
      <section xreflabel="CAPABILITY_PROCESSOR_ATTRIBUTE" role="field" xml:id="org.osgi.framework.namespace.NativeNamespace.CAPABILITY_PROCESSOR_ATTRIBUTE">
         <title>public static final String CAPABILITY_PROCESSOR_ATTRIBUTE = "osgi.native.processor"</title>
         <para>
The capability attribute contains alias values of the
 <link linkend="org.osgi.framework.Constants.FRAMEWORK_PROCESSOR">org.osgi.framework.processor</link>
 launching property value according to the
 <link xlink:href="https://docs.osgi.org/reference/">OSGi
 Specification References</link>. The value of this attribute must be of type
 <code>List&lt;String&gt;</code>.
   </para>
      </section>
      <section xreflabel="NATIVE_NAMESPACE" role="field" xml:id="org.osgi.framework.namespace.NativeNamespace.NATIVE_NAMESPACE">
         <title>public static final String NATIVE_NAMESPACE = "osgi.native"</title>
         <para>
Namespace name for native capabilities and requirements.
   </para>
      </section>
   </section>
   <section xreflabel="PackageNamespace" role="class" xml:id="org.osgi.framework.namespace.PackageNamespace">
      <title>public final class PackageNamespace<?line-break?> extends AbstractWiringNamespace</title>
      <para>
Package Capability and Requirement Namespace.

 </para>
      <para>
 A resource provides zero or more package capabilities (this is, exported
 packages) and requires zero or more package requirements (that is, imported
 packages).

 </para>
      <para>
 This class defines the names for the attributes and directives for this
 namespace. All unspecified capability attributes are of type <code>String</code>
 and are used as arbitrary matching attributes for the capability. The values
 associated with the specified directive and attribute keys are of type
 <code>String</code>, unless otherwise indicated.

 </para>
      <para>
 Unless otherwise noted, all directives specified on the
 <code>Export-Package</code> header are visible in the capability and all
 directives specified on the <code>Import-Package</code> and
 <code>DynamicImport-Package</code> headers are visible in the requirement.

 </para>
      <itemizedlist>
         <listitem>
            <para>The <link linkend="org.osgi.resource.Namespace.CAPABILITY_EFFECTIVE_DIRECTIVE">effective</link>
               <link linkend="org.osgi.resource.Namespace.REQUIREMENT_EFFECTIVE_DIRECTIVE">directives</link> must be ignored.
 This namespace is only effective at <link linkend="org.osgi.resource.Namespace.EFFECTIVE_RESOLVE">resolve</link> time. An <code>effective</code> directive specified on the
 <code>Export-Package</code>, <code>Import-Package</code> or
 <code>DynamicImport-Package</code> headers must be ignored. An <code>effective</code>
 directive must not be present in a capability or requirement.</para>
         </listitem>
         <listitem>
            <para>The <link linkend="org.osgi.resource.Namespace.REQUIREMENT_CARDINALITY_DIRECTIVE">cardinality</link>
 directive has limited applicability to this namespace. A <code>cardinality</code>
 directive specified on the <code>Import-Package</code> or
 <code>DynamicImport-Package</code> headers must be ignored. Only requirements with
 <link linkend="org.osgi.resource.Namespace.REQUIREMENT_RESOLUTION_DIRECTIVE">resolution</link> set to
 <link linkend="org.osgi.framework.namespace.PackageNamespace.RESOLUTION_DYNAMIC">dynamic</link> and the package name contains a wildcard
 must have the <code>cardinality</code> directive set to
 <link linkend="org.osgi.resource.Namespace.CARDINALITY_MULTIPLE">multiple</link>. Otherwise, a
 <code>cardinality</code> directive must not be present in a requirement.</para>
         </listitem>
      </itemizedlist>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section xreflabel="CAPABILITY_BUNDLE_SYMBOLICNAME_ATTRIBUTE" role="field" xml:id="org.osgi.framework.namespace.PackageNamespace.CAPABILITY_BUNDLE_SYMBOLICNAME_ATTRIBUTE">
         <title>public static final String CAPABILITY_BUNDLE_SYMBOLICNAME_ATTRIBUTE = "bundle-symbolic-name"</title>
         <para>
The capability attribute contains the symbolic name of the resource
 providing the package.
   </para>
      </section>
      <section xreflabel="CAPABILITY_EXCLUDE_DIRECTIVE" role="field" xml:id="org.osgi.framework.namespace.PackageNamespace.CAPABILITY_EXCLUDE_DIRECTIVE">
         <title>public static final String CAPABILITY_EXCLUDE_DIRECTIVE = "exclude"</title>
         <para>
The capability directive used to specify the comma separated list of
 classes which must not be allowed to be exported.
   </para>
      </section>
      <section xreflabel="CAPABILITY_INCLUDE_DIRECTIVE" role="field" xml:id="org.osgi.framework.namespace.PackageNamespace.CAPABILITY_INCLUDE_DIRECTIVE">
         <title>public static final String CAPABILITY_INCLUDE_DIRECTIVE = "include"</title>
         <para>
The capability directive used to specify the comma separated list of
 classes which must be allowed to be exported.
   </para>
      </section>
      <section xreflabel="CAPABILITY_VERSION_ATTRIBUTE" role="field" xml:id="org.osgi.framework.namespace.PackageNamespace.CAPABILITY_VERSION_ATTRIBUTE">
         <title>public static final String CAPABILITY_VERSION_ATTRIBUTE = "version"</title>
         <para>
The capability attribute contains the <code>Version</code> of the package if
 one is specified or <code>0.0.0</code> if not specified. The value of this
 attribute must be of type <code>Version</code>.
   </para>
      </section>
      <section xreflabel="PACKAGE_NAMESPACE" role="field" xml:id="org.osgi.framework.namespace.PackageNamespace.PACKAGE_NAMESPACE">
         <title>public static final String PACKAGE_NAMESPACE = "osgi.wiring.package"</title>
         <para>
Namespace name for package capabilities and requirements.

 </para>
         <para>
 Also, the capability attribute used to specify the name of the package.</para>
      </section>
      <section xreflabel="RESOLUTION_DYNAMIC" role="field" xml:id="org.osgi.framework.namespace.PackageNamespace.RESOLUTION_DYNAMIC">
         <title>public static final String RESOLUTION_DYNAMIC = "dynamic"</title>
         <para>
The directive value identifying a dynamic requirement resolution type. A
 dynamic resolution type indicates that the requirement is resolved
 dynamically at runtime (such as a dynamically imported package) and the
 resource will be resolved without the requirement being resolved.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.resource.Namespace.REQUIREMENT_RESOLUTION_DIRECTIVE">Namespace.REQUIREMENT_RESOLUTION_DIRECTIVE</link>
            </para>
         </formalpara>
      </section>
   </section>
</section>

  <section xreflabel="org.osgi.annotation.versioning" version="5" role="package" xml:id="org.osgi.annotation.versioning" xml:base="010/../../../generated/javadoc/docbook/org.osgi.annotation.versioning.xml">
   <title>org.osgi.annotation.versioning</title>
   <info>
      <releaseinfo xml:id="org.osgi.annotation.versioning-version">Version 1.1</releaseinfo>
      <edition xml:id="org.osgi.annotation.versioning-version.number">1.1</edition>
   </info>
   <para>
OSGi Versioning Annotations Package Version 1.1.
 </para>
   <para>
 This package is not used at runtime.</para>
   <formalpara role="parameter">
      <title>See Also</title>
      <para>
         <link xlink:href="https://docs.osgi.org/whitepaper/semantic-versioning/">
      Semantic Versioning</link>
      </para>
   </formalpara>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.annotation.versioning.ConsumerType">
                  <code>ConsumerType</code>
               </link> -
A type implemented by, or extended by, the Consumer Role.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.annotation.versioning.ProviderType">
                  <code>ProviderType</code>
               </link> -
A type implemented by, or extended by, the Provider Role.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.annotation.versioning.Version">
                  <code>Version</code>
               </link> -
Specify the version of a package.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section xreflabel="ConsumerType" role="class" xml:id="org.osgi.annotation.versioning.ConsumerType">
      <title>@ConsumerType</title>
      <para>
A type implemented by, or extended by, the Consumer Role.
 </para>
      <para>
 A non-binary-compatible change to a consumer type or a binary-compatible
 change to a consumer type affecting an abstract method normally requires
 incrementing the major version of the type's package. This change will
 require all providers and all consumers to be updated to handle the change
 since consumers that implement or extend the consumer type and all providers
 must understand the change in the consumer type.
 </para>
      <para>
 A binary-compatible change to a consumer type not affecting an abstract
 method normally requires incrementing the minor version of the type's
 package. This change will require all providers to be updated to handle the
 change, but consumers will not require changes since no abstract methods
 requiring implementation by the consumer are affected.
 </para>
      <para>
 A type can be marked <link linkend="org.osgi.annotation.versioning.ConsumerType">ConsumerType</link> or <link linkend="org.osgi.annotation.versioning.ProviderType">ProviderType</link> but not
 both. A type is assumed to be <link linkend="org.osgi.annotation.versioning.ConsumerType">ConsumerType</link> if it is not marked either
 <link linkend="org.osgi.annotation.versioning.ConsumerType">ConsumerType</link> or <link linkend="org.osgi.annotation.versioning.ProviderType">ProviderType</link>.
 </para>
      <para>
 A package can be marked <link linkend="org.osgi.annotation.versioning.ProviderType">ProviderType</link>. In this case, all types in the
 package are considered to be a provider type regardless of whether they are
 marked <link linkend="org.osgi.annotation.versioning.ConsumerType">ConsumerType</link> or <link linkend="org.osgi.annotation.versioning.ProviderType">ProviderType</link>.
 </para>
      <para>
 This annotation is not retained at runtime. It is for use by tools to
 understand the semantic version of a package. When a bundle implements a
 consumer type from an imported package, then the bundle's import range for
 that package must require the exact major version and a minor version greater
 than or equal to the package's version.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link xlink:href="https://docs.osgi.org/whitepaper/semantic-versioning/">
      Semantic Versioning</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Retention</title>
         <para>
            <code>CLASS</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Target</title>
         <para>
            <code>TYPE</code>
         </para>
      </formalpara>
   </section>
   <section xreflabel="ProviderType" role="class" xml:id="org.osgi.annotation.versioning.ProviderType">
      <title>@ProviderType</title>
      <para>
A type implemented by, or extended by, the Provider Role.
 </para>
      <para>
 A non-binary-compatible change to a provider type normally requires
 incrementing the major version of the type's package. This change will
 require all providers and all consumers to be updated to handle the change.
 However, a non-binary-compatible change affecting a <code>protected</code> access
 member only requires incrementing the minor version of the type's package.
 This change will require all providers to be updated to handle the change,
 but consumers will not require changes since they only use, and do not
 extend, the provider type and thus could not access <code>protected</code> access
 members of the provider type.
 </para>
      <para>
 A binary-compatible change to a provider type normally requires incrementing
 the minor version of the type's package. This change will require all
 providers to be updated to handle the change, but consumers will not require
 changes since they only use, and do not implement or extend, the provider
 type.
 </para>
      <para>
 A type can be marked <link linkend="org.osgi.annotation.versioning.ConsumerType">ConsumerType</link> or <link linkend="org.osgi.annotation.versioning.ProviderType">ProviderType</link> but not
 both. A type is assumed to be <link linkend="org.osgi.annotation.versioning.ConsumerType">ConsumerType</link> if it is not marked either
 <link linkend="org.osgi.annotation.versioning.ConsumerType">ConsumerType</link> or <link linkend="org.osgi.annotation.versioning.ProviderType">ProviderType</link>.
 </para>
      <para>
 A package can be marked <link linkend="org.osgi.annotation.versioning.ProviderType">ProviderType</link>. In this case, all types in the
 package are considered to be a provider type regardless of whether they are
 marked <link linkend="org.osgi.annotation.versioning.ConsumerType">ConsumerType</link> or <link linkend="org.osgi.annotation.versioning.ProviderType">ProviderType</link>.
 </para>
      <para>
 This annotation is not retained at runtime. It is for use by tools to
 understand the semantic version of a package. When a bundle implements a
 provider type from an imported package, then the bundle's import range for
 that package must require the package's exact major and minor version.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link xlink:href="https://docs.osgi.org/whitepaper/semantic-versioning/">
      Semantic Versioning</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Retention</title>
         <para>
            <code>CLASS</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Target</title>
         <para>
            <code>TYPE</code>, <code>PACKAGE</code>
         </para>
      </formalpara>
   </section>
   <section xreflabel="Version" role="class" xml:id="org.osgi.annotation.versioning.Version">
      <title>@Version</title>
      <para>
Specify the version of a package.
 </para>
      <para>
 This annotation is not retained at runtime. It is for use by tools to
 generate bundle manifests or otherwise process the version of a package.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link xlink:href="https://docs.osgi.org/whitepaper/semantic-versioning/">
      Semantic Versioning</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Retention</title>
         <para>
            <code>CLASS</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Target</title>
         <para>
            <code>PACKAGE</code>
         </para>
      </formalpara>
      <section xreflabel="value" role="method" xml:id="org.osgi.annotation.versioning.Version.value--">
         <title>String value</title>
         <para role="description">
The version of the annotated package.

 </para>
         <para>
 The version must be a valid OSGi version string.</para>
      </section>
   </section>
</section>

  <section xreflabel="org.osgi.annotation.bundle" version="5" role="package" xml:id="org.osgi.annotation.bundle" xml:base="010/../../../generated/javadoc/docbook/org.osgi.annotation.bundle.xml">
   <title>org.osgi.annotation.bundle</title>
   <info>
      <releaseinfo xml:id="org.osgi.annotation.bundle-version">Version 1.1</releaseinfo>
      <edition xml:id="org.osgi.annotation.bundle-version.number">1.1</edition>
   </info>
   <para>
OSGi Bundle Annotations Package Version 1.1.
 </para>
   <para>
 This package is not used at runtime.</para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.annotation.bundle.Attribute">
                  <code>Attribute</code>
               </link> -
Mark an annotation element as an attribute.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.annotation.bundle.Capabilities">
                  <code>Capabilities</code>
               </link> -
Container annotation for repeated <link linkend="org.osgi.annotation.bundle.Capability">Capability</link> annotations.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.annotation.bundle.Capability">
                  <code>Capability</code>
               </link> -
Define a capability for a bundle.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.annotation.bundle.Directive">
                  <code>Directive</code>
               </link> -
Mark an annotation element as a directive.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.annotation.bundle.Export">
                  <code>Export</code>
               </link> -
Mark a package to be exported from its bundle.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.annotation.bundle.Export.Substitution">
                  <code>Export.Substitution</code>
               </link> -
Substitution policy for this package.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.annotation.bundle.Header">
                  <code>Header</code>
               </link> -
Define a manifest header for a bundle.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.annotation.bundle.Headers">
                  <code>Headers</code>
               </link> -
Container annotation for repeated <link linkend="org.osgi.annotation.bundle.Header">Header</link> annotations.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.annotation.bundle.Referenced">
                  <code>Referenced</code>
               </link> -
Mark types as referenced.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.annotation.bundle.Requirement">
                  <code>Requirement</code>
               </link> -
Define a requirement for a bundle.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.annotation.bundle.Requirement.Cardinality">
                  <code>Requirement.Cardinality</code>
               </link> -
Cardinality for this requirement.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.annotation.bundle.Requirement.Resolution">
                  <code>Requirement.Resolution</code>
               </link> -
Resolution for this requirement.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.annotation.bundle.Requirements">
                  <code>Requirements</code>
               </link> -
Container annotation for repeated <link linkend="org.osgi.annotation.bundle.Requirement">Requirement</link> annotations.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section xreflabel="Attribute" role="class" xml:id="org.osgi.annotation.bundle.Attribute">
      <title>@Attribute</title>
      <para>
Mark an annotation element as an attribute.
 </para>
      <para>
 This is used when applying <link linkend="org.osgi.annotation.bundle.Capability">Capability</link> or <link linkend="org.osgi.annotation.bundle.Requirement">Requirement</link> as a
 meta annotation to an annotation declaration. The value of the annotation
 element annotated with <code>Attribute</code> is used as the value of an attribute
 in the generated capability or requirement clause. For example:

 </para>
      <programlisting> @Capability(namespace = "my.namespace")
 public @interface MyCapability {
   @Attribute("attr")
   String value() default "";
 }

 @MyCapability("foo")
 public MyClass {}</programlisting>
      <para>

 The use of the <code>MyCapability</code> annotation, which is meta annotated with
 the <code>Capability</code> and <code>Attribute</code> annotations, will result in a
 capability in the namespace <code>my.namespace</code> with the attribute
 <code>attr=foo</code>.
 </para>
      <para>
 If the element annotated with <code>Attribute</code> is unspecified when applied,
 then the attribute must not be generated in the generated capability or
 requirement clause. For example:

 </para>
      <programlisting> @MyCapability
 public MyClass {}</programlisting>
      <para>

 will not have the <code>attr</code> attribute in the generated capability.
 </para>
      <para>
 This annotation is not retained at runtime. It is for use by tools to
 generate bundle manifests.</para>
      <formalpara role="parameter">
         <title>Retention</title>
         <para>
            <code>CLASS</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Target</title>
         <para>
            <code>METHOD</code>
         </para>
      </formalpara>
      <section xreflabel="value" role="method" xml:id="org.osgi.annotation.bundle.Attribute.value--">
         <title>String value default ""</title>
         <para role="description">
The name of the attribute.
 </para>
         <para>
 If not specified, the name of the annotated element is used as the name
 of the attribute.</para>
      </section>
   </section>
   <section xreflabel="Capabilities" role="class" xml:id="org.osgi.annotation.bundle.Capabilities">
      <title>@Capabilities</title>
      <para>
Container annotation for repeated <link linkend="org.osgi.annotation.bundle.Capability">Capability</link> annotations.
   </para>
      <formalpara role="parameter">
         <title>Retention</title>
         <para>
            <code>CLASS</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Target</title>
         <para>
            <code>TYPE</code>, <code>PACKAGE</code>
         </para>
      </formalpara>
      <section xreflabel="value" role="method" xml:id="org.osgi.annotation.bundle.Capabilities.value--">
         <title>Capability[] value</title>
         <para role="description">
Repeated <link linkend="org.osgi.annotation.bundle.Capability">Capability</link> annotations.
   </para>
      </section>
   </section>
   <section xreflabel="Capability" role="class" xml:id="org.osgi.annotation.bundle.Capability">
      <title>@Capability</title>
      <para>
Define a capability for a bundle.
 </para>
      <para>
 For example:

 </para>
      <programlisting> @Capability(namespace=ExtenderNamespace.EXTENDER_NAMESPACE,
             name="osgi.component", version="1.3.0")</programlisting>
      <para>
 This annotation is not retained at runtime. It is for use by tools to
 generate bundle manifests or otherwise process the type or package.
 </para>
      <para>
 This annotation can be used to annotate an annotation</para>
      <formalpara role="parameter">
         <title>Retention</title>
         <para>
            <code>CLASS</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Target</title>
         <para>
            <code>TYPE</code>, <code>PACKAGE</code>
         </para>
      </formalpara>
      <section xreflabel="namespace" role="method" xml:id="org.osgi.annotation.bundle.Capability.namespace--">
         <title>String namespace</title>
         <para role="description">
The namespace of this capability.
   </para>
      </section>
      <section xreflabel="name" role="method" xml:id="org.osgi.annotation.bundle.Capability.name--">
         <title>String name default ""</title>
         <para role="description">
The name of this capability within the namespace.
 </para>
         <para>
 If specified, adds an attribute with the name of the namespace and the
 value of the specified name to the capability clause.</para>
      </section>
      <section xreflabel="version" role="method" xml:id="org.osgi.annotation.bundle.Capability.version--">
         <title>String version default ""</title>
         <para role="description">
The version of this capability.
 </para>
         <para>
 If specified, adds an attribute with the name and type of
 <code>version:Version</code> and the value of the specified version to the
 capability clause.
 </para>
         <para>
 The specified version must be a valid OSGi version string.</para>
      </section>
      <section xreflabel="uses" role="method" xml:id="org.osgi.annotation.bundle.Capability.uses--">
         <title>Class&lt;?&gt;[] uses default {}</title>
         <para role="description">
A list of classes whose packages are inspected to calculate the
 <code>uses</code> directive for this capability.
 </para>
         <para>
 If not specified, the <code>uses</code> directive is omitted from the
 capability clause.</para>
      </section>
      <section xreflabel="effective" role="method" xml:id="org.osgi.annotation.bundle.Capability.effective--">
         <title>String effective default "resolve"</title>
         <para role="description">
The effective time of this capability.
 </para>
         <para>
 Specifies the time the capability is available. The OSGi framework
 resolver only considers capabilities without an effective directive or
 effective:=resolve. Capabilities with other values for the effective
 directive can be considered by an external agent.
 </para>
         <para>
 If not specified, the <code>effective</code> directive is omitted from the
 capability clause.</para>
      </section>
      <section xreflabel="attribute" role="method" xml:id="org.osgi.annotation.bundle.Capability.attribute--">
         <title>String[] attribute default {}</title>
         <para role="description">
A list of attribute or directive names and values.
 </para>
         <para>
 Each string should be specified in the form:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>"name=value"</code> for attributes.</para>
            </listitem>
            <listitem>
               <para>
                  <code>"name:type=value"</code> for typed attributes.</para>
            </listitem>
            <listitem>
               <para>
                  <code>"name:=value"</code> for directives.</para>
            </listitem>
         </itemizedlist>
         <para>
 These are added, separated by semicolons, to the capability clause.
   </para>
      </section>
   </section>
   <section xreflabel="Directive" role="class" xml:id="org.osgi.annotation.bundle.Directive">
      <title>@Directive</title>
      <para>
Mark an annotation element as a directive.
 </para>
      <para>
 This is used when applying <link linkend="org.osgi.annotation.bundle.Capability">Capability</link> or <link linkend="org.osgi.annotation.bundle.Requirement">Requirement</link> as a
 meta annotation to an annotation declaration. The value of the annotation
 element annotated with <code>Directive</code> is used as the value of a directive
 in the generated capability or requirement clause. For example:

 </para>
      <programlisting> @Capability(namespace = "my.namespace")
 public @interface MyCapability {
   @Directive("resource")
   String value() default "";
 }

 @MyCapability("foo")
 public MyClass {}</programlisting>
      <para>

 The use of the <code>MyCapability</code> annotation, which is meta annotated with
 the <code>Capability</code> and <code>Directive</code> annotations, will result in a
 capability in the namespace <code>my.namespace</code> with the directive
 <code>resource:=foo</code>.
 </para>
      <para>
 If the element annotated with <code>Directive</code> is unspecified when applied,
 then the directive must not be generated in the generated capability or
 requirement clause. For example:

 </para>
      <programlisting> @MyCapability
 public MyClass {}</programlisting>
      <para>

 will not have the <code>resource</code> directive in the generated capability.
 </para>
      <para>
 This annotation is not retained at runtime. It is for use by tools to
 generate bundle manifests.</para>
      <formalpara role="parameter">
         <title>Retention</title>
         <para>
            <code>CLASS</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Target</title>
         <para>
            <code>METHOD</code>
         </para>
      </formalpara>
      <section xreflabel="value" role="method" xml:id="org.osgi.annotation.bundle.Directive.value--">
         <title>String value default ""</title>
         <para role="description">
The name of the directive.
 </para>
         <para>
 If not specified, the name of the annotated element is used as the name
 of the directive.</para>
      </section>
   </section>
   <section xreflabel="Export" role="class" xml:id="org.osgi.annotation.bundle.Export">
      <title>@Export</title>
      <para>
Mark a package to be exported from its bundle.
 </para>
      <para>
 The package must also be annotation with the <link linkend="org.osgi.annotation.versioning.Version">Version</link> annotation to
 specify the export version of the package.
 </para>
      <para>
 This annotation is not retained at runtime. It is for use by tools to
 generate bundle manifests or otherwise process the package.</para>
      <formalpara role="parameter">
         <title>Retention</title>
         <para>
            <code>CLASS</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Target</title>
         <para>
            <code>PACKAGE</code>
         </para>
      </formalpara>
      <section xreflabel="uses" role="method" xml:id="org.osgi.annotation.bundle.Export.uses--">
         <title>String[] uses default {}</title>
         <para role="description">
A list of package names that are used by this package.
 </para>
         <para>
 If the <code>uses</code> directive must be omitted from the export package
 clause for this package, the empty value <code>{}</code> must
 be specified.
 </para>
         <para>
 If not specified, the <code>uses</code> directive for the export package
 clause is calculated by inspection of the classes in this package.</para>
      </section>
      <section xreflabel="attribute" role="method" xml:id="org.osgi.annotation.bundle.Export.attribute--">
         <title>String[] attribute default {}</title>
         <para role="description">
A list of attribute or directive names and values.
 </para>
         <para>
 Each string should be specified in the form:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>"name=value"</code> for attributes.</para>
            </listitem>
            <listitem>
               <para>
                  <code>"name:type=value"</code> for typed attributes.</para>
            </listitem>
            <listitem>
               <para>
                  <code>"name:=value"</code> for directives.</para>
            </listitem>
         </itemizedlist>
         <para>
 These are added, separated by semicolons, to the export package clause.
   </para>
      </section>
      <section xreflabel="substitution" role="method" xml:id="org.osgi.annotation.bundle.Export.substitution--">
         <title>Export.Substitution substitution default CALCULATED</title>
         <para role="description">
Specify the policy for substitutably importing this package.
 </para>
         <para>
 Bundles that collaborate require the same class loader for types used in
 the collaboration. If multiple bundles export packages with collaboration
 types then they will have to be placed in disjoint class spaces, making
 collaboration impossible. Collaboration is significantly improved when
 bundles are willing to import exported packages; these imports will allow
 a framework to substitute exports for imports.
 </para>
         <para>
 If not specified, the <link linkend="org.osgi.annotation.bundle.Export.Substitution.CALCULATED">Substitution.CALCULATED</link> substitution
 policy is used for this package.</para>
      </section>
   </section>
   <section xreflabel="Export.Substitution" role="class" xml:id="org.osgi.annotation.bundle.Export.Substitution">
      <title>enum Export.Substitution</title>
      <para>
Substitution policy for this package.
   </para>
      <section xreflabel="CONSUMER" role="field" xml:id="org.osgi.annotation.bundle.Export.Substitution.CONSUMER">
         <title>CONSUMER</title>
         <para>
Use a consumer type version range for the import package clause when
 substitutably importing a package.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.annotation.versioning.ConsumerType">ConsumerType</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="PROVIDER" role="field" xml:id="org.osgi.annotation.bundle.Export.Substitution.PROVIDER">
         <title>PROVIDER</title>
         <para>
Use a provider type version range for the import package clause when
 substitutably importing a package.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.annotation.versioning.ProviderType">ProviderType</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="NOIMPORT" role="field" xml:id="org.osgi.annotation.bundle.Export.Substitution.NOIMPORT">
         <title>NOIMPORT</title>
         <para>
The package must not be substitutably imported.
   </para>
      </section>
      <section xreflabel="CALCULATED" role="field" xml:id="org.osgi.annotation.bundle.Export.Substitution.CALCULATED">
         <title>CALCULATED</title>
         <para>
The policy value is calculated by inspection of the classes in the
 package.
   </para>
      </section>
      <section xreflabel="valueOf(String)" role="method" xml:id="org.osgi.annotation.bundle.Export.Substitution.valueOf-String-">
         <title>public static Export.Substitution valueOf(String name)</title>
         <para/>
      </section>
      <section xreflabel="values()" role="method" xml:id="org.osgi.annotation.bundle.Export.Substitution.values--">
         <title>public static Export.Substitution[] values()</title>
         <para/>
      </section>
   </section>
   <section xreflabel="Header" role="class" xml:id="org.osgi.annotation.bundle.Header">
      <title>@Header</title>
      <para>
Define a manifest header for a bundle.
 </para>
      <para>
 For example:

 </para>
      <programlisting> @Header(name=Constants.BUNDLE_CATEGORY, value="osgi")</programlisting>
      <para>
 This annotation is not retained at runtime. It is for use by tools to
 generate bundle manifests.</para>
      <formalpara role="parameter">
         <title>Retention</title>
         <para>
            <code>CLASS</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Target</title>
         <para>
            <code>TYPE</code>, <code>PACKAGE</code>
         </para>
      </formalpara>
      <section xreflabel="name" role="method" xml:id="org.osgi.annotation.bundle.Header.name--">
         <title>String name</title>
         <para role="description">
The name of this header.
   </para>
      </section>
      <section xreflabel="value" role="method" xml:id="org.osgi.annotation.bundle.Header.value--">
         <title>String value</title>
         <para role="description">
The value of this header.
   </para>
      </section>
   </section>
   <section xreflabel="Headers" role="class" xml:id="org.osgi.annotation.bundle.Headers">
      <title>@Headers</title>
      <para>
Container annotation for repeated <link linkend="org.osgi.annotation.bundle.Header">Header</link> annotations.
   </para>
      <formalpara role="parameter">
         <title>Retention</title>
         <para>
            <code>CLASS</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Target</title>
         <para>
            <code>TYPE</code>, <code>PACKAGE</code>
         </para>
      </formalpara>
      <section xreflabel="value" role="method" xml:id="org.osgi.annotation.bundle.Headers.value--">
         <title>Header[] value</title>
         <para role="description">
Repeated <link linkend="org.osgi.annotation.bundle.Header">Header</link> annotations.
   </para>
      </section>
   </section>
   <section xreflabel="Referenced" role="class" xml:id="org.osgi.annotation.bundle.Referenced">
      <title>@Referenced</title>
      <para>
Mark types as referenced.
 </para>
      <para>
 A reference can cause the package of a specified type to be imported if the
 bundle does not contain the package.
 </para>
      <para>
 This annotation is not retained at runtime. It is for use by tools to
 generate bundle manifests.</para>
      <formalpara role="parameter">
         <title>Retention</title>
         <para>
            <code>CLASS</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Target</title>
         <para>
            <code>TYPE</code>, <code>PACKAGE</code>
         </para>
      </formalpara>
      <section xreflabel="value" role="method" xml:id="org.osgi.annotation.bundle.Referenced.value--">
         <title>Class&lt;?&gt;[] value</title>
         <para role="description">
A list of referenced classes.
 </para>
         <para>
 Specifying a class in this annotation must be treated by tools as if the
 annotated type has a code reference to the class which may result in an
 import of the package of the class if the bundle does not contain that
 package.</para>
      </section>
   </section>
   <section xreflabel="Requirement" role="class" xml:id="org.osgi.annotation.bundle.Requirement">
      <title>@Requirement</title>
      <para>
Define a requirement for a bundle.
 </para>
      <para>
 For example:

 </para>
      <programlisting> @Requirement(namespace=ExtenderNamespace.EXTENDER_NAMESPACE,
              name="osgi.component", version="1.3.0")</programlisting>
      <para>
 This annotation is not retained at runtime. It is for use by tools to
 generate bundle manifests or otherwise process the a package.
 </para>
      <para>
 This annotation can be used to annotate an annotation.</para>
      <formalpara role="parameter">
         <title>Retention</title>
         <para>
            <code>CLASS</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Target</title>
         <para>
            <code>TYPE</code>, <code>PACKAGE</code>
         </para>
      </formalpara>
      <section xreflabel="namespace" role="method" xml:id="org.osgi.annotation.bundle.Requirement.namespace--">
         <title>String namespace</title>
         <para role="description">
The namespace of this requirement.
   </para>
      </section>
      <section xreflabel="name" role="method" xml:id="org.osgi.annotation.bundle.Requirement.name--">
         <title>String name default ""</title>
         <para role="description">
The name of this requirement within the namespace.
 </para>
         <para>
 If specified, adds an expression, using the <code>&amp;</code> operator with any
 specified <link linkend="org.osgi.annotation.bundle.Requirement.filter--">filter()</link>, to the requirement's filter directive to
 test that an attribute with the name of the namespace is equal to the
 value of the specified name.</para>
      </section>
      <section xreflabel="version" role="method" xml:id="org.osgi.annotation.bundle.Requirement.version--">
         <title>String version default ""</title>
         <para role="description">
The floor version of the version range for this requirement.
 </para>
         <para>
 If specified, adds a version range expression, using the <code>&amp;</code>
 operator with any specified <link linkend="org.osgi.annotation.bundle.Requirement.filter--">filter()</link>, to the requirement's
 filter directive. The ceiling version of the version range is the next
 major version from the floor version. For example, if the specified
 version is <code>1.3</code>, then the version range expression is
 <code>(&amp;(version&gt;=1.3)(!(version&gt;=2.0)))</code>.
 </para>
         <para>
 The specified version must be a valid OSGi version string.</para>
      </section>
      <section xreflabel="filter" role="method" xml:id="org.osgi.annotation.bundle.Requirement.filter--">
         <title>String filter default ""</title>
         <para role="description">
The filter expression of this requirement, if any.
   </para>
      </section>
      <section xreflabel="effective" role="method" xml:id="org.osgi.annotation.bundle.Requirement.effective--">
         <title>String effective default "resolve"</title>
         <para role="description">
The effective time of this requirement.
 </para>
         <para>
 Specifies the time the requirement is available. The OSGi framework
 resolver only considers requirement without an effective directive or
 effective:=resolve. Requirements with other values for the effective
 directive can be considered by an external agent.
 </para>
         <para>
 If not specified, the <code>effective</code> directive is omitted from the
 requirement clause.</para>
      </section>
      <section xreflabel="attribute" role="method" xml:id="org.osgi.annotation.bundle.Requirement.attribute--">
         <title>String[] attribute default {}</title>
         <para role="description">
A list of attribute or directive names and values.
 </para>
         <para>
 Each string should be specified in the form:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>"name=value"</code> for attributes.</para>
            </listitem>
            <listitem>
               <para>
                  <code>"name:type=value"</code> for typed attributes.</para>
            </listitem>
            <listitem>
               <para>
                  <code>"name:=value"</code> for directives.</para>
            </listitem>
         </itemizedlist>
         <para>
 These are added, separated by semicolons, to the requirement clause.
   </para>
      </section>
      <section xreflabel="cardinality" role="method" xml:id="org.osgi.annotation.bundle.Requirement.cardinality--">
         <title>Requirement.Cardinality cardinality default SINGLE</title>
         <para role="description">
The cardinality of this requirement.
 </para>
         <para>
 Indicates if this requirement can be wired a single time or multiple
 times.
 </para>
         <para>
 If not specified, the <code>cardinality</code> directive is omitted from the
 requirement clause.</para>
      </section>
      <section xreflabel="resolution" role="method" xml:id="org.osgi.annotation.bundle.Requirement.resolution--">
         <title>Requirement.Resolution resolution default MANDATORY</title>
         <para role="description">
The resolution policy of this requirement.
 </para>
         <para>
 A mandatory requirement forbids the bundle to resolve when this
 requirement is not satisfied; an optional requirement allows a bundle to
 resolve even if this requirement is not satisfied.
 </para>
         <para>
 If not specified, the <code>resolution</code> directive is omitted from the
 requirement clause.</para>
      </section>
   </section>
   <section xreflabel="Requirement.Cardinality" role="class" xml:id="org.osgi.annotation.bundle.Requirement.Cardinality">
      <title>enum Requirement.Cardinality</title>
      <para>
Cardinality for this requirement.
   </para>
      <section xreflabel="SINGLE" role="field" xml:id="org.osgi.annotation.bundle.Requirement.Cardinality.SINGLE">
         <title>SINGLE</title>
         <para>
Indicates if the requirement can only be wired a single time.
   </para>
      </section>
      <section xreflabel="MULTIPLE" role="field" xml:id="org.osgi.annotation.bundle.Requirement.Cardinality.MULTIPLE">
         <title>MULTIPLE</title>
         <para>
Indicates if the requirement can be wired multiple times.
   </para>
      </section>
      <section xreflabel="toString()" role="method" xml:id="org.osgi.annotation.bundle.Requirement.Cardinality.toString--">
         <title>public String toString()</title>
         <para/>
      </section>
      <section xreflabel="valueOf(String)" role="method" xml:id="org.osgi.annotation.bundle.Requirement.Cardinality.valueOf-String-">
         <title>public static Requirement.Cardinality valueOf(String name)</title>
         <para/>
      </section>
      <section xreflabel="values()" role="method" xml:id="org.osgi.annotation.bundle.Requirement.Cardinality.values--">
         <title>public static Requirement.Cardinality[] values()</title>
         <para/>
      </section>
   </section>
   <section xreflabel="Requirement.Resolution" role="class" xml:id="org.osgi.annotation.bundle.Requirement.Resolution">
      <title>enum Requirement.Resolution</title>
      <para>
Resolution for this requirement.
   </para>
      <section xreflabel="MANDATORY" role="field" xml:id="org.osgi.annotation.bundle.Requirement.Resolution.MANDATORY">
         <title>MANDATORY</title>
         <para>
A mandatory requirement forbids the bundle to resolve when the
 requirement is not satisfied.
   </para>
      </section>
      <section xreflabel="OPTIONAL" role="field" xml:id="org.osgi.annotation.bundle.Requirement.Resolution.OPTIONAL">
         <title>OPTIONAL</title>
         <para>
An optional requirement allows a bundle to resolve even if the
 requirement is not satisfied.
   </para>
      </section>
      <section xreflabel="toString()" role="method" xml:id="org.osgi.annotation.bundle.Requirement.Resolution.toString--">
         <title>public String toString()</title>
         <para/>
      </section>
      <section xreflabel="valueOf(String)" role="method" xml:id="org.osgi.annotation.bundle.Requirement.Resolution.valueOf-String-">
         <title>public static Requirement.Resolution valueOf(String name)</title>
         <para/>
      </section>
      <section xreflabel="values()" role="method" xml:id="org.osgi.annotation.bundle.Requirement.Resolution.values--">
         <title>public static Requirement.Resolution[] values()</title>
         <para/>
      </section>
   </section>
   <section xreflabel="Requirements" role="class" xml:id="org.osgi.annotation.bundle.Requirements">
      <title>@Requirements</title>
      <para>
Container annotation for repeated <link linkend="org.osgi.annotation.bundle.Requirement">Requirement</link> annotations.
   </para>
      <formalpara role="parameter">
         <title>Retention</title>
         <para>
            <code>CLASS</code>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Target</title>
         <para>
            <code>TYPE</code>, <code>PACKAGE</code>
         </para>
      </formalpara>
      <section xreflabel="value" role="method" xml:id="org.osgi.annotation.bundle.Requirements.value--">
         <title>Requirement[] value</title>
         <para role="description">
Repeated <link linkend="org.osgi.annotation.bundle.Requirement">Requirement</link> annotations.
   </para>
      </section>
   </section>
</section>
</chapter>

  <chapter label="50" revision="$Id: 2ac7f9156a66861b41b7d9f932a07763ea5b6ee3 $" version="5.0" xml:id="service.condpermadmin" xml:base="050/service.condpermadmin.xml">
  <title>Conditional Permission Admin Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.condpermadmin-version" linkend="org.osgi.service.condpermadmin"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>The OSGi security model is based on the powerful and flexible Java
    security architecture, specifically the permission model. This
    specification adds several new features to the Java model to adapt it to
    the typical use cases of OSGi deployments.</para>

    <para>Key aspects of this security management API is the use of policies.
    Policies contain a set of permissions that are applicable when the related
    conditions are met. A policy can both allow (the Java model) as well as
    deny access when the permissions are implied. Deny permissions can
    significantly simplify security management. The real time management of
    Conditional Permission Admin enables management applications to control
    the permissions of other applications with immediate effect; no restart is
    required.</para>

    <para>Policies are based on the very general concept of
    <emphasis>conditions</emphasis>. Conditions guard access to the policy's
    permissions. If they are not satisfied, then the permissions are not
    applicable. Conditions can be based on the bundle signer, the bundle
    location, as well as on user-defined conditions. The advantage of this
    model is that groups of permissions can be shared based on signers or
    locations. Conditions can also be used to enable or disable a group of
    permissions when an external condition is true, for example, an inserted
    SIM card, an online connection to the management system is established, a
    specific roaming area, or a user has approved a permission after
    prompting. This model allows an operator to create and enforce a dynamic
    security policies for its devices.</para>

    <para>This specification defines a Conditional Permission Admin that
    supersedes the Permission Admin (albeit its relation to Permission Admin
    is well-defined in this specification).</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Policies</emphasis> - Provide a security policy
          system where conditions control the actual permissions that bundles
          have at a certain moment in time to be allowed or denied
          access.</para>
        </listitem>

        <listitem>
          <para><emphasis>Java Security</emphasis> - Provide full
          compatibility with the existing Java security model, existing
          applications must not require modifications.</para>
        </listitem>

        <listitem>
          <para><emphasis>Delegation</emphasis> - Support a management
          delegation model where an Operator can delegate part of the
          management of a device to another party in a secure way.</para>
        </listitem>

        <listitem>
          <para><emphasis>Digital Signatures</emphasis> - Support the use of
          digital signatures in a bundle's policy decisions.</para>
        </listitem>

        <listitem>
          <para><emphasis>Real Time</emphasis> - Changes in the environment
          must be reflected immediately in the bundle's permissions.</para>
        </listitem>

        <listitem>
          <para><emphasis>Operator Specific Conditions</emphasis> - It must be
          possible for operators, manufacturers, selected developers, and
          others to provide custom conditions.</para>
        </listitem>

        <listitem>
          <para><emphasis>User Confirmation</emphasis> - The policy model must
          support end user prompting and confirmations.</para>
        </listitem>

        <listitem>
          <para><emphasis>Allow/Deny Policies</emphasis> - It must be possible
          to both allow access as well as specifically deny access.</para>
        </listitem>

        <listitem>
          <para><emphasis>Ordering</emphasis> - Policies must be ordered in a
          table and evaluated in the given order, which is from index 0
          upwards.</para>
        </listitem>

        <listitem>
          <para><emphasis>Backward Compatibility</emphasis> - The model must
          be backward compatible with the Permission Admin of earlier
          releases.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Conditional Permission Admin</emphasis> - The
          administrative service that provides the functions to manipulate the
          <emphasis>policy table</emphasis>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Policy</emphasis> - Provides the information to
          allow or deny access to a resource. A policy contains a name, an
          access type, a set of conditions that must all be satisfied and a
          set of permissions of which at least one should be implied to
          specifically allow or deny access. A policy is encoded in a
          Conditional Permission Info.</para>
        </listitem>

        <listitem>
          <para><emphasis>Policy Table</emphasis> - A conceptual table
          containing all the Conditional Permission Infos.</para>
        </listitem>

        <listitem>
          <para><emphasis>Conditional Permission Info</emphasis> - The encoded
          form of a Policy.</para>
        </listitem>

        <listitem>
          <para><emphasis>Conditional Permission Update</emphasis> - Holds a
          temporary copy of the Policy Table so that a number of changes can
          be committed as a whole.</para>
        </listitem>

        <listitem>
          <para><emphasis>Permission Info</emphasis> - Holds a string based
          encoding of a <code>Permission</code> object.</para>
        </listitem>

        <listitem>
          <para><emphasis>Condition Info</emphasis> - Holds a string based
          encoding of a <code>Condition</code> object.</para>
        </listitem>

        <listitem>
          <para><emphasis>Condition</emphasis> - A <code>Condition</code>
          object is associated with a single Bundle Protection Domain. It
          abstracts an external condition that can be evaluated. A condition
          can be mutable or immutable as well as immediate or
          postponed.</para>
        </listitem>

        <listitem>
          <para><emphasis>Bundle Location Condition</emphasis> - An immutable
          <code>Condition</code> object that is satisfied when the associated
          bundle has the given location.</para>
        </listitem>

        <listitem>
          <para><emphasis>Bundle Signer Condition</emphasis> - An immutable
          <code>Condition</code> object that is satisfied when the associated
          bundle is signed by a certificate that matched the given DN.</para>
        </listitem>

        <listitem>
          <para><emphasis>Permission</emphasis> - An object that defines a
          certain permission type. Same as the Java Security model.</para>
        </listitem>

        <listitem>
          <para><emphasis>Bundle Protection Domain</emphasis> - The class that
          implements the Protection Domain of a bundle, this specification
          does not define an interface for this class, but it plays an
          important role in this specification.</para>
        </listitem>
      </itemizedlist>

      <figure>
        <title>org.osgi.service.condpermadmin package</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="4.026in" contentwidth="7.000in" fileref="condpermadmin-clases.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Synopsis</title>

      <para>A Conditional Permission Admin service maintains a system wide
      ordered table of <code>ConditionalPermissionInfo</code> objects. This
      table is called the <emphasis>policy table</emphasis>. The policy table
      holds an encoded form of conditions, permissions, and their allow/deny
      access type. A manager can enumerate, delete, and add new policies to
      this table via a <code>ConditionalPermissionsUpdate</code>
      object.</para>

      <para>When a bundle is created, it creates a Bundle Protection Domain.
      This protection domain calculates the system permissions for that bundle
      by instantiating the policy table, potentially pruning any policies that
      can never apply to that bundle and optimizing entries that always
      apply.</para>

      <para>A bundle can have local permissions defined in a Bundle Permission
      Resource. These are the actual detailed permissions needed by this
      bundle to operate. A bundle's effective permissions are the intersection
      of the local permissions and the system permissions. During the
      permission check of the Java Security Manager, each Protection Domain is
      first checked for the local permissions, if this fails, the complete
      check fails.</para>

      <para>Otherwise, the Bundle Protection Domains of the calling bundles
      are consulted to see if they imply the requested permission. To imply
      the requested permission, the Bundle Protection Domain must find a
      policy in its policy table where all conditions are satisfied and where
      one of the policy's permissions imply the requested permission. If one
      of the permissions is implied, then the policy's access type decides
      success or failure.</para>

      <para>Certain conditions must postpone their evaluation so that their
      evaluation can be minimized and grouped to prevent unwanted side
      effects. Postponed conditions can leverage a <code>Dictionary</code>
      object to maintain state during a single permission check.</para>
    </section>
  </section>

  <section xml:id="i1534520">
    <title>Permission Management Model</title>

    <para>The Conditional Permission Admin provides a flexible security model
    for bundles. However, the price of this flexibility is additional
    complexity. The amount of configuration necessary to setup a working
    system can easily become overwhelming. It is therefore necessary to be
    very careful implementing a deployment security model. This section
    defines a series of possible deployment security models while
    simultaneously defining the terminology that is used in later
    sections.</para>

    <section xml:id="i1470195">
      <title>Local Permissions</title>

      <para>A good working principle is to minimize permissions as much as
      possible, as early as possible. This principle is embodied with the
      <emphasis>local permissions</emphasis> of a bundle. Local permissions
      are defined by a Bundle Permission Resource that is contained in the
      bundle; this resource defines a set of <emphasis>permissions</emphasis>.
      These permissions must be enforced by the Framework for the given
      bundle. That is, a bundle can get less permissions than the local
      permissions but it can never get more permissions. If no such permission
      resource is present then the local permissions must be All Permission.
      The Bundle Permission Resource is defined in <xref linkend="i1576555"/>.</para>

      <para>For example, if the local permissions do not imply
      <code>ServicePermission[org.osgi.service.log.LogService,GET]</code>,
      then the bundle can never get the <code>LogService</code> object,
      regardless of any other security setup in the device.</para>

      <para>The fine-grained permissions allowed by the OSGi framework are
      very effective with the local permissions because they can be defined by
      the developer instead of the deployer. The developer knows exactly what
      services are needed, what packages the bundle requires, and what network
      hosts are accessed. Tools can be used that analyze bundles and provide
      the appropriate local permissions to simplify the task of the developer.
      However, without detailed knowledge of the bundle's intrinsics, it is
      very difficult to create the local permissions due to their fine-grained
      granularity.</para>

      <para>At first sight, it can seem odd that a bundle carries its own
      permissions. However, the local permissions define the
      <emphasis>maximum</emphasis> permissions that the bundle needs,
      providing more permissions to the bundle is irrelevant because the
      Framework must not allow the bundle to use them. The purpose of the
      local permissions is therefore <emphasis>auditing</emphasis> by the
      deployer. Analyzing a bundle's byte codes for its security requirements
      is cumbersome, if not impossible. Auditing a bundle's permission
      resource is (relatively) straightforward. For example, if the local
      permissions request permission to access the Internet, it is clear that
      the bundle has the potential to access the network. By inspecting the
      local permissions, the Operator can quickly see the security impact of
      the bundle. It can trust this audit because it must be enforced by the
      Framework when the bundle is executed.</para>

      <para>An Operator that runs a fully closed system can use the local
      permissions to run third party applications that are not trusted to run
      unchecked, thereby mitigating risks. The Framework guarantees that a
      bundle is never granted a permission that is not implied by its local
      permissions. A simple audit of the application's local permissions will
      reveal any potential threats.</para>

      <para>This scenario is depicted in <xref linkend="i1404416"/>. A
      developer creates a bundle with local permissions, the operator verifies
      the local permissions, and if it matches the expectations, it is
      deployed to the device where the Framework verifies that the local
      permissions are never exceeded.</para>

      <figure xml:id="i1404416">
        <title>Local permissions and Deployment</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.298in" contentwidth="6.189in" fileref="local-permissions-deployment.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Summarizing, the benefits of local permissions are:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Fine-grained</emphasis> - The developer has the
          knowledge to provide the fine-grained permissions that are necessary
          to minimize the sandbox of the bundle without constraining
          it.</para>
        </listitem>

        <listitem>
          <para><emphasis>Auditable</emphasis> - The Operator has a relatively
          small and readable file that shows the required sandbox. It can
          therefore assesses the risk of running a bundle.</para>
        </listitem>

        <listitem>
          <para><emphasis>Sandboxed</emphasis> - The Operator has the
          guarantee from the Framework that a bundle cannot escape its local
          permissions.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Open Deployment Channels</title>

      <para>From a business perspective it is sometimes too restrictive to
      maintain a fully closed system. There are many use cases where users
      should be able to deploy bundles from a CD, via a PC, or from an
      Internet web sites. In those scenarios, relying on the local permissions
      is not sufficient because the Framework cannot verify that the local
      permissions have not been tampered with.</para>

      <para>The de facto solution to tampering is to <emphasis>digitally
      sign</emphasis> the bundles. The rules for OSGi signing are defined in
      <xref linkend="framework.security.digitallysignedjar"/>. A digital
      signing algorithm detects modifications of the JAR as well as provide
      the means for authenticating the signer. A Framework therefore must
      refuse to run a bundle when a signature does not match the contents or
      it does not recognize the signer. Signing makes it possible to use an
      untrusted deployment channel and still rely on the enforcement of the
      local permissions.</para>

      <para>For example, an Operator can provision its applications via the
      Internet. When such an application is downloaded from an untrusted site,
      the Framework verifies the signature. It should install the application
      only when the signature is trusted or when it has default permissions
      for untrusted bundles.</para>

      <figure>
        <title>with signing</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.217in" contentwidth="6.267in" fileref="local-scope-deployment-signing.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Delegation</title>

      <para>A model where the local permissions are secured with a signature
      works for an Operator that fully controls a device. The operator must
      sign all bundles before they are provisioned. In this case, the Operator
      acts as a gatekeeper, no authority is delegated.</para>

      <para>This can become expensive when there are third parties involved.
      For example, an Enterprise could provide applications to its employees
      on a mobile phone that is managed by an Operator. This model is depicted
      in <xref linkend="i1415476"/>. If the Enterprise always has to contact
      the Operator before it can provision a new version, bottlenecks quickly
      arise.</para>

      <figure xml:id="i1415476">
        <title>Delegation model</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.694in" contentwidth="6.235in" fileref="delegation-model.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>This bottleneck problem can also be solved with signing. Signing
      does not only provide tamper detection, it can also provide an
      authenticated <emphasis>principal</emphasis>. The principal can be
      authenticated with a certificate chain. The device contains a set of
      trusted certificates (depending on implementation) that are used to
      authenticate the certificate of the signer.</para>

      <para>The operator can therefore safely associate a principal with a set
      of permissions. These permissions are called the <emphasis>system
      permissions</emphasis>. Bundles signed by that principal are then
      automatically granted those system permissions.</para>

      <para>In this model, the Operator is still fully in control. At any
      moment in time, the Operator can change the system permissions
      associated with the principal and thereby immediately deny access to all
      bundles of that principal, while they are running. Alternatively, the
      Operator can add additional system permissions to the principal if a new
      service has become available to the signer's applications. For example,
      if the Operator installs a <code>org.tourist.PointOfInterest</code>
      service, it can grant the
      <code>ServicePermission[org.tourist.PointOfInterest,GET]</code> and
      <code>PackagePermission[org.tourist,IMPORT]</code> to all principals
      that are allowed to use this service. The Operator can inform the
      involved parties after the fact, if at all. This model therefore does
      not create a bottleneck.</para>

      <para>Using digital signing to assign system permissions can therefore
      <emphasis>delegate</emphasis> the responsibility of provisioning to
      other parties. The Operator completely defines the limits of the
      permissions of the principal, but the signing and deployment can be done
      by the other parties.</para>

      <para>For example, an Operator can define that the ACME company can
      provision bundles without any intervention of the Operator. The Operator
      has to provide ACME once with a signing certificate and the Operator
      must associate the ACME principal with the appropriate system
      permissions on the device.</para>

      <para>The key advantage of this model is the reduced communication
      between ACME and the Operator: The Operator can modify the system
      permissions of ACME applications and be in control at any moment in
      time. The ACME company can develop new applications without the need to
      coordinate these efforts in any way with the Operator. This model is
      depicted in <xref linkend="i1408774"/>, which also shows the possible
      sandboxes for Daffy Inc. and unsigned bundles.</para>

      <figure xml:id="i1408774">
        <title>Typical Delegation model</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.505in" contentwidth="6.280in" fileref="typical-delegation-model.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The local permissions can still play an important role in the
      delegation model because it provides the signer the possibility to
      mitigate its risk, just as it did for the Operator. Signers can verify
      the local permissions before they sign a bundle. Like the Operator in
      the earlier scenario, the signer can quickly verify the security
      requirements of a bundle. For example, if a game bundle requests
      <code>AdminPermission[*,*]</code>, it is unlikely that the bundle will
      pass the security audit of the signer. However, in the unlikely case it
      did, it will not be granted this permission unless the Operator gave
      such a permission to the signer's principal on the device.</para>
    </section>

    <section>
      <title>Grouping</title>

      <para>The grouping model is traditionally used because it minimizes the
      administration of the security setup. For example, an operator can
      define the following security levels:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Untrusted</emphasis> - Applications that are not
          trusted. These applications must run in a very limited security
          scope. They could be unsigned.</para>
        </listitem>

        <listitem>
          <para><emphasis>Trusted</emphasis> - Applications that are trusted
          but that are not allowed to manage the device or provide system
          services.</para>
        </listitem>

        <listitem>
          <para><emphasis>System</emphasis> - Applications that provide system
          services.</para>
        </listitem>

        <listitem>
          <para><emphasis>Manage</emphasis> - Applications that manage the
          device.</para>
        </listitem>
      </itemizedlist>

      <para>The operator signs the bundle with an appropriate certificate
      before it is deployed, when the bundle is installed, it will be
      automatically be assigned to the appropriate security scope.</para>

      <para>However, the behavior can also be obtained using the local
      permissions of a bundle.</para>
    </section>

    <section xml:id="i1716478">
      <title>Typical Example</title>

      <para>This example provides a simple setup for a delegation model. The
      example is intended for readability, certain concepts will be explained
      later. The basic syntax for the policies is:</para>

      <programlisting>policy      ::= access '{' conditions permissions '}' name?
access      ::= 'ALLOW' | 'DENY'       // case insensitive
conditions  ::= ( '[' qname quoted-string* ']' )*
permissions ::= ( '(' qname (quoted-string
                         quoted-string?)? ')' )+
name        ::= quoted-string</programlisting>

      <para>For readability, package prefixes that can be guessed are replaced
      with <code>".."</code>.</para>

      <para>The following policy has a condition that limits the permissions
      to bundles that are signed by ACME. The permissions given are related to
      managing other bundles.</para>

      <programlisting>ALLOW {
   [ ..BundleSignerCondition "* ; o=ACME" ]

    ( ..AdminPermission "(signer=\* ; o=ACME)" "*" )
    ( ..ServicePermission "..ManagedService" "register" )
    ( ..ServicePermission "..ManagedServiceFactory" "register" )
} "1"</programlisting>

      <para>The next permission policy is for bundles signed by the operator.
      The operator bundles get full managing capabilities as well as
      permissions to provide any service.</para>

      <programlisting>ALLOW {
    [ ..BundleSignerCondition "*; o=Operator" ]
    ( ..AdminPermission "*" "*" )
    ( ..ServicePermission "*" "get,register" )
    ( ..PackagePermission "*" "import,exportonly" )
} "2"</programlisting>

      <para>The following block indicates that all bundles not signed by ACME
      will not have access to the <code>com.acme.secret</code> package, nor
      can they provide it. In this case, only bundles that are signed by ACME
      may use the <code>com.acme.secret.*</code> packages. Instead of
      explicitly specifying all allowed packages for bundles not signed by
      ACME, it is easier to deny them the protected packages. The exclamation
      mark (<code>'!' \u0021</code>) is a parameter for the Bundle Signer
      Condition to reverse its normal answer. This facility is also available
      in the Bundle Location Condition.</para>

      <para>That is, the following policy specifies that bundles
      <emphasis>not</emphasis> signed by ACME will be denied permission to
      package <code>com.acme.secret.*</code>.</para>

      <programlisting>DENY {
   [ ..BundleSignerCondition "* ; o=ACME" "!" ]
    ( ..PackagePermission "com.acme.secret.*"
            "import,exportonly" )
} "3"</programlisting>

      <para>Basic permissions define the permissions that are available to all
      bundles. The basic permissions therefore have no conditions associated
      with them so all bundles will be able to use these permissions. All
      bundles may use the Log Service as well as use any package that was not
      yet denied earlier.</para>

      <programlisting>ALLOW {
    (..ServicePermission "..LogService" "get" )
    (..PackagePermission "*" "import" )
} "4"</programlisting>

      <para>The resulting permissions are summarized in <xref linkend="service.condpermadmin-assigned.permissions"/>. The + indicates
      allow, the - means deny. The number is the deciding policy.</para>

      <table xml:id="service.condpermadmin-assigned.permissions">
        <title>Assigned Permissions. + indicates allow, - deny.</title>

        <tgroup cols="5">
          <colspec colnum="1" colwidth="5*"/>

          <colspec colnum="2" colwidth="2*"/>

          <colspec colnum="3"/>

          <colspec colnum="4"/>

          <colspec colnum="5"/>

          <thead>
            <row>
              <?dbfo rotated-width="0.5in"?>

              <entry/>

              <entry/>

              <entry rotate="1"><?dbfo orientation="90"?>Unsigned</entry>

              <entry rotate="1"><?dbfo orientation="90"?>ACME</entry>

              <entry rotate="1"><?dbfo orientation="90"?>Operator</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>..LogService</code></entry>

              <entry><code>get</code></entry>

              <entry><code>+4</code></entry>

              <entry><code>+4</code></entry>

              <entry><code>+2</code></entry>
            </row>

            <row>
              <entry><code>..ManagedService*</code></entry>

              <entry><code>register</code></entry>

              <entry><code>-</code></entry>

              <entry><code>+1</code></entry>

              <entry><code>+2</code></entry>
            </row>

            <row>
              <entry><code>..ManagedService*</code></entry>

              <entry><code>get</code></entry>

              <entry><code>-</code></entry>

              <entry><code>-</code></entry>

              <entry><code>+2</code></entry>
            </row>

            <row>
              <entry><code>com.acme.FooService</code></entry>

              <entry><code>get</code></entry>

              <entry><code>-</code></entry>

              <entry><code>-</code></entry>

              <entry><code>+2</code></entry>
            </row>

            <row>
              <entry><code>com.acme.secret</code></entry>

              <entry><code>import</code></entry>

              <entry><code>-3</code></entry>

              <entry><code>+4</code></entry>

              <entry><code>+2</code></entry>
            </row>

            <row>
              <entry><code>com.acme.secret.bar</code></entry>

              <entry><code>exportonly</code></entry>

              <entry><code>-3</code></entry>

              <entry><code>-</code></entry>

              <entry><code>+2</code></entry>
            </row>

            <row>
              <entry><code>com.acme.foo</code></entry>

              <entry><code>import</code></entry>

              <entry><code>+4</code></entry>

              <entry><code>+4</code></entry>

              <entry><code>+2</code></entry>
            </row>

            <row>
              <entry><code>bundle signed by ACME</code></entry>

              <entry><code>start</code></entry>

              <entry><code>-</code></entry>

              <entry><code>+1</code></entry>

              <entry><code>+2</code></entry>
            </row>

            <row>
              <entry><code>bundle signed by Operator</code></entry>

              <entry><code>start</code></entry>

              <entry><code>-</code></entry>

              <entry><code>-</code></entry>

              <entry><code>+2</code></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
  </section>

  <section>
    <title>Effective Permissions</title>

    <para>Once a bundle is installed, it gets Java
    <emphasis>permissions</emphasis> associated from the framework. Some of
    these permissions are <emphasis>implied</emphasis>. Implied permissions
    are given by the framework because they are required for normal operation,
    for example every bundle has the File Permission to read and write the
    bundle data area. See <xref linkend="framework.security.impliedpermissions"/>.</para>

    <para>A framework can also provide an administrative service to associate
    a set of permissions with a bundle. The set of permissions given by such
    an administrative agent to a bundle are called the <emphasis>system
    permissions</emphasis>. For example, the Permission Admin service and the
    Conditional Permission Admin service can be used by a managing application
    to define the <emphasis>system permissions</emphasis>. Additionally, a
    bundle can carry its own permissions; these are called the <emphasis>local
    permissions</emphasis>. All these permission sets interact in a
    non-trivial way to give the <emphasis>effective
    permissions</emphasis>.</para>

    <para>The purpose of the local permissions is to mitigate the bundle
    signer's risk. The Framework guarantees that a bundle's effective
    permissions are always smaller or equal than the local permissions because
    the effective permissions are the intersection of the local permissions
    with the system permissions, except for the implied permissions that are
    always granted.</para>

    <programlisting>Effective = ( Local <phrase role="symbol">∩</phrase> System) <phrase role="symbol">∪</phrase> Implied</programlisting>

    <para>The system permissions have two possible sources. The system
    permissions can be bound via the Permission Admin service to a
    <code>location</code>. This mechanism is provided for backward
    compatibility only. New management applications should use the Conditional
    Permission Admin service if possible.</para>

    <para>If the Permission Admin <code>location</code> is not bound, all the
    <emphasis>conditional permissions</emphasis> from Conditional Permission
    Admin act as the system permissions. The relationship between the system
    permissions and local permissions is depicted in <xref linkend="i1410172"/>.</para>

    <figure xml:id="i1410172">
      <title>System, Local and Security permissions</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="1.617in" contentwidth="6.274in" fileref="system-local-permissions.svg"/>
        </imageobject>
      </mediaobject>
    </figure>
  </section>

  <section xml:id="i1534586">
    <title>Conditional Permissions</title>

    <para>The conditional permissions provide a very general model that is
    related to the Java Security model. The Java Security model assigns a set
    of permissions to a code base or signer. During the permission check, this
    set is consulted for permissions that imply the checked permissions. If
    the checked permission is implied, access is granted.</para>

    <para>The Conditional Permission Admin service model assumes a more
    general approach. It conceptually has a system wide <emphasis>policy
    table</emphasis>, that is shared between all bundles.</para>

    <para>A policy consists of:</para>

    <itemizedlist>
      <listitem>
        <para>An access type (<code>ALLOW</code> or <code>DENY</code>)</para>
      </listitem>

      <listitem>
        <para>A set of conditions</para>
      </listitem>

      <listitem>
        <para>A set of permissions</para>
      </listitem>

      <listitem>
        <para>A name</para>
      </listitem>
    </itemizedlist>

    <para>During a permission check, the table is traversed in ascending index
    order and each policy is evaluated. The first policy that is
    <emphasis>matching</emphasis> controls the outcome of the permission check
    as given by its access type. A policy is only matching a permission
    <code>P</code> when:</para>

    <itemizedlist>
      <listitem>
        <para>All of the policy's conditions are satisfied</para>
      </listitem>

      <listitem>
        <para>At least one of its permissions implies <code>P</code>, as
        defined by Java security.</para>
      </listitem>
    </itemizedlist>

    <para>For example, assume the following setup for bundle
    <code>A</code>:</para>

    <programlisting>ALLOW {
  [ ...BundleSignerCondition "cn=*, o=ACME, c=US" ]
  [ com.acme.Online ]
   (...AdminPermission "*" "*")
}</programlisting>

    <para>In the example, both the <code>BundleSignerCondition</code> must be
    satisfied as well as the <code>com.acme.Online</code> condition before
    Admin Permission is granted.</para>

    <para>Deny policies significantly simplify the security configuration
    setup because they handle the common case of an exception to a general
    rule. For example, a bundle that is allowed to use all package imports and
    exports <emphasis>except</emphasis> packages in the
    <code>com.acme.secret.*</code> namespace. The set of all possible packages
    is impossible to enumerate because it is an infinite set. In this case, *
    cannot be used because the <code>com.acme.secret.*</code> should not be
    included. With a deny policy it is possible to first deny access to
    <code>com.acme.secret.*</code> for all bundles bar the exception, and then
    later allow <code>*</code> for everybody. The policies for this look
    like:</para>

    <programlisting>DENY {
    [...BundleSignerCondition "cn=*, o=ACME" "!" ]
    (...PackagePermission "com.acme.secret.*"
            "import,exportonly" )
}
ALLOW {
    (...PackagePermission "*" "*" )
}</programlisting>

    <section xml:id="i1648674">
      <title>Encoding versus Instantiation</title>

      <para>The system wide policy table does not contain instances, it
      contains <emphasis>encoded forms</emphasis> of the permissions and
      conditions. The policy table acts as a <emphasis>template</emphasis> for
      each Bundle Protection Domain; the Bundle Protection Domain creates
      instances with the associated bundle as their context.</para>

      <para>It is a dynamic template because a Bundle Protection Domain must
      track the changes to the framework's policy table immediately and update
      any instances from the new encoded forms. Once the atomic <xref linkend="org.osgi.service.condpermadmin.ConditionalPermissionUpdate.commit--" xrefstyle="hyperlink"/> method of the update object has successfully
      returned, all subsequent use of Bundle Protection Domains must be based
      on the new configuration. See <xref linkend="i1693067"/> for more
      information of how to manage this table.</para>

      <para>The conditions and permissions of the policy table must be
      instantiated before the conditions can be checked. This instantiation
      can happen, when a Bundle Protection Domain is created, or the first
      time when the conditional permissions are needed because of a permission
      check. <xref linkend="i1704852"/> shows the central table and its
      instantiation for different Bundle Protection Domains.</para>

      <figure xml:id="i1704852">
        <title>Instantiation of the policy table</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.500in" contentwidth="6.096in" fileref="policy-table.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para><code>Condition</code> objects must always belong to a single
      Bundle Protection Domain and must never be shared.</para>
    </section>
  </section>

  <section xml:id="i1688376">
    <title>Conditions</title>

    <para>The purpose of a Condition is to decide if a policy is applicable or
    not. That is, it acts as a guard for the permissions. The conditions must
    therefore be evaluated when a <code>Permission</code> object is checked
    against the effective permissions of a bundle.</para>

    <para>The state of a <code>Condition</code> object can be obtained with
    its <xref linkend="org.osgi.service.condpermadmin.Condition.isSatisfied--" xrefstyle="hyperlink"/> method. A condition that returns <code>true</code>
    to this method is called to be <emphasis>satisfied</emphasis>. If the
    method throws an Exception, this should be logged and treated as if the
    condition is not satisfied.</para>

    <para>Certain <code>Condition</code> objects could optimize their
    evaluations if they are activated multiple times in the same permission
    check. For example, a user prompt could appear several times in a
    permission check but the prompt should only be given once to the user.
    These conditions are called <emphasis>postponed conditions</emphasis>,
    conditions that can be verified immediately are called <emphasis>immediate
    conditions</emphasis>. The <xref linkend="org.osgi.service.condpermadmin.Condition.isPostponed--" xrefstyle="hyperlink"/> method can inform if the condition is immediate or
    postponed. A Condition must always return the same value for the
    <code>isPostponed</code> method so that the Conditional Permission Admin
    can cache this value. If this method returns <code>false</code>, the
    <code>isSatisfied()</code> method must be quick and can be called during
    the permission check, otherwise the decision must be postponed until the
    end of the permission check because it is potentially expensive to
    evaluate. Postponed conditions must always be postponed the first time
    they are evaluated.</para>

    <para>For example, a condition could verify that a mobile phone is
    <emphasis>roaming</emphasis>. This information is readily available in
    memory and therefore the <xref linkend="org.osgi.service.condpermadmin.Condition.isPostponed--" xrefstyle="hyperlink"/> method could always return <code>false</code>.
    Alternatively, a <code>Condition</code> object that gets an authorization
    over the network should only be evaluated at most once during a permission
    check to minimize the delay caused by the network latency. Such a
    <code>Condition</code> object should return <code>true</code> for the
    <code>isPostponed</code> method so all the <code>Condition</code> objects
    are evaluated together at the end of the permission check.</para>

    <para><code>Condition</code> objects only need to be evaluated multiple
    times when the answer can change. A <code>Condition</code> object that can
    vary its satisfiability is called <emphasis>mutable</emphasis>, it can be
    checked with the <xref linkend="org.osgi.service.condpermadmin.Condition.isMutable--" xrefstyle="hyperlink"/> method. If the condition is
    <emphasis>immutable</emphasis>, the Condition object must always return
    the same result for the <code>isSatisfied()</code> method. The <xref linkend="org.osgi.service.condpermadmin.Condition.isMutable--" xrefstyle="hyperlink"/> method answers the mutability of the next
    <code>isSatisfied()</code> method. The answer of the next call to the
    <code>isSatisfied</code> method could still differ from the previous call,
    even if the <code>isMutable</code> method returns true.</para>

    <para>A mutable Condition can become immutable over time but it cannot go
    from immutable to mutable. Optimizations can take advantage of the
    immutability by, for example, caching the result of the
    <code>isSatisfied()</code> method.</para>

    <para>Except for immediate conditions, the <code>isSatisfied</code> method
    must only be called inside a permission check.</para>

    <para>For example, the Bundle Protection Domain can prune any policy from
    its view of the policy table that contains a <code>Condition</code> object
    that is immutable and not satisfied. The Bundle Signer Condition and
    Bundle Location Condition are examples of immutable conditions that can
    easily be discarded when they do not match the context bundle when the
    policy table is instantiated. See <xref linkend="i1706619"/> for more
    information about optimizing immutable conditions.</para>
  </section>

  <section xml:id="service.condpermadmin.permissioncheck">
    <title>The Permission Check</title>

    <para>The Java security model has both a Security Manager and an Access
    Controller to perform a permission check. The core functionality is
    located in the <code>AccessController</code> and the
    <code>AccessControlContext</code> classes that cooperate with
    <code>ProtectionDomain</code> objects to detect if a permission is allowed
    or denied. In the OSGi Framework, each bundle must have a single Bundle
    Protection Domain that holds the instantiated policy table.</para>

    <para>The Access Controller provides the full functionality for checking a
    permission. However, all permission checks should be tunneled through the
    <code>SecurityManager</code> <code>checkPermission</code> methods. The
    Security Manager can be replaced by a custom implementation, unlike the
    Access Controller (it is a final class). This model is depicted in <xref linkend="i1430011"/>.</para>

    <figure xml:id="i1430011">
      <title>in OSGi bundles</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="2.514in" contentwidth="7.000in" fileref="permission-checking.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <section xml:id="i1456283">
      <title>Security Manager checkPermission Method</title>

      <para>A permission check starts when the Security Manager
      <code>checkPermission</code> method is called with permission
      <code>P</code> as argument. The current Security Manager must be
      implemented by the Framework and is therefore called the Framework
      Security Manager; it must be fully integrated with the Conditional
      Permission Admin service.</para>

      <para>The Framework Security Manager must get the Access Control Context
      in effect. It must call the <code>AccessController getContext()</code>
      method to get the default context if it is not passed a specific
      context.</para>

      <para>The <code>AccessControlContext</code> <code>checkPermission</code>
      method must then be called, which causes the call stack to be traversed.
      At each stack level the Bundle Protection Domain of the calling class is
      evaluated for the permission <code>P</code> using the
      <code>ProtectionDomain</code> <code>implies</code> method. The complete
      evaluation must take place on the same thread.</para>
    </section>

    <section>
      <title>Bundle Protection Domain implies Method</title>

      <para>Permission <code>P</code> must be implied by the local permissions
      of the Bundle Protection Domain. If this is not the case, the complete
      check must immediately end with a failure. Local permissions are
      described in <xref linkend="i1470195"/> and <xref linkend="i1576555"/>.</para>

      <para>The permission check now depends on the instantiated policy table,
      called <code>Ts</code>. During the Bundle Protection Domain
      <code>implies</code> method, the goal is to decide if the permission
      <code>P</code> is denied, or can progress because it is potentially
      allowed. Potentially, because the table can contain postponed conditions
      that need to be executed after all protection domains are
      checked.</para>

      <para>The policy table must therefore be traversed in ascending index
      order until the first policy is matching that can give an immediate
      access type. If this access type is <code>DENY</code>, the implies
      method fails and aborts the check. If an <code>ALLOW</code> is found,
      the next domain must be checked. To ensure that there is at least one
      immediate matching policy in the table, a virtual <code>DENY {
      (AllPermission) }</code> is added at the end of the table. This virtual
      policy has the effect of making the default policy <code>DENY</code>
      when no matching entries are found.</para>

      <para>During the traversal, an optimized policy list per bundle is
      constructed containing the postponed conditions and at the end a
      matching policy. This list is evaluated after all the protection domains
      are checked and none of them failed.</para>

      <para>Therefore, the following definitions begin the Bundle Protection
      Domain implies method's algorithm:</para>

      <programlisting>Ts = instantiated policy table + DENY {(AllPermission)}
PL = {}</programlisting>

      <para><code>PL</code> will be copied from <code>Ts</code> until the
      first policy that <emphasis>matches</emphasis>. A matching policy has
      all of its conditions immediately satisfied and one of the permissions
      implies permission <code>P</code>. If a policy can never be matched
      because it has an immediate condition that cannot be satisfied, then it
      is not copied to PL. At the end, <code>PL</code> contains zero or more
      postponed policies followed by exactly one matching policy.</para>

      <para>In pseudo code:</para>

      <programlisting>policy:
for each policy T in Ts
    for each condition C in T conditions
        if C is immediate and C is not satisfied
            continue policy

    found = false
    for permission X in T permissions
        found |= X implies P

    if not found
        continue policy

    add T to PL

    if T has no postponed conditions
        break</programlisting>

      <para><code>PL</code> must now be optimized to remove superfluous
      policies. A postponed policy can be removed if it cannot change the
      outcome from the last (which is an immediate) policy. That is, if the
      immediate policy at the end has the same access type as the previous
      policy in <code>PL</code>, then it can be ignored. The following pseudo
      code removes these superfluous postponed conditions.</para>

      <programlisting>while PL length &gt; 1
    if PL[PL length -2] access = PL[PL length -1] access
        remove PL[PL length -2]
    else
        break</programlisting>

      <para>After discarding these superfluous postponed conditions, the
      contents of <code>PL</code> has the structure outline in <xref linkend="i1677948"/>, where <code>Tp(x)</code> is a postponed policy
      with a access type <code>x</code>, and <code>Tm</code> is a matching
      policy, <code>!</code> is the not operator for the condition.</para>

      <figure xml:id="i1677948">
        <title>Structure of Postponed List PL</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="0.686in" contentwidth="4.904in" fileref="postponed-list.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>If <code>PL</code> contains only one policy and it is a
      <code>DENY</code> policy, then the Bundle Protection Domain can directly
      answer <code>false</code> from the <code>implies</code> method, which
      will abort the complete permission check evaluation. In all other cases,
      it must remember the postponed list <code>PL</code> for the given
      bundle, and return <code>true</code>.</para>

      <programlisting>if PL = {DENY{...}}
    return false
Bundle.pl = PL
return true</programlisting>

      <section>
        <title>Example Bundle Protection Domain Check</title>

        <para>This example demonstrated the per bundle evaluation aspect of
        the Bundle Protection Domain's <code>implies</code> method. Assume the
        following policies are active:</para>

        <programlisting>DENY {
    [ BundleSignerCondition "cn=ACME" "!" ]
    ( FilePermission "/tmp/acme/-" "READ,WRITE" )
} "0"
ALLOW {
    ( FilePermission "/tmp/-" "READ,WRITE" )
} "1"
ALLOW {
   [ PromptCondition "Allowed to Read?" ]
   ( FilePermission "*" "READ" )
} "2"
DENY {
    [ PromptCondition "Deny Writing?" ]
     ( FilePermission "*" "READ,WRITE" )
} "3"</programlisting>

        <para>This setup reserves unconditionally the <code>/tmp/acme/-</code>
        file system for bundles signed by ACME because the first line denies
        any bundle not signed by ACME access to this part of the file system.
        Reading and writing of the remainder of the <code>/tmp</code> file
        tree is allowed for all. For the rest of the file system, read access
        is prompted to allow, and write access is prompted to deny.</para>

        <para>Assume that a bundle signed by ACME wants to read
        <code>/etc/passwd</code>. Policy 0, and 1 do not match because the
        File Permission in these policies are not applicable. Policy 2 has a
        permission that implies this file and its condition is postponed, so
        it will be postponed and policy 3 will also included. There is no
        matching policy, so a virtual matching <code>DENY</code> policy
        (<code>D</code>) will be included as the last entry. This makes
        <code>PL</code>: <code>2, 3</code>, and <code>D</code>.</para>

        <programlisting>Tp(ALLOW)       # 2
Tp(DENY)        # 3
Tm(DENY)        # virtual (D)</programlisting>

        <para>In this case, there is a superfluous <code>Tp(DENY) #3</code>
        because it can not change the final answer of the last matching
        <code>DENY</code>. It is therefore removed. The list is thus:</para>

        <programlisting>Tp(ALLOW)       # 2
Tm(DENY)        # virtual</programlisting>

        <para>This list must be saved for later evaluation when all the Bundle
        Protection Domains have finished successfully.</para>
      </section>
    </section>

    <section>
      <title>Postponed Evaluation</title>

      <para>If all protection domains have been checked and none has denied
      the permission by returning <code>false</code>, then
      <emphasis>each</emphasis> checked Bundle Protection Domain has a
      postponed list.</para>

      <para>This per bundle postponed list contains one or more policies that
      must now be evaluated in sequence. The first policy in the list that can
      satisfy all its postponed conditions decides the access. If this policy
      has an access type of <code>ALLOW</code>, the list of the next domain is
      evaluated otherwise the evaluation fails.</para>

      <para>The evaluation always ends because the last entry in each of the
      postponed lists is guaranteed to be a matching policy. As a special
      case, a postponed list with one entry indicates success. This must be a
      matching <code>ALLOW</code> because an immediate <code>DENY</code> would
      have failed earlier.</para>

      <para>For example, if bundle A postponed policy <code>Tp1</code> and
      bundle <code>B</code> postponed policy <code>Tp2</code>, and bundle C
      was immediately satisfied for <code>ALLOW</code>, then the constellation
      would like <xref linkend="i1438799"/>.</para>

      <figure xml:id="i1438799">
        <title>Evaluation of postponed policies</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.230in" contentwidth="4.961in" fileref="postponed-evaluation1.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The Conditional Permission Admin provides a type specific
      <code>Dictionary</code> object to all evaluations of the same postponed
      Condition implementation class during a single permission check. It is
      the responsibility of the Condition implementer to use this Dictionary
      to maintain states between invocations. The condition is evaluated with
      a method that takes an array and a <code>Dictionary</code> object: <xref linkend="org.osgi.service.condpermadmin.Condition.isSatisfied-Condition---Dictionary-" xrefstyle="hyperlink"/>. The array always contains a single element that
      is the receiver. An array is used because an earlier version of this
      specification could verify multiple conditions simultaneously.</para>

      <para>The <code>Dictionary</code> object has the following
      qualities:</para>

      <itemizedlist>
        <listitem>
          <para>It is specific to a <code>Condition</code> implementation
          class, different implementation classes will not share this
          <code>Dictionary</code> object.</para>
        </listitem>

        <listitem>
          <para>It is created before the <xref linkend="org.osgi.service.condpermadmin.Condition.isSatisfied-Condition---Dictionary-" xrefstyle="hyperlink"/> is called for the first time during this
          permission check.</para>
        </listitem>

        <listitem>
          <para>It is only valid during the invocation of a single
          <code>checkPermission</code> session. That is, it is not maintained
          between <code>checkPermission</code> invocations.</para>
        </listitem>

        <listitem>
          <para>It is shared between invocations of
          <code>isSatisfied(Condition[], Dictionary)</code> method for
          different Bundle Protection Domains.</para>
        </listitem>
      </itemizedlist>

      <para>The algorithm for the postponed processing can now be explained
      with the following pseudo code:</para>

      <programlisting>bundle:
for each bundle B
    policy:
    for each policy T in B.pl
        for C in T conditions
             if C is postponed and
                C is not satisfied with Dictionary
                continue policy

        if T access = DENY
            return false
        else
            continue bundle
    assert false // can not reach

return true</programlisting>
    </section>

    <section>
      <title>Example</title>

      <para>A permission <code>P</code> is checked while bundle
      <code>A</code>, <code>B</code>, and <code>C</code> are on the call
      stack. Their security setup is as follows:</para>

      <itemizedlist>
        <listitem>
          <para><code>IC</code> = a condition that is immediately
          evaluated,</para>
        </listitem>

        <listitem>
          <para><code>PC</code> is a postponed condition,</para>
        </listitem>

        <listitem>
          <para><code>P</code>, <code>Q</code>, and <code>R</code> are
          permissions.</para>
        </listitem>
      </itemizedlist>

      <para>The situation for C is as follows:</para>

      <programlisting>ALLOW {                 (Q)     }  "C1"
ALLOW { [IC0]           (P)     }  "C2"
ALLOW { [PC2]           (P)     }  "C3"</programlisting>

      <para>First, the Bundle Protection Domain of bundle <code>C</code> is
      asked if it implies permission <code>P</code>. Bundle <code>C</code> has
      three policies. Policy <code>C1</code> has no conditions, only a
      permission that does not imply permission <code>P</code>, it is
      therefore ignored. The second policy has an immediate condition
      <code>IC0</code>, which is not satisfied. Therefore, the policy's
      permissions are not even considered. The last policy contains a mutable
      postponed condition <code>PC2</code>. The permission <code>P</code> is
      implied by the related permissions. However, it is not possible to make
      the decision at this moment in time, therefore the evaluation of policy
      <code>C3</code> is postponed. The postponed list for bundle
      <code>C</code> is therefore:</para>

      <programlisting>ALLOW {[PC2]}                      "C3"
DENY  {(AllPermission)}</programlisting>

      <para>This list can not be optimized because the final access type
      differs from the earlier access types.</para>

      <para>The setup for bundle B is as follows:</para>

      <programlisting>ALLOW { [IC1][PC2][PC1] (P) (R) }  "B1"
ALLOW { [PC2]           (P) (R) }  "B2"
DENY  {                 (P)     }  "B3"
ALLOW {                 (Q)     }  "B4"</programlisting>

      <para>Bundle <code>B</code> is considered, its first policy has and
      immediate <code>Condition</code> object that is <code>IC1</code>. This
      condition turns out to be satisfied. This policy is a potential
      candidate because it has two postponed conditions left. It is a
      possibility because its permissions imply permission <code>P</code>. The
      policy is therefore placed on the postponed list.</para>

      <para>Policy B2 is similar, it must also be placed on the postponed list
      because it implies permission <code>P</code> and it has a postponed
      condition <code>PC2</code>.</para>

      <para>Policy <code>B3</code> matches, it is therefore placed on the
      postponed list and the evaluation is stopped because there is an
      immediate decision, therefore it is not necessary to look at policy
      <code>B4</code>.</para>

      <para>There are 2 policies postponed, the bundle is potentially
      permitted. Bundle's B postponed list therefore looks like:</para>

      <programlisting>ALLOW {[PC2][PC1]}    "B1"
ALLOW {[PC2]}         "B2"
DENY  { } </programlisting>

      <para>This list cannot be optimized because the final access type
      differs from the earlier postponed conditions.</para>

      <para>Last and least, bundle A.</para>

      <programlisting>  A:  ALLOW {  [IC1] [PC1]    (P) (Q) }    "A1"
      ALLOW {  [IC2]          (P) (R) }    "A2"
      ALLOW {                 (S)     }    "A3"</programlisting>

      <para>Bundle <code>A</code>'s <code>IC1</code> is evaluated first and it
      is satisfied. Permission <code>P</code> is implied by the policy
      <code>A1</code>'s permissions, therefore this policy is postponed for
      evaluation.</para>

      <para>Policy <code>A2</code> is also satisfied and it directly implies
      permission <code>P</code>. This policy is therefore also placed on the
      postponed list and further evaluation is no longer necessary because it
      is the first matching policy. That is, policy <code>A3</code> is
      ignored. The postponed list looks like:</para>

      <programlisting>ALLOW { [PC1] } "A1"
ALLOW { }       "A2"</programlisting>

      <para>This list is optimized to:</para>

      <programlisting>ALLOW {}        "A2"</programlisting>

      <para>After the <code>checkPermission</code> method of the Access
      Control Context method returns, the Framework Security Manager must
      evaluate the postponed lists of all the bundles. The list of postponed
      policies looks like <xref linkend="i1438799"/>.</para>

      <figure>
        <title>Evaluation of postponed policies</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.315in" contentwidth="4.961in" fileref="postponed-evaluation2.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The Framework Security Manager must now evaluate the postponed
      lists for each bundle. In this example, postponed condition
      <code>PC2</code> occurs 3 times. All these evaluations of
      <code>PC2</code> get the same <code>Dictionary</code> object. If
      <code>PC2</code> prompts the users with a specific question, then it
      should not ask the same question again when another <code>PC2</code> is
      evaluated later. The <code>Dictionary</code> object can be used to
      maintain this state.</para>

      <para>Both <code>PC1</code> and <code>PC2</code> prompt the user.
      <code>PC1</code> will be rejected in this example, and <code>PC2</code>
      will be affirmed.</para>

      <para>First the postponed list of bundle <code>A</code> is evaluated.
      This is the trivial case of <code>ALLOW {}</code>, and the postponed
      list for bundle <code>A</code> succeeds with <code>ALLOW</code>.</para>

      <para>For bundle <code>B</code>, policy <code>T1</code> must prompt for
      <code>PC2</code> and <code>PC1</code>. <code>PC2</code> records the
      answer in the Dictionary that is specific for <code>PC2</code>. Because
      <code>PC1</code> fails, <code>T1</code> is not applicable and policy
      <code>T2</code> must be evaluated. <code>PC2</code> had recorded its
      answer so it does not prompt but returns <code>true</code> immediately.
      Policy <code>T2</code> is an <code>ALLOW</code> policy and bundle B
      therefore ends positively.</para>

      <para>Last, bundle <code>C</code> requires evaluation of policy
      <code>T4</code>. <code>PC2</code> retrieves its answer from the given
      <code>Dictionary</code> object and succeeds. Policy <code>T4</code> has
      an access type of <code>ALLOW</code> and this concludes the complete
      permission check positively.</para>
    </section>

    <section>
      <title>Using the Access Control Context Directly</title>

      <para>Bundle programmers should always use the Java Security Manager to
      do security checks. When the Access Controller is used directly (or the
      Access Control Context) to do the security check instead, then the
      evaluation cannot handle postponed conditions. Therefore, the postponed
      conditions must be treated as immediate conditions by the Bundle
      Protection Domain when the permissions check does not go through the
      Framework's security manager. The implication of this is that the result
      of checking a permission can depend on the way the check is
      initiated.</para>

      <para>For example, a bundle on the stack has the needed permission
      <code>P</code> tied to a User Prompt Condition and another bundle on the
      stack does not have the Permission <code>P</code>. The check would fail
      if the Security Manager was called and the user would never be prompted
      because the failure was detected before the conditional permissions
      could be evaluated. However, if the Access Control Context was called
      directly, the user would be prompted and fail even if the user
      acknowledged the request.</para>
    </section>
  </section>

  <section xml:id="i1693067">
    <title>Permission Management</title>

    <para>The policy model provided by the Conditional Permission Admin
    service requires that the policies in the policy table are ordered. This
    requires a management interface that allows easy manipulation of the
    ordered table. The List interface fulfills this requirement, but an OSGi
    Framework is a dynamic environment and there can be other parties editing
    the same policy table. Therefore, the Conditional Permission Admin service
    uses an indirection. If a bundle wants to edit the table, it can get the
    table in a <code>ConditonalPermissionUpdate</code> object with the <xref linkend="org.osgi.service.condpermadmin.ConditionalPermissionAdmin.newConditionalPermissionUpdate--" xrefstyle="hyperlink"/> method from the Conditional Permission Admin
    service. This method creates a copy of the policy table in the returned
    <emphasis>update</emphasis> object. This update object provides access to
    a <code>List</code> object with <code>ConditionalPermissionInfo</code>
    objects, which are the encoded form of the policies.</para>

    <para>New objects can be created with the <xref linkend="org.osgi.service.condpermadmin.ConditionalPermissionAdmin.newConditionalPermissionInfo-String-ConditionInfo---PermissionInfo---String-" xrefstyle="hyperlink"/> method on the Conditional Permission Admin
    service, and then added to this list. The method requires a name, an array
    of <code>ConditionInfo</code> objects, an array of
    <code>PermissionInfo</code> objects, and the access decision. The name
    parameter can be <code>null</code>. Each
    <code>ConditionalPermissionInfo</code> object has a name to distinguish it
    from others, as well as identifying it to a management server. If the name
    is <code>null</code>, the Conditional Permission Admin service will
    automatically create a unique name. Though it is possible to create
    policies with the same name, during the commit the names will be verified
    for uniqueness. If a duplicate name appears, an exception will be
    thrown.</para>

    <para>Conditional Permission Infos can also be removed from this list.
    Modifications like remove, do not change or influence the running system,
    they only affect the update object.</para>

    <para>All changes are effectuated when the <code>commit</code> method is
    called. If there had been a change in the underlying policy table since
    the update object was created, the <code>commit</code> method will abort
    and return <code>false</code>. Otherwise, the actual policy table is
    atomically updated and <code>true</code> is returned. There is no
    obligation to ever call commit; a canceled update can just be
    forgotten.</para>

    <para>The data structures of the update model are depicted in <xref linkend="i1693079"/>.</para>

    <figure xml:id="i1693079">
      <title>Structure of the Info objects.</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="1.402in" contentwidth="4.926in" fileref="info-classes.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>Both the <code>ConditionalInfo</code> and
    <code>PermissionInfo</code> objects can be constructed from encoded
    strings. The syntax for these strings are:</para>

    <programlisting>conditions  ::= ( '[' qname quoted-string* ']' )*
permissions ::= ( '(' qname (quoted-string
                         quoted-string?)? ')' )+</programlisting>

    <para>The strings are converted by getting the class with the
    <code>qname</code>, and then creating an instance through a constructor
    that takes the given number of arguments. The exclamation mark is
    convention for a negated condition, it indicates that the condition should
    reverse its result. Deny policies often require the negation of the
    conditions. For example, often a bundle should <emphasis>not</emphasis> be
    signed by a specific signer to exclude it from a resource.</para>

    <para>Both the <code>PermissionInfo</code> and <code>ConditionInfo</code>
    are concrete classes with appropriate methods to construct them from their
    encoded form. The encoded form given to a Condition implementation
    constructor must not contain the exclamation mark for negation.</para>

    <para>A policy is specified with the following syntax:</para>

    <programlisting>policy      ::= access '{' conditions permissions '}' name?
access      ::= 'ALLOW' | 'DENY'  // case insensitive
name        ::= quoted-string</programlisting>

    <para>The Conditional Permission Admin provides a convenience method to
    create a <code>ConditionalPermissionInfo</code> object with the <xref linkend="org.osgi.service.condpermadmin.ConditionalPermissionAdmin.newConditionalPermissionInfo-String-" xrefstyle="hyperlink"/> method.</para>

    <para>The following example is a code snippet the reads a stream with
    conditional permissions using the encoded form. The method parses the file
    line by line. Each line is scanned and split with regular expressions. The
    following example shows how a text string can be parsed and added to the
    update object.</para>

    <programlisting>static Pattern CP_MATCHER = Pattern.compiler(...);
public  void manage(ConditionalPermissionAdmin admin,
    String text) {
    ConditionalPermissionUpdate update = admin
            .newConditionalPermissionUpdate();
    List list = update.getConditionalPermissionInfos();
    list.clear();

    Matcher m = CP_MATCHER.matcher(text);
    int n = 1;
    while (m.find()) {
        String policy = m.group(1);
        ConditionalPermissionInfo info =
            admin.newConditionalPermissionInfo( policy );

        list.add(info);
    }
    if ( !update.commit() )
        throw new   ConcurrentModificationException(
    "Conditional Permission Admin was updated concurrently");
}</programlisting>

    <section>
      <title>Default Permissions</title>

      <para>Conditional Permission Admin does not have a specific concept of
      default permissions. Default permissions are derived from the policies
      that do not have any <code>Condition</code> objects. These policies are
      applied to all bundles, effectively making them default permissions.
      This is a different from Permission Admin; in Permission Admin default
      permissions only apply when there are no specific permissions
      set.</para>
    </section>
  </section>

  <section xml:id="service.condpermadmin-file.permission">
    <title>File Permission for Relative Path Names</title>

    <para>A <code>java.io.FilePermission</code> assigned to a bundle via a
    condition must receive special treatment if the path argument for the
    <code>FilePermission</code> is a relative path name. A relative path name
    is one that is not absolute. See the <code>java.io.File.isAbsolute</code>
    method for more information on absolute path names.</para>

    <para>When a bundle is assigned a <code>FilePermission</code> for a
    relative path name, the path name is taken to be relative to the bundle's
    persistent storage area. This allows additional permissions, such as
    <code>execute</code>, to be assigned to files in the bundle's persistent
    storage area. For example:</para>

    <programlisting>    java.io.FilePermission "-" "execute"</programlisting>

    <para>can be used to allow a bundle to execute any file in the bundle's
    persistent storage area.</para>

    <para>This only applies to <code>FilePermission</code> objects assigned to
    a bundle via a condition. Any <code>FilePermission</code> object with a
    relative path name must be ignored by the
    <code>AccessControlContext</code> object returned by the
    <code>getAccessControlContext</code> method.</para>
  </section>

  <section xml:id="i1712960">
    <title>Implementing Conditions</title>

    <para><code>Condition</code> objects are constructed from
    <code>ConditionInfo</code> objects when the policy table is instantiated
    for a Bundle Protection Domain. The <code>ConditionInfo</code> object
    supports a variable number of arguments.</para>

    <para>The Conditional Permission Admin must use reflection to find a
    <code>public static getCondition</code> method on the
    <code>Condition</code> implementation class that takes a
    <code>Bundle</code> object and a <xref linkend="org.osgi.service.condpermadmin.ConditionInfo" xrefstyle="hyperlink"/> object as arguments. This method must return a
    object that implements the <xref linkend="org.osgi.service.condpermadmin.Condition" xrefstyle="hyperlink"/>
    interface.</para>

    <para>However, this does not have to be a new object, the
    <code>getCondition</code> method can reuse objects if it so desires. For
    example, a Bundle Location Condition is immutable, it therefore maintains
    only 2 instances: One for bundles that match the given location and one
    for the others. In the <code>getCondition</code> method it can verify the
    bundle's location with argument and return either instance.</para>

    <para>This is such a common pattern that the <code>Condition</code>
    interface provides two such immutable instances:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.service.condpermadmin.Condition.TRUE" xrefstyle="hyperlink"/> - A condition object that will always evaluate
        to <code>true</code> and that is never postponed.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.condpermadmin.Condition.FALSE" xrefstyle="hyperlink"/> - A condition object that will always evaluate
        to <code>false</code> and that is never postponed.</para>
      </listitem>
    </itemizedlist>

    <para>If no static <code>getCondition</code> method can be found, the
    Conditional Permission Admin service must try to find a public constructor
    that takes a <code>Bundle</code> object and a <xref linkend="org.osgi.service.condpermadmin.ConditionInfo" xrefstyle="hyperlink"/> object as arguments. For the
    <code>com.acme.AcmeCondition</code>, the Conditional Permission Admin must
    look for:</para>

    <programlisting>public static Condition com.acme.AcmeCondition.getCondition(
        Bundle, ConditionInfo )
public com.acme.AcmeCondition( Bundle, <code>ConditionInfo</code> )</programlisting>

    <para>If it is not possible to create a condition object, the given
    condition must be treated as a <code>Condition.</code><xref linkend="org.osgi.service.condpermadmin.Condition.FALSE" xrefstyle="hyperlink"/> object and an error should be logged.</para>

    <para>A <code>Condition</code> object will be unique to a Bundle
    Protection Domain as explained in <xref linkend="i1648674"/>. Thus, any
    queries made on a <code>Condition</code> object will be with the given
    <code>Bundle</code> object as context.</para>

    <para>The cheapest <code>Condition</code> objects are immutable; they have
    almost no overhead. If a <code>Condition</code> object is immutable
    directly after it is created, then the Framework Security Manager can
    immediately shortcut future evaluations. That is, if an immutable
    <code>Condition</code> object is not satisfied, its parent policy can be
    immediately be discarded; it is not even necessary to instantiate any
    further <code>Condition</code> or <code>Permission</code> objects for that
    policy.</para>

    <para>Mutable <code>Condition</code> objects must be evaluated during a
    permission check. Permission checks are common and the evaluation of a
    permission should therefore be highly optimized and preferably not cause
    additional security checks on the same thread. A mutable condition is
    system code, it must be designed to work in a constrained environment. The
    <xref linkend="org.osgi.service.condpermadmin.Condition.isSatisfied--" xrefstyle="hyperlink"/> method should be designed to quickly return. It
    should normally base its decision on variables and limit its side
    effects.</para>

    <para>However, side effects are sometimes necessary; a key example is user
    prompting. As discussed in <xref linkend="i1456283"/>, the evaluation can
    be postponed towards the end of the check, where a special version of
    <code>isSatisfied</code> method is called. The <code>Condition</code>
    object must always return <code>true</code> for the <xref linkend="org.osgi.service.condpermadmin.Condition.isPostponed--" xrefstyle="hyperlink"/> method to be postponed and it must always return
    the same value.</para>

    <para>Mutable postponed conditions must optimize their evaluation by
    implementing an instance method
    <code>isSatisfied(Condition[],Dictionary)</code>. This method must only be
    called with a single element in the array; this element is unrelated to
    the given instance (except that the class is the same).</para>

    <para>The following is the code for a condition that verifies that an
    action is granted by a network server. This is a postponed condition that
    groups all requests before it asks the host for authorization. The network
    code is abstracted in a <code>Host</code> class that is not shown
    here.</para>

    <programlisting>public class HostCondition implements Condition{
    String                  action;

    public HostCondition( Bundle, ConditionInfo info ) {
        action = info.getArgs()[0];
    }

    public boolean isSatisfied() { return false; }
    public boolean isPostponed() { return true; }
    public boolean isMutable()   { return false; }

    static Host         host = new Host();

    public synchronized boolean isSatisfied(
        Condition[] conditions, Dictionary state ) {
        Set       granted = (Set) state.get("granted");
        if ( granted == null ) {
            granted = new TreeSet();
            state.put("granted", granted );
        }
        Set     pending = new TreeSet();
        // There will only be one condition
        for ( int i=0; i&lt;conditions.length; i++ ) {
            String a = ((HostCondition)conditions[i]).action;
            if ( ! granted.contains(a) )
                pending.add( a );
        }
        if ( pending.isEmpty() )
            return true;

        if ( ! host.permits( pending ) )
            return false;

        granted.addAll( pending );
        return true;
    }
}</programlisting>

    <para>The Host Condition has the following Condition Info
    representation:</para>

    <programlisting>[ HostCondition "payment" ]</programlisting>

    <para>The majority of the code is in the <code>isSatisfied</code> method
    which takes an array of <code>Condition</code>. The constructor only
    stores the action.</para>

    <para>This <code>isSatisfied</code> method first gets the set of granted
    permissions. The first time the method is called this set does not exist.
    It is then created and stored in the state dictionary for use in later
    invocations.</para>

    <para>Next, a temporary set <code>pending</code> is created to hold all
    the actions of the conditions that are checked, minus any conditions that
    were already granted during this invocation of the Security Manager
    <code>checkPermission</code> method. If the pending list turns out to be
    empty because all actions were already granted, the method returns true.
    Otherwise it asks the host. If the host allows the actions, the pending
    actions are added to the granted set in the state dictionary.</para>
  </section>

  <section xml:id="i1534900">
    <title>Standard Conditions</title>

    <para>This specification provides a number of standard conditions. These
    conditions are explained in the following sections.</para>

    <section>
      <title>Bundle Signer Condition</title>

      <para>A Bundle Signer Condition is satisfied when the related bundle is
      signed with a certificate that matches its argument. That is, this
      condition can be used to assign permissions to bundles that are signed
      by certain principals.</para>

      <para>The Bundle Signer Condition must be created through its static
      <code>getCondition(Bundle,ConditionInfo)</code> method. The first string
      argument is a matching Distinguished Name as defined in <xref linkend="framework.security.certificate.matching"/>. The second argument
      is optional, if used, it must be an exclamation mark (<code>'!'
      \u0021</code>). The exclamation mark indicates that the result for this
      condition must be reversed. For example:</para>

      <programlisting>[ ...BundleSignerCondition "* ;cn=S&amp;V,o=Tweety Inc., c=US"]
[ ...BundleSignerCondition "* ;cn=S&amp;V" "!"]</programlisting>

      <para>The Bundle Signer Condition is immutable and can be completely
      evaluated during the <code>getCondition</code> method.</para>
    </section>

    <section>
      <title>Bundle Location Condition</title>

      <para>The Bundle Location Condition matches its argument against the
      location string of the bundle argument. Bundle location matching
      provides many of the advantages of signing without the overhead.
      However, using locations as the authenticator requires that the download
      locations are secured and cannot be spoofed. For example, an Operator
      could permit Enterprises by forcing them to download their bundles from
      specific locations. To make this reasonable secure, at least the HTTPS
      protocol should be used. The Operator can then use the location to
      assign permissions.</para>

      <programlisting>https://www.acme.com/download/*      Appsfrom ACME
https://www.operator.com/download/*  Operatorapps</programlisting>

      <para>The Bundle Location Condition must be created through its static
      <code>getCondition(Bundle,ConditionInfo)</code> method. The first string
      argument is a location string with possible wildcard asterisks
      (<code>'*' \u002A</code>). Wildcards are matched using Filter string
      matching. The second argument is optional, if used, it must be an
      exclamation mark (<code>'!' \u0021</code>). The exclamation mark
      indicates that the result for this condition must be reversed. For
      example:</para>

      <programlisting>..BundleLocationCondition "http://www.acme.com/*"
..BundleLocationCondition "*://www.acme.com/*"</programlisting>

      <para>The Bundle Location Condition is satisfied when its argument can
      be matched with the actual location.</para>

      <para>The Bundle Location Condition is immutable and can be completely
      evaluated during the <code>getCondition</code> method.</para>
    </section>
  </section>

  <section xml:id="i1576555">
    <title>Bundle Permission Resource</title>

    <para>Bundles can convey their local permissions using the file
    <code>OSGI-INF/permissions.perm</code>. This must be a UTF-8 encoded file.
    The format of the file is line based; lines are not limited in length but
    must be readable with the <code>BufferedReader readLine</code>
    method:</para>

    <programlisting>    permissions.perm ::= line *
    line             ::= ( comment | pinfo ) ( '\r\n'| '\n' )
    comment          ::= ( '#' | '//' )
    pinfo            ::= '(' qname ( quoted-string
                                    ( quoted-string )? )? ')'
    // See <xref linkend="framework.general.syntax" xrefstyle="template:%n"/></programlisting>

    <para>Each permission must be listed on its own line using the encoded
    form of Permission Info. Comment lines are allowed. They consist of lines
    starting with a <code>#</code> or <code>//</code>, where leading spaces
    must be ignored. Multiple spaces outside quotes must be treated as a
    single space.</para>

    <para>For example (<code>..</code> must be replaced with the appropriate
    package prefix.):</para>

    <programlisting># Friday, Feb 24 2005
# ACME, chess game
( ..ServicePermission "..log.LogService" "GET" )
( ..PackagePermission "..log" "IMPORT" )
( ..ServicePermission "..cm.ManagedService" "REGISTER" )
( ..PackagePermission "..cm" "IMPORT" )
( ..ServicePermission "..useradmin.UserAdmin" "GET" )
( ..PackagePermission "com.acme.chess" "IMPORT,EXPORTONLY")
( ..PackagePermission "com.acme.score" "IMPORT" )
</programlisting>

    <para>If this resource is present in the Bundle JAR, it will set the local
    permissions. If it is not present, the local permissions must be All
    Permission.</para>

    <section>
      <title>Removing the Bundle Permission Resource</title>

      <para>An attacker could circumvent the local permission by simply
      removing the permissions.perm file from the bundle. This would remove
      any local permissions that were required by a signer of the bundle. To
      prevent this type of attack the Conditional Permission Admin must detect
      that the <code>permissions.perm</code> resource was signed, that is,
      present in the Manifest, but that it is not in the JAR. If the bundle is
      being installed when this condition is detected, the install must fail
      with a Bundle Exception.</para>
    </section>
  </section>

  <section xml:id="i1543285">
    <title>Relation to Permission Admin</title>

    <para>If the framework provides a Conditional Permission Admin service and
    a Permission Admin service then a bundle A will receive its permissions
    according to the following steps:</para>

    <orderedlist>
      <listitem>
        <para>If the Permission Admin defines the permissions for bundle A
        (location is set), then these permissions override any Conditional
        Permission Admin information.</para>
      </listitem>

      <listitem>
        <para>If the Conditional Permission Admin has a non-empty table, then
        this table is used to calculate the permissions for bundle A.</para>
      </listitem>

      <listitem>
        <para>If the default permissions are set in Permission Admin, then
        these are given to bundle A.</para>
      </listitem>

      <listitem>
        <para>All Permission is given to bundle A.</para>
      </listitem>
    </orderedlist>

    <para>The Permission Admin defines a concept of <emphasis>Default
    Permissions</emphasis>, which is not supported by Conditional Permission
    Admin. Default permissions are now modeled with an empty set of
    conditions. Empty sets of conditions apply to <emphasis>all
    bundles</emphasis>, this in addition to any more specific conditions. This
    is very different from the Permission Admin service where the default
    permissions only apply when there is no location bound permission for that
    bundle. The default conditions of Permission Admin are therefore never
    used when Conditional Permission Admin is present and its table is
    non-empty.</para>

    <para>New applications should use the Conditional Permission Admin
    service. The Permission Admin service will be deprecated in a future
    release.</para>
  </section>

  <section>
    <title>Implementation Issues</title>

    <section xml:id="i1706619">
      <title>Optimizing Immutable Conditions</title>

      <para>There is a subtle interaction between mutability and postponement.
      An immutable postponed condition must be treated as a postponed
      conditions. This first result can then be cached. The following table
      shows the interaction between mutability and postponement. The
      <emphasis>Direct</emphasis> column indicates the steps during the
      permission check, the <emphasis>After</emphasis> column indicates the
      step when all the permissions are checked and found to allow the
      requested action.</para>

      <informaltable>
        <tgroup cols="4">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="1.5*"/>

          <colspec colnum="4" colwidth="2*"/>

          <thead>
            <row>
              <entry>isMutable</entry>

              <entry>isPostponed</entry>

              <entry>Direct</entry>

              <entry>After</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>false</code></entry>

              <entry><code>false</code></entry>

              <entry><code>isSatisfied() / cache</code></entry>

              <entry/>
            </row>

            <row>
              <entry><code>false</code></entry>

              <entry><code>true</code></entry>

              <entry><code>use cache if exists</code></entry>

              <entry><code>isSatisfied(Condition[], Dictionary) /
              cache</code></entry>
            </row>

            <row>
              <entry><code>true</code></entry>

              <entry><code>false</code></entry>

              <entry><code>isSatisfied()</code></entry>

              <entry/>
            </row>

            <row>
              <entry><code>true</code></entry>

              <entry><code>true</code></entry>

              <entry><code>postpone</code></entry>

              <entry><code>isSatisfied(Condition[], Dictionary)
              (grouped)</code></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This significant optimization is leveraged by the provided
      <code>BundleLocationCondition</code> and
      <code>BundleSignerCondition</code> classes. The Protection Domain will
      never have to consider conditional permissions that do not match the
      protection domain's bundle. However, a <code>Condition</code> object can
      also start as a mutable condition and later become immutable. For
      example, a user prompt could have the following states:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Prompt</emphasis> - The user must be prompted to get
          the answer, the Conditional Permission Admin will evaluate the
          answer to detect if it is satisfied.</para>
        </listitem>

        <listitem>
          <para><emphasis>Blanket</emphasis> - The user, during an earlier
          prompt, has indicated it approves or denies access for that
          remainder of the lifetime of the bundle. In this state, the
          <code>Condition</code> object has become immutable.</para>
        </listitem>
      </itemizedlist>

      <para>This specification provides a number of condition classes to bind
      permission sets to specific bundles. However, custom code can also
      provide conditions. See <xref linkend="i1712960"/> for more information
      about custom conditions.</para>
    </section>

    <section>
      <title>Optimizing the Permission Check</title>

      <para>Theoretically, every <code>checkPermission</code> method must
      evaluate every condition for every bundle on the call stack. That is,
      the Framework Security Manager must iterate through all bundles on the
      stack, run through the instantiated policy table of that bundle,
      evaluate all the conditions, test the permissions, until it finds a
      permission that is implied. This model would be prohibitively
      expensive.</para>

      <para>Implementations are therefore urged to optimize the evaluation of
      the permission checks as much as possible. They are free to change the
      algorithms described in this specification as long as the external
      effect remains the same.</para>

      <para>One optimization is pruning the instantiated policy table. A
      <code>Condition</code> object can be pruned if it is immutable.</para>

      <para>If an immutable <code>Condition</code> object is satisfied, it can
      be removed from the policy's <code>Condition</code> objects because it
      cannot influence the evaluation anymore. If it is not satisfied, the
      corresponding policy can be completely discarded because one of the
      <code>Condition</code> objects is not satisfied, making it impossible
      for the policy to be used.</para>

      <para>For example, assume the following policy table:</para>

      <programlisting>ALLOW {
    [ ...BundleLocationCondition
          "http://www.acme.com/*" ]
    ( ...SocketPermission "www.acme.com" "connect,accept" )
}
ALLOW {
    [ ...BundleLocationCondition
          "http://www.et.com/*" ]
    [ ...Prompt "Phone home?" ]
    ( ...SocketPermission "www.et.com" "connect,accept" )
}</programlisting>

      <para>Assume this table is instantiated for a bundle with a location of
      http://<code>www.acme.com/bundle.jar</code>. The first policy's
      permissions can be placed in a the special Permission Collection because
      the Bundle Location condition is immutable and in this case
      satisfied.</para>

      <para>The second policy can be discarded for this bundle because it is
      immutable and not satisfied for the bundle's location. Any condition
      that is not satisfied and immutable makes the policy ignorable.</para>
    </section>

    <section>
      <title>Using Permission Checks in Conditions</title>

      <para>If there is a chance that permissions will be checked in code
      being called by <code>isSatisfied</code>, the implementer of the
      Condition should use the <code>AccessController</code>
      <code>doPrivileged</code> to ensure needed permissions. For example, a
      User Prompt Condition has the potential to cause many permission checks
      as it interacts with the UI.</para>

      <para>However, the same Condition object must not be evaluated
      recursively. The Framework must detect the recursive evaluation of a
      <code>Condition</code> object and act as if the second invocation
      returns an unsatisfied, not postponed <code>Condition</code>
      object.</para>

      <para>For example, if a User Prompt Condition is evaluated and this
      evaluation accesses the UI, which in its turn checks a permission that
      causes the evaluation of the same User Prompt Condition, then this
      second evaluation must not take place and be treated as not postponed
      and <code>false</code>.</para>
    </section>

    <section>
      <title>Concurrency</title>

      <para>A Condition implementation is guaranteed that all evaluations
      necessary for a single <code>checkPermission</code> invocation are
      carried out on the same thread. However, multiple permission checks can
      take place on different threads. It is the responsibility of the
      Condition class implementers to handle these synchronization
      issues.</para>
    </section>

    <section>
      <title>Class Loading</title>

      <para>All conditions must come from the boot class path or from the
      Framework class loader. This is due to security reasons as well as to
      prevent the case that there are multiple versions of the implementation
      packages present. Conditions can still be downloaded with bundles by
      using a Framework extension bundle, see <xref linkend="framework.module.extensionbundles"/>.</para>
    </section>

    <section xml:id="i1691964">
      <title>Condition Life Cycle</title>

      <para><code>Condition</code> objects will get instantiated when the
      framework is restarted or the Bundle Protection Domain is created.
      Framework implementations can also use optimizations that cause
      <code>Condition</code> objects to be created and destroyed multiple
      times within the lifetime of an instance of a Bundle Protection Domain.
      An implementation of a <code>Condition</code> class must not make any
      assumptions about its creation or dereferencing.</para>
    </section>
  </section>

  <section>
    <title>Security</title>

    <section>
      <title>Service Registry Security</title>

      <section>
        <title>Conditional Permission Admin Service</title>

        <para>The Conditional Permission Admin service should be part of the
        Framework and therefore has All Permission.</para>
      </section>

      <section>
        <title>Client</title>

        <programlisting>ServicePermission   ..ConditionalPermissionAdmin  GET
PackagePermission   ..condpermadmin               IMPORT
AllPermission</programlisting>

        <para>Clients of the Conditional Permission Admin service that set
        permissions must themselves have All Permission because they can give
        All Permission to any bundle.</para>
      </section>
    </section>
  </section>

  <section xreflabel="org.osgi.service.condpermadmin" version="5" role="package" xml:id="org.osgi.service.condpermadmin" xml:base="050/../../../generated/javadoc/docbook/org.osgi.service.condpermadmin.xml">
   <title>org.osgi.service.condpermadmin</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.condpermadmin-version">Version 1.1</releaseinfo>
      <edition xml:id="org.osgi.service.condpermadmin-version.number">1.1</edition>
   </info>
   <para>
Conditional Permission Admin Package Version 1.1.

 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest.

 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.condpermadmin; version="[1.1,2.0)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.condpermadmin.BundleLocationCondition">
                  <code>BundleLocationCondition</code>
               </link> -
Condition to test if the location of a bundle matches or does not match a
 pattern.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.condpermadmin.BundleSignerCondition">
                  <code>BundleSignerCondition</code>
               </link> -
Condition to test if the signer of a bundle matches or does not match a
 pattern.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.condpermadmin.Condition">
                  <code>Condition</code>
               </link> -
The interface implemented by a Condition.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.condpermadmin.ConditionalPermissionAdmin">
                  <code>ConditionalPermissionAdmin</code>
               </link> -
Framework service to administer Conditional Permissions.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.condpermadmin.ConditionalPermissionInfo">
                  <code>ConditionalPermissionInfo</code>
               </link> -
A list of Permissions guarded by a list of conditions with an access
 decision.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.condpermadmin.ConditionalPermissionUpdate">
                  <code>ConditionalPermissionUpdate</code>
               </link> -
Update the Conditional Permission Table.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.condpermadmin.ConditionInfo">
                  <code>ConditionInfo</code>
               </link> -
Condition representation used by the Conditional Permission Admin service.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section xreflabel="BundleLocationCondition" role="class" xml:id="org.osgi.service.condpermadmin.BundleLocationCondition">
      <title>public class BundleLocationCondition</title>
      <para>
Condition to test if the location of a bundle matches or does not match a
 pattern. Since the bundle's location cannot be changed, this condition is
 immutable.

 </para>
      <para>
 Pattern matching is done according to the filter string matching rules.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section xreflabel="getCondition(Bundle,ConditionInfo)" role="method" xml:id="org.osgi.service.condpermadmin.BundleLocationCondition.getCondition-Bundle-ConditionInfo-">
         <title>public static Condition getCondition(Bundle bundle, ConditionInfo info)</title>
         <formalpara role="parameter">
            <title>bundle</title>
            <para>The Bundle being evaluated.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>info</title>
            <para>The ConditionInfo from which to construct the condition. The
        ConditionInfo must specify one or two arguments. The first
        argument of the ConditionInfo specifies the location pattern
        against which to match the bundle location. Matching is done
        according to the filter string matching rules. Any '*' characters
        in the first argument are used as wildcards when matching bundle
        locations unless they are escaped with a '\' character. The
        Condition is satisfied if the bundle location matches the pattern.
        The second argument of the ConditionInfo is optional. If a second
        argument is present and equal to "!", then the satisfaction of the
        Condition is negated. That is, the Condition is satisfied if the
        bundle location does NOT match the pattern. If the second argument
        is present but does not equal "!", then the second argument is
        ignored.</para>
         </formalpara>
         <para role="description">
Constructs a condition that tries to match the passed Bundle's location
 to the location pattern.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Condition object for the requested condition.</para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="BundleSignerCondition" role="class" xml:id="org.osgi.service.condpermadmin.BundleSignerCondition">
      <title>public class BundleSignerCondition</title>
      <para>
Condition to test if the signer of a bundle matches or does not match a
 pattern. Since the bundle's signer can only change when the bundle is
 updated, this condition is immutable.
 </para>
      <para>
 The condition expressed using a single String that specifies a Distinguished
 Name (DN) chain to match bundle signers against. DN's are encoded using IETF
 RFC 2253. Usually signers use certificates that are issued by certificate
 authorities, which also have a corresponding DN and certificate. The
 certificate authorities can form a chain of trust where the last DN and
 certificate is known by the framework. The signer of a bundle is expressed as
 signers DN followed by the DN of its issuer followed by the DN of the next
 issuer until the DN of the root certificate authority. Each DN is separated
 by a semicolon.
 </para>
      <para>
 A bundle can satisfy this condition if one of its signers has a DN chain that
 matches the DN chain used to construct this condition. Wildcards (`*') can be
 used to allow greater flexibility in specifying the DN chains. Wildcards can
 be used in place of DNs, RDNs, or the value in an RDN. If a wildcard is used
 for a value of an RDN, the value must be exactly "*" and will match any value
 for the corresponding type in that RDN. If a wildcard is used for a RDN, it
 must be the first RDN and will match any number of RDNs (including zero
 RDNs).</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section xreflabel="getCondition(Bundle,ConditionInfo)" role="method" xml:id="org.osgi.service.condpermadmin.BundleSignerCondition.getCondition-Bundle-ConditionInfo-">
         <title>public static Condition getCondition(Bundle bundle, ConditionInfo info)</title>
         <formalpara role="parameter">
            <title>bundle</title>
            <para>The Bundle being evaluated.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>info</title>
            <para>The ConditionInfo from which to construct the condition. The
        ConditionInfo must specify one or two arguments. The first
        argument of the ConditionInfo specifies the chain of distinguished
        names pattern to match against the signer of the bundle. The
        Condition is satisfied if the signer of the bundle matches the
        pattern. The second argument of the ConditionInfo is optional. If
        a second argument is present and equal to "!", then the
        satisfaction of the Condition is negated. That is, the Condition
        is satisfied if the signer of the bundle does NOT match the
        pattern. If the second argument is present but does not equal "!",
        then the second argument is ignored.</para>
         </formalpara>
         <para role="description">
Constructs a Condition that tries to match the passed Bundle's location
 to the location pattern.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A Condition which checks the signers of the specified bundle.</para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="Condition" role="class" xml:id="org.osgi.service.condpermadmin.Condition">
      <title>public interface Condition</title>
      <para>
The interface implemented by a Condition. Conditions are bound to Permissions
 using Conditional Permission Info. The Permissions of a ConditionalPermission
 Info can only be used if the associated Conditions are satisfied.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section xreflabel="FALSE" role="field" xml:id="org.osgi.service.condpermadmin.Condition.FALSE">
         <title>public static final Condition FALSE</title>
         <para>
A Condition object that will always evaluate to false and that is never
 postponed.
   </para>
      </section>
      <section xreflabel="TRUE" role="field" xml:id="org.osgi.service.condpermadmin.Condition.TRUE">
         <title>public static final Condition TRUE</title>
         <para>
A Condition object that will always evaluate to true and that is never
 postponed.
   </para>
      </section>
      <section xreflabel="isMutable()" role="method" xml:id="org.osgi.service.condpermadmin.Condition.isMutable--">
         <title>public boolean isMutable()</title>
         <para role="description">
Returns whether the Condition is mutable. A Condition can go from mutable
 (<code>true</code>) to immutable (<code>false</code>) over time but never from
 immutable (<code>false</code>) to mutable (<code>true</code>).
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code>
               <link linkend="org.osgi.service.condpermadmin.Condition.isSatisfied--">isSatisfied()</link> can change. Otherwise,
         <code>false</code> if the value returned by <link linkend="org.osgi.service.condpermadmin.Condition.isSatisfied--">isSatisfied()</link>
         will not change for this condition.</para>
         </formalpara>
      </section>
      <section xreflabel="isPostponed()" role="method" xml:id="org.osgi.service.condpermadmin.Condition.isPostponed--">
         <title>public boolean isPostponed()</title>
         <para role="description">
Returns whether the evaluation must be postponed until the end of the
 permission check. If this method returns <code>false</code> (or this Condition
 is immutable), then this Condition must be able to directly answer the
 <link linkend="org.osgi.service.condpermadmin.Condition.isSatisfied--">isSatisfied()</link> method. In other words, isSatisfied() will return
 very quickly since no external sources, such as for example users or
 networks, need to be consulted.
 </para>
         <para>
 This method must always return the same value whenever it is called so
 that the Conditional Permission Admin can cache its result.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> to indicate the evaluation must be postponed.
         Otherwise, <code>false</code> if the evaluation can be performed
         immediately.</para>
         </formalpara>
      </section>
      <section xreflabel="isSatisfied()" role="method" xml:id="org.osgi.service.condpermadmin.Condition.isSatisfied--">
         <title>public boolean isSatisfied()</title>
         <para role="description">
Returns whether the Condition is satisfied. This method is only called
 for immediate Condition objects or immutable postponed conditions, and
 must always be called inside a permission check. Mutable postponed
 Condition objects will be called with the grouped version
 <link linkend="org.osgi.service.condpermadmin.Condition.isSatisfied-Condition---Dictionary-">isSatisfied(Condition[],Dictionary)</link> at the end of the permission
 check.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> to indicate the Conditions is satisfied. Otherwise,
         <code>false</code> if the Condition is not satisfied.</para>
         </formalpara>
      </section>
      <section xreflabel="isSatisfied(Condition[],Dictionary)" role="method" xml:id="org.osgi.service.condpermadmin.Condition.isSatisfied-Condition---Dictionary-">
         <title>public boolean isSatisfied(Condition[] conditions, Dictionary&lt;Object, Object&gt; context)</title>
         <formalpara role="parameter">
            <title>conditions</title>
            <para>The array of Condition objects, which must all be of
        the same class and mutable. The receiver must be one of those
        Condition objects.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>context</title>
            <para>A Dictionary object that implementors can use to track
        state. If this method is invoked multiple times in the same
        permission check, the same Dictionary will be passed multiple
        times. The SecurityManager treats this Dictionary as an opaque
        object and simply creates an empty dictionary and passes it to
        subsequent invocations if multiple invocations are needed.</para>
         </formalpara>
         <para role="description">
Returns whether the specified set of Condition objects are satisfied.
 Although this method is not static, it must be implemented as if it were
 static. All of the passed Condition objects will be of the same type and
 will correspond to the class type of the object on which this method is
 invoked. This method must be called inside a permission check only.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if all the Condition objects are satisfied.
         Otherwise, <code>false</code> if one of the Condition objects is not
         satisfied.</para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="ConditionalPermissionAdmin" role="class" xml:id="org.osgi.service.condpermadmin.ConditionalPermissionAdmin">
      <title>public interface ConditionalPermissionAdmin</title>
      <para>
Framework service to administer Conditional Permissions. Conditional
 Permissions can be added to, retrieved from, and removed from the framework.
 Conditional Permissions are conceptually managed in an ordered table called
 the Conditional Permission Table.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section xreflabel="addConditionalPermissionInfo(ConditionInfo[],PermissionInfo[])" role="method" xml:id="org.osgi.service.condpermadmin.ConditionalPermissionAdmin.addConditionalPermissionInfo-ConditionInfo---PermissionInfo---">
         <title>public ConditionalPermissionInfo addConditionalPermissionInfo(ConditionInfo[] conditions, PermissionInfo[] permissions)</title>
         <formalpara role="parameter">
            <title>conditions</title>
            <para>The conditions that need to be satisfied to enable the
        specified permissions. This argument can be <code>null</code> or an
        empty array indicating the specified permissions are not guarded
        by any conditions.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>permissions</title>
            <para>The permissions that are enabled when the specified
        conditions, if any, are satisfied. This argument must not be
        <code>null</code> and must specify at least one permission.</para>
         </formalpara>
         <para role="description">
Create a new Conditional Permission Info in the Conditional Permission
 Table.
 </para>
         <para>
 The Conditional Permission Info will be given a unique, never reused
 name. This entry will be added at the beginning of the Conditional
 Permission Table with an access decision of
 <link linkend="org.osgi.service.condpermadmin.ConditionalPermissionInfo.ALLOW">ALLOW</link>.
 </para>
         <para>
 Since this method changes the Conditional Permission Table any
 <link linkend="org.osgi.service.condpermadmin.ConditionalPermissionUpdate">ConditionalPermissionUpdate</link>s that were created prior to calling
 this method can no longer be committed.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The ConditionalPermissionInfo for the specified Conditions and
         Permissions.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If no permissions are specified.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have
         <code>AllPermission</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Deprecated</title>
            <para>As of 1.1. Use <link linkend="org.osgi.service.condpermadmin.ConditionalPermissionAdmin.newConditionalPermissionUpdate--">newConditionalPermissionUpdate()</link>
             instead.</para>
         </formalpara>
      </section>
      <section xreflabel="getAccessControlContext(String[])" role="method" xml:id="org.osgi.service.condpermadmin.ConditionalPermissionAdmin.getAccessControlContext-String---">
         <title>public AccessControlContext getAccessControlContext(String[] signers)</title>
         <formalpara role="parameter">
            <title>signers</title>
            <para>The signers for which to return an Access Control Context.</para>
         </formalpara>
         <para role="description">
Returns the Access Control Context that corresponds to the specified
 signers.

 The returned Access Control Context must act as if its protection domain
 came from a bundle that has the following characteristics:
 </para>
         <itemizedlist>
            <listitem>
               <para>It is signed by all of the given signers</para>
            </listitem>
            <listitem>
               <para>It has a bundle id of -1</para>
            </listitem>
            <listitem>
               <para>Its location is the empty string</para>
            </listitem>
            <listitem>
               <para>Its state is UNINSTALLED</para>
            </listitem>
            <listitem>
               <para>It has no headers</para>
            </listitem>
            <listitem>
               <para>It has the empty version (0.0.0)</para>
            </listitem>
            <listitem>
               <para>Its last modified time=0</para>
            </listitem>
            <listitem>
               <para>Many methods will throw <code>IllegalStateException</code> because the
 state is UNINSTALLED</para>
            </listitem>
            <listitem>
               <para>All other methods return a <code>null</code>
               </para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An <code>AccessControlContext</code> that has the Permissions
         associated with the signer.</para>
         </formalpara>
      </section>
      <section xreflabel="getConditionalPermissionInfo(String)" role="method" xml:id="org.osgi.service.condpermadmin.ConditionalPermissionAdmin.getConditionalPermissionInfo-String-">
         <title>public ConditionalPermissionInfo getConditionalPermissionInfo(String name)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The name of the Conditional Permission Info to be returned.</para>
         </formalpara>
         <para role="description">
Return the Conditional Permission Info with the specified name.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The Conditional Permission Info with the specified name or
         <code>null</code> if no Conditional Permission Info with the specified
         name exists in the Conditional Permission Table.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Deprecated</title>
            <para>As of 1.1. Use <link linkend="org.osgi.service.condpermadmin.ConditionalPermissionAdmin.newConditionalPermissionUpdate--">newConditionalPermissionUpdate()</link>
             instead.</para>
         </formalpara>
      </section>
      <section xreflabel="getConditionalPermissionInfos()" role="method" xml:id="org.osgi.service.condpermadmin.ConditionalPermissionAdmin.getConditionalPermissionInfos--">
         <title>public Enumeration&lt;ConditionalPermissionInfo&gt; getConditionalPermissionInfos()</title>
         <para role="description">
Returns the Conditional Permission Infos from the Conditional Permission
 Table.
 </para>
         <para>
 The returned Enumeration will return elements in the order they are kept
 in the Conditional Permission Table.
 </para>
         <para>
 The Enumeration returned is based on a copy of the Conditional Permission
 Table and therefore will not throw exceptions if the Conditional
 Permission Table is changed during the course of reading elements from
 the Enumeration.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An enumeration of the Conditional Permission Infos that are
         currently in the Conditional Permission Table.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Deprecated</title>
            <para>As of 1.1. Use <link linkend="org.osgi.service.condpermadmin.ConditionalPermissionAdmin.newConditionalPermissionUpdate--">newConditionalPermissionUpdate()</link>
             instead.</para>
         </formalpara>
      </section>
      <section xreflabel="newConditionalPermissionInfo(String,ConditionInfo[],PermissionInfo[],String)" role="method" xml:id="org.osgi.service.condpermadmin.ConditionalPermissionAdmin.newConditionalPermissionInfo-String-ConditionInfo---PermissionInfo---String-">
         <title>public ConditionalPermissionInfo newConditionalPermissionInfo(String name, ConditionInfo[] conditions, PermissionInfo[] permissions, String access)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The name of the created <code>ConditionalPermissionInfo</code> or
        <code>null</code> to have a unique name generated when the returned
        <code>ConditionalPermissionInfo</code> is committed in an update to the
        Conditional Permission Table.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>conditions</title>
            <para>The conditions that need to be satisfied to enable the
        specified permissions. This argument can be <code>null</code> or an
        empty array indicating the specified permissions are not guarded
        by any conditions.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>permissions</title>
            <para>The permissions that are enabled when the specified
        conditions, if any, are satisfied. This argument must not be
        <code>null</code> and must specify at least one permission.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>access</title>
            <para>Access decision. Must be one of the following values:
        <itemizedlist>
                  <listitem>
                     <para>
                        <link linkend="org.osgi.service.condpermadmin.ConditionalPermissionInfo.ALLOW">allow</link>
                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        <link linkend="org.osgi.service.condpermadmin.ConditionalPermissionInfo.DENY">deny</link>
                     </para>
                  </listitem>
               </itemizedlist>
        The specified access decision value must be evaluated case
        insensitively.</para>
         </formalpara>
         <para role="description">
Creates a new ConditionalPermissionInfo with the specified fields
 suitable for insertion into a <link linkend="org.osgi.service.condpermadmin.ConditionalPermissionUpdate">ConditionalPermissionUpdate</link>. The
 <code>delete</code> method on <code>ConditionalPermissionInfo</code> objects
 created with this method must throw UnsupportedOperationException.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A <code>ConditionalPermissionInfo</code> object suitable for insertion
         into a <link linkend="org.osgi.service.condpermadmin.ConditionalPermissionUpdate">ConditionalPermissionUpdate</link>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If no permissions are specified or if
         the specified access decision is not a valid value.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section xreflabel="newConditionalPermissionInfo(String)" role="method" xml:id="org.osgi.service.condpermadmin.ConditionalPermissionAdmin.newConditionalPermissionInfo-String-">
         <title>public ConditionalPermissionInfo newConditionalPermissionInfo(String encodedConditionalPermissionInfo)</title>
         <formalpara role="parameter">
            <title>encodedConditionalPermissionInfo</title>
            <para>The encoded
        <code>ConditionalPermissionInfo</code>. White space in the encoded
        <code>ConditionalPermissionInfo</code> is ignored. The access decision
        value in the encoded <code>ConditionalPermissionInfo</code> must be
        evaluated case insensitively. If the encoded
        <code>ConditionalPermissionInfo</code> does not contain the optional
        name, <code>null</code> must be used for the name and a unique name
        will be generated when the returned
        <code>ConditionalPermissionInfo</code> is committed in an update to the
        Conditional Permission Table.</para>
         </formalpara>
         <para role="description">
Creates a new <code>ConditionalPermissionInfo</code> from the specified
 encoded <code>ConditionalPermissionInfo</code> string suitable for insertion
 into a <link linkend="org.osgi.service.condpermadmin.ConditionalPermissionUpdate">ConditionalPermissionUpdate</link>. The <code>delete</code> method on
 <code>ConditionalPermissionInfo</code> objects created with this method must
 throw UnsupportedOperationException.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A <code>ConditionalPermissionInfo</code> object suitable for insertion
         into a <link linkend="org.osgi.service.condpermadmin.ConditionalPermissionUpdate">ConditionalPermissionUpdate</link>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the specified
         <code>encodedConditionalPermissionInfo</code> is not properly
         formatted.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.condpermadmin.ConditionalPermissionInfo.getEncoded--">ConditionalPermissionInfo.getEncoded()</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section xreflabel="newConditionalPermissionUpdate()" role="method" xml:id="org.osgi.service.condpermadmin.ConditionalPermissionAdmin.newConditionalPermissionUpdate--">
         <title>public ConditionalPermissionUpdate newConditionalPermissionUpdate()</title>
         <para role="description">
Creates a new update for the Conditional Permission Table. The update is
 a working copy of the current Conditional Permission Table. If the
 running Conditional Permission Table is modified before commit is called
 on the returned update, then the call to commit on the returned update
 will fail. That is, the commit method will return false and no change
 will be made to the running Conditional Permission Table. There is no
 requirement that commit is eventually called on the returned update.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A new update for the Conditional Permission Table.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section xreflabel="setConditionalPermissionInfo(String,ConditionInfo[],PermissionInfo[])" role="method" xml:id="org.osgi.service.condpermadmin.ConditionalPermissionAdmin.setConditionalPermissionInfo-String-ConditionInfo---PermissionInfo---">
         <title>public ConditionalPermissionInfo setConditionalPermissionInfo(String name, ConditionInfo[] conditions, PermissionInfo[] permissions)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The name of the Conditional Permission Info, or <code>null</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>conditions</title>
            <para>The conditions that need to be satisfied to enable the
        specified permissions. This argument can be <code>null</code> or an
        empty array indicating the specified permissions are not guarded
        by any conditions.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>permissions</title>
            <para>The permissions that are enabled when the specified
        conditions, if any, are satisfied. This argument must not be
        <code>null</code> and must specify at least one permission.</para>
         </formalpara>
         <para role="description">
Set or create a Conditional Permission Info with a specified name in the
 Conditional Permission Table.
 </para>
         <para>
 If the specified name is <code>null</code>, a new Conditional Permission Info
 must be created and will be given a unique, never reused name. If there
 is currently no Conditional Permission Info with the specified name, a
 new Conditional Permission Info must be created with the specified name.
 Otherwise, the Conditional Permission Info with the specified name must
 be updated with the specified Conditions and Permissions. If a new entry
 was created in the Conditional Permission Table it will be added at the
 beginning of the table with an access decision of
 <link linkend="org.osgi.service.condpermadmin.ConditionalPermissionInfo.ALLOW">ALLOW</link>.
 </para>
         <para>
 Since this method changes the underlying permission table any
 <link linkend="org.osgi.service.condpermadmin.ConditionalPermissionUpdate">ConditionalPermissionUpdate</link>s that were created prior to calling
 this method can no longer be committed.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The ConditionalPermissionInfo for the specified name, Conditions
         and Permissions.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If no permissions are specified.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have
         <code>AllPermission</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Deprecated</title>
            <para>As of 1.1. Use <link linkend="org.osgi.service.condpermadmin.ConditionalPermissionAdmin.newConditionalPermissionUpdate--">newConditionalPermissionUpdate()</link>
             instead.</para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="ConditionalPermissionInfo" role="class" xml:id="org.osgi.service.condpermadmin.ConditionalPermissionInfo">
      <title>public interface ConditionalPermissionInfo</title>
      <para>
A list of Permissions guarded by a list of conditions with an access
 decision. Instances of this interface are obtained from the Conditional
 Permission Admin service.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section xreflabel="ALLOW" role="field" xml:id="org.osgi.service.condpermadmin.ConditionalPermissionInfo.ALLOW">
         <title>public static final String ALLOW = "allow"</title>
         <para>
This string is used to indicate that a row in the Conditional Permission
 Table should return an access decision of "allow" if the
 conditions are all satisfied and at least one of the permissions is
 implied.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section xreflabel="DENY" role="field" xml:id="org.osgi.service.condpermadmin.ConditionalPermissionInfo.DENY">
         <title>public static final String DENY = "deny"</title>
         <para>
This string is used to indicate that a row in the Conditional Permission
 Table should return an access decision of "deny" if the
 conditions are all satisfied and at least one of the permissions is
 implied.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section xreflabel="delete()" role="method" xml:id="org.osgi.service.condpermadmin.ConditionalPermissionInfo.delete--">
         <title>public void delete()</title>
         <para role="description">
Removes this Conditional Permission Info from the Conditional Permission
 Table.
 </para>
         <para>
 Since this method changes the underlying permission table, any
 <link linkend="org.osgi.service.condpermadmin.ConditionalPermissionUpdate">ConditionalPermissionUpdate</link>s that were created prior to calling
 this method can no longer be committed.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>UnsupportedOperationException</code>– If this object was created by
         <link linkend="org.osgi.service.condpermadmin.ConditionalPermissionAdmin.newConditionalPermissionInfo-String-">ConditionalPermissionAdmin.newConditionalPermissionInfo(String)</link>
         or
         <link linkend="org.osgi.service.condpermadmin.ConditionalPermissionAdmin.newConditionalPermissionInfo-String-ConditionInfo---PermissionInfo---String-">ConditionalPermissionAdmin.newConditionalPermissionInfo(String, ConditionInfo[] , PermissionInfo[] , String)</link>
         or obtained from a <link linkend="org.osgi.service.condpermadmin.ConditionalPermissionUpdate">ConditionalPermissionUpdate</link>. This
         method only functions if this object was obtained from one of the
         <link linkend="org.osgi.service.condpermadmin.ConditionalPermissionAdmin">ConditionalPermissionAdmin</link> methods deprecated in version
         1.1.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have
         <code>AllPermission</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Deprecated</title>
            <para>As of 1.1. Use
             <link linkend="org.osgi.service.condpermadmin.ConditionalPermissionAdmin.newConditionalPermissionUpdate--">ConditionalPermissionAdmin.newConditionalPermissionUpdate()</link>
             instead to manage the Conditional Permissions.</para>
         </formalpara>
      </section>
      <section xreflabel="equals(Object)" role="method" xml:id="org.osgi.service.condpermadmin.ConditionalPermissionInfo.equals-Object-">
         <title>public boolean equals(Object obj)</title>
         <formalpara role="parameter">
            <title>obj</title>
            <para>The object to test for equality with this
        <code>ConditionalPermissionInfo</code> object.</para>
         </formalpara>
         <para role="description">
Determines the equality of two <code>ConditionalPermissionInfo</code> objects.

 This method checks that specified object has the same access decision,
 conditions, permissions and name as this
 <code>ConditionalPermissionInfo</code> object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if <code>obj</code> is a
         <code>ConditionalPermissionInfo</code>, and has the same access
         decision, conditions, permissions and name as this
         <code>ConditionalPermissionInfo</code> object; <code>false</code>
         otherwise.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getAccessDecision()" role="method" xml:id="org.osgi.service.condpermadmin.ConditionalPermissionInfo.getAccessDecision--">
         <title>public String getAccessDecision()</title>
         <para role="description">
Returns the access decision for this Conditional Permission Info.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>One of the following values:
         <itemizedlist>
                  <listitem>
                     <para>
                        <link linkend="org.osgi.service.condpermadmin.ConditionalPermissionInfo.ALLOW">allow</link> - The access decision is
         "allow".</para>
                  </listitem>
                  <listitem>
                     <para>
                        <link linkend="org.osgi.service.condpermadmin.ConditionalPermissionInfo.DENY">deny</link> - The access decision is "deny".
         </para>
                  </listitem>
               </itemizedlist>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section xreflabel="getConditionInfos()" role="method" xml:id="org.osgi.service.condpermadmin.ConditionalPermissionInfo.getConditionInfos--">
         <title>public ConditionInfo[] getConditionInfos()</title>
         <para role="description">
Returns the Condition Infos for the Conditions that must be satisfied to
 enable the Permissions.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The Condition Infos for the Conditions in this Conditional
         Permission Info.</para>
         </formalpara>
      </section>
      <section xreflabel="getEncoded()" role="method" xml:id="org.osgi.service.condpermadmin.ConditionalPermissionInfo.getEncoded--">
         <title>public String getEncoded()</title>
         <para role="description">
Returns the string encoding of this <code>ConditionalPermissionInfo</code> in
 a form suitable for restoring this <code>ConditionalPermissionInfo</code>.

 </para>
         <para>
 The encoded format is:

 </para>
         <programlisting>   access {conditions permissions} name</programlisting>
         <para>

 where <emphasis>access</emphasis> is the access decision, <emphasis>conditions</emphasis> is zero or
 more <link linkend="org.osgi.service.condpermadmin.ConditionInfo.getEncoded--">encoded conditions</link>,
 <emphasis>permissions</emphasis> is one or more <link linkend="org.osgi.service.permissionadmin.PermissionInfo.getEncoded--">encoded permissions</link> and <emphasis>name</emphasis> is the name of the
 <code>ConditionalPermissionInfo</code>.

 </para>
         <para>
            <emphasis>name</emphasis> is optional. If <emphasis>name</emphasis> is present in the encoded string,
 it must quoted, beginning and ending with <code>"</code>. The <emphasis>name</emphasis>
 value must be encoded for proper parsing. Specifically, the <code>"</code>,
 <code>\</code>, carriage return, and line feed characters must be escaped
 using <code>\"</code>, <code>\\</code>, <code>\r</code>, and <code>\n</code>, respectively.

 </para>
         <para>
 The encoded string contains no leading or trailing whitespace characters.
 A single space character is used between <emphasis>access</emphasis> and <code>{</code>
 and between <code>}</code> and <emphasis>name</emphasis>, if <emphasis>name</emphasis> is present.
 All encoded conditions and permissions are separated by a single space
 character.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The string encoding of this <code>ConditionalPermissionInfo</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section xreflabel="getName()" role="method" xml:id="org.osgi.service.condpermadmin.ConditionalPermissionInfo.getName--">
         <title>public String getName()</title>
         <para role="description">
Returns the name of this Conditional Permission Info.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The name of this Conditional Permission Info. This can be
         <code>null</code> if this Conditional Permission Info was created
         without a name.</para>
         </formalpara>
      </section>
      <section xreflabel="getPermissionInfos()" role="method" xml:id="org.osgi.service.condpermadmin.ConditionalPermissionInfo.getPermissionInfos--">
         <title>public PermissionInfo[] getPermissionInfos()</title>
         <para role="description">
Returns the Permission Infos for the Permissions in this Conditional
 Permission Info.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The Permission Infos for the Permissions in this Conditional
         Permission Info.</para>
         </formalpara>
      </section>
      <section xreflabel="hashCode()" role="method" xml:id="org.osgi.service.condpermadmin.ConditionalPermissionInfo.hashCode--">
         <title>public int hashCode()</title>
         <para role="description">
Returns the hash code value for this object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A hash code value for this object.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="toString()" role="method" xml:id="org.osgi.service.condpermadmin.ConditionalPermissionInfo.toString--">
         <title>public String toString()</title>
         <para role="description">
Returns the string representation of this
 <code>ConditionalPermissionInfo</code>. The string is created by calling the
 <code>getEncoded</code> method on this <code>ConditionalPermissionInfo</code>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The string representation of this
         <code>ConditionalPermissionInfo</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
         <para/>
      </section>
   </section>
   <section xreflabel="ConditionalPermissionUpdate" role="class" xml:id="org.osgi.service.condpermadmin.ConditionalPermissionUpdate">
      <title>public interface ConditionalPermissionUpdate</title>
      <para>
Update the Conditional Permission Table. There may be many update objects in
 the system at one time. If commit is called and the Conditional Permission
 Table has been modified since this update was created, then the call to
 commit will fail and this object should be discarded.
   </para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.1</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section xreflabel="commit()" role="method" xml:id="org.osgi.service.condpermadmin.ConditionalPermissionUpdate.commit--">
         <title>public boolean commit()</title>
         <para role="description">
Commit this update. If no changes have been made to the Conditional
 Permission Table since this update was created, then this method will
 replace the Conditional Permission Table with this update's Conditional
 Permissions. This method may only be successfully called once on this
 object.
 </para>
         <para>
 If any of the <link linkend="org.osgi.service.condpermadmin.ConditionalPermissionInfo">ConditionalPermissionInfo</link>s in the update list has
 <code>null</code> as a name it will be replaced with a new
 <link linkend="org.osgi.service.condpermadmin.ConditionalPermissionInfo">ConditionalPermissionInfo</link> object that has a generated name which
 is unique within the list.
 </para>
         <para>
 No two entries in this update's Conditional Permissions may have the same
 name. Other consistency checks may also be performed. If this update's
 Conditional Permissions are determined to be inconsistent in some way
 then an <code>IllegalStateException</code> will be thrown.
 </para>
         <para>
 This method returns <code>false</code> if the commit did not occur because the
 Conditional Permission Table has been modified since the creation of this
 update.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the commit was successful. <code>false</code> if the
         commit did not occur because the Conditional Permission Table has
         been modified since the creation of this update.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have
         <code>AllPermission</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this update's Conditional Permissions
         are not valid or inconsistent. For example, this update has two
         Conditional Permissions in it with the same name.</para>
         </formalpara>
      </section>
      <section xreflabel="getConditionalPermissionInfos()" role="method" xml:id="org.osgi.service.condpermadmin.ConditionalPermissionUpdate.getConditionalPermissionInfos--">
         <title>public List&lt;ConditionalPermissionInfo&gt; getConditionalPermissionInfos()</title>
         <para role="description">
This method returns the list of <link linkend="org.osgi.service.condpermadmin.ConditionalPermissionInfo">ConditionalPermissionInfo</link>s for
 this update. This list is originally based on the Conditional Permission
 Table at the time this update was created. The list returned by this
 method will be replace the Conditional Permission Table if commit is
 called and is successful.
 </para>
         <para>
 The <code>delete()</code> method of the <link linkend="org.osgi.service.condpermadmin.ConditionalPermissionInfo">ConditionalPermissionInfo</link>s in
 the list must throw UnsupportedOperationException.
 </para>
         <para>
 The list returned by this method is ordered and the most significant
 table entry is the first entry in the list.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A <code>List</code> of the <link linkend="org.osgi.service.condpermadmin.ConditionalPermissionInfo">ConditionalPermissionInfo</link>s which
         represent the Conditional Permissions maintained by this update.
         Modifications to this list will not affect the Conditional
         Permission Table until successfully committed. The list may be
         empty if the Conditional Permission Table was empty when this
         update was created.</para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="ConditionInfo" role="class" xml:id="org.osgi.service.condpermadmin.ConditionInfo">
      <title>public class ConditionInfo</title>
      <para>
Condition representation used by the Conditional Permission Admin service.

 </para>
      <para>
 This class encapsulates two pieces of information: a Condition <emphasis>type</emphasis>
 (class name), which must implement <code>Condition</code>, and the arguments
 passed to its constructor.

 </para>
      <para>
 In order for a Condition represented by a <code>ConditionInfo</code> to be
 instantiated and considered during a permission check, its Condition class
 must be available from the system classpath.

 </para>
      <para>
 The Condition class must either:
 </para>
      <itemizedlist>
         <listitem>
            <para>Declare a public static <code>getCondition</code> method that takes a
 <code>Bundle</code> object and a <code>ConditionInfo</code> object as arguments. That
 method must return an object that implements the <code>Condition</code> interface.
 </para>
         </listitem>
         <listitem>
            <para>Implement the <code>Condition</code> interface and define a public constructor
 that takes a <code>Bundle</code> object and a <code>ConditionInfo</code> object as
 arguments.</para>
         </listitem>
      </itemizedlist>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section xreflabel="ConditionInfo(String,String[])" role="method" xml:id="org.osgi.service.condpermadmin.ConditionInfo.ConditionInfo-String-String---">
         <title>public  ConditionInfo(String type, String[] args)</title>
         <formalpara role="parameter">
            <title>type</title>
            <para>The fully qualified class name of the Condition represented
        by this <code>ConditionInfo</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>args</title>
            <para>The arguments for the Condition. These arguments are
        available to the newly created Condition by calling the
        <link linkend="org.osgi.service.condpermadmin.ConditionInfo.getArgs--">getArgs()</link> method.</para>
         </formalpara>
         <para role="description">
Constructs a <code>ConditionInfo</code> from the specified type and args.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>NullPointerException</code>– If <code>type</code> is <code>null</code>.</para>
         </formalpara>
      </section>
      <section xreflabel="ConditionInfo(String)" role="method" xml:id="org.osgi.service.condpermadmin.ConditionInfo.ConditionInfo-String-">
         <title>public  ConditionInfo(String encodedCondition)</title>
         <formalpara role="parameter">
            <title>encodedCondition</title>
            <para>The encoded <code>ConditionInfo</code>.</para>
         </formalpara>
         <para role="description">
Constructs a <code>ConditionInfo</code> object from the specified encoded
 <code>ConditionInfo</code> string. White space in the encoded
 <code>ConditionInfo</code> string is ignored.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the specified
         <code>encodedCondition</code> is not properly formatted.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.condpermadmin.ConditionInfo.getEncoded--">getEncoded()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="equals(Object)" role="method" xml:id="org.osgi.service.condpermadmin.ConditionInfo.equals-Object-">
         <title>public boolean equals(Object obj)</title>
         <formalpara role="parameter">
            <title>obj</title>
            <para>The object to test for equality with this
        <code>ConditionInfo</code> object.</para>
         </formalpara>
         <para role="description">
Determines the equality of two <code>ConditionInfo</code> objects.

 This method checks that specified object has the same type and args as
 this <code>ConditionInfo</code> object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if <code>obj</code> is a <code>ConditionInfo</code>, and has
         the same type and args as this <code>ConditionInfo</code> object;
         <code>false</code> otherwise.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getArgs()" role="method" xml:id="org.osgi.service.condpermadmin.ConditionInfo.getArgs--">
         <title>public final String[] getArgs()</title>
         <para role="description">
Returns arguments of this <code>ConditionInfo</code>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The arguments of this <code>ConditionInfo</code>. An empty array is
         returned if the <code>ConditionInfo</code> has no arguments.</para>
         </formalpara>
      </section>
      <section xreflabel="getEncoded()" role="method" xml:id="org.osgi.service.condpermadmin.ConditionInfo.getEncoded--">
         <title>public final String getEncoded()</title>
         <para role="description">
Returns the string encoding of this <code>ConditionInfo</code> in a form
 suitable for restoring this <code>ConditionInfo</code>.

 </para>
         <para>
 The encoded format is:

 </para>
         <programlisting>   [type "arg0" "arg1" ...]</programlisting>
         <para>

 where <emphasis>argN</emphasis> are strings that must be encoded for proper parsing.
 Specifically, the <code>"</code>, <code>\</code>, carriage return, and line feed
 characters must be escaped using <code>\"</code>, <code>\\</code>, <code>\r</code>, and
 <code>\n</code>, respectively.

 </para>
         <para>
 The encoded string contains no leading or trailing whitespace characters.
 A single space character is used between type and "<emphasis>arg0</emphasis>"
 and between the arguments.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The string encoding of this <code>ConditionInfo</code>.</para>
         </formalpara>
      </section>
      <section xreflabel="getType()" role="method" xml:id="org.osgi.service.condpermadmin.ConditionInfo.getType--">
         <title>public final String getType()</title>
         <para role="description">
Returns the fully qualified class name of the condition represented by
 this <code>ConditionInfo</code>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The fully qualified class name of the condition represented by
         this <code>ConditionInfo</code>.</para>
         </formalpara>
      </section>
      <section xreflabel="hashCode()" role="method" xml:id="org.osgi.service.condpermadmin.ConditionInfo.hashCode--">
         <title>public int hashCode()</title>
         <para role="description">
Returns the hash code value for this object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A hash code value for this object.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="toString()" role="method" xml:id="org.osgi.service.condpermadmin.ConditionInfo.toString--">
         <title>public String toString()</title>
         <para role="description">
Returns the string representation of this <code>ConditionInfo</code>. The
 string is created by calling the <code>getEncoded</code> method on this
 <code>ConditionInfo</code>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The string representation of this <code>ConditionInfo</code>.</para>
         </formalpara>
         <para/>
      </section>
   </section>
</section>
</chapter>

  <chapter label="51" revision="$Id: 96d2956f86201ac21be5c6510f8cfe38b02b582e $" version="5.0" xml:id="service.permissionadmin" xml:base="051/service.permissionadmin.xml">
  <title>Permission Admin Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.permissionadmin-version" linkend="org.osgi.service.permissionadmin"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>Note: The Permission Admin has been superseded by the Conditional
    Permission Admin. See <xref linkend="service.condpermadmin"/>.</para>

    <para>In the Framework, a bundle can have a single set of permissions.
    These permissions are used to verify that a bundle is authorized to
    execute privileged code. For example, a <code>FilePermission</code>
    defines what files can be used and in what way.</para>

    <para>The policy of providing the permissions to the bundle should be
    delegated to a Management Agent. For this reason, the Framework provides
    the Permission Admin service so that a Management Agent can administrate
    the permissions of a bundle and provide defaults for all bundles.</para>

    <para>Related mechanisms of the Framework are discussed in <xref linkend="framework.security.securityoverview"/>.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Status information</emphasis> - The Permission Admin
          Service must provide status information about the current
          permissions of a bundle.</para>
        </listitem>

        <listitem>
          <para><emphasis>Administrative</emphasis> - The Permission Admin
          Service must allow a Management Agent to set the permissions before,
          during, or after a bundle is installed.</para>
        </listitem>

        <listitem>
          <para><emphasis>Defaults</emphasis> - The Permission Admin Service
          must provide control over default permissions. These are the
          permissions for a bundle with no specific permissions set.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis><xref linkend="org.osgi.service.permissionadmin.PermissionAdmin" xrefstyle="hyperlink"/></emphasis> - The service that provides
          access to the permission repository of the Framework.</para>
        </listitem>

        <listitem>
          <para><emphasis><xref linkend="org.osgi.service.permissionadmin.PermissionInfo" xrefstyle="hyperlink"/></emphasis> - An object that holds the
          information needed to construct a <code>Permission</code>
          object.</para>
        </listitem>

        <listitem>
          <para><emphasis>Bundle location</emphasis> - The string that
          specifies the bundle location. This is described in <xref linkend="framework.lifecycle.bundleidentifiers"/>.</para>
        </listitem>
      </itemizedlist>

      <figure>
        <title>org.osgi.service.permissionadmin package</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.406in" contentwidth="7.000in" fileref="permissionadmin-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Operation</title>

      <para>The Framework maintains a repository of permissions. These
      permissions are stored under the bundle location string. Using the
      bundle location allows the permissions to be set
      <emphasis>before</emphasis> a bundle is downloaded. The Framework must
      consult this repository when it needs the permissions of a bundle. When
      no specific permissions are set, the bundle must use the default
      permissions. If no default is set, the bundle must use
      <code>java.security.AllPermission</code>. If the default permissions are
      changed, a bundle with no specific permissions must immediately start
      using the new default permissions.</para>

      <para>The Permission Admin service is registered by the Framework's
      system bundle under the
      <code>org.osgi.service.permissionadmin.</code><xref linkend="org.osgi.service.permissionadmin.PermissionAdmin" xrefstyle="hyperlink"/> interface. This is an optional singleton
      service, so at most one Permission Admin service is registered at any
      moment in time.</para>

      <para>The Permission Admin service provides access to the permission
      repository. A Management Agent can get, set, update, and delete
      permissions from this repository. A Management Agent can also use a
      <code>SynchronousBundleListener</code> object to set the permissions
      during the installation or updating of a bundle.</para>
    </section>
  </section>

  <section>
    <title>Permission Admin service</title>

    <para>The Permission Admin service needs to manipulate the default
    permissions and the permissions associated with a specific bundle. The
    default permissions and the bundle-specific permissions are stored
    persistently. It is possible to set a bundle's permissions before the
    bundle is installed in the Framework because the bundle's location is used
    to set the bundle's permissions.</para>

    <para>The manipulation of a bundle's permissions, however, may also be
    done in real time when a bundle is downloaded or just before the bundle is
    downloaded. To support this flexibility, a
    <code>SynchronousBundleListener</code> object may be used by a Management
    Agent to detect the installation or update of a bundle, and set the
    required permissions before the installation completes.</para>

    <para>Permissions are activated before the first time a permission check
    for a bundle is performed. This means that if a bundle has opened a file,
    this file must remain usable even if the permission to open that file is
    removed at a later time.</para>

    <para>Permission information is <emphasis>not</emphasis> specified using
    <code>java.security.Permission</code> objects. The reason for this
    approach is the relationship between the required persistence of the
    information across the Framework restarts and the concept of class loaders
    in the Framework. Actual <code>Permission</code> classes must be
    subclasses of <code>Permission</code> and may be exported from any bundle.
    The Framework can access these permissions as long as they are exported,
    but the Management Agent would have to import all possible packages that
    contain permissions. This requirement would severely limit permission
    types. Therefore, the Permission Admin service uses the <xref linkend="org.osgi.service.permissionadmin.PermissionInfo" xrefstyle="hyperlink"/> class to specify permission information. Objects
    of this class are used by the Framework to create <code>Permission</code>
    objects.</para>

    <para><code>PermissionInfo</code> objects restrict the possible
    <code>Permission</code> objects that can be used. A
    <code>Permission</code> subclass can only be described by a
    <code>PermissionInfo</code> object when it has the following
    characteristics:</para>

    <itemizedlist>
      <listitem>
        <para>It must be a subclass of
        <code>java.security.Permission</code>.</para>
      </listitem>

      <listitem>
        <para>It must use the two-argument public constructor
        <code>type(name,actions)</code>.</para>
      </listitem>

      <listitem>
        <para>The class must be available to the Framework code from the
        system class path or from any exported package so it can be loaded by
        the Framework.</para>
      </listitem>

      <listitem>
        <para>The class must be public.</para>
      </listitem>
    </itemizedlist>

    <para>If any of these conditions is not met, the
    <code>PermissionInfo</code> object must be ignored and an error message
    should be logged.</para>

    <para>The permissions are always set as an array of
    <code>PermissionInfo</code> objects to make the assignment of all
    permissions atomic.</para>

    <para>The <code>PermissionAdmin</code> interface provides the following
    methods:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.service.permissionadmin.PermissionAdmin.getLocations--" xrefstyle="hyperlink"/> - Returns a list of locations that have
        permissions assigned to them. This method allows a Management Agent to
        examine the current set of permissions.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.permissionadmin.PermissionAdmin.getPermissions-String-" xrefstyle="hyperlink"/> - Returns a list of
        <code>PermissionInfo</code> objects that are set for that location, or
        returns <code>null</code> if no permissions are set.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.permissionadmin.PermissionAdmin.setPermissions-String-PermissionInfo---" xrefstyle="hyperlink"/> - Associates permissions with a specific
        location, or returns <code>null</code> when the permissions should be
        removed.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.permissionadmin.PermissionAdmin.getDefaultPermissions--" xrefstyle="hyperlink"/> - This method returns the list of default
        permissions.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.permissionadmin.PermissionAdmin.setDefaultPermissions-PermissionInfo---" xrefstyle="hyperlink"/> - This method sets the default
        permissions.</para>
      </listitem>
    </itemizedlist>

    <section>
      <title>File Permission for Relative Path Names</title>

      <para>A <code>java.io.FilePermission</code> assigned to a bundle via the
      <code>setPermissions</code> method must receive special treatment if the
      path argument for the <code>FilePermission</code> is a relative path
      name. A relative path name is one that is not absolute. See the
      <code>java.io.File.isAbsolute</code> method for more information on
      absolute path names.</para>

      <para>When a bundle is assigned a <code>FilePermission</code> for a
      relative path name, the path name is taken to be relative to the
      bundle's persistent storage area. This allows additional permissions,
      such as <code>execute</code>, to be assigned to files in the bundle's
      persistent storage area. For example:</para>

      <programlisting>    java.io.FilePermission "-" "execute"</programlisting>

      <para>can be used to allow a bundle to execute any file in the bundle's
      persistent storage area.</para>

      <para>This only applies to <code>FilePermission</code> objects assigned
      to a bundle via the <code>setPermission</code> method. This does not
      apply to default permissions. A <code>FilePermission</code> for a
      relative path name assigned via the <code>setDefaultPermission</code>
      method must be ignored.</para>
    </section>
  </section>

  <section>
    <title>Security</title>

    <para>The Permission Admin service is a system service that can be abused.
    A bundle that can access and use the Permission Admin service has full
    control over the OSGi framework. However, many bundles can have
    <code>ServicePermission[PermissionAdmin,GET]</code> because all methods
    that change the state of the Framework require
    <code>AdminPermission</code>.</para>

    <para>No bundle must have
    <code>ServicePermission[PermissionAdmin,REGISTER]</code> for this service
    because only the Framework should provide this service.</para>
  </section>

  <section xreflabel="org.osgi.service.permissionadmin" version="5" role="package" xml:id="org.osgi.service.permissionadmin" xml:base="051/../../../generated/javadoc/docbook/org.osgi.service.permissionadmin.xml">
   <title>org.osgi.service.permissionadmin</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.permissionadmin-version">Version 1.2</releaseinfo>
      <edition xml:id="org.osgi.service.permissionadmin-version.number">1.2</edition>
   </info>
   <para>
Permission Admin Package Version 1.2.

 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest.

 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.permissionadmin; version="[1.2,2.0)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.permissionadmin.PermissionAdmin">
                  <code>PermissionAdmin</code>
               </link> -
The Permission Admin service allows management agents to manage the
 permissions of bundles.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.permissionadmin.PermissionInfo">
                  <code>PermissionInfo</code>
               </link> -
Permission representation used by the Permission Admin service.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section xreflabel="PermissionAdmin" role="class" xml:id="org.osgi.service.permissionadmin.PermissionAdmin">
      <title>public interface PermissionAdmin</title>
      <para>
The Permission Admin service allows management agents to manage the
 permissions of bundles. There is at most one Permission Admin service present
 in the OSGi environment.
 </para>
      <para>
 Access to the Permission Admin service is protected by corresponding
 <code>ServicePermission</code>. In addition <code>AdminPermission</code> is required to
 actually set permissions.

 </para>
      <para>
 Bundle permissions are managed using a permission table. A bundle's location
 serves as the key into this permission table. The value of a table entry is
 the set of permissions (of type <code>PermissionInfo</code>) granted to the bundle
 named by the given location. A bundle may have an entry in the permission
 table prior to being installed in the Framework.

 </para>
      <para>
 The permissions specified in <code>setDefaultPermissions</code> are used as the
 default permissions which are granted to all bundles that do not have an
 entry in the permission table.

 </para>
      <para>
 Any changes to a bundle's permissions in the permission table will take
 effect no later than when bundle's <code>java.security.ProtectionDomain</code> is
 next involved in a permission check, and will be made persistent.

 </para>
      <para>
 Only permission classes on the system classpath or from an exported package
 are considered during a permission check. Additionally, only permission
 classes that are subclasses of <code>java.security.Permission</code> and define a
 2-argument constructor that takes a <emphasis>name </emphasis> string and an <emphasis>actions
 </emphasis> string can be used.
 </para>
      <para>
 Permissions implicitly granted by the Framework (for example, a bundle's
 permission to access its persistent storage area) cannot be changed, and are
 not reflected in the permissions returned by <code>getPermissions</code> and
 <code>getDefaultPermissions</code>.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section xreflabel="getDefaultPermissions()" role="method" xml:id="org.osgi.service.permissionadmin.PermissionAdmin.getDefaultPermissions--">
         <title>public PermissionInfo[] getDefaultPermissions()</title>
         <para role="description">
Gets the default permissions.

 </para>
         <para>
 These are the permissions granted to any bundle that does not have
 permissions assigned to its location.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The default permissions, or <code>null</code> if no default
         permissions are set.</para>
         </formalpara>
      </section>
      <section xreflabel="getLocations()" role="method" xml:id="org.osgi.service.permissionadmin.PermissionAdmin.getLocations--">
         <title>public String[] getLocations()</title>
         <para role="description">
Returns the bundle locations that have permissions assigned to them, that
 is, bundle locations for which an entry exists in the permission table.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The locations of bundles that have been assigned any permissions,
         or <code>null</code> if the permission table is empty.</para>
         </formalpara>
      </section>
      <section xreflabel="getPermissions(String)" role="method" xml:id="org.osgi.service.permissionadmin.PermissionAdmin.getPermissions-String-">
         <title>public PermissionInfo[] getPermissions(String location)</title>
         <formalpara role="parameter">
            <title>location</title>
            <para>The location of the bundle whose permissions are to be
        returned.</para>
         </formalpara>
         <para role="description">
Gets the permissions assigned to the bundle with the specified location.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The permissions assigned to the bundle with the specified
         location, or <code>null</code> if that bundle has not been assigned
         any permissions.</para>
         </formalpara>
      </section>
      <section xreflabel="setDefaultPermissions(PermissionInfo[])" role="method" xml:id="org.osgi.service.permissionadmin.PermissionAdmin.setDefaultPermissions-PermissionInfo---">
         <title>public void setDefaultPermissions(PermissionInfo[] permissions)</title>
         <formalpara role="parameter">
            <title>permissions</title>
            <para>The default permissions, or <code>null</code> if the
        default permissions are to be removed from the permission table.</para>
         </formalpara>
         <para role="description">
Sets the default permissions.

 </para>
         <para>
 These are the permissions granted to any bundle that does not have
 permissions assigned to its location.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have
         <code>AllPermission</code>.</para>
         </formalpara>
      </section>
      <section xreflabel="setPermissions(String,PermissionInfo[])" role="method" xml:id="org.osgi.service.permissionadmin.PermissionAdmin.setPermissions-String-PermissionInfo---">
         <title>public void setPermissions(String location, PermissionInfo[] permissions)</title>
         <formalpara role="parameter">
            <title>location</title>
            <para>The location of the bundle that will be assigned the
        permissions.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>permissions</title>
            <para>The permissions to be assigned, or <code>null</code> if the
        specified location is to be removed from the permission table.</para>
         </formalpara>
         <para role="description">
Assigns the specified permissions to the bundle with the specified
 location.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have
         <code>AllPermission</code>.</para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="PermissionInfo" role="class" xml:id="org.osgi.service.permissionadmin.PermissionInfo">
      <title>public class PermissionInfo</title>
      <para>
Permission representation used by the Permission Admin service.

 </para>
      <para>
 This class encapsulates three pieces of information: a Permission <emphasis>type
 </emphasis> (class name), which must be a subclass of
 <code>java.security.Permission</code>, and the <emphasis>name</emphasis> and <emphasis>actions</emphasis>
 arguments passed to its constructor.

 </para>
      <para>
 In order for a permission represented by a <code>PermissionInfo</code> to be
 instantiated and considered during a permission check, its Permission class
 must be available from the system classpath or an exported package. This
 means that the instantiation of a permission represented by a
 <code>PermissionInfo</code> may be delayed until the package containing its
 Permission class has been exported by a bundle.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Immutable </para>
      </formalpara>
      <section xreflabel="PermissionInfo(String,String,String)" role="method" xml:id="org.osgi.service.permissionadmin.PermissionInfo.PermissionInfo-String-String-String-">
         <title>public  PermissionInfo(String type, String name, String actions)</title>
         <formalpara role="parameter">
            <title>type</title>
            <para>The fully qualified class name of the permission represented
        by this <code>PermissionInfo</code>. The class must be a subclass of
        <code>java.security.Permission</code> and must define a 2-argument
        constructor that takes a <emphasis>name</emphasis> string and an <emphasis>actions</emphasis>
        string.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>name</title>
            <para>The permission name that will be passed as the first argument
        to the constructor of the <code>Permission</code> class identified by
        <code>type</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>actions</title>
            <para>The permission actions that will be passed as the second
        argument to the constructor of the <code>Permission</code> class
        identified by <code>type</code>.</para>
         </formalpara>
         <para role="description">
Constructs a <code>PermissionInfo</code> from the specified type, name, and
 actions.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>NullPointerException</code>– If <code>type</code> is <code>null</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If <code>action</code> is not <code>null</code>
         and <code>name</code> is <code>null</code>.</para>
         </formalpara>
      </section>
      <section xreflabel="PermissionInfo(String)" role="method" xml:id="org.osgi.service.permissionadmin.PermissionInfo.PermissionInfo-String-">
         <title>public  PermissionInfo(String encodedPermission)</title>
         <formalpara role="parameter">
            <title>encodedPermission</title>
            <para>The encoded <code>PermissionInfo</code>.</para>
         </formalpara>
         <para role="description">
Constructs a <code>PermissionInfo</code> object from the specified encoded
 <code>PermissionInfo</code> string. White space in the encoded
 <code>PermissionInfo</code> string is ignored.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the specified
         <code>encodedPermission</code> is not properly formatted.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.permissionadmin.PermissionInfo.getEncoded--">getEncoded()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="equals(Object)" role="method" xml:id="org.osgi.service.permissionadmin.PermissionInfo.equals-Object-">
         <title>public boolean equals(Object obj)</title>
         <formalpara role="parameter">
            <title>obj</title>
            <para>The object to test for equality with this
        <code>PermissionInfo</code> object.</para>
         </formalpara>
         <para role="description">
Determines the equality of two <code>PermissionInfo</code> objects.

 This method checks that specified object has the same type, name and
 actions as this <code>PermissionInfo</code> object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if <code>obj</code> is a <code>PermissionInfo</code>, and has
         the same type, name and actions as this <code>PermissionInfo</code>
         object; <code>false</code> otherwise.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getActions()" role="method" xml:id="org.osgi.service.permissionadmin.PermissionInfo.getActions--">
         <title>public final String getActions()</title>
         <para role="description">
Returns the actions of the permission represented by this
 <code>PermissionInfo</code>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The actions of the permission represented by this
         <code>PermissionInfo</code>, or <code>null</code> if the permission does
         not have any actions associated with it.</para>
         </formalpara>
      </section>
      <section xreflabel="getEncoded()" role="method" xml:id="org.osgi.service.permissionadmin.PermissionInfo.getEncoded--">
         <title>public final String getEncoded()</title>
         <para role="description">
Returns the string encoding of this <code>PermissionInfo</code> in a form
 suitable for restoring this <code>PermissionInfo</code>.

 </para>
         <para>
 The encoded format is:

 </para>
         <programlisting> (type)</programlisting>
         <para>

 or

 </para>
         <programlisting> (type "name")</programlisting>
         <para>

 or

 </para>
         <programlisting> (type "name" "actions")</programlisting>
         <para>

 where <emphasis>name</emphasis> and <emphasis>actions</emphasis> are strings that must be encoded for
 proper parsing. Specifically, the <code>"</code>,<code>\</code>, carriage return,
 and line feed characters must be escaped using <code>\"</code>, <code>\\</code>,
 <code>\r</code>, and <code>\n</code>, respectively.

 </para>
         <para>
 The encoded string contains no leading or trailing whitespace characters.
 A single space character is used between <emphasis>type</emphasis> and
 "<emphasis>name</emphasis>" and between "<emphasis>name</emphasis>" and
 "<emphasis>actions</emphasis>".</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The string encoding of this <code>PermissionInfo</code>.</para>
         </formalpara>
      </section>
      <section xreflabel="getName()" role="method" xml:id="org.osgi.service.permissionadmin.PermissionInfo.getName--">
         <title>public final String getName()</title>
         <para role="description">
Returns the name of the permission represented by this
 <code>PermissionInfo</code>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The name of the permission represented by this
         <code>PermissionInfo</code>, or <code>null</code> if the permission does
         not have a name.</para>
         </formalpara>
      </section>
      <section xreflabel="getType()" role="method" xml:id="org.osgi.service.permissionadmin.PermissionInfo.getType--">
         <title>public final String getType()</title>
         <para role="description">
Returns the fully qualified class name of the permission represented by
 this <code>PermissionInfo</code>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The fully qualified class name of the permission represented by
         this <code>PermissionInfo</code>.</para>
         </formalpara>
      </section>
      <section xreflabel="hashCode()" role="method" xml:id="org.osgi.service.permissionadmin.PermissionInfo.hashCode--">
         <title>public int hashCode()</title>
         <para role="description">
Returns the hash code value for this object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A hash code value for this object.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="toString()" role="method" xml:id="org.osgi.service.permissionadmin.PermissionInfo.toString--">
         <title>public String toString()</title>
         <para role="description">
Returns the string representation of this <code>PermissionInfo</code>. The
 string is created by calling the <code>getEncoded</code> method on this
 <code>PermissionInfo</code>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The string representation of this <code>PermissionInfo</code>.</para>
         </formalpara>
         <para/>
      </section>
   </section>
</section>
</chapter>

  <chapter label="52" revision="$Id: 7e2ee6c96a871124ac59f3c729e9866d6184c09f $" version="5.0" xml:id="service.url" xml:base="052/service.url.xml">
  <title>URL Handlers Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.url-version" linkend="org.osgi.service.url"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>This specification standardizes the mechanism to extend the Java
    run-time with new URL schemes and content handlers through bundles.
    Dynamically extending the URL schemes that are supported in an OSGi
    framework is a powerful concept.</para>

    <para xml:id="i1294025">This specification is necessary because the
    standard Java mechanisms for extending the <code>URL</code> class with new
    schemes and different content types is not compatible with the dynamic
    aspects of an OSGi framework. The registration of a new scheme or content
    type is a one time only action in Java, and once registered, a scheme or
    content type can never be revoked. This singleton approach to registration
    makes the provided mechanism impossible to use by different, independent
    bundles. Therefore, it is necessary for OSGi Framework implementations to
    hide this mechanism and provide an alternative mechanism that can be
    used.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Multiple Access</emphasis> - Multiple bundles should
          be allowed to register <code>ContentHandler</code> objects and
          <code>URLStreamHandler</code> objects.</para>
        </listitem>

        <listitem>
          <para><emphasis>Existing Schemes Availability</emphasis> - Existing
          schemes in an OSGi framework should not be overridden.</para>
        </listitem>

        <listitem>
          <para><emphasis>life cycle Monitored</emphasis> - The life cycle of
          bundles must be supported. Scheme handlers and content type handlers
          must become unavailable when the registering bundle is
          stopped.</para>
        </listitem>

        <listitem>
          <para><emphasis>Simplicity</emphasis> - Minimal effort should be
          required for a bundle to provide a new URL scheme or content type
          handler.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Scheme</emphasis> - An identifier for a specific
          protocol. For example, <code>"http"</code> is a scheme for the Hyper
          Text Transfer Protocol. A scheme is implemented in a
          <code>java.net.URLStreamHandler</code> sub-class.</para>
        </listitem>

        <listitem>
          <para><emphasis>Content Type</emphasis> - An identifier for the type
          of the content. Content types are usually referred to as MIME types.
          A content type handler is implemented as a
          <code>java.net.ContentHandler</code> sub-class.</para>
        </listitem>

        <listitem>
          <para><emphasis>Uniform Resource Locator (URL)</emphasis> - An
          instance of the <code>java.net.URL</code> class that holds the name
          of a scheme with enough parameters to identify a resource for that
          scheme.</para>
        </listitem>

        <listitem>
          <para><emphasis>Factory</emphasis> - An object that creates other
          objects. The purpose is to hide the implementation types (that may
          vary) from the caller. The created objects are a
          subclass/implementation of a specific type.</para>
        </listitem>

        <listitem>
          <para><emphasis>Proxy</emphasis> - The object that is registered
          with Java and that forwards all calls to the real implementation
          that is registered with the service registry.</para>
        </listitem>

        <listitem>
          <para><emphasis>java.net.URLStreamHandler</emphasis> - An instance
          of the <code>java.net.URLStreamHandler</code> class that can create
          <code>URLConnection</code> objects that represent a connection for a
          specific protocol.</para>
        </listitem>

        <listitem>
          <para><emphasis>Singleton Operation</emphasis> - An operation that
          can only be executed once.</para>
        </listitem>

        <listitem>
          <para><emphasis>URLStreamHandlerService</emphasis> - An OSGi service
          interface that contains the methods of the
          <code>URLStreamHandler</code> class with public visibility so they
          can be called from the Framework.</para>
        </listitem>

        <listitem>
          <para><emphasis>AbstractURLStreamHandlerService</emphasis> - An
          implementation of the <code>URLStreamHandlerService</code> interface
          that implements the interface's methods by calling the
          implementation of the super class
          (<code>java.net.url.URLStreamHandler</code>). This class also
          handles the setting of the <code>java.net.URL</code> object via the
          <code>java.net.URLStreamHandlerSetter</code> interface.</para>
        </listitem>

        <listitem>
          <para><emphasis>URLStreamHandlerSetter</emphasis> - An interface
          needed to abstract the setting of the <code>java.net.URL</code>
          object. This interface is related to the use of a proxy and security
          checking.</para>
        </listitem>

        <listitem>
          <para><emphasis>java.net.URLStreamHandlerFactory</emphasis> - A
          factory, registered with the <code>java.net.URL</code> class, that
          is used to find <code>java.net.URLStreamHandler</code> objects
          implementing schemes that are not implemented by the Java
          environment. Only one <code>java.net.URLStreamHandlerFactory</code>
          object can be registered with Java.</para>
        </listitem>

        <listitem>
          <para><emphasis>java.net.URLConnection</emphasis> - A connection for
          a specific, scheme-based protocol. A
          <code>java.net.URLConnection</code> object is created by a
          <code>java.net.URLStreamHandler</code> object when the
          <code>java.net.URL.openConnection</code> method is invoked.</para>
        </listitem>

        <listitem>
          <para><emphasis>java.net.ContentHandler</emphasis> - An object that
          can convert a stream of bytes to a Java object. The class of this
          Java object depends on the MIME type of the byte stream.</para>
        </listitem>

        <listitem>
          <para><emphasis>java.net.ContentHandlerFactory</emphasis> - A
          factory that can extend the set of
          <code>java.net.ContentHandler</code> objects provided by the
          <code>java.net.URLConnection</code> class, by creating new ones on
          demand. Only one <code>java.net.ContentHandlerFactory</code> object
          can be registered with the <code>java.net.URLConnection</code>
          class.</para>
        </listitem>

        <listitem>
          <para><emphasis>MIME Type</emphasis> - A namespace for byte stream
          formats. See <xref linkend="i1260753"/>.</para>
        </listitem>
      </itemizedlist>

      <para>The following class diagram is surprisingly complex due to the
      complicated strategy that Java uses to implement extendable stream
      handlers and content handlers.</para>

      <figure>
        <title>Class Diagram, java.net (URL and associated classes)</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="5.424in" contentwidth="6.500in" fileref="url-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Operation</title>

      <para>A bundle that can implement a new URL scheme should register a
      service object under the <code>URLStreamHandlerService</code> interface
      with the OSGi Framework. This interface contains public versions of the
      <code>java.net.URLStreamHandler</code> class methods, so that these
      methods can be called by the <emphasis>proxy</emphasis> (the object that
      is actually registered with the Java run-time).</para>

      <para>The OSGi Framework implementation must make this service object
      available to the underlying <code>java.net</code> implementation. This
      must be supported by the OSGi Framework implementation because the
      <code>java.net.URL</code>.<code>setStreamHandlerFactory</code> method
      can only be called <emphasis>once</emphasis>, making it impossible to
      use by bundles that come and go.</para>

      <para xml:id="i1294041">Bundles that can convert a content-typed stream
      should register a service object under the name
      <code>java.net.ContentHandler</code>. These objects should be made
      available by the OSGi Framework to the
      <code>java.net.URLConnection</code> class.</para>
    </section>
  </section>

  <section>
    <title>Factories in java.net</title>

    <para>Java provides the <code>java.net.URL</code> class which is used by
    the OSGi Framework and many of the bundles that run on the OSGi framework.
    A key benefit of using the <code>URL</code> class is the ease with which a
    URL string is translated into a request for a resource.</para>

    <para>The extensibility of the <code>java.net.URL</code> class allows new
    schemes (protocols) and content types to be added dynamically using
    <code>java.net.URLStreamHandlerFactory</code> objects. These new handlers
    allow existing applications to use new schemes and content types in the
    same way as the handlers provided by the Java run-time environment. This
    mechanism is described in the Javadoc for the
    <code>URLStreamHandler</code> and <code>ContentHandler</code>
    class.</para>

    <para>For example, the URL <code>http://www.osgi.org/sample.txt</code>
    addresses a file on the OSGi web server that is obtained with the HTTP
    scheme (usually a scheme provided by the Java run-time). A URL such as
    <code>rsh://www.acme.com/agent.zip</code> is addressing a ZIP file that
    can be obtained with the non-built-in RSH scheme. A
    <code>java.net.URLStreamHandlerFactory</code> object must be registered
    with the <code>java.net.URL</code> class prior to the successful use of an
    RSH scheme.</para>

    <para>There are several problems with using only the existing Java
    facilities for extending the handlers used by the
    <code>java.net.URL</code> class:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Factories Are Singleton Operations</emphasis> - One
        <code>java.net.URLStreamHandlerFactory</code> object can be registered
        <emphasis>once</emphasis> with the <code>java.net.URL</code> class.
        Similarly, one <code>java.net.ContentHandlerFactory</code> object can
        be registered once with the <code>java.net.URLConnection</code> class.
        It is impossible to undo the registration of a factory or register a
        replacement factory.</para>
      </listitem>

      <listitem>
        <para><emphasis>Caching Of Schemes</emphasis> - When a previously
        unused scheme is first used by the <code>java.net.URL</code> class,
        the <code>java.net.URL</code> class requests a
        <code>java.net.URLStreamHandler</code> object for that specific scheme
        from the currently registered
        <code>java.net.URLStreamHandlerFactory</code> object. A returned
        <code>java.net.URLStreamHandler</code> object is cached and subsequent
        requests for that scheme use the same
        <code>java.net.URLStreamHandler</code> object. This means that once a
        handler has been constructed for a specific scheme, this handler can
        no longer be removed, nor replaced, by a new handler for that scheme.
        This caching is likewise done for <code>java.net.ContentHandler</code>
        objects.</para>
      </listitem>
    </itemizedlist>

    <para>Both problems impact the OSGi operating model, which allows a bundle
    to go through different life cycle stages that involve exposing services,
    removing services, updating code, replacing services provided by one
    bundle with services from another, etc. The existing Java mechanisms are
    not compatible when used by bundles.</para>
  </section>

  <section>
    <title>Framework Procedures</title>

    <para>The OSGi Framework must register a
    <code>java.net.URLStreamHandlerFactory</code> object and a
    <code>java.net.ContentHandlerFactory</code> object with the
    <code>java.net.URL.setURLStreamHandlerFactory</code> and
    <code>java.net.URLConnection.setContentHandlerFactory</code> methods,
    respectively.</para>

    <para>When these two factories are registered, the OSGi Framework service
    registry must be tracked for the registration of
    <code>URLStreamHandlerService</code> services and
    <code>java.net.ContentHandler</code> services.</para>

    <para>A URL Stream Handler Service must be associated with a service
    registration property named <xref linkend="org.osgi.service.url.URLConstants.URL_HANDLER_PROTOCOL" xrefstyle="hyperlink"/>. The value of this
    <code>url.handler.protocol</code> property must be an array of scheme
    names (<code>String[]</code> or <code>String</code>).</para>

    <para>A Content Handler service must be associated with a service
    registration property named <xref linkend="org.osgi.service.url.URLConstants.URL_CONTENT_MIMETYPE" xrefstyle="hyperlink"/>. The value of the <xref linkend="org.osgi.service.url.URLConstants.URL_CONTENT_MIMETYPE" xrefstyle="hyperlink"/> property must be an array of MIME types names
    (<code>String[]</code> or <code>String</code>) in the form type/subtype.
    See <xref linkend="i1260753"/>.</para>

    <section>
      <title>Constructing a Proxy and Handler</title>

      <para>When a URL is used with a previously unused scheme, it must query
      the registered <code>java.net.URLStreamHandlerFactory</code> object
      (that should have been registered by the OSGi Framework). The OSGi
      Framework must then search the service registry for services that are
      registered under <code>URLStreamHandlerService</code> and that match the
      requested scheme.</para>

      <para>If one or more service objects are found, a proxy object must be
      constructed. A proxy object is necessary because the service object that
      provides the implementation of the
      <code>java.net.URLStreamHandler</code> object can become unregistered
      and Java does not provide a mechanism to withdraw a
      <code>java.net.URLStreamHandler</code> object once it is returned from a
      <code>java.net.URLStreamHandlerFactory</code> object.</para>

      <para>Once the proxy is created, it must track the service registry for
      registrations and unregistrations of services matching its associated
      scheme. The proxy must be associated with the service that matches the
      scheme and has the highest value for the
      <code>org.osgi.framework.Constants.SERVICE_RANKING</code> service
      registration property (see <xref linkend="framework.service.serviceproperties"/> ) at any moment in time.
      If a proxy is associated with a URL Stream Handler Service, it must
      change the associated handler to a newly registered service when that
      service has a higher value for the ranking property.</para>

      <para>The proxy object must forward all method requests to the
      associated URL Stream Handler Service until this service object becomes
      unregistered.</para>

      <para>Once a proxy is created, it cannot be withdrawn because it is
      cached by the Java run-time. However, service objects can be withdrawn
      and it is possible for a proxy to exist without an associated
      <code>URLStreamHandlerService</code>/<code>java.net.ContentHandler</code>
      object.</para>

      <para>In this case, the proxy must handle subsequent requests until
      another appropriate service is registered. When this happens, the proxy
      class must handle the error.</para>

      <para xml:id="i1359486">In the case of a URL Stream Handler proxy, it
      must throw a <code>java.net.MalformedURLException</code> exception if
      the signature of a method allows throwing this exception. Otherwise, a
      <code>java.lang.IllegalStateException</code> exception is thrown.</para>

      <para>In the case of a Content Handler proxy, it must return InputStream
      to the data.</para>

      <para>Bundles must ensure that their
      <code>URLStreamHandlerService</code> or
      <code>java.net.ContentHandler</code> service objects throw these
      exceptions also when they have become unregistered.</para>

      <para>Proxies for Content Handler services operate slightly differently
      from URL Stream Handler Service proxies. In the case that
      <code>null</code> is returned from the registered
      <code>ContentHandlerFactory</code> object, the factory will not get
      another chance to provide a <code>ContentHandler</code> object for that
      content-type. Thus, if there is no built-in handler, nor a registered
      handler for this content-type, a <code>ContentHandler</code> proxy must
      be constructed that returns the <code>InputStream</code> object from the
      <code>URLConnection</code> object as the content object until a handler
      is registered.</para>
    </section>

    <section xml:id="i1413781">
      <title>Built-in Handlers</title>

      <para>Implementations of Java provide a number of sub-classes of
      <code>java.net.URLStreamHandler</code> classes that can handle protocols
      like HTTP, FTP, NEWS etc. Most Java implementations provide a mechanism
      to add new handlers that can be found on the class path through class
      name construction.</para>

      <para>If a registered <code>java.net.URLStreamHandlerFactory</code>
      object returns <code>null</code> for a built-in handler (or one that is
      available through the class name construction mechanism), it will never
      be called again for that specific scheme because the Java implementation
      will use its built-in handler or uses the class name
      construction.</para>

      <para>As a result, even though it is not forbidden for URL Handlers
      Service implementations to override built-in handlers, it is not
      possible to guarantee that a registered
      <code>URLStreamHandlerService</code> object will be used when it is
      overriding a built-in handler. For consistency reasons, it is therefore
      recommended to never override built-in handlers.</para>

      <para>The Content Handler Factory is implemented using a similar
      technique and has therefore the same problems.</para>

      <para>To facilitate the discovery of built-in handlers that are
      available through the name construction, the method described in the
      next section must be used by the Framework before any handlers are
      searched for in the service registry.</para>
    </section>

    <section>
      <title>Finding Built-in Handlers</title>

      <para>If the system properties <code>java.protocol.handler.pkgs</code>
      or <code>java.content.handler.pkgs</code> are defined, they must be used
      to locate built-in handlers. Each property must be defined as a list of
      package names that are separated by a vertical line (<code>'|'
      \u007C</code>) and that are searched in the left-to-right order (the
      names must <emphasis>not</emphasis> end in a full stop (<code>'.'
      \u002E</code>). For example:</para>

      <programlisting>org.osgi.impl.handlers | com.acme.url</programlisting>

      <para>The package names are the prefixes that are put in front of a
      scheme or content type to form a class name that can handle the scheme
      or content-type.</para>

      <para>A URL Stream Handler name for a scheme is formed by appending the
      string <code>".Handler"</code> to the scheme name. Using the packages in
      the previous example, the <code>rsh</code> scheme handler class is
      searched by the following names:</para>

      <programlisting>org.osgi.impl.handlers.rsh.Handler
com.acme.url.rsh.Handler</programlisting>

      <para xml:id="i1294084">MIME type names contain the solidus (<code>'/'
      \u002F</code>) character and can contain other characters that must not
      be part of a Java class name. A MIME type name must be processed as
      follows before it can be converted to a class name:</para>

      <orderedlist>
        <listitem>
          <para>First, all solidi in the MIME name must be converted to a full
          stop (<code>'.' \u002E</code>). All other characters that are not
          allowed in a Java class name must be converted to an underscore
          (<code>'_' \u005F</code>).</para>

          <para><programlisting>application/zip   application.zip
text/uri-list     text.uri_list
image/vnd.dwg     image.vnd_dwg</programlisting></para>
        </listitem>

        <listitem>
          <para>After this conversion, the name is appended to the list of
          packages specified in <code>java.content.handler.pkgs</code>. For
          example, if the content type is <code>application/zip</code>, and
          the packages are defined as in the previous example, then the
          following classes are searched:</para>

          <para><programlisting>org.osgi.impl.handlers.application.zip
com.acme.url.application.zip</programlisting></para>
        </listitem>
      </orderedlist>

      <para>The Java run-time specific packages should be listed in the
      appropriate properties so that implementations of the URL Stream Handler
      Factory and Content Handler Factory can be made aware of these
      packages.</para>
    </section>

    <section xml:id="i1407205">
      <title>Protected Methods and Proxy</title>

      <para xml:id="i1294132">Implementations of
      <code>java.net.URLStreamHandler</code> class cannot be registered in the
      service registry for use by the proxy because the methods of the
      <code>URLStreamHandler</code> class are protected and thus not available
      to the proxy implementation. Also, the <code>URLStreamHandler</code>
      class checks that only the <code>URLStreamHandler</code> object that was
      returned from the <code>URLStreamHandlerFactory</code> object can invoke
      the <code>setURL</code> method. This means that
      <code>URLStreamHandler</code> objects in the service registry would be
      unable to invoke the <code>setURL</code> method. Invoking this method is
      necessary when implementing the <code>parseURL</code> method.</para>

      <para>Therefore, the <code>URLStreamHandlerService</code> and
      <code>URLStreamHandlerSetter</code> interfaces were created. The
      <code>URLStreamHandlerService</code> interface provides public versions
      of the <code>URLStreamHandler</code> methods, except that the
      <code>setURL</code> method is missing and the <code>parseURL</code>
      method has a new first argument of type
      <code>URLStreamHandlerSetter</code>. In general, sub-classes of the
      <code>URLStreamHandler</code> class can be converted to
      <code>URLStreamHandlerService</code> classes with minimal code changes.
      Apart from making the relevant methods public, the <code>parseURL</code>
      method needs to be changed to invoke the <code>setURL</code> method on
      the <code>URLStreamHandlerSetter</code> object that the
      <code>URLStreamHandlerService</code> object was passed, rather then the
      <code>setURL</code> method of <code>URLStreamHandler</code>
      class.</para>

      <figure xml:id="i1292833">
        <title>Proxy Issues</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.700in" contentwidth="6.243in" fileref="proxy-issues.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>To aid in the conversion of <code>URLStreamHandler</code>
      implementation classes, the <code>AbstractURLStreamHandlerService</code>
      has been provided. Apart from making the relevant methods public, the
      <code>AbstractURLStreamHandlerService</code> stores the
      <code>URLStreamHandlerSetter</code> object in a private variable. To make the
      <code>setURL</code> method work properly, it overrides the
      <code>setURL</code> method to invoke the <code>setURL</code> method on
      the saved <code>URLStreamHandlerSetter</code> object rather then the
      <code>URLStreamHandler.setURL</code> method. This means that a subclass
      of <code>URLStreamHandler</code> should be changed to become a sub-class
      of the <code>AbstractURLStreamHandlerService</code> class and be
      recompiled.</para>

      <para>Normally, the <code>parseURL</code> method will have the following
      form:</para>

      <programlisting>class URLStreamHandlerImpl {
    ...
    protected URLStreamHandlerSetter realHandler;
    ...
    public void parseURL(
        URLStreamHandlerSetter realHandler,
            URL u, String spec, int start, int limit) {
            this.realHandler = realHandler;
            parseURL(u, spec, start, limit);
    }
    protected void setURL(URL u,
        String protocol, String host,
        int port, String authority,
        String userInfo, String path,
        String query,String ref) {
            realHandler.setURL(u, protocol, host,
                port, authority, userInfo, path,
                query, ref);
    }
    ...
}</programlisting>

      <para>The <code>URLStreamHandler.parseURL</code> method will call the
      <code>setURL</code> method which must be invoked on the proxy rather
      than <code>this</code>. That is why the <code>setURL</code> method is
      overridden to delegate to the <code>URLStreamHandlerSetter</code> object
      in <code>realHandler</code> as opposed to <code>super</code>.</para>
    </section>

    <section xml:id="i1405077">
      <title>Stream Handlers that use java.net.Proxy</title>

      <para>Java 1.5 introduced a new method on the
      <code>URLStreamHandler</code> class: <code>URLConnection</code>
      <code>openConnection(URL,Proxy)</code>. Adding this method to the URL
      Stream Handler service poses the following problems:</para>

      <itemizedlist>
        <listitem>
          <para>It would have broken all existing implementations.</para>
        </listitem>

        <listitem>
          <para>The references to the java.net.Proxy class would make the API
          dependent on Java 1.5</para>
        </listitem>
      </itemizedlist>

      <para>Therefore, scheme providers can optionally implement the
      <code>openConnection(URL,Proxy)</code> method as a public method. If the
      scheme provider implements this method, then the framework must call it
      (using reflection). If this method is not implemented in the URL Stream
      Handler service an Unsupported Operation Exception must be
      thrown.</para>

      <para>Framework implementations should be careful not to create unwanted
      dependencies on Java 1.5. This will require two different implementation
      classes for the URLStreamHandler class that is used to proxy the URL
      Stream Handler services.</para>
    </section>
  </section>

  <section>
    <title>Providing a New Scheme</title>

    <para xml:id="i1294185">The following example provides a scheme that
    returns the path part of the URL. The first class that is implemented is
    the <code>URLStreamHandlerService</code>. When it is started, it registers
    itself with the OSGi Framework. The OSGi Framework calls the
    <code>openConnection</code> method when a new
    <code>java.net.URLConnection</code> must be created. In this example, a
    <code>DataConnection</code> object is returned.</para>

    <programlisting xml:id="i1294186">public class DataProtocol
    extends AbstractURLStreamHandlerService
    implements BundleActivator {
    public void start( BundleContext context ) {
        Hashtable               properties = new Hashtable();
        properties.put( URLConstants.URL_HANDLER_PROTOCOL,
            new String[] { "data" } );
        context.registerService(
            URLStreamHandlerService.class.getName(),
            this, properties );
    }
    public void stop( BundleContext context ) {}

    public URLConnection openConnection( URL url ) {
        return new DataConnection(url);
    }
}</programlisting>

    <para xml:id="i1294203">The following example <code>DataConnection</code>
    class extends <code>java.net.URLConnection</code> and overrides the
    constructor so that it can provide the <code>URL</code> object to the
    super class, the <code>connect</code> method, and the
    <code>getInputStream</code> method. This last method returns the path part
    of the URL as an <code>java.io.InputStream</code> object.</para>

    <programlisting>class DataConnection extends java.net.URLConnection{
    DataConnection( URL url ) {super(url);}
    public void connect() {}

    public InputStream getInputStream() throws IOException {
        String s = getURL().getPath();
        byte [] buf = s.getBytes();
        return new ByteArrayInputStream(buf,1,buf.length-1);
    }
    public String getContentType() {
        return "text/plain";
    }
}</programlisting>
  </section>

  <section>
    <title>Providing a Content Handler</title>

    <para xml:id="i1294206">A Content Handler should extend the <code>
    java.net.ContentHandler</code> class and implement the
    <code>getContent</code> method. This method must get the
    <code>InputStream</code> object from the
    <code>java.net.URLConnection</code> parameter object and convert the bytes
    from this stream to the applicable type. In this example, the MIME type is
    <code>text/plain</code> and the return object is a <code>String</code>
    object.</para>

    <programlisting>public class TextPlainHandler extends ContentHandler
    implements BundleActivator {

    public void start( BundleContext context ) {
        Hashtable   properties = new Hashtable();
        properties.put( URLConstants.URL_CONTENT_MIMETYPE,
            new String[] { "text/plain" } );
        context.registerService(
            ContentHandler.class.getName(),
            this, properties );
    }
    public void stop( BundleContext context ) {}

    public Object getContent( URLConnection conn )
            throws IOException {
        InputStream in = conn.getInputStream();
        InputStreamReader r = new InputStreamReader( in );
        StringBuffer sb = new StringBuffer();
        int c;
        while ( (c=r.read()) &gt;= 0 )
            sb.append( (char) c );
        r.close(); in.close();
        return sb.toString();
    }
}</programlisting>
  </section>

  <section>
    <title>Security Considerations</title>

    <para>The ability to specify a protocol and add content handlers makes it
    possible to directly affect the behavior of a core Java VM class. The
    <code>java.net.URL</code> class is widely used by network applications and
    can be used by the OSGi Framework itself.</para>

    <para>Therefore, care must be taken when providing the ability to register
    handlers. The two types of supported handlers are
    <code>URLStreamHandlerService</code> and
    <code>java.net.ContentHandler</code>. Only trusted bundles should be
    allowed to register these services and have
    <code>ServicePermission[URLStreamHandlerService|ContentHandler,
    REGISTER]</code> for these classes. Since these services are made
    available to other bundles through the <code>java.net.URL</code> class and
    <code>java.net.URLConnection</code> class, it is advisable to deny the use
    of these services (<code>ServicePermission[&lt;name&gt;, GET]</code>) to
    all, so that only the Framework can get them. This prevents the
    circumvention of the permission checks done by the
    <code>java.net.URL</code> class by using the
    <code>URLStreamHandlerServices</code> service objects directly.</para>
  </section>

  <section xreflabel="org.osgi.service.url" version="5" role="package" xml:id="org.osgi.service.url" xml:base="052/../../../generated/javadoc/docbook/org.osgi.service.url.xml">
   <title>org.osgi.service.url</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.url-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.service.url-version.number">1.0</edition>
   </info>
   <para>
URL Stream and Content Handlers Package Version 1.0.

 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest.

 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.url; version="[1.0,2.0)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.url.AbstractURLStreamHandlerService">
                  <code>AbstractURLStreamHandlerService</code>
               </link> -
Abstract implementation of the <code>URLStreamHandlerService</code> interface.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.url.URLConstants">
                  <code>URLConstants</code>
               </link> -
Defines standard names for property keys associated with
 <link linkend="org.osgi.service.url.URLStreamHandlerService">URLStreamHandlerService</link> and <code>java.net.ContentHandler</code> services.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.url.URLStreamHandlerService">
                  <code>URLStreamHandlerService</code>
               </link> -
Service interface with public versions of the protected
 <code>java.net.URLStreamHandler</code> methods.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.url.URLStreamHandlerSetter">
                  <code>URLStreamHandlerSetter</code>
               </link> -
Interface used by <code>URLStreamHandlerService</code> objects to call the
 <code>setURL</code> method on the proxy <code>URLStreamHandler</code> object.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section xreflabel="AbstractURLStreamHandlerService" role="class" xml:id="org.osgi.service.url.AbstractURLStreamHandlerService">
      <title>public abstract class AbstractURLStreamHandlerService<?line-break?> extends URLStreamHandler<?line-break?> implements URLStreamHandlerService</title>
      <para>
Abstract implementation of the <code>URLStreamHandlerService</code> interface. All
 the methods simply invoke the corresponding methods on
 <code>java.net.URLStreamHandler</code> except for <code>parseURL</code> and
 <code>setURL</code>, which use the <code>URLStreamHandlerSetter</code> parameter.
 Subclasses of this abstract class should not need to override the
 <code>setURL</code> and <code>parseURL(URLStreamHandlerSetter,...)</code> methods.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section xreflabel="realHandler" role="field" xml:id="org.osgi.service.url.AbstractURLStreamHandlerService.realHandler">
         <title>protected volatile URLStreamHandlerSetter realHandler</title>
         <para>
The <code>URLStreamHandlerSetter</code> object passed to the parseURL method.
   </para>
      </section>
      <section xreflabel="AbstractURLStreamHandlerService()" role="method" xml:id="org.osgi.service.url.AbstractURLStreamHandlerService.AbstractURLStreamHandlerService--">
         <title>public  AbstractURLStreamHandlerService()</title>
         <para/>
      </section>
      <section xreflabel="equals(URL,URL)" role="method" xml:id="org.osgi.service.url.AbstractURLStreamHandlerService.equals-URL-URL-">
         <title>public boolean equals(URL u1, URL u2)</title>
         <para role="description">
This method calls <code>super.equals(URL,URL)</code>.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>java.net.URLStreamHandler.equals(URL,URL)</code>
            </para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getDefaultPort()" role="method" xml:id="org.osgi.service.url.AbstractURLStreamHandlerService.getDefaultPort--">
         <title>public int getDefaultPort()</title>
         <para role="description">
This method calls <code>super.getDefaultPort</code>.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>java.net.URLStreamHandler.getDefaultPort</code>
            </para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getHostAddress(URL)" role="method" xml:id="org.osgi.service.url.AbstractURLStreamHandlerService.getHostAddress-URL-">
         <title>public InetAddress getHostAddress(URL u)</title>
         <para role="description">
This method calls <code>super.getHostAddress</code>.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>java.net.URLStreamHandler.getHostAddress</code>
            </para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="hashCode(URL)" role="method" xml:id="org.osgi.service.url.AbstractURLStreamHandlerService.hashCode-URL-">
         <title>public int hashCode(URL u)</title>
         <para role="description">
This method calls <code>super.hashCode(URL)</code>.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>java.net.URLStreamHandler.hashCode(URL)</code>
            </para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="hostsEqual(URL,URL)" role="method" xml:id="org.osgi.service.url.AbstractURLStreamHandlerService.hostsEqual-URL-URL-">
         <title>public boolean hostsEqual(URL u1, URL u2)</title>
         <para role="description">
This method calls <code>super.hostsEqual</code>.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>java.net.URLStreamHandler.hostsEqual</code>
            </para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="openConnection(URL)" role="method" xml:id="org.osgi.service.url.AbstractURLStreamHandlerService.openConnection-URL-">
         <title>public abstract URLConnection openConnection(URL u) throws IOException</title>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>java.net.URLStreamHandler.openConnection</code>
            </para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="parseURL(URLStreamHandlerSetter,URL,String,int,int)" role="method" xml:id="org.osgi.service.url.AbstractURLStreamHandlerService.parseURL-URLStreamHandlerSetter-URL-String-int-int-">
         <title>public void parseURL(URLStreamHandlerSetter realHandler, URL u, String spec, int start, int limit)</title>
         <formalpara role="parameter">
            <title>realHandler</title>
            <para>The object on which the <code>setURL</code> method must be
        invoked for the specified URL.</para>
         </formalpara>
         <para role="description">
Parse a URL using the <code>URLStreamHandlerSetter</code> object. This method
 sets the <code>realHandler</code> field with the specified
 <code>URLStreamHandlerSetter</code> object and then calls
 <code>parseURL(URL,String,int,int)</code>.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>java.net.URLStreamHandler.parseURL</code>
            </para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="sameFile(URL,URL)" role="method" xml:id="org.osgi.service.url.AbstractURLStreamHandlerService.sameFile-URL-URL-">
         <title>public boolean sameFile(URL u1, URL u2)</title>
         <para role="description">
This method calls <code>super.sameFile</code>.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>java.net.URLStreamHandler.sameFile</code>
            </para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="setURL(URL,String,String,int,String,String)" role="method" xml:id="org.osgi.service.url.AbstractURLStreamHandlerService.setURL-URL-String-String-int-String-String-">
         <title>protected void setURL(URL u, String proto, String host, int port, String file, String ref)</title>
         <para role="description">
This method calls
 <code>realHandler.setURL(URL,String,String,int,String,String)</code>.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>java.net.URLStreamHandler.setURL(URL,String,String,int,String,String)</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Deprecated</title>
            <para>This method is only for compatibility with handlers written
             for JDK 1.1.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="setURL(URL,String,String,int,String,String,String,String,String)" role="method" xml:id="org.osgi.service.url.AbstractURLStreamHandlerService.setURL-URL-String-String-int-String-String-String-String-String-">
         <title>protected void setURL(URL u, String proto, String host, int port, String auth, String user, String path, String query, String ref)</title>
         <para role="description">
This method calls
 <code>realHandler.setURL(URL,String,String,int,String,String,String,String)</code>
 .
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>java.net.URLStreamHandler.setURL(URL,String,String,int,String,String,String,String)</code>
            </para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="toExternalForm(URL)" role="method" xml:id="org.osgi.service.url.AbstractURLStreamHandlerService.toExternalForm-URL-">
         <title>public String toExternalForm(URL u)</title>
         <para role="description">
This method calls <code>super.toExternalForm</code>.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>java.net.URLStreamHandler.toExternalForm</code>
            </para>
         </formalpara>
         <para/>
      </section>
   </section>
   <section xreflabel="URLConstants" role="class" xml:id="org.osgi.service.url.URLConstants">
      <title>public interface URLConstants</title>
      <para>
Defines standard names for property keys associated with
 <link linkend="org.osgi.service.url.URLStreamHandlerService">URLStreamHandlerService</link> and <code>java.net.ContentHandler</code> services.

 </para>
      <para>
 The values associated with these keys are of type <code>java.lang.String[]</code>
 or <code>java.lang.String</code>, unless otherwise indicated.</para>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section xreflabel="URL_CONTENT_MIMETYPE" role="field" xml:id="org.osgi.service.url.URLConstants.URL_CONTENT_MIMETYPE">
         <title>public static final String URL_CONTENT_MIMETYPE = "url.content.mimetype"</title>
         <para>
Service property naming the MIME types serviced by a
 java.net.ContentHandler. The property's value is a MIME type or an array
 of MIME types.
   </para>
      </section>
      <section xreflabel="URL_HANDLER_PROTOCOL" role="field" xml:id="org.osgi.service.url.URLConstants.URL_HANDLER_PROTOCOL">
         <title>public static final String URL_HANDLER_PROTOCOL = "url.handler.protocol"</title>
         <para>
Service property naming the protocols serviced by a
 URLStreamHandlerService. The property's value is a protocol name or an
 array of protocol names.
   </para>
      </section>
   </section>
   <section xreflabel="URLStreamHandlerService" role="class" xml:id="org.osgi.service.url.URLStreamHandlerService">
      <title>public interface URLStreamHandlerService</title>
      <para>
Service interface with public versions of the protected
 <code>java.net.URLStreamHandler</code> methods.
 </para>
      <para>
 The important differences between this interface and the
 <code>URLStreamHandler</code> class are that the <code>setURL</code> method is absent
 and the <code>parseURL</code> method takes a <link linkend="org.osgi.service.url.URLStreamHandlerSetter">URLStreamHandlerSetter</link> object
 as the first argument. Classes implementing this interface must call the
 <code>setURL</code> method on the <code>URLStreamHandlerSetter</code> object received
 in the <code>parseURL</code> method instead of <code>URLStreamHandler.setURL</code> to
 avoid a <code>SecurityException</code>.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.service.url.AbstractURLStreamHandlerService">AbstractURLStreamHandlerService</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section xreflabel="equals(URL,URL)" role="method" xml:id="org.osgi.service.url.URLStreamHandlerService.equals-URL-URL-">
         <title>public boolean equals(URL u1, URL u2)</title>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>java.net.URLStreamHandler.equals(URL, URL)</code>
            </para>
         </formalpara>
      </section>
      <section xreflabel="getDefaultPort()" role="method" xml:id="org.osgi.service.url.URLStreamHandlerService.getDefaultPort--">
         <title>public int getDefaultPort()</title>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>java.net.URLStreamHandler.getDefaultPort</code>
            </para>
         </formalpara>
      </section>
      <section xreflabel="getHostAddress(URL)" role="method" xml:id="org.osgi.service.url.URLStreamHandlerService.getHostAddress-URL-">
         <title>public InetAddress getHostAddress(URL u)</title>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>java.net.URLStreamHandler.getHostAddress</code>
            </para>
         </formalpara>
      </section>
      <section xreflabel="hashCode(URL)" role="method" xml:id="org.osgi.service.url.URLStreamHandlerService.hashCode-URL-">
         <title>public int hashCode(URL u)</title>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>java.net.URLStreamHandler.hashCode(URL)</code>
            </para>
         </formalpara>
      </section>
      <section xreflabel="hostsEqual(URL,URL)" role="method" xml:id="org.osgi.service.url.URLStreamHandlerService.hostsEqual-URL-URL-">
         <title>public boolean hostsEqual(URL u1, URL u2)</title>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>java.net.URLStreamHandler.hostsEqual</code>
            </para>
         </formalpara>
      </section>
      <section xreflabel="openConnection(URL)" role="method" xml:id="org.osgi.service.url.URLStreamHandlerService.openConnection-URL-">
         <title>public URLConnection openConnection(URL u) throws IOException</title>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>java.net.URLStreamHandler.openConnection</code>
            </para>
         </formalpara>
      </section>
      <section xreflabel="parseURL(URLStreamHandlerSetter,URL,String,int,int)" role="method" xml:id="org.osgi.service.url.URLStreamHandlerService.parseURL-URLStreamHandlerSetter-URL-String-int-int-">
         <title>public void parseURL(URLStreamHandlerSetter realHandler, URL u, String spec, int start, int limit)</title>
         <formalpara role="parameter">
            <title>realHandler</title>
            <para>The object on which <code>setURL</code> must be invoked for
        this URL.</para>
         </formalpara>
         <para role="description">
Parse a URL. This method is called by the <code>URLStreamHandler</code> proxy,
 instead of <code>java.net.URLStreamHandler.parseURL</code>, passing a
 <code>URLStreamHandlerSetter</code> object.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>java.net.URLStreamHandler.parseURL</code>
            </para>
         </formalpara>
      </section>
      <section xreflabel="sameFile(URL,URL)" role="method" xml:id="org.osgi.service.url.URLStreamHandlerService.sameFile-URL-URL-">
         <title>public boolean sameFile(URL u1, URL u2)</title>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>java.net.URLStreamHandler.sameFile</code>
            </para>
         </formalpara>
      </section>
      <section xreflabel="toExternalForm(URL)" role="method" xml:id="org.osgi.service.url.URLStreamHandlerService.toExternalForm-URL-">
         <title>public String toExternalForm(URL u)</title>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>java.net.URLStreamHandler.toExternalForm</code>
            </para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="URLStreamHandlerSetter" role="class" xml:id="org.osgi.service.url.URLStreamHandlerSetter">
      <title>public interface URLStreamHandlerSetter</title>
      <para>
Interface used by <code>URLStreamHandlerService</code> objects to call the
 <code>setURL</code> method on the proxy <code>URLStreamHandler</code> object.

 </para>
      <para>
 Objects of this type are passed to the
 <link linkend="org.osgi.service.url.URLStreamHandlerService.parseURL-URLStreamHandlerSetter-URL-String-int-int-">URLStreamHandlerService.parseURL(URLStreamHandlerSetter, URL, String, int, int)</link>
 method. Invoking the <code>setURL</code> method on the
 <code>URLStreamHandlerSetter</code> object will invoke the <code>setURL</code> method
 on the proxy <code>URLStreamHandler</code> object that is actually registered with
 <code>java.net.URL</code> for the protocol.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section xreflabel="setURL(URL,String,String,int,String,String)" role="method" xml:id="org.osgi.service.url.URLStreamHandlerSetter.setURL-URL-String-String-int-String-String-">
         <title>public void setURL(URL u, String protocol, String host, int port, String file, String ref)</title>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>java.net.URLStreamHandler.setURL(URL,String,String,int,String,String)</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>Deprecated</title>
            <para>This method is only for compatibility with handlers written
             for JDK 1.1.</para>
         </formalpara>
      </section>
      <section xreflabel="setURL(URL,String,String,int,String,String,String,String,String)" role="method" xml:id="org.osgi.service.url.URLStreamHandlerSetter.setURL-URL-String-String-int-String-String-String-String-String-">
         <title>public void setURL(URL u, String protocol, String host, int port, String authority, String userInfo, String path, String query, String ref)</title>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>java.net.URLStreamHandler.setURL(URL,String,String,int,String,String,String,String)</code>
            </para>
         </formalpara>
      </section>
   </section>
</section>

  <section xml:id="service.url.references">
    <title>References</title>

    <bibliolist>
      <bibliomixed><title>URLs</title><biblioid class="uri"><link xlink:href="http://www.ietf.org/rfc/rfc1738.txt"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i1260753"><title>MIME Multipurpose Internet Mail
      Extension</title><biblioid class="uri"><link xlink:href="http://www.nacs.uci.edu/indiv/ehood/MIME/MIME.html"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i1260756"><title>Assigned MIME Media
      Types</title><biblioid class="uri"><link xlink:href="http://www.iana.org/assignments/media-types"/></biblioid></bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter label="53" revision="$Id: 1ec8de48910cd02543c536867b320fe915e8a751 $" version="5.0" xml:id="framework.resolverhooks" xml:base="053/framework.resolverhooks.xml">
  <title>Resolver Hook Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.framework.hooks.resolver-version" linkend="org.osgi.framework.hooks.resolver"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>The module layer is responsible for the resolve operation that wires
    requirements (Import-Package, Require-Bundle etc.) to capabilities
    (Export-Package, Bundle-SymbolicName/Bundle-Version etc.). The resolve
    operation is designed to work stand-alone but in certain use cases it is
    important to be able to influence the resolver's decisions. This
    specification defines a Resolver Hook Factory service that allows third
    party bundles to influence the resolve operation. Primary use cases for
    this hook are scoping of groups of bundles. However, the hooks also allows
    bundle to find out about, and control, the resolve operation for other
    purposes.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Reduction</emphasis> - Allow third party bundles to
          remove capabilities from a set of capabilities that matches a
          requirement.</para>
        </listitem>

        <listitem>
          <para><emphasis>Complete</emphasis> - Support all built-in
          namespaces as well as the generic capability and requirement
          headers.</para>
        </listitem>

        <listitem>
          <para><emphasis>Singletons</emphasis> - Allow third party bundles to
          remove candidates from a set of singleton capabilities before the
          resolver selects one.</para>
        </listitem>

        <listitem>
          <para><emphasis>Secure</emphasis> - Support full security but allow
          operation without security present.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Resolver Hook Factory</emphasis> - The service
          registered by a bundle that wants to control the resolve operation.
          This service is used to create an instance of the Resolver Hook for
          each resolve operation.</para>
        </listitem>

        <listitem>
          <para><emphasis>Resolver Hook</emphasis> - Is created by the
          Resolver Hook Factory service for each resolver process. Is
          consulted to reduce candidate capabilities for resolving and
          selecting singletons.</para>
        </listitem>

        <listitem>
          <para><emphasis>Client</emphasis> - A bundle that is considered
          during the resolve operation.</para>
        </listitem>

        <listitem>
          <para><emphasis>Handler</emphasis> - A bundle that registers a
          Resolver Hook Factory service for influencing the resolve
          operation.</para>
        </listitem>

        <listitem>
          <para><emphasis>Bundle Capability</emphasis> - A capability
          represents a feature of a bundle described with attributes and
          directives defined in a namespace. Some namespaces are built-in to
          the OSGi framework, others are generic.</para>
        </listitem>

        <listitem>
          <para><emphasis>Bundle Requirement</emphasis> - A requirement
          represents a need from a bundle described as a filter on the
          attributes of a Bundle Capability.</para>
        </listitem>

        <listitem>
          <para><emphasis>Provider</emphasis> - A bundle that provides a
          Bundle Capability.</para>
        </listitem>

        <listitem>
          <para><emphasis>Consumer</emphasis> - A bundle that requires a
          Bundle Capability</para>
        </listitem>

        <listitem>
          <para><emphasis>Resolver</emphasis> - The internal framework
          machinery that resolves requirements to providers with matching
          capabilities.</para>
        </listitem>
      </itemizedlist>

      <figure>
        <title>Resolver Hooks Entities</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.865in" contentwidth="7.000in" fileref="resolverhook-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Synopsis</title>

      <para>A handler bundle that needs to manage the wiring between bundles
      must register a Resolver Hook Factory service. For each resolve
      operation the Resolver needs to perform, the framework asks each
      Resolver Hook Factory service for a new Resolver Hook specific for the
      operation. During the resolve operation, the Resolver will allow the
      Resolver Hooks to remove candidate solutions and assist in selecting
      singletons.</para>
    </section>
  </section>

  <section>
    <title>Resolve Operation</title>

    <section>
      <title>Trigger Bundles</title>

      <para>The Resolver is triggered by activity in the OSGi framework.
      Calling certain methods on a bundle when a bundle is in the
      <code>INSTALLED</code> state will cause the framework to begin a
      <emphasis>resolve operation</emphasis> in order to resolve the bundle.
      Other API can also trigger a resolver. Frameworks can resolve on a per
      bundle basis or they can resolve a number of bundles atomically in one
      operation. The bundles that trigger a resolve operation are called the
      <emphasis>trigger bundle</emphasis>s. The trigger bundles can be defined
      by the following cases:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Root Bundle</emphasis> - Calling certain methods on
          a bundle when a bundle is in the <code>INSTALLED</code> state will
          cause the framework to begin a <emphasis>resolve
          operation</emphasis> in order to resolve the bundle. In general, a
          bundle needs to be resolved when its class loader is needed. The
          following Bundle methods will start a resolve operation when the
          subject is not yet resolved:</para>

          <itemizedlist>
            <listitem>
              <para><code>start</code></para>
            </listitem>

            <listitem>
              <para><code>loadClass</code></para>
            </listitem>

            <listitem>
              <para><code>findEntries</code></para>
            </listitem>

            <listitem>
              <para><code>getResource</code></para>
            </listitem>

            <listitem>
              <para><code>getResources</code></para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para><emphasis>Resolve Bundles</emphasis> - The set of bundle
          revisions of the unresolved bundles given as argument, or their
          default when <code>null</code> is used, to the Framework Wiring
          <code>resolveBundles</code> method. See <xref linkend="framework.wiring.usingthewiringapi"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Refresh Bundles</emphasis> - A refresh operation
          will have to re-resolve the bundles that will be unresolved in the
          refresh. The trigger bundles are then the bundle revisions of the
          dependency closure, which is described in <xref linkend="framework.wiring.refreshing"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Dynamic Import</emphasis> - A Dynamic Import can
          require the framework to start a resolve operation.</para>
        </listitem>

        <listitem>
          <para><emphasis>Other</emphasis> - The Resolver Hook is a service so
          other parties can to start a resolver operation to run what-if
          scenarios or for other purposes.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Resolving Types</title>

      <para>Various types of resolve operations can be initiated:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Static</emphasis> - A static bundle resolve
          operation. This resolve operation is necessary any time one or more
          bundles transitions from the <code>INSTALLED</code> state to the
          <code>RESOLVED</code> state. During this resolve operation the
          framework attempts to resolve static requirements specified by the
          bundles being resolved.</para>
        </listitem>

        <listitem>
          <para><emphasis>Dynamic</emphasis> - A dynamic import must be
          resolved.</para>
        </listitem>
      </itemizedlist>

      <para>The resolve operation is not limited to the trigger bundles only,
      they just provide the root bundles that must be resolved. The Resolver
      is free to consider any present bundle to provide the required
      capabilities. If such bundles are in the <code>INSTALLED</code> state
      then they can also become a candidate to be resolved. The resolver is
      also free to use bundles that are actually not installed in the
      framework, for example for what-if scenarios.</para>
    </section>

    <section>
      <title>Preparing Handlers</title>

      <para>Once the resolver is triggered, it must prepare the
      <emphasis>Handlers</emphasis> to participate in the resolve operation. A
      Handler is an active bundle that needs to participate in the resolve
      operation, there can be multiple Handlers in a framework. A Handler must
      register a Resolver Hook Factory service. This service is the interface
      between a <emphasis>Handler</emphasis> bundle, a bundle that will handle
      some aspects of the resolve operation, and the Resolver.</para>

      <para>To prepare the Handlers, the Resolver must request a new Resolver
      Hook from each of the registered Resolver Hook Factory services with the
      <xref linkend="org.osgi.framework.hooks.resolver.ResolverHookFactory.begin-Collection-" xrefstyle="hyperlink"/> method. The parameter is the set of trigger
      bundles. The Handler is expected to create a new <xref linkend="org.osgi.framework.hooks.resolver.ResolverHook" xrefstyle="hyperlink"/> object for each call. If <code>null</code> is
      returned then the Handler abstains from participation. A Resolver Hook
      Factory must be thread-safe and allow the creation of independent
      Resolver Hook objects that can be active on multiple threads.</para>

      <para>A Resolver Hook is created for a single atomic resolve operation
      and does not have to be thread safe. The Resolver must ensure that
      access to the Resolver Hook is serialized, that is, the can only be
      active from a single thread. The <code>ResolverHook</code> object is
      called multiple times during a resolve operation to influence the
      outcome of a resolve operation. The following operations are
      provided:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.framework.hooks.resolver.ResolverHook.filterResolvable-Collection-" xrefstyle="hyperlink"/> - Removes bundles that are candidates for
          resolving so they do not resolve in the current operation. Provides
          an easy way to exclude bundles.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.framework.hooks.resolver.ResolverHook.filterMatches-BundleRequirement-Collection-" xrefstyle="hyperlink"/> - Remove matching capabilities from the
          candidate capabilities. This effectively hides capabilities for
          certain requirers.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.framework.hooks.resolver.ResolverHook.filterSingletonCollisions-BundleCapability-Collection-" xrefstyle="hyperlink"/> - Remove potentially conflicting singletons
          from the collection. This provides the possibility to resolve a
          singleton multiple times in different groups.</para>
        </listitem>
      </itemizedlist>

      <para>A Resolver Hook can influence the outcome of a resolve operation
      by removing entries from <emphasis>shrinkable</emphasis> collections. A
      shrinkable collection is a collection that can only shrink. The Handler
      can remove entries from the collection but it cannot add an entry to it.
      Any attempt to add to the collection must result in throwing an
      Unsupported Operation Exception. All collections in the Resolver Hook
      API are shrinkable collections.</para>

      <para>The Resolver Hook Factory services <xref linkend="org.osgi.framework.hooks.resolver.ResolverHookFactory.begin-Collection-" xrefstyle="hyperlink"/> method is called in the ranking order, see <xref linkend="framework.service.servicerankingorder"/>. This is the same
      order used for calling the resulting Resolver Hooks. The Resolver Hook
      <xref linkend="org.osgi.framework.hooks.resolver.ResolverHook.end--" xrefstyle="hyperlink"/> method notifies the Handler that the resolve
      operation has finished. The framework must not hold on to this Resolver
      Hook instance after the <xref linkend="org.osgi.framework.hooks.resolver.ResolverHook.end--" xrefstyle="hyperlink"/> method has been called.</para>
    </section>

    <section>
      <title>Limiting the Set of Resolvable Bundles</title>

      <para>There are use cases where a bundle that is being installed should
      not be allowed to resolve until some activity has taken place. Sometimes
      certain bundles should never resolve. For example, there are byte code
      weaving scenarios where a bundle is used as the source but a synthetic
      bundle with the woven code provides the actual classes. The source
      bundle should then not resolve. The <xref linkend="org.osgi.framework.hooks.resolver.ResolverHook.filterResolvable-Collection-" xrefstyle="hyperlink"/> method can be used to ensure that certain
      bundles are never resolved. All the given Bundle Revisions are
      unresolved. The Handler can look at the given collection and remove any
      bundles it wants to prevent being resolved in this resolve
      operation.</para>

      <para>The set of bundles passed will contain the trigger bundles. If a
      Handler removes one of the trigger bundles the resolve of the removed
      bundle will not succeed and fail the call to the method that triggered
      the resolve operation.</para>

      <para>The framework can pass an empty collection of resolvable bundle
      revisions, this could for example happen while resolving a dynamic
      import. An empty collection indicates that the framework will not cause
      any bundles to transition from <code>INSTALLED</code> to
      <code>RESOLVED</code> during a dynamic import package resolving.</para>

      <para>For example, a Handler wants to ensure certain bundles are not
      resolved, then it can do:</para>

      <programlisting>public class UnresolveHandler implements ResolverHook{
    Set&lt;BundleRevision&gt; neverResolve = ... ;

    public void filterResolvable(
        Collection&lt;BundleRevision&gt; toBeResolved ) {
        toBeResolved.removeAll( neverResolve );
    }

   ... other methods
}</programlisting>
    </section>

    <section>
      <title>Hiding Capabilities</title>

      <para>The <xref linkend="org.osgi.framework.hooks.resolver.ResolverHook.filterMatches-BundleRequirement-Collection-" xrefstyle="hyperlink"/> method is used to remove capabilities for
      consideration for a specific requirer. The Handler receives the Bundle
      Requirement and the set of candidates that already match the
      requirement. The Handler can now remove any candidates that are not
      suitable. Removing the capability will prevent the requirement from
      getting wired to the capability. If the Bundle Requirement is declared
      in a fragment then the host is not knowable.</para>

      <para>For example, a Handler wants to ensure that a set of bundles in a
      group are only wired to a limited set of infra-structure bundles and
      each other. This could be implemented as follows:</para>

      <programlisting>public class GroupHandler implements ResolverHook{
    Map&lt;Bundle,Set&lt;Bundle&gt;&gt; groups = ...;
    Set&lt;Bundle&gt; system = ... ;

    public void filterMatches( BundleRequirement r,
        Collection&lt;BundleCapability&gt; candidates ) {
        Set&lt;Bundle&gt; group = groups.get(r.getRevision().getBundle());
        if ( group == null )
            return; // not in a group

        for ( Iterator&lt;BundleCapability&gt; i = candidates.iterator();
            i.hasNext(); ) {
            BundleCapability candidate = i.next();
            Bundle other = candidate.getRevision().getBundle();

            if ( group.contains(other) ||
                system.contains(other) )
                continue;

            i.remove(); // not system, not in the same group
        }
    }

   ... other methods
}</programlisting>
    </section>

    <section>
      <title>Effect of Singleton Capabilities</title>

      <para>Certain namespaces provide a <code>singleton</code> directive. For
      example, the <code>osgi.wiring.bundle</code> namespace defines that a
      bundle can be singleton, meaning that only one such bundle with a given
      symbolic name can be resolved. The purpose is to ensure that a bundle
      that needs exclusiveness gets this.</para>

      <para>In certain scenarios it is necessary to limit the singleton
      constraint to a group of bundles instead of the whole framework. One of
      the primary use cases of the Resolver Hooks is to allow scoping of
      bundles. Some Handlers can interpret the singleton constraints as to
      apply to the group, not the whole framework. For this purpose, the
      Resolver Hook API allows the Handler to influence which bundle revision
      is selected for the singleton with the <xref linkend="org.osgi.framework.hooks.resolver.ResolverHook.filterSingletonCollisions-BundleCapability-Collection-" xrefstyle="hyperlink"/> method.</para>

      <para>The first parameter is the capability that is under consideration
      by the resolver, called the <emphasis>viewpoint</emphasis> capability.
      The resolver needs to find out what other capabilities can
      <emphasis>collide</emphasis> with the viewpoint. A collision takes place
      when multiple bundles with the same symbolic name and singleton
      directive set to <code>true</code> can potentially be resolved at the
      same time. For example, a Handler implements a grouping model. A
      singleton is therefore only valid for the bundles in this group. A
      Handler must therefore be able to indicate which bundles can collide.
      This model is asymmetric. If a group has for example outer and inner
      bundles, then inner bundles can collide with outer bundles but not vice
      versa.</para>

      <para>The second parameters of the <xref linkend="org.osgi.framework.hooks.resolver.ResolverHook.filterSingletonCollisions-BundleCapability-Collection-" xrefstyle="hyperlink"/> method is a set of capabilities called the
      <emphasis>candidates</emphasis>. The Handler can shrink this collection
      by removing capabilities. Removing a capability from the list of
      collision candidates will effectively hide the collision candidate from
      the target singleton bundle. This will allow the target singleton bundle
      to resolve regardless of the resolving state of the collision
      candidate.</para>

      <para>If <code>S</code> is the group of infrastructure bundles (acting
      as an outer bundles) and a non-infrastructure group is <code>A</code>,
      then the following cases exist:</para>

      <programlisting>S S     collide, leave in set
A A     collide, leave in set
A !A    remove from set, not visible
A S     collide, leave in set
S A     do not collide, remove from set</programlisting>

      <para>The following example implements this strategy:</para>

      <programlisting>public class GroupHandler implements ResolverHook{
    Map&lt;Bundle,Set&lt;Bundle&gt;&gt; groups = ...;

    public void filterSingletonCollisions( BundleCapability c,
        Collection&lt;BundleCapability&gt; candidates ) {
        Set&lt;Bundle&gt; group = groups.get(c.getRevision().getBundle());

        for ( Iterator&lt;BundleCapability&gt; i = candidates.iterator();
            i.hasNext(); ) {
            BundleCapability candidate = i.next();
            Bundle other = candidate.getRevision().getBundle();
            Set&lt;Bundle&gt; otherGroup = groups.get(other);

            if ( group == otherGroup || otherGroup == null ) // Samegroup
                continue;

            i.remove(); // not system, not in the same group
        }
    }

   ... other methods
}</programlisting>

      <para>The framework can call this method multiple times for the same
      singleton capability. For example, as a first pass a framework may want
      to determine if a singleton bundle is resolvable first based on the
      presence of other already resolved singleton capabilities. Later the
      framework may call this method again to determine which singleton
      capabilities from unresolved bundles to allow to resolve.</para>
    </section>
  </section>

  <section>
    <title>The Resolve Operation</title>

    <para>The following steps outline the way a framework uses the resolver
    hooks during a resolve operation. Any callbacks to the hook services must
    be done in a privileged block, see <xref linkend="framework.lifecycle.privilegedcallbacks"/>.</para>

    <orderedlist>
      <listitem>
        <para>Collect a snapshot of registered Resolver Hook Factory services
        that will be called during the current resolve operation. If a
        Resolver Hook Factory contained in the snapshot unregisters then the
        resolve must fail, see <xref linkend="i1703638"/>. Each registered
        Resolver Hook Factory service in the snapshot will be obtained by the
        framework through the system's bundle context.</para>
      </listitem>

      <listitem>
        <para>For each Resolver Hook Factory in the snapshot, in ranking
        order, call the <xref linkend="org.osgi.framework.hooks.resolver.ResolverHookFactory.begin-Collection-" xrefstyle="hyperlink"/> method to inform the Handler about the begin
        of a new resolve operation. This method must return a Resolver Hook.
        If this hook is not null, must be added to list <code>H</code>. If a
        corresponding Resolver Hook Factory service is unregistered then the
        Resolver Hook must be removed from <code>H</code>.</para>
      </listitem>

      <listitem>
        <para>Determine the collection of unresolved bundle revisions that may
        be considered for resolving during the current resolve operation and
        place each of the bundle revisions in a shrinkable collection
        <code>U(nresolved)</code>.</para>

        <itemizedlist>
          <listitem>
            <para>For each active Resolver Hook in <code>H(ooks)</code>, call
            the <xref linkend="org.osgi.framework.hooks.resolver.ResolverHook.filterResolvable-Collection-" xrefstyle="hyperlink"/> method with <code>U</code>. The Handler
            can remove any candidate that should not be resolved.</para>
          </listitem>
        </itemizedlist>

        <para><code>U</code> now contains all the unresolved bundle revisions
        that potentially could be resolved during this resolve operation. Any
        bundle revisions that were removed by Handlers must not resolve in
        this operation.</para>

        <para>This step can be repeated multiple times interspersed with other
        calls except to the <code>begin</code> and <code>end</code>
        methods.</para>
      </listitem>

      <listitem>
        <para><code>S = {}</code></para>
      </listitem>

      <listitem>
        <para>For each bundle revision <code>B</code> in <code>U</code> that
        represents a singleton capability:</para>

        <itemizedlist>
          <listitem>
            <para>Determine the collection of available capabilities that have
            a namespace of <code>osgi.wiring.bundle</code>, are singletons,
            and have the same symbolic name as the singleton bundle revision
            <code>B</code> and place each of the matching capabilities into a
            shrinkable collection <code>S</code>.</para>
          </listitem>

          <listitem>
            <para>Remove the <code>osgi.wiring.bundle</code> capability
            provided by the bundle revision B from <code>S</code>. A singleton
            bundle cannot collide with itself.</para>
          </listitem>

          <listitem>
            <para>For each resolver hook call the <xref linkend="org.osgi.framework.hooks.resolver.ResolverHook.filterSingletonCollisions-BundleCapability-Collection-" xrefstyle="hyperlink"/> method with the
            <code>osgi.wiring.bundle</code> capability provided by bundle
            revision <code>B</code> and <code>S</code>.</para>
          </listitem>
        </itemizedlist>

        <para><code>S</code> now contains all the singleton
        <code>osgi.wiring.bundle</code> capabilities that can influence the
        ability of bundle revision <code>B</code> to resolve.</para>

        <para>This step can be repeated multiple times interspersed with other
        calls except to the <code>begin</code> and <code>end</code>
        methods.</para>
      </listitem>

      <listitem>
        <para>During a resolve operation the Resolver can resolve any or all
        bundles contained in <code>U</code>. For each bundle revision
        <code>B</code> in <code>U</code> which the Resolver attempts to
        resolve the following steps must be followed:</para>

        <itemizedlist>
          <listitem>
            <para>For each requirement <code>R(equirement)</code> specified by
            bundle revision <code>B</code>, determine the collection of
            capabilities that satisfy the requirement <code>R</code> and place
            each matching capability into a shrinkable collection
            <code>C(apabilities)</code>. A capability is considered to satisfy
            a particular requirement if its attributes match the requirement's
            filter and the requirer bundle has permission to access the
            capability.</para>
          </listitem>

          <listitem>
            <para>For each Resolver Hook in <code>H</code>, call the <xref linkend="org.osgi.framework.hooks.resolver.ResolverHook.filterMatches-BundleRequirement-Collection-" xrefstyle="hyperlink"/> method with the Bundle Requirement
            <code>R</code> and the shrinkable collection
            <code>C</code>.</para>
          </listitem>
        </itemizedlist>

        <para><code>C</code> now contains all the capabilities that can be
        used to satisfy the requirement <code>R</code>. Any other capabilities
        that got removed from <code>C</code> must not be used to satisfy
        requirement R.</para>

        <para>This step can be repeated multiple times interspersed with other
        calls except <code>begin</code> and <code>end</code>.</para>
      </listitem>

      <listitem>
        <para>For each Resolver Hook in <code>H</code></para>

        <itemizedlist>
          <listitem>
            <para>Call the <code>end</code> method to inform the Handler about
            a resolve operation ending.</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>For each Resolve Hook still in <code>H</code>, ensure that the
        Resolver Hook is no longer referenced.</para>
      </listitem>
    </orderedlist>

    <para>In cases where the a shrinkable collection becomes empty the
    framework must continue calling the remaining hooks because these hooks
    can also be used to trace progress.</para>

    <para>The above steps are meant to illustrate how the Resolve Hooks are
    used by the Resolver, they are not normative. The nature of the resolve
    operation and the Resolver algorithm can require back tracking by the
    Resolver implementation. It is therefore acceptable for the Resolver to
    call the Resolver Hook multiple times with similar or identical parameters
    during a single resolve operation. This is true for all methods except the
    <code>begin</code> and <code>end</code> methods that are only called once
    during a resolve operation.</para>

    <para>A Resolver Hook must always return the same answer for the same set
    of inputs, that is, it must be <emphasis>stable</emphasis>.</para>

    <section>
      <title>Resolver Hook Limitations</title>

      <para>Resolver hooks are system level components. Handlers must be
      careful not to create an unresolvable state which is very hard for a
      developer or a provisioner to diagnose. Resolver Hooks also must not be
      allowed to start another resolve operation, for example by starting a
      bundle or resolving bundles. The framework must detect this and throw an
      Illegal State Exception.</para>

      <para>In cases where a Bundle Exception can be thrown, such as the
      Bundle <code>start</code> method, the Illegal State Exception must be
      the cause of the Bundle Exception and the Bundle Exception must be of
      type <code>RESOLVE_ERROR</code>. In cases where an exception cannot be
      propagated to a caller, for example during dynamic import resolving, a
      Framework Event of type <code>ERROR</code> must be published.</para>

      <para>All hooks are treated as ordinary services, they can be used by
      the system bundle or other bundles.</para>
    </section>

    <section xml:id="i1703638">
      <title>Failures</title>

      <para>If during the resolving anything goes wrong then the Resolver must
      abort the resolve operation, clean up and report an error.</para>

      <para>If the <xref linkend="org.osgi.framework.hooks.resolver.ResolverHookFactory.begin-Collection-" xrefstyle="hyperlink"/> method successfully returns a <xref linkend="org.osgi.framework.hooks.resolver.ResolverHook" xrefstyle="hyperlink"/>, then the <xref linkend="org.osgi.framework.hooks.resolver.ResolverHook.end--" xrefstyle="hyperlink"/> method must be called on that hook if it is
      still valid (its <xref linkend="org.osgi.framework.hooks.resolver.ResolverHookFactory" xrefstyle="hyperlink"/> is still registered) at the end of the Resolve.
      A <xref linkend="org.osgi.framework.hooks.resolver.ResolverHook" xrefstyle="hyperlink"/> can therefore safely allocate resources in the
      <xref linkend="org.osgi.framework.hooks.resolver.ResolverHookFactory.begin-Collection-" xrefstyle="hyperlink"/> method because it is guaranteed that it can
      deallocate them in the <xref linkend="org.osgi.framework.hooks.resolver.ResolverHook.end--" xrefstyle="hyperlink"/> method.</para>

      <para>The following are potential failures:</para>

      <itemizedlist>
        <listitem>
          <para>A Resolver Hook Factory used in a resolve operation is
          unregistered</para>
        </listitem>

        <listitem>
          <para>A Resolver Hook throws an exception.</para>
        </listitem>
      </itemizedlist>

      <para>If the Resolver fails, it must throw a Bundle Exception to the
      caller if possible. Otherwise it must publish a Framework Event of type
      <code>ERROR</code>.</para>
    </section>
  </section>

  <section>
    <title>Security</title>

    <para>The Resolver Hook Factory service described in this specification is
    a highly complex facility that requires great care in their implementation
    to maintain the Framework invariants. It is therefore important that in a
    secure system the permission to register these hooks is only given to
    privileged bundles.</para>

    <para>In this case, the user of the Resolver Hook Factory service is the
    framework. Therefore, there is never a need to provide this service.
    Implementers of these hooks must have:</para>

    <itemizedlist>
      <listitem>
        <para><code>ServicePermission[..ResolverHookFactory,REGISTER]</code>
        for Event Listener Hook services.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section xreflabel="org.osgi.framework.hooks.resolver" version="5" role="package" xml:id="org.osgi.framework.hooks.resolver" xml:base="053/../../../generated/javadoc/docbook/org.osgi.framework.hooks.resolver.xml">
   <title>org.osgi.framework.hooks.resolver</title>
   <info>
      <releaseinfo xml:id="org.osgi.framework.hooks.resolver-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.framework.hooks.resolver-version.number">1.0</edition>
   </info>
   <para>
Framework Resolver Hooks Package Version 1.0.

 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest.

 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.framework.hooks.resolver; version="[1.0,2.0)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.hooks.resolver.ResolverHook">
                  <code>ResolverHook</code>
               </link> -
OSGi Framework Resolver Hook instances are obtained from the OSGi
 <link linkend="org.osgi.framework.hooks.resolver.ResolverHookFactory">Framework Resolver Hook Factory</link> service.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.hooks.resolver.ResolverHookFactory">
                  <code>ResolverHookFactory</code>
               </link> -
OSGi Framework Resolver Hook Factory Service.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section xreflabel="ResolverHook" role="class" xml:id="org.osgi.framework.hooks.resolver.ResolverHook">
      <title>public interface ResolverHook</title>
      <para>
OSGi Framework Resolver Hook instances are obtained from the OSGi
 <link linkend="org.osgi.framework.hooks.resolver.ResolverHookFactory">Framework Resolver Hook Factory</link> service.

 </para>
      <para>
 A Resolver Hook instance is called by the framework during a resolve process.
 A resolver hook may influence the outcome of a resolve process by removing
 entries from shrinkable collections that are passed to the hook during a
 resolve process. A shrinkable collection is a <code>Collection</code> that
 supports all remove operations. Any other attempts to modify a shrinkable
 collection will result in an <code>UnsupportedOperationException</code> being
 thrown.

 </para>
      <para>
 The following steps outline the way a framework uses the resolver hooks
 during a resolve process.
 </para>
      <orderedlist>
         <listitem>
            <para>Collect a snapshot of registered resolver hook factories that will be
 called during the current resolve process. Any hook factories registered
 after the snapshot is taken must not be called during the current resolve
 process. A resolver hook factory contained in the snapshot may become
 unregistered during the resolve process. The framework should handle this and
 stop calling the resolver hook instance provided by the unregistered hook
 factory and the current resolve process must fail. If possible, an exception
 must be thrown to the caller of the API which triggered the resolve process.
 In cases where the caller is not available a framework event of type error
 should be fired.</para>
         </listitem>
         <listitem>
            <para>For each registered hook factory call the
 <link linkend="org.osgi.framework.hooks.resolver.ResolverHookFactory.begin-Collection-">ResolverHookFactory.begin(Collection)</link> method to inform the hooks
 about a resolve process beginning and to obtain a Resolver Hook instance that
 will be used for the duration of the resolve process.</para>
         </listitem>
         <listitem>
            <para>Determine the collection of unresolved bundle revisions that may be
 considered for resolution during the current resolution process and place
 each of the bundle revisions in a shrinkable collection <code>Resolvable</code>.
 For each resolver hook call the <link linkend="org.osgi.framework.hooks.resolver.ResolverHook.filterResolvable-Collection-">filterResolvable(Collection)</link> method
 with the shrinkable collection <code>Resolvable</code>.</para>
         </listitem>
         <listitem>
            <para>The shrinkable collection <code>Resolvable</code> now contains all the
 unresolved bundle revisions that may end up as resolved at the end of the
 current resolve process. Any other bundle revisions that got removed from the
 shrinkable collection <code>Resolvable</code> must not end up as resolved at the
 end of the current resolve process.</para>
         </listitem>
         <listitem>
            <para>For each bundle revision <code>B</code> left in the shrinkable collection
 <code>Resolvable</code> and any bundle revision <code>B</code> which is currently
 resolved that represents a singleton bundle do the following:
 </para>
            <itemizedlist>
               <listitem>
                  <para>Determine the collection of available capabilities that have a namespace
 of <link linkend="org.osgi.framework.namespace.IdentityNamespace">osgi.identity</link>, are singletons, and have the same
 symbolic name as the singleton bundle revision <code>B</code> and place each of
 the matching capabilities into a shrinkable collection <code>Collisions</code>.</para>
               </listitem>
               <listitem>
                  <para>Remove the <link linkend="org.osgi.framework.namespace.IdentityNamespace">osgi.identity</link> capability provided by
 bundle revision <code>B</code> from shrinkable collection <code>Collisions</code>. A
 singleton bundle cannot collide with itself.</para>
               </listitem>
               <listitem>
                  <para>For each resolver hook call the
 <link linkend="org.osgi.framework.hooks.resolver.ResolverHook.filterSingletonCollisions-BundleCapability-Collection-">filterSingletonCollisions(BundleCapability, Collection)</link> with the
 <link linkend="org.osgi.framework.namespace.IdentityNamespace">osgi.identity</link> capability provided by bundle
 revision <code>B</code> and the shrinkable collection <code>Collisions</code>
                  </para>
               </listitem>
               <listitem>
                  <para>The shrinkable collection <code>Collisions</code> now contains all singleton
 <link linkend="org.osgi.framework.namespace.IdentityNamespace">osgi.identity</link> capabilities that can influence the
 ability of bundle revision <code>B</code> to resolve.</para>
               </listitem>
               <listitem>
                  <para>If the bundle revision <code>B</code> is already resolved then any resolvable
 bundle revision contained in the collection <code>Collisions</code> is not allowed
 to resolve.</para>
               </listitem>
            </itemizedlist>
         </listitem>
         <listitem>
            <para>During a resolve process a framework is free to attempt to resolve any or
 all bundles contained in shrinkable collection <code>Resolvable</code>. For each
 bundle revision <code>B</code> left in the shrinkable collection
 <code>Resolvable</code> which the framework attempts to resolve the following
 steps must be followed:
 </para>
            <itemizedlist>
               <listitem>
                  <para>For each requirement <code>R</code> specified by bundle revision <code>B</code>
 determine the collection of capabilities that satisfy (or match) the
 requirement and place each matching capability into a shrinkable collection
 <code>Candidates</code>. A capability is considered to match a particular
 requirement if its attributes satisfy a specified requirement and the
 requirer bundle has permission to access the capability.</para>
               </listitem>
               <listitem>
                  <para>For each resolver hook call the
 <link linkend="org.osgi.framework.hooks.resolver.ResolverHook.filterMatches-BundleRequirement-Collection-">filterMatches(BundleRequirement, Collection)</link> with the requirement
 <code>R</code> and the shrinkable collection <code>Candidates</code>.</para>
               </listitem>
               <listitem>
                  <para>The shrinkable collection <code>Candidates</code> now contains all the
 capabilities that may be used to satisfy the requirement <code>R</code>. Any other
 capabilities that got removed from the shrinkable collection
 <code>Candidates</code> must not be used to satisfy requirement <code>R</code>.</para>
               </listitem>
            </itemizedlist>
         </listitem>
         <listitem>
            <para>For each resolver hook call the <link linkend="org.osgi.framework.hooks.resolver.ResolverHook.end--">end()</link> method to inform the hooks
 about a resolve process ending.</para>
         </listitem>
      </orderedlist>
      <para>
 In all cases, the order in which the resolver hooks are called is the reverse
 compareTo ordering of their Service References. That is, the service with the
 highest ranking number must be called first. In cases where a shrinkable
 collection becomes empty the framework is required to call the remaining
 registered hooks.
 </para>
      <para>
 Resolver hooks are low level. Implementations of the resolver hook must be
 careful not to create an unresolvable state which is very hard for a
 developer or a provisioner to diagnose. Resolver hooks also must not be
 allowed to start another synchronous resolve process (e.g. by calling
 <link linkend="org.osgi.framework.Bundle.start--">Bundle.start()</link> or <link linkend="org.osgi.framework.wiring.FrameworkWiring.resolveBundles-Collection-">FrameworkWiring.resolveBundles(Collection)</link>
 ). The framework must detect this and throw an IllegalStateException.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.framework.hooks.resolver.ResolverHookFactory">ResolverHookFactory</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <section xreflabel="end()" role="method" xml:id="org.osgi.framework.hooks.resolver.ResolverHook.end--">
         <title>public void end()</title>
         <para role="description">
This method is called once at the end of the resolve process. After the
 end method is called the resolve process has ended. The framework must
 not hold onto this resolver hook instance after end has been called.
   </para>
      </section>
      <section xreflabel="filterMatches(BundleRequirement,Collection)" role="method" xml:id="org.osgi.framework.hooks.resolver.ResolverHook.filterMatches-BundleRequirement-Collection-">
         <title>public void filterMatches(BundleRequirement requirement, Collection&lt;BundleCapability&gt; candidates)</title>
         <formalpara role="parameter">
            <title>requirement</title>
            <para>the requirement to filter candidates for</para>
         </formalpara>
         <formalpara role="parameter">
            <title>candidates</title>
            <para>a collection of candidates that match the requirement</para>
         </formalpara>
         <para role="description">
Filter matches hook method. This method is called during the resolve
 process for the specified requirement. The collection of candidates match
 the specified requirement. This method can filter the collection of
 matching candidates by removing candidates from the collection. Removing
 a candidate will prevent the resolve process from choosing the removed
 candidate to satisfy the requirement.
 </para>
         <para>
 All of the candidates will have the same namespace and will match the
 specified requirement.
 </para>
         <para>
 If the Java Runtime Environment supports permissions then the collection
 of candidates will only contain candidates for which the requirer has
 permission to access.</para>
      </section>
      <section xreflabel="filterResolvable(Collection)" role="method" xml:id="org.osgi.framework.hooks.resolver.ResolverHook.filterResolvable-Collection-">
         <title>public void filterResolvable(Collection&lt;BundleRevision&gt; candidates)</title>
         <formalpara role="parameter">
            <title>candidates</title>
            <para>the collection of resolvable candidates available
        during a resolve process.</para>
         </formalpara>
         <para role="description">
Filter resolvable candidates hook method. This method may be called
 multiple times during a single resolve process. This method can filter
 the collection of candidates by removing potential candidates. Removing a
 candidate will prevent the candidate from resolving during the current
 resolve process.
   </para>
      </section>
      <section xreflabel="filterSingletonCollisions(BundleCapability,Collection)" role="method" xml:id="org.osgi.framework.hooks.resolver.ResolverHook.filterSingletonCollisions-BundleCapability-Collection-">
         <title>public void filterSingletonCollisions(BundleCapability singleton, Collection&lt;BundleCapability&gt; collisionCandidates)</title>
         <formalpara role="parameter">
            <title>singleton</title>
            <para>the singleton involved in a resolve process</para>
         </formalpara>
         <formalpara role="parameter">
            <title>collisionCandidates</title>
            <para>a collection of singleton collision candidates</para>
         </formalpara>
         <para role="description">
Filter singleton collisions hook method. This method is called during the
 resolve process for the specified singleton. The specified singleton
 represents a singleton capability and the specified collection represent
 a collection of singleton capabilities which are considered collision
 candidates. The singleton capability and the collection of collision
 candidates must all use the same namespace.
 </para>
         <para>
 Currently only capabilities with the namespace of <link linkend="org.osgi.framework.namespace.BundleNamespace">osgi.wiring.bundle</link> and <link linkend="org.osgi.framework.namespace.IdentityNamespace">osgi.identity</link> can be
 singletons. The collision candidates will all have the same namespace, be
 singletons, and have the same symbolic name as the specified singleton
 capability.
 </para>
         <para>
 In the future, capabilities in other namespaces may support the singleton
 concept. Hook implementations should be prepared to receive calls to this
 method for capabilities in namespaces other than <link linkend="org.osgi.framework.namespace.BundleNamespace">osgi.wiring.bundle</link> or <link linkend="org.osgi.framework.namespace.IdentityNamespace">osgi.identity</link>.
 </para>
         <para>
 This method can filter the list of collision candidates by removing
 potential collisions. Removing a collision candidate will allow the
 specified singleton to resolve regardless of the resolution state of the
 removed collision candidate.</para>
      </section>
   </section>
   <section xreflabel="ResolverHookFactory" role="class" xml:id="org.osgi.framework.hooks.resolver.ResolverHookFactory">
      <title>public interface ResolverHookFactory</title>
      <para>
OSGi Framework Resolver Hook Factory Service.

 </para>
      <para>
 Bundles registering this service will be called by the framework during a
 bundle resolver process to obtain a <link linkend="org.osgi.framework.hooks.resolver.ResolverHook">resolver hook</link>
 instance which will be used for the duration of a resolve process.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.framework.hooks.resolver.ResolverHook">ResolverHook</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section xreflabel="begin(Collection)" role="method" xml:id="org.osgi.framework.hooks.resolver.ResolverHookFactory.begin-Collection-">
         <title>public ResolverHook begin(Collection&lt;BundleRevision&gt; triggers)</title>
         <formalpara role="parameter">
            <title>triggers</title>
            <para>an unmodifiable collection of bundles which triggered the
        resolve process. This collection may be empty if the collection of
        trigger bundles cannot be determined.</para>
         </formalpara>
         <para role="description">
This method is called by the framework each time a resolve process begins
 to obtain a <link linkend="org.osgi.framework.hooks.resolver.ResolverHook">resolver hook</link> instance. This resolver
 hook instance will be used for the duration of the resolve process. At
 the end of the resolve process the method <link linkend="org.osgi.framework.hooks.resolver.ResolverHook.end--">ResolverHook.end()</link> must
 be called by the framework and the framework must not hold any references
 of the resolver hook instance.
 </para>
         <para>
 The triggers represent the collection of bundles which triggered the
 resolve process. This collection may be empty if the triggers cannot be
 determined by the framework. In most cases the triggers can easily be
 determined. Calling certain methods on <link linkend="org.osgi.framework.Bundle">bundle</link> when a
 bundle is in the <link linkend="org.osgi.framework.Bundle.INSTALLED">INSTALLED</link> state will cause the
 framework to begin a resolve process in order to resolve the bundle. The
 following methods will start a resolve process in this case:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.framework.Bundle.start--">start</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.framework.Bundle.loadClass-String-">loadClass</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.framework.Bundle.findEntries-String-String-boolean-">findEntries</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.framework.Bundle.getResource-String-">getResource</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.framework.Bundle.getResources-String-">getResources</link>
               </para>
            </listitem>
         </itemizedlist>
         <para>
 In such cases the collection will contain the single bundle which the
 framework is trying to resolve. Other cases will cause multiple bundles
 to be included in the trigger bundles collection. When
 <link linkend="org.osgi.framework.wiring.FrameworkWiring.resolveBundles-Collection-">resolveBundles</link> is
 called the collection of triggers must include all the current bundle
 revisions for bundles passed to resolveBundles which are in the
 <link linkend="org.osgi.framework.Bundle.INSTALLED">INSTALLED</link> state.
 </para>
         <para>
 When
 <link linkend="org.osgi.framework.wiring.FrameworkWiring.refreshBundles-Collection-FrameworkListener...-">FrameworkWiring.refreshBundles(Collection, org.osgi.framework.FrameworkListener...)</link>
 is called the collection of triggers is determined with the following
 steps:
 </para>
         <itemizedlist>
            <listitem>
               <para>If the collection of bundles passed is null then
 <link linkend="org.osgi.framework.wiring.FrameworkWiring.getRemovalPendingBundles--">FrameworkWiring.getRemovalPendingBundles()</link> is called to get the
 initial collection of bundles.</para>
            </listitem>
            <listitem>
               <para>The equivalent of calling
 <link linkend="org.osgi.framework.wiring.FrameworkWiring.getDependencyClosure-Collection-">FrameworkWiring.getDependencyClosure(Collection)</link> is called with
 the initial collection of bundles to get the dependency closure
 collection of the bundles being refreshed.</para>
            </listitem>
            <listitem>
               <para>Remove any non-active bundles from the dependency closure collection.
 </para>
            </listitem>
            <listitem>
               <para>For each bundle remaining in the dependency closure collection get
 the current bundle revision and add it to the collection of triggers.</para>
            </listitem>
         </itemizedlist>
         <para>
 As described above, a resolve process is typically initiated as a result
 of calling API that causes the framework to attempt to resolve one or
 more bundles. The framework is free to start a resolve process at any
 time for reasons other than calls to framework API. For example, a
 resolve process may be used by the framework for diagnostic purposes and
 result in no bundles actually becoming resolved at the end of the
 process. Resolver hook implementations must be prepared for resolve
 processes that are initiated for other reasons besides calls to framework
 API.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>a resolver hook instance to be used for the duration of the
         resolve process. A <code>null</code> value may be returned which
         indicates this resolver hook factory abstains from the resolve
         process.</para>
         </formalpara>
      </section>
   </section>
</section>
</chapter>

  <chapter label="54" revision="$Id: b716f723a46280bbf28c8ca47dd6c43d4e2add88 $" version="5.0" xml:id="framework.bundlehooks" xml:base="054/framework.bundlehooks.xml">
  <title>Bundle Hook Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.framework.hooks.bundle-version" linkend="org.osgi.framework.hooks.bundle"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>The basic framework provides complete visibility for any bundle to
    any other bundle. In certain use cases it can be important to provide the
    impression to application bundles that they are part of a limited group of
    bundles. Bundle Hook services allow Handlers to hide bundles from other
    bundles by filtering the Bundle Events and return values of methods that
    return bundles.</para>

    <para>Though Bundle Hooks can effectively control bundle visibility of
    other bundles by filtering some of the key Bundle Context methods as well
    as event delivery, it does not provide proper isolation. Bundles that use
    other API will be able to see bundles even if they are hidden by the
    Bundle Hooks.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Filtering</emphasis> - Remove bundles from the view
          of specific bundles.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Find Hook</emphasis> - A service used by the
          framework to filter methods that return bundles.</para>
        </listitem>

        <listitem>
          <para><emphasis>Event Hook</emphasis> - A service used by the
          framework to filter Bundle Events before they are delivered to their
          listeners.</para>
        </listitem>

        <listitem>
          <para><emphasis>Collision Hook</emphasis> - A service used by the
          framework to filter colliding bundles during an install or update
          operation when the <code>org.osgi.framework.bsnversion</code> is set
          to <code>managed</code>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Collision</emphasis> - Two bundles collide when they
          have the same version and bundle symbolic name.</para>
        </listitem>

        <listitem>
          <para><emphasis>Client</emphasis> - The bundle that finds bundles or
          receives events about bundles.</para>
        </listitem>

        <listitem>
          <para><emphasis>Handler</emphasis> - The bundle that registers a
          hook service.</para>
        </listitem>

        <listitem>
          <para><emphasis>Target</emphasis> - The bundle performing the
          install or update operation.</para>
        </listitem>
      </itemizedlist>

      <figure>
        <title>Bundle Hooks, org.osgi.framework.hooks.bundle package</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.546in" contentwidth="7.000in" fileref="bundlehooks-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Synopsis</title>

      <para>A Handler registers Bundle Hook services to filter the view on the
      bundles stored in the framework. Whenever the framework has to deliver
      Bundle events to one or more bundles the Event Hook services are asked
      to look at the target bundles and remove any targets from the
      collection. Removed bundles are then not notified.</para>

      <para>If a bundle calls a method that returns a bundle like the Bundle
      Context <code>getBundles</code> method or the <code>getBundle</code>
      method, the Find Hook is called. The Find Hook can then look at the
      bundles that will be returned to the caller and filter that list
      accordingly.</para>

      <para>If the Framework installs or updates a bundle it is possible that
      the new bundle symbolic name/version pair collides with an existing
      bundle. The <code>org.osgi.framework.bsnversion</code> property controls
      the property in this case. The Collision Hook is used to control this
      policy when the property is set to <code>managed</code>.</para>

      <para>There can be multiple Bundle Hook services registered by different
      Handlers, multiple Bundle Hook services are called in service ranking
      order.</para>
    </section>
  </section>

  <section>
    <title>About the Hooks</title>

    <para>The Bundle hooks provide a basic mechanism to hide bundles from each
    other as well as control <emphasis>bundle collisions</emphasis>. The
    Bundle <emphasis>Event Hook</emphasis> allows a
    <emphasis>Handler</emphasis> to hide Bundle Events from bundles, the
    Bundle <emphasis>Find Hook</emphasis> allows a Handler to alter the result
    of framework methods that return bundles. The Collision Hook is used for
    providing a policy when bundles collide. A collision takes place when
    there is an attempt to install or update a bundle and the situation arises
    that there are two bundles with the same bundle symbolic name and
    version.</para>

    <para>A Find Hook or an Event Hook can influence the outcome of a number
    of operations that retrieve a bundle or show a bundle related event by
    removing entries from <emphasis>shrinkable</emphasis> collections. A
    shrinkable collection is a collection that can only remove entries, not
    add to it. Any attempt to add to the collection must result in throwing an
    Unsupported Operation Exception. All collections in the Find Hook and
    Event Hook API are shrinkable collections.</para>

    <para>The framework must call the hooks in a privileged block, see <xref linkend="framework.lifecycle.privilegedcallbacks"/>. Hooks are always
    called in service ranking order, <xref linkend="framework.service.servicerankingorder"/>.</para>
  </section>

  <section>
    <title>Bundle Event Hook</title>

    <para>Handlers must ensure that Client bundles continue to see a
    consistent set of Bundle Events that strictly follow the transitions
    defined by the OSGi specifications because Bundle events can be used in a
    state machine that depends on these transitions. Such state machines can
    get confused if some Bundle Events are missed.</para>

    <para>For example, if a Bundle Tracker sees a <code>STARTED</code> event
    but the corresponding <code>STOPPED</code> event is removed for that
    Client then the tracker will still assume the associated bundle is
    active.</para>

    <para>A simple solution is to stop the Client bundle when the Handler
    decides to start filtering the Bundle Events. The Client bundle should
    then be started after the filter is in place. This model ensures that the
    Handler can assume the Client has no knowledge of any hidden
    bundles.</para>

    <para>However, when the bundle that implements the bundle event hook is
    stopped, it will of course no longer be able to filter events and the
    target bundle might see bundle events for bundles it was not aware
    of.</para>

    <para>As a best practice a Handler should not hide a Bundle from itself.
    That is, its own events should always be received and if it gets the
    bundles from the framework its own <code>Bundle</code> object should be
    included.</para>

    <para>A Handler must register a bundle Event Hook service to intercept and
    filter events before they are delivered to bundles. The framework must
    call the <xref linkend="org.osgi.framework.hooks.bundle.EventHook.event-BundleEvent-Collection-" xrefstyle="hyperlink"/> method on all registered hooks in service ranking
    order to filter the events before they are delivered to any of the
    registered bundle listeners. The Handler can remove any
    <code>BundleContext</code> objects from the given shrinkable collection it
    wants shield from the event's Bundle.</para>

    <para>The <code>event</code> method must be called once for each Bundle
    Event, this includes Bundle Events that are generated when there are no
    Bundle Listeners registered.</para>

    <para>The <xref linkend="org.osgi.framework.hooks.bundle.EventHook.event-BundleEvent-Collection-" xrefstyle="hyperlink"/> method must be called on the same thread that is
    performing the action which generated the specified event. The shrinkable
    collection includes <code>BundleContext</code> objects with all Bundle
    Listeners registered with them.</para>

    <para>A Bundle Event Hook must receive all Bundle Events:</para>

    <itemizedlist>
      <listitem>
        <para><code>INSTALLED</code></para>
      </listitem>

      <listitem>
        <para><code>RESOLVED</code></para>
      </listitem>

      <listitem>
        <para><code>STARTING</code></para>
      </listitem>

      <listitem>
        <para><code>STARTED</code></para>
      </listitem>

      <listitem>
        <para><code>STOPPING</code></para>
      </listitem>

      <listitem>
        <para><code>STOPPED</code></para>
      </listitem>

      <listitem>
        <para><code>UNRESOLVED</code></para>
      </listitem>

      <listitem>
        <para><code>UPDATED</code></para>
      </listitem>

      <listitem>
        <para><code>UNINSTALLED</code></para>
      </listitem>

      <listitem>
        <para>Other if new events are defined in later versions</para>
      </listitem>
    </itemizedlist>

    <section>
      <title>System Bundle Listeners</title>

      <para>Bundle Listeners may be registered with the system bundle's
      <code>BundleContext</code>. If at least one Bundle Listener is
      registered with the system bundle's <code>BundleContext</code> then the
      system bundle's <code>BundleContext</code> must be contained in the
      shrinkable collection passed to the <xref linkend="org.osgi.framework.hooks.bundle.EventHook.event-BundleEvent-Collection-" xrefstyle="hyperlink"/> bundle event hook method. Just like other
      <code>BundleContext</code> objects contained in the shrinkable
      collection, the system bundle's <code>BundleContext</code> may be
      removed. If the system bundle's <code>BundleContext</code> is removed by
      a bundle Event Hook then the <code>BundleContext</code> will not be
      contained in the collection for the remaining bundle Event Hooks called.
      Unlike other <code>BundleContext</code> objects, if the system bundle's
      <code>BundleContext</code> is removed from the shrinkable collection
      then the bundle event is still delivered to the Bundle Listeners added
      to the system bundle's <code>BundleContext</code>.</para>
    </section>
  </section>

  <section>
    <title>Bundle Find Hook</title>

    <para>The purpose of the Bundle Find Hook, is to limit the visibility of
    bundles to selected Client bundles. The Find Hook service is called with
    the <xref linkend="org.osgi.framework.hooks.bundle.FindHook.find-BundleContext-Collection-" xrefstyle="hyperlink"/> method on all Handler Hook services in service
    ranking order when a Client bundle tries to get bundles from the
    framework. A registered Find Hook service gets a chance to inspect the
    candidate set of bundles and can remove any bundle that must be hidden
    from the receiver.</para>

    <para>The Bundle Find Hook can filter the result of the following
    methods:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.framework.BundleContext.getBundle-long-" xrefstyle="hyperlink"/></para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.framework.BundleContext.getBundles--" xrefstyle="hyperlink"/></para>
      </listitem>
    </itemizedlist>

    <para>The Find Hook is not called for:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.framework.BundleContext.getBundle-String-" xrefstyle="hyperlink"/> - If the caller knows the name then it is not
        necessary to hide the bundle.</para>
      </listitem>
    </itemizedlist>

    <para>The Bundle Find Hook is also used during an install operation when
    the to be installed bundle is already installed at a given location.
    Normally, the install the returns the Bundle object of the existing bundle
    but this can cause confusion for the installer when this bundle is hidden
    by the Find Hook. Therefore, the <xref linkend="org.osgi.framework.BundleException.REJECTED_BY_HOOK" xrefstyle="hyperlink"/> Bundle Exception is thrown when the <xref linkend="org.osgi.framework.hooks.bundle.FindHook.find-BundleContext-Collection-" xrefstyle="hyperlink"/> method determines that the Bundle Context has no
    visibility of the conflicting bundle.</para>

    <section>
      <title>System Bundle Context</title>

      <para>When the <xref linkend="org.osgi.framework.BundleContext.getBundle-long-" xrefstyle="hyperlink"/> or <xref linkend="org.osgi.framework.BundleContext.getBundles--" xrefstyle="hyperlink"/> methods are called using the system bundle's
      <code>BundleContext</code> then the bundle Find Hooks are called in the
      same way the hooks are called when a normal <code>BundleContext</code>
      is used. The system bundle's <code>BundleContext</code> along with the
      shrinkable candidate bundles collection is passed to the <xref linkend="org.osgi.framework.hooks.bundle.FindHook.find-BundleContext-Collection-" xrefstyle="hyperlink"/> method. Bundle Find Hooks may remove bundles
      from the shrinkable collection. If a bundle is removed by a bundle Find
      Hook then the bundle will not be contained in the collection for the
      remaining bundle Find Hooks called. Unlike other
      <code>BundleContext</code> objects, if the system bundle's
      <code>BundleContext</code> is used to find bundles then the Framework
      ignores the bundle removals performed by the bundle Find Hooks and
      allows the bundles removed to remain visible in the find results.</para>

      <para>The bundle Find Hook is also used during an install operation.
      When the system bundle's <code>BundleContext</code> is used to install a
      bundle then the bundle Find Hooks are called in the same way the hooks
      are called when a normal <code>BundleContext</code> is used. Unlike
      other <code>BundleContext</code> objects, if the system bundle's
      <code>BundleContext</code> is used to install bundles then the Framework
      ignores the bundle removals performed by the bundle Find Hooks. This
      implies that if the system bundle's <code>BundleContext</code> is used
      to install a bundle at a location where an existing bundle is installed
      then the existing bundle is always returned.</para>
    </section>
  </section>

  <section xml:id="framework.bundlehooks.collisionhook">
    <title>Bundle Collision Hook</title>

    <para>Two bundles <emphasis>collide</emphasis> when they have the same
    bundle symbolic name and version, although there location must always be
    different. The <code>org.osgi.framework.bsnversion</code> launching
    property (see <xref linkend="framework.lifecycle.launchingproperties"/> )
    defines the policy when a collision is about to take place during install
    or update operations. The launching property can have the following
    values:</para>

    <itemizedlist>
      <listitem>
        <para><code>single</code> - Collisions are not allowed, attempting to
        install/update a bundle that will cause a collision is rejected and
        all bundles can assume there are no collisions between installed
        bundles.</para>
      </listitem>

      <listitem>
        <para><code>multiple</code> - Collisions are allowed and bundles must
        assume that there are collisions in the set of installed
        bundles.</para>
      </listitem>

      <listitem>
        <para><code>managed</code> - Collisions are
        <emphasis>managed</emphasis> via a Collision Hook service, specified
        in the remainder of this section.</para>
      </listitem>
    </itemizedlist>

    <para>There are two <emphasis>types</emphasis> of operation that can
    <emphasis>create</emphasis> a new <emphasis>bundle revision</emphasis>:
    Install and Update. During this creation the framework has to consider its
    <code>bsnversion</code> policy as defined by the launching property. For
    each creation, there are a number of <emphasis>candidates</emphasis> to
    collide with. In <code>single</code> mode, any candidate that exists will
    fail the creation. In <code>multiple</code> mode, any number of candidates
    are allowed. In <code>managed</code> mode, no candidates are allowed, like
    the single mode, but the Collision Hook services can prune the list of
    candidates before the framework makes the decision. If the Collision Hook
    services have emptied the list of candidates then the installation will
    succeed, if any bundle remains in this list then the operation fails. In
    <code>managed</code> mode, creations are treated as in <code>single</code>
    mode but bundles must assume as if the system operates in
    <code>multiple</code> mode.</para>

    <para>The purpose of the Collision Hook is to delegate the decision of
    bundle collisions to a management agent. For example, using this and other
    hooks a management agent can create regions of bundles that have limited
    visibility of each other. Since these bundles do not have visibility of
    all other bundles a global collision does not necessarily translate into a
    collision inside a region. Using the Collision Hook the management agent
    can allow these collisions globally but restrict their impact
    locally.</para>

    <para>In <code>managed</code> mode the framework must call all registered
    Collision Hook services for each bundle install and update operation. The
    calling order of the hooks is defined by ranking order, see <xref linkend="framework.service.servicerankingorder"/>. The Collision Hook
    service is only called in <code>managed</code> mode and there exists one
    or more candidates during the creation phase of an install/update
    operation.</para>

    <para>The <xref linkend="org.osgi.framework.hooks.bundle.CollisionHook" xrefstyle="hyperlink"/> interface has a single method:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.framework.hooks.bundle.CollisionHook.filterCollisions-int-Bundle-Collection-" xrefstyle="hyperlink"/> - An install or update operation is in
        progress that will result in a possible bundle collision. The
        implementer of this method can optionally shrink the given collection
        of any collision candidates if it can decide that a collision cannot
        harm.</para>
      </listitem>
    </itemizedlist>

    <para>The <xref linkend="org.osgi.framework.hooks.bundle.CollisionHook.filterCollisions-int-Bundle-Collection-" xrefstyle="hyperlink"/> method takes a type of operation value that must
    be one of the following two values that indicate the operation that caused
    the Collision Hook to be called:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.framework.hooks.bundle.CollisionHook.INSTALLING" xrefstyle="hyperlink"/></para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.framework.hooks.bundle.CollisionHook.UPDATING" xrefstyle="hyperlink"/></para>
      </listitem>
    </itemizedlist>

    <section>
      <title>System Bundle Context</title>

      <para>When the system bundle's <code>BundleContext</code> is used to
      install a bundle then the Collision Hooks are called in the same way the
      hooks are called when a normal <code>BundleContext</code> is used. The
      system bundle along with the shrinkable candidate bundles collection is
      passed to the <xref linkend="org.osgi.framework.hooks.bundle.CollisionHook.filterCollisions-int-Bundle-Collection-" xrefstyle="hyperlink"/> method. Bundle Collision Hooks may remove
      bundles from the shrinkable collection. If a bundle is removed by a
      bundle Collision Hook then the bundle will not be contained in the
      collection for the remaining bundle Collision Hooks called. Unlike the
      other bundle and service hooks, if the system bundle's
      <code>BundleContext</code> is used to install a bundle then the
      Framework must not ignore the bundle removals performed by the bundle
      Collision Hooks. This implies that the system bundle's
      <code>BundleContext</code> can be used to install the same bundle
      multiple times when the <code>org.osgi.framework.bsnversion</code>
      launching property is set to <code>managed</code>.</para>
    </section>
  </section>

  <section>
    <title>Security</title>

    <para>All hooks described in this specification are highly complex
    facilities that require great care in their implementation to maintain the
    Framework invariants. It is therefore important that in a secure system
    the permission to register these hooks is only given to privileged
    bundles.</para>

    <para>In this case, the user of the hook services is the framework.
    Therefore, there is never a need to provide:</para>

    <itemizedlist>
      <listitem>
        <para><code>ServicePermission[..EventHook,GET]</code>, or</para>
      </listitem>

      <listitem>
        <para><code>ServicePermission[..FindHook,GET]</code>, or</para>
      </listitem>

      <listitem>
        <para><code>ServicePermission[..CollisionHook,GET]</code></para>
      </listitem>
    </itemizedlist>

    <para>Implementers of these hooks must have:</para>

    <itemizedlist>
      <listitem>
        <para><code>ServicePermission[..EventHook,REGISTER]</code> for Event
        Hook services.</para>
      </listitem>

      <listitem>
        <para><code>ServicePermission[..FindHook,REGISTER]</code> for Find
        Hook services</para>
      </listitem>

      <listitem>
        <para><code>ServicePermission[..CollisionHook,REGISTER]</code> for
        Collision Hook services</para>
      </listitem>
    </itemizedlist>
  </section>

  <section xreflabel="org.osgi.framework.hooks.bundle" version="5" role="package" xml:id="org.osgi.framework.hooks.bundle" xml:base="054/../../../generated/javadoc/docbook/org.osgi.framework.hooks.bundle.xml">
   <title>org.osgi.framework.hooks.bundle</title>
   <info>
      <releaseinfo xml:id="org.osgi.framework.hooks.bundle-version">Version 1.1</releaseinfo>
      <edition xml:id="org.osgi.framework.hooks.bundle-version.number">1.1</edition>
   </info>
   <para>
Framework Bundle Hooks Package Version 1.1.

 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest.

 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.framework.hooks.bundle; version="[1.1,2.0)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.hooks.bundle.CollisionHook">
                  <code>CollisionHook</code>
               </link> -
OSGi Framework Bundle Collision Hook Service.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.hooks.bundle.EventHook">
                  <code>EventHook</code>
               </link> -
OSGi Framework Bundle Event Hook Service.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.hooks.bundle.FindHook">
                  <code>FindHook</code>
               </link> -
OSGi Framework Bundle Context Hook Service.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section xreflabel="CollisionHook" role="class" xml:id="org.osgi.framework.hooks.bundle.CollisionHook">
      <title>public interface CollisionHook</title>
      <para>
OSGi Framework Bundle Collision Hook Service.

 </para>
      <para>
 If the framework was launched with the <link linkend="org.osgi.framework.Constants.FRAMEWORK_BSNVERSION">org.osgi.framework.bsnversion</link> framework launching property set to
 <link linkend="org.osgi.framework.Constants.FRAMEWORK_BSNVERSION_MANAGED">managed</link>, then all registered
 collision hook services will be called during framework bundle install and
 update operations to determine if an install or update operation will result
 in a bundle symbolic name and version collision.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section xreflabel="INSTALLING" role="field" xml:id="org.osgi.framework.hooks.bundle.CollisionHook.INSTALLING">
         <title>public static final int INSTALLING = 1</title>
         <para>
Specifies a bundle install operation is being performed.
   </para>
      </section>
      <section xreflabel="UPDATING" role="field" xml:id="org.osgi.framework.hooks.bundle.CollisionHook.UPDATING">
         <title>public static final int UPDATING = 2</title>
         <para>
Specifies a bundle update operation is being performed.
   </para>
      </section>
      <section xreflabel="filterCollisions(int,Bundle,Collection)" role="method" xml:id="org.osgi.framework.hooks.bundle.CollisionHook.filterCollisions-int-Bundle-Collection-">
         <title>public void filterCollisions(int operationType, Bundle target, Collection&lt;Bundle&gt; collisionCandidates)</title>
         <formalpara role="parameter">
            <title>operationType</title>
            <para>The operation type. Must be the value of
        <link linkend="org.osgi.framework.hooks.bundle.CollisionHook.INSTALLING">installing</link> or <link linkend="org.osgi.framework.hooks.bundle.CollisionHook.UPDATING">updating</link>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>target</title>
            <para>The target bundle used to determine what collision
        candidates to filter.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>collisionCandidates</title>
            <para>The collection of collision candidates. The
        collection supports all the optional <code>Collection</code> operations
        except <code>add</code> and <code>addAll</code>. Attempting to add to the
        collection will result in an <code>UnsupportedOperationException</code>
        . The collection is not synchronized.</para>
         </formalpara>
         <para role="description">
Filter bundle collisions hook method. This method is called during the
 install or update operation. The operation type will be
 <link linkend="org.osgi.framework.hooks.bundle.CollisionHook.INSTALLING">installing</link> or <link linkend="org.osgi.framework.hooks.bundle.CollisionHook.UPDATING">updating</link>. Depending
 on the operation type the target bundle and the collision candidate
 collection are the following:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.framework.hooks.bundle.CollisionHook.INSTALLING">installing</link> - The target is the bundle associated
 with the <link linkend="org.osgi.framework.BundleContext">BundleContext</link> used to call one of the
 <link linkend="org.osgi.framework.BundleContext.installBundle-String-">install</link> methods. The
 collision candidate collection contains the existing bundles installed
 which have the same symbolic name and version as the bundle being
 installed.</para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.framework.hooks.bundle.CollisionHook.UPDATING">updating</link> - The target is the bundle used to call
 one of the <link linkend="org.osgi.framework.Bundle.update--">update</link> methods. The collision
 candidate collection contains the existing bundles installed which have
 the same symbolic name and version as the content the target bundle is
 being updated to.</para>
            </listitem>
         </itemizedlist>
         <para>
 This method can filter the collection of collision candidates by removing
 potential collisions. For the specified operation to succeed, the
 collection of collision candidates must be empty after all registered
 collision hook services have been called.
   </para>
      </section>
   </section>
   <section xreflabel="EventHook" role="class" xml:id="org.osgi.framework.hooks.bundle.EventHook">
      <title>public interface EventHook</title>
      <para>
OSGi Framework Bundle Event Hook Service.

 </para>
      <para>
 Bundles registering this service will be called during framework lifecycle
 (install, start, stop, update, and uninstall bundle) operations.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section xreflabel="event(BundleEvent,Collection)" role="method" xml:id="org.osgi.framework.hooks.bundle.EventHook.event-BundleEvent-Collection-">
         <title>public void event(BundleEvent event, Collection&lt;BundleContext&gt; contexts)</title>
         <formalpara role="parameter">
            <title>event</title>
            <para>The bundle event to be delivered</para>
         </formalpara>
         <formalpara role="parameter">
            <title>contexts</title>
            <para>A collection of Bundle Contexts for bundles which have
        listeners to which the specified event will be delivered. The
        implementation of this method may remove bundle contexts from the
        collection to prevent the event from being delivered to the
        associated bundles. The collection supports all the optional
        <code>Collection</code> operations except <code>add</code> and
        <code>addAll</code>. Attempting to add to the collection will result in
        an <code>UnsupportedOperationException</code>. The collection is not
        synchronized.</para>
         </formalpara>
         <para role="description">
Bundle event hook method. This method is called prior to bundle event
 delivery when a bundle is installed, resolved, started, stopped,
 unresolved, or uninstalled. This method can filter the bundles which
 receive the event.
 </para>
         <para>
 This method must be called by the framework one and only one time for
 each bundle event generated, this included bundle events which are
 generated when there are no bundle listeners registered. This method must
 be called on the same thread that is performing the action which
 generated the specified event. The specified collection includes bundle
 contexts with synchronous and asynchronous bundle listeners registered
 with them.</para>
      </section>
   </section>
   <section xreflabel="FindHook" role="class" xml:id="org.osgi.framework.hooks.bundle.FindHook">
      <title>public interface FindHook</title>
      <para>
OSGi Framework Bundle Context Hook Service.

 </para>
      <para>
 Bundles registering this service will be called during framework bundle find
 (get bundles) operations.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section xreflabel="find(BundleContext,Collection)" role="method" xml:id="org.osgi.framework.hooks.bundle.FindHook.find-BundleContext-Collection-">
         <title>public void find(BundleContext context, Collection&lt;Bundle&gt; bundles)</title>
         <formalpara role="parameter">
            <title>context</title>
            <para>The bundle context of the bundle performing the find
        operation.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>bundles</title>
            <para>A collection of Bundles to be returned as a result of the
        find operation. The implementation of this method may remove
        bundles from the collection to prevent the bundles from being
        returned to the bundle performing the find operation. The
        collection supports all the optional <code>Collection</code> operations
        except <code>add</code> and <code>addAll</code>. Attempting to add to the
        collection will result in an <code>UnsupportedOperationException</code>
        . The collection is not synchronized.</para>
         </formalpara>
         <para role="description">
Find hook method. This method is called for the following:
 </para>
         <itemizedlist>
            <listitem>
               <para>Bundle find operations using <link linkend="org.osgi.framework.BundleContext.getBundle-long-">BundleContext.getBundle(long)</link>
 and <link linkend="org.osgi.framework.BundleContext.getBundles--">BundleContext.getBundles()</link> methods. The find method can
 filter the result of the find operation. Note that a find operation using
 the <link linkend="org.osgi.framework.BundleContext.getBundle-String-">BundleContext.getBundle(String)</link> method does not cause the
 find method to be called.</para>
            </listitem>
            <listitem>
               <para>Bundle install operations when an existing bundle is already
 installed at a given location. In this case, the find method is called to
 determine if the context performing the install operation is able to find
 the bundle. If the context cannot find the existing bundle then the
 install operation must fail with a
 <link linkend="org.osgi.framework.BundleException.REJECTED_BY_HOOK">BundleException.REJECTED_BY_HOOK</link> exception.</para>
            </listitem>
         </itemizedlist>
      </section>
   </section>
</section>
</chapter>

  <chapter label="55" revision="$Id: 956eb9f186e18e6fbaa18ff9b0cc3851312d1483 $" version="5.0" xml:id="framework.servicehooks" xml:base="055/framework.servicehooks.xml">
  <title>Service Hook Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.framework.hooks.service-version" linkend="org.osgi.framework.hooks.service"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>The OSGi framework has built-in support for the normal service
    primitives: <emphasis>publish</emphasis>, <emphasis>find</emphasis>, and
    <emphasis>bind</emphasis>. Despite their simplicity, these primitives are
    surprisingly powerful and have become quite popular. However, these
    primitives operate on information that is not completely visible to the
    bundles. For example, it is impossible to find out what services are being
    waited upon by other bundles. This information can be useful to provide a
    service just in time to that bundle. Additionally, it is also not possible
    to allow bundles functionality that interacts with the service engine. For
    example, a bundle could proxy another service but to do this
    transparently, it is required to hide the original service and offer the
    proxy only to a specific bundle. With the current primitives this is also
    not possible.</para>

    <para>Therefore, this service hook specification provides a number of new
    mechanisms that closely interact with the service engine. These
    interactions are <emphasis>not</emphasis> intended for use by application
    bundles. The service primitives appear simple but require surprisingly
    complex code to make them appear simple to the bundle developer. Modifying
    the behavior of the service engine requires developers to closely follow
    the semantics of the OSGi service model and this is often hard, requiring
    a significant amount of code.</para>

    <para>However, the service hooks provide a more symmetric model for
    service based programming that can act as a multiplier for the framework.
    The basic framework provides a powerful service engine and this
    specification allows a bundle to interact with this service engine</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Robust</emphasis> - The service primitives are very
          simple and work reliably in many scenarios. The specified hooks
          interact with this robust service engine. This interaction must not
          cause disruption of the normal operations.</para>
        </listitem>

        <listitem>
          <para><emphasis>Find listeners</emphasis> - Provide information
          about the services specific bundles are interested in.</para>
        </listitem>

        <listitem>
          <para><emphasis>Control visibility</emphasis> - Provide a mechanism
          to hide the visibility of a service to one or more bundles.</para>
        </listitem>

        <listitem>
          <para><emphasis>Intercept finds</emphasis> - Provide a mechanism to
          detect the searches of a bundle in the service registry and restrict
          the set of found service references.</para>
        </listitem>

        <listitem>
          <para><emphasis>Whiteboard based</emphasis> - Use the <xref linkend="framework.servicehooks-whiteboard.pattern.ref"/> to
          simplify the writing of the interceptors.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Client</emphasis> - The bundle that finds services,
          gets services, and/or receives events about services.</para>
        </listitem>

        <listitem>
          <para><emphasis>Handler</emphasis> - The bundle that registers a
          hook service and uses this to view or modify the state.</para>
        </listitem>

        <listitem>
          <para><emphasis>Target</emphasis> - A client bundle being targeted
          by a Handler.</para>
        </listitem>

        <listitem>
          <para><emphasis>Publisher</emphasis> - A client bundle that
          publishes services.</para>
        </listitem>

        <listitem>
          <para><emphasis>Consumer</emphasis> - A client bundle that consumes
          services.</para>
        </listitem>

        <listitem>
          <para><emphasis>Service Engine</emphasis> - The internal framework
          machinery that makes the service registry work.</para>
        </listitem>

        <listitem>
          <para><emphasis>Event Listener Hook</emphasis> - An Event Listener
          Hook intercepts service events before they are delivered to the
          client. The hook can select to remove events for specific bundles,
          which effective allows the hook to hide service events from a
          bundle.</para>
        </listitem>

        <listitem>
          <para><emphasis>Find Hook</emphasis> - A find hook intercepts the
          <code>getServiceReference(s)</code> call just before it is returns
          the result to the client. The result can be influenced by removing
          service entries. The find hook can be used to hide specific services
          for specific bundles.</para>
        </listitem>

        <listitem>
          <para><emphasis>Listener Hook</emphasis> - The listener hook
          provides insight into what services are being waited for in the
          system. It gets updated as service listeners are added and removed
          from the service registry.</para>
        </listitem>
      </itemizedlist>

      <figure>
        <title>Service Hooks, org.osgi.framework.hooks.service package</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.865in" contentwidth="7.000in" fileref="servicehooks-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Synopsis</title>

      <para>A bundle that needs to hide service references from other bundles,
      or wants to be informed about the service events another bundle sees,
      can register a <emphasis>Find</emphasis> and <emphasis>Event
      Listener</emphasis> hook by registering a Find Hook service and an Event
      Listener Hook service with the framework. If a service event is
      generated, it will pass this event to the hook. The Event Listener Hook
      method can then inspect the arguments and optionally remove bundles from
      the event delivery list.</para>

      <para>When a bundle uses the Bundle Context getServiceReference or
      <code>getServiceReferences</code> method, the Find Hook is notified with
      the list of discovered services. The hook can then remove any service
      references it wants to hide for the target bundle.</para>

      <para>A bundle that wants to be aware of the services bundles are
      waiting for to be registered can register a Listener Hook. The framework
      will notify such hooks of all existing listeners as well as any changes
      in this list. The interceptor can use the filter information registered
      with the listener to detect the services that are being listened
      for.</para>
    </section>
  </section>

  <section>
    <title>Service Hooks</title>

    <para>Service hooks provide an interaction with the service engine. This
    service engine provides the following primitives to the bundle:</para>

    <itemizedlist>
      <listitem>
        <para>Register a service under an interface/class name with a set of
        properties</para>
      </listitem>

      <listitem>
        <para>Modify the set of properties of a service</para>
      </listitem>

      <listitem>
        <para>Unregister a service</para>
      </listitem>

      <listitem>
        <para>Find services based on their interface class name and/or
        property values</para>
      </listitem>

      <listitem>
        <para>Listen for the life cycle events of a service</para>
      </listitem>
    </itemizedlist>

    <figure>
      <title>Service Primitives</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="0.954in" contentwidth="4.951in" fileref="service-primitives.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>These primitives provide the cornerstone for <emphasis>service
    oriented programming</emphasis>. Service oriented programming consists of
    a code base that is de-coupled from the outside world through
    <emphasis>services</emphasis>. It can provide services to other bundles
    and it can consume services from other bundles. In the OSGi variation of
    service oriented programming, a service is a plain Java object that can be
    registered and unregistered at runtime.</para>

    <para>The dynamics of OSGi services forces bundles to consider the
    absence, presence, and arrival of services. The cause of these dynamics
    can be external events, the result of an update, a bundle that is stopped,
    or the disappearance of a dependent service. A number of support libraries
    have been developed to minimize the amount of work for the developer that
    these dynamics can bring. The dynamic nature of services have made them an
    excellent tool to handle a wide array of dependency scenarios. Services
    can easily model a real world concept that a bundle depends upon. The
    features of the service model combined with support libraries like iPOJO,
    Declarative Services, Spring DM, and others have made the OSGi service
    model easy to use and very powerful.</para>

    <para>A key aspect of the service model is the centrality of the OSGi
    framework. The service model acts as a guard between bundles. All service
    primitives pass through the framework and bundles can not intercept the
    result of other bundles interacting with the service registry. This design
    was intentional because it creates a boundary between bundles that
    increases robustness and security. However, the success of the service
    model also means that it becomes very attractive to interact with the
    service engine because all inter-bundle communication runs through this
    engine.</para>

    <para>For complexity reasons, this specification does not introduce any
    ordering dependencies between the handlers and the client bundles.</para>

    <para>All Service Hooks must be called in a privileged block, see <xref linkend="framework.lifecycle.privilegedcallbacks"/>.</para>
  </section>

  <section>
    <title>Usage Scenarios</title>

    <para>The service hooks are general mechanisms but they were designed for
    some specific use cases. The following sections detail some of those use
    cases.</para>

    <section>
      <title>Proxying</title>

      <para>In an OSGi system, all communication is normally tunneled through
      services. This makes it a very interesting place for a handler to
      intercept the service communications. These handlers can provide
      facilities like proxying, extra security, authentication, and other
      functions completely transparent to the parties that interact through
      services.</para>

      <para>Proxying an existing service for a specific bundle requires the
      following steps:</para>

      <itemizedlist>
        <listitem>
          <para>Hide the existing service X</para>
        </listitem>

        <listitem>
          <para>Register a proxy X' with the same properties as X</para>
        </listitem>
      </itemizedlist>

      <para>Registering a proxy service X' is trivial with the OSGi API, there
      are no special requirements on the service. As long as it implements the
      listed interfaces and provides the same attributes then it can pose as
      service X.</para>

      <para>Hiding service X can be implemented with a combination of the
      Event Listener Hook and the Find Hook. The Event Listener Hook can be
      used to hide any service events from the target bundle and the Find Hook
      can be used to remove X from the delivered results of the
      <code>getServiceReference(s)</code> methods.</para>

      <para>In the following figure the difference between a normal service
      interaction and a proxied interaction is depicted. In the normal case,
      Bundle A directly uses Service X, in the proxying case, the Proxy Bundle
      hides the original and provides an alternative.</para>

      <figure>
        <title>Normal and proxied service interaction</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.289in" contentwidth="4.918in" fileref="normal-proxied-interaction.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>However, there is one complication with the service hiding: what
      is the observing state of the target bundle when proxying begins? The
      Event Listener Hook must be registered to act as a filter on the service
      events. Just after this registration it can not determine what events
      have been seen by the target bundle. If it has already checked out X,
      the hook has no possibility to make the target bundle unget the service.
      A solution is to transiently stop the target bundle before the hook is
      registered and then transiently started it again, if the bundle is
      active. It is usually not advised to start/stop other bundles but this
      seems to be the only reliable solution. The problem can be alleviated
      when the start level is used to start the proxying handler bundle before
      the target bundles, in that case the target bundle is not started when
      the proxy is created. Though this optimizes the normal case, stopping
      the target bundle remains necessary because any of the bundles can be
      updated or stopped at any moment in time.</para>

      <para>The following example shows how to hide a specific Service
      Reference from a specific bundle.</para>

      <programlisting>public class Hide implementsEventListenerHook, FindHook {
    final Bundle           bundle;
    final ServiceReference reference;
    final BundleContext    context;
    ServiceRegistration    reg;

    Hide(BundleContext context,
        ServiceReference reference,
        Bundle bundle) {
        this.context = context;
        this.bundle = bundle;
        this.reference = reference;
    }

    void open() {
        boolean active =
            bundle.getBundleState() == Bundle.ACTIVE;
        if ( active )
            bundle.stop(Bundle.STOP_TRANSIENTLY);
        reg = context.registerService(
            new String[] {
                FindHook.class.getName(),
                EventListenerHook.class.getName() }, this, null);
        if ( active )
            bundle.start(Bundle.START_TRANSIENTLY);
    }

    public void close() { reg.unregister();}</programlisting>

      <para>The <code>Hide</code> class registers a Event Listener Hook and
      Find Hook service in the open method. Once registered, these services
      will receive their event callbacks. In the find hook, the target Service
      Reference is removed from the results if the bundle that called the
      <code>getServiceReference(s)</code> method is the target bundle.</para>

      <programlisting>    public void find(BundleContext ctx,
        String name, String filter,
        boolean allServices, Collection refs) {
        if (ctx.getBundle() == bundle) {
            refs.remove(reference);
        }
    }</programlisting>

      <para>The event method is the opposite of the find method. In this
      method, the target bundle is removed from the event destinations if the
      related Service Reference is the target Service Reference.</para>

      <programlisting>    public void event(ServiceEvent event,
        Collection bundles) {
        if (event.getServiceReference().equals(
            reference))
            bundles.remove(bundle);
    }
}</programlisting>

      <para>Once the Hide class is working, a proxy can be registered. For
      example:</para>

      <programlisting>void startProxy(ServiceReference ref,Bundlefor,
        Object proxy ) {
    Hide hide = new Hide(ctx, ref, for);
    hide.open();
    ServiceRegistration reg = ctx.registerService(
        (String[]) ref.getProperty("objectClass"),
        proxy,
        makeProperties(ref)  // copy the properties
    );
}
...</programlisting>
    </section>

    <section>
      <title>Providing a Service on Demand</title>

      <para>The Listener Hook provides information about services that bundles
      are listening for. This makes it possible to look outside the OSGi
      framework to see if a listened for service could be provided in another
      way. For example, this service could come from Jini, SLP, or through
      some other means.</para>

      <para>A Listener Hook receives events every time a bundle adds or
      removes a Service Listener. The Listener Hook is called with an
      <code>added</code> and <code>removed</code> method that take a
      collection of <code>ListenerInfo</code> objects. These objects provide
      the identity of the bundle that added a Service Listener and the
      optional filter string. The Listener Hook can use this filter string to
      look for specific properties, for example the <code>objectClass</code>
      property to determine the type that is being sought. Extracting the
      property from this filter string is non-trivial though regular
      expressions can in general be used to extract the needed
      information.</para>

      <para>The following class uses an unexplained Track object to do the low
      level details. The example only shows how the Listener Hook can interact
      with these track objects.</para>

      <programlisting>public class OnDemand implements ListenerHook{
    final BundleContext context;
    final Map           tracked = HashMap();
    ServiceRegistration reg;</programlisting>

      <para>The constructor saves the Bundle Context. The registration is done
      in an open method.</para>

      <programlisting>    public OnDemand(BundleContext context) {
        this.context = context; }
    public void open() {
        reg = context.registerService(
            ListenerHook.class.getName(), this, null); }</programlisting>

      <para>The Listener Hook has added and removed methods that take
      collections. It is easier to handle the concurrency per object.</para>

      <programlisting>    public void added(Collection listeners) {
        for (Iterator i=listeners.iterator(); i.hasNext();) {
            add((ListenerHook.ListenerInfo) i.next());
    } }
    public void removed(Collection listeners) {
        for (Iterator i=listeners.iterator(); i.hasNext();) {
            remove((ListenerHook.ListenerInfo) i.next());
    } }</programlisting>

      <para>In the add hook, a <code>ListenerInfo</code> object provides the
      information about the Service Listener. In this example, a
      <code>Track</code> object is created for each active listener and
      associated with the given info object. This requires proper
      synchronization and should handle the rare case that the events are
      delivered out of order. The <code>ListenerInfo</code> object contains an
      <code>isRemoved</code> method that provides this information. If it is
      true, the corresponding removed event has already been called or will be
      called very soon. In that case, it is safe to discard the added event.
      For proper cleanup, the reg field is tested to see if it is set, if not,
      this call is during closing and should be ignored.</para>

      <programlisting>    synchronized void add(ListenerHook.ListenerInfoinfo) {
        if ( reg == null || info.isRemoved() )
            return;

        Track t = new Track(info);
        tracked.put(info, t);
        t.open();
    }</programlisting>

      <para>To remove a Track object it is necessary to consult the tracked
      map. If the track object is in the map, it must be closed. If not, there
      is an out of order delivery and this event can be ignored, the add
      method will ignore the corresponding <code>ListenerInfo</code> object
      because the <code>isRemoved</code> flag will be set. For proper closing,
      the reg field is tested for <code>null</code>.</para>

      <programlisting>    synchronized void remove(ListenerHook.ListenerInfoinfo){
        if ( reg == null )
            return;
        Track t = tracked.remove(info);
        if ( t != null )
            t.close();
    }</programlisting>

      <para>The close method is straightforward. The hook services are
      unregistered and all the remaining <code>Track</code> objects are
      closed. The reg field is used to make sure the event methods are
      ignoring any outstanding calls by setting it to <code>null</code>. After
      the synchronized block, any incoming event is ignored.</para>

      <programlisting>    public void close() {
        reg.unregister();
        synchronized(this) { reg = null; }
        for ( Track t : tracked.values() ) { t.close(); }
        tracked.clear();    }  }</programlisting>
    </section>
  </section>

  <section>
    <title>Event Listener Hook</title>

    <para>To intercept events being delivered to bundles, a handler must
    register an <xref linkend="org.osgi.framework.hooks.service.EventListenerHook" xrefstyle="hyperlink"/> object as a service with the framework. The
    framework must then send a service events to all the registered hooks. The
    calling order of the hooks is defined by the reversed
    <code>compareTo</code> ordering of their Service Reference objects. That
    is, the service with the highest ranking number is called first. Event
    Listener Hooks are called <emphasis>after</emphasis> the event is
    generated but <emphasis>before</emphasis> they are filtered by the
    optional filter expressions of the service listeners. Before the return,
    the handler can remove bundles from the given list. This allows an Event
    Listener Hook to hide service events for specific bundles.</para>

    <para>The model is depicted in the <xref linkend="i1664951"/>. A target
    bundle listens for service events but these events can be filtered by the
    handler because it has registered an Event Listener Hook service that is
    accepted by the Framework.</para>

    <figure xml:id="i1664951">
      <title>Event Listener Hook Interaction</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="1.881in" contentwidth="4.976in" fileref="eventlistenerhook.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>An Event Listener Hook receives all events, <code>REGISTERED</code>,
    <code>MODIFIED</code>, <code>UNREGISTERING</code>, and
    <code>MODIFIED_ENDMATCH</code>, that are to be delivered to all Service
    Listener objects registered with the framework, regardless of the presence
    of a service listener filter.</para>

    <para>The <xref linkend="org.osgi.framework.hooks.service.EventListenerHook" xrefstyle="hyperlink"/> class has a single method:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.framework.hooks.service.EventListenerHook.event-ServiceEvent-Map-" xrefstyle="hyperlink"/> - A service event has been generated. The
        implementer of this method can optionally shrink the given map of
        target bundles to service listeners.</para>
      </listitem>
    </itemizedlist>

    <para>One of the parameters of the <code>event</code> method is a map of
    target bundles to a collection of <code>ListenerInfo</code> objects. The
    handler can shrink this map by removing bundles as well as specific
    service listeners from the collection of <xref linkend="org.osgi.framework.hooks.service.ListenerHook.ListenerInfo" xrefstyle="hyperlink"/> objects. Both the map and the collection must
    therefore implement the appropriate remove methods.</para>

    <para>Removing a bundle from the list of target bundles will effectively
    hide the service event from the target bundle. The target bundle can still
    get the service, though the Find Hook can be used to block this access to
    the service.</para>

    <para>Implementers of the Event Listener Hook must ensure that target
    bundles continue to see a consistent set of service events. Service events
    are normally used in a state machine. Such state machines can get confused
    if some events are missed. For example, if a Service Tracker sees a
    <code>REGISTERED</code> event but is hidden from the corresponding
    <code>UNREGISTERING</code> event then the service will never be released.
    A simple solution is to stop the target bundle when the filter is put in
    place. However, when the bundle that implements the Event Listener Hook is
    stopped, it will of course no longer be able to filter events and the
    target bundle might see an service events for services it was not aware
    of.</para>

    <section>
      <title>System Service Listeners</title>

      <para>Service Listeners may be registered with the system bundle's
      <code>BundleContext</code>. If at least one Service Listener is
      registered with the system bundle's <code>BundleContext</code> then the
      system bundle's <code>BundleContext</code> must be contained in the keys
      of the shrinkable map passed to the <xref linkend="org.osgi.framework.hooks.service.EventListenerHook.event-ServiceEvent-Map-" xrefstyle="hyperlink"/> method. Just like other
      <code>BundleContext</code> keys contained in the shrinkable map, the
      system bundle's <code>BundleContext</code> may be removed. If the system
      bundle's <code>BundleContext</code> is removed by a service Event
      Listener Hook then the <code>BundleContext</code> will not be contained
      in the map for the remaining service Event Listener Hooks called. Unlike
      other <code>BundleContext</code> objects, if the system bundle's
      <code>BundleContext</code> is removed from the shrinkable map then the
      service event is still delivered to the Service Listeners added to the
      system bundle's <code>BundleContext</code>.</para>
    </section>
  </section>

  <section>
    <title>Find Hook</title>

    <para>The Find Hook is called when a target bundle searches the service
    registry with the <code>getServiceReference</code> or
    <code>getServiceReferences</code> methods. A registered Find Hook service
    gets a chance to inspect the returned set of service references and can
    optionally shrink the set of returned services. The order in which the
    find hooks are called is the reverse <code>compareTo</code> ordering of
    their Service References. That is, the service with the highest ranking
    number must be called first.</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.framework.hooks.service.FindHook.find-BundleContext-String-String-boolean-Collection-" xrefstyle="hyperlink"/> - The callback when a bundle calls the
        <code>getServiceReference</code>, <code>getServiceReferences</code>,
        or <code>getAllServiceReferences</code> method. As parameters, it gets
        the bundle context of the calling bundle, the service name, the filter
        name, the flag that indicates that all services are considered or only
        the ones that are class compatible with the target bundle. The last
        parameter is the set of service references that will be returned. This
        list can be shortened by removing service references form the given
        list.</para>
      </listitem>
    </itemizedlist>

    <para>The purpose of the Find Hook is to limit the visibility of services
    to selected target bundles. For this reason, the hook implementation can
    remove selected service references from the result collection.</para>

    <section>
      <title>System Bundle Context</title>

      <para>When one of the <code>getServiceReference</code> or
      <code>getServiceReferences</code> methods is called using the system
      bundle's <code>BundleContext</code> then the service Find Hooks are
      called in the same way the hooks are called when a normal
      <code>BundleContext</code> is used. The system bundle's
      <code>BundleContext</code> along with the shrinkable candidate service
      references collection is passed to the <xref linkend="org.osgi.framework.hooks.service.FindHook.find-BundleContext-String-String-boolean-Collection-" xrefstyle="hyperlink"/> method. Service Find Hooks may remove service
      references from the shrinkable collection. If a service reference is
      removed by a service Find Hook then the service reference will not be
      contained in the collection for the remaining service find hooks called.
      Unlike other <code>BundleContext</code> objects, if the system bundle's
      <code>BundleContext</code> is used to find services then the Framework
      ignores the service reference removals performed by the service Find
      Hooks and allows the service references removed to remain visible in the
      find results.</para>
    </section>
  </section>

  <section>
    <title>Listener Hook</title>

    <para>The Framework API provides extensive insight in the registration,
    modification, and unregistration of services. However, it does not provide
    the information about what services bundles are waiting for. It is a
    common pattern that a bundle waits for a service to arrive before it is
    able to perform its function, having the knowledge what bundles are
    waiting for, allows a number of interesting scenarios.</para>

    <para>The Listener Hook is a <xref linkend="framework.servicehooks-whiteboard.pattern.ref"/> service that is
    informed about the coming and going of all service listeners. When a
    Listener Hook service is registered with the Framework, the Framework will
    inform this service of all existing listeners and keep it updated of all
    removed and newly registered service listeners. The events are dispatched
    in order of the Listener Hook service registration.</para>

    <para>In the following figure, it is depicted how the interceptor can find
    out about target bundles listening for services. It
    <emphasis>listens</emphasis> to registration and unregistration of Service
    Listeners.</para>

    <figure>
      <title>Listener Hook Interaction</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="1.129in" contentwidth="4.976in" fileref="listenerhook.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The <code>ListenerHook</code> interface is composed of the following
    methods:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.framework.hooks.service.ListenerHook.added-Collection-" xrefstyle="hyperlink"/> - Inform the hook of the registered listeners.
        The collection is immutable and contains <code>ListenerInfo</code>
        objects. These objects identify a unique <code>ServiceListener</code>
        object registration with the framework. They provide the registering
        bundle as well as the optional filter. The <code>ListenerInfo</code>
        class is nested class of the <code>ListenerHook</code> class.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.framework.hooks.service.ListenerHook.removed-Collection-" xrefstyle="hyperlink"/> -Inform the hook of listeners that have been
        removed because the bundle is stopped or the bundle implementation has
        unregistered a listener. The <code>ListenerInfo</code> objects are
        equal to their corresponding Info Listener object during the
        addition.</para>
      </listitem>
    </itemizedlist>

    <para>The <code>ListenerHook.ListenerInfo</code> class provides the
    following methods:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.framework.hooks.service.ListenerHook.ListenerInfo.getBundleContext--" xrefstyle="hyperlink"/> - The Bundle Context of the bundle that
        registered the service listener.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.framework.hooks.service.ListenerHook.ListenerInfo.getFilter--" xrefstyle="hyperlink"/> - The filter used in the registration.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.framework.hooks.service.ListenerHook.ListenerInfo.isRemoved--" xrefstyle="hyperlink"/> - Provides information if this Listener Info
        is still valid.</para>
      </listitem>
    </itemizedlist>

    <para>A <code>ListenerInfo</code> object is related to the registration of
    a <code>ServiceListener</code> with the Framework. The Framework maintains
    only one registration for a specific, identity based, Service Listener
    object. That is, registering the same object again, even with a different
    filter, will automatically unregister the previous registration. This will
    be visible as a <code>removed</code> - <code>added</code> pair of
    calls.</para>

    <para>The <code>equality</code> and <code>hashCode</code> method of a
    <code>ListenerInfo</code> object must guarantee that the hook can place
    the Listener Info objects in hashed collections, such that an
    <code>ListenerInfo</code> object received in the <code>added</code>
    method's collection parameter matches its corresponding
    <code>ListenerInfo</code> object in the <code>removed</code> method's
    collection parameter. This is trivially met by the identity
    <code>equals</code> and <code>hashCode</code> methods if the same objects
    are used in both methods.</para>

    <para>The reason the Listener Hook provides methods that take collection
    instead of a single <code>ListenerInfo</code> object is because of
    performance optimization. When a Listener Hook service gets registered,
    there can already be a large number of Service Listeners available.
    Similarly, when a bundle gets stopped, it could have registered a number
    of service listeners that then need to be unregistered. Being able to
    provide all changes in a batch improves performance.</para>

    <para>The framework must report each registration of a Service Listener
    with the Bundle Context with a new <code>ListenerInfo</code> object that
    is unequal to any other <code>ListenerInfo</code> object. If the same
    Service Listener object is registered multiple times, each previous
    registration must be removed before the listener is added again.</para>

    <para>The <code>event</code> method in a Listener Hook is called
    synchronously with the registration of the Service Listener to minimize
    the overhead for the framework. However, this does not imply that delivery
    is always ordered. There are rare cases where a removal is reported before
    the corresponding addition. Handling this case is simplified by the
    <code>isRemoved</code> method. If the <code>removed</code> and
    <code>added</code> methods are synchronized, then the
    <code>isRemoved</code> method can be used in the <code>added</code> method
    to detect the out of order delivery. A simple strategy is to ignore
    removed events without corresponding added events and ignore added events
    where the <code>ListenerInfo</code> object is already removed.</para>

    <para>The following code shows a skeleton of how the Listener Hook methods
    can be implemented.</para>

    <programlisting>final HashMap tracked = new HashMap();

public void added( Collection lis ) {
    for ( Iterator li = lis.iterator(); li.hasNext(); ) {
        ListenerHook.ListenerInfo li =
            (ListenerHook.ListenerInfo) li.next();
        synchronized(tracked) {
            if ( li.isRemoved() )
                return;
            ... create some object t
            tracked.put( li, t );
        }
  }
}
public void removed( Collection lis ) {
    for ( Iterator li = lis.iterator(); li.hasNext(); ) {
        ListenerHook.ListenerInfo li =
            (ListenerHook.ListenerInfo) li.next();
        synchronized(tracked) {
            Object t =  tracked.remove( li );
            if ( t != null )
                ... dispose object t
        }
  }
}</programlisting>

    <section>
      <title>Filter</title>

      <para>A key concept in the Listener Hook is the filter. When a bundle is
      interested in a specific set of services, it registers a service
      listener with a filter. This filter is an indication of what services
      are interesting to the target bundle. The <code>objectclass</code>
      property holds the names of the interfaces and classes. However, just
      searching for this property with a regular expression is not guaranteed
      to return a usable value. The form of the sub-expressions can make the
      property part of an and or even negate. For example, looking for the
      <code>objectclass</code> in the following expression gives a result that
      is the opposite of what is searched.</para>

      <programlisting>(!(objectclass=org.osgi.service.cm.ConfigurationAdmin))</programlisting>

      <para>However, understanding a full filter expression is quite
      difficult. An acceptable strategy is to look for the object classes in
      the filter string with a regular expression but evaluate the filter
      against any conclusions that are being drawn. That is, testing a
      Configuration Admin service against the filter in the previous example
      will not match.</para>

      <para>Realistically, many scenarios that are enabled by the Listener
      Hook will require the filters to have a simple structure.</para>
    </section>
  </section>

  <section>
    <title>Architectural Notes</title>

    <section>
      <title>Remove Only</title>

      <para>The Event Listener Hook and Find Hook both allow the interceptor
      to remove elements from a collection and not add elements. The reason is
      that adding almost inevitably violates framework invariants that can
      trip the receivers. These invariants are very important to keep the
      programming model for the bundle developers simple.</para>
    </section>

    <section>
      <title>Ordinary Services</title>

      <para>All service hooks are treated as ordinary services. If the
      framework uses them, their Service References will show that the system
      bundle is using them, and if a hook is a Service Factory, then the
      actual instance will be properly created.</para>

      <para>The only special treatment of the service hooks is that the
      framework must not use them for the hooks themselves. That is, the Event
      and Find Hooks can not be used to hide the services from the
      framework.</para>
    </section>

    <section>
      <title>Ordering</title>

      <para>The hooks are very sensitive to ordering because they modify the
      basic behavior of the OSGi Framework. Before a hook is registered, a
      client bundle interacts with the framework directly. However, ordering
      in an OSGi Framework can never be relied upon from an programmer's
      perspective. It is bad practice to rely on start level ordering in a
      program because updates and other disturbances will inevitably break
      this ordering. Start level ordering is a tool for deployers to smoothen
      initialization problems, not to handle ordering dependencies.</para>

      <para>Implementers of the hooks must therefore be intricately aware that
      they can be started before or after their target bundles are
      started.</para>
    </section>

    <section>
      <title>Providing the Service Object</title>

      <para>Many scenarios for the hooks specified here could be simplified by
      being able to intercept the <code>getService</code> call of the target
      bundle. This design was investigated and rejected because it created a
      dependency graph (registering bundle, proxying bundle, and target
      bundle) that could not be properly managed in a dynamic OSGi system. For
      example, if a proxying bundle provides an alternative implementation for
      a service, how does the receiving bundle know that it should stop using
      this service? It has no knowledge that the proxying bundle even exists.
      Instead of creating a much more complex service registry, it was decided
      to keep the model simple and reuse the existing primitives. This puts
      the complexity at implementing the hooks, but leaves the overall service
      model simple.</para>
    </section>

    <section>
      <title>Multi Threading</title>

      <para>All hooks in this specification must be thread safe because the
      hooks can be called any time. All hook methods must be re-entrant, the
      framework can enter them at any time, and in rare cases in the wrong
      order. Most methods will be called synchronously with framework
      activities. It is fully allowed to call the framework from any of the
      hook methods. However, even more than usual, it is highly recommended to
      not hold any locks while calling the framework.</para>
    </section>
  </section>

  <section>
    <title>Security</title>

    <para>All hooks described in this specification are highly complex
    facilities that require great care in their implementation to maintain the
    Framework invariants concerning the service registry. It is therefore
    important that in a secure system the permission to register these hooks
    is only given to privileged bundles.</para>

    <para>In this case, the user of the hook services is the framework.
    Therefore, there is never a need to provide:</para>

    <itemizedlist>
      <listitem>
        <para><code>ServicePermission[..EventListenerHook,GET]</code>,</para>
      </listitem>

      <listitem>
        <para><code>ServicePermission[..FindHook,GET]</code>, or</para>
      </listitem>

      <listitem>
        <para><code>ServicePermission[..ListenerHook,GET]</code></para>
      </listitem>
    </itemizedlist>

    <para>Implementers of these hooks must have:</para>

    <itemizedlist>
      <listitem>
        <para><code>ServicePermission[..EventListenerHook,REGISTER]</code> for
        Event Listener Hook services.</para>
      </listitem>

      <listitem>
        <para><code>ServicePermission[..FindHook,REGISTER]</code> for Find
        Hook services</para>
      </listitem>

      <listitem>
        <para><code>ServicePermission[..ListenerHook,REGISTER]</code> for
        Listener Hook services</para>
      </listitem>
    </itemizedlist>
  </section>

  <section xreflabel="org.osgi.framework.hooks.service" version="5" role="package" xml:id="org.osgi.framework.hooks.service" xml:base="055/../../../generated/javadoc/docbook/org.osgi.framework.hooks.service.xml">
   <title>org.osgi.framework.hooks.service</title>
   <info>
      <releaseinfo xml:id="org.osgi.framework.hooks.service-version">Version 1.1</releaseinfo>
      <edition xml:id="org.osgi.framework.hooks.service-version.number">1.1</edition>
   </info>
   <para>
Framework Service Hooks Package Version 1.1.

 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest.

 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.framework.hooks.service; version="[1.1,2.0)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.hooks.service.EventHook">
                  <code>EventHook</code>
               </link> -
OSGi Framework Service Event Hook Service.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.hooks.service.EventListenerHook">
                  <code>EventListenerHook</code>
               </link> -
OSGi Framework Service Event Listener Hook Service.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.hooks.service.FindHook">
                  <code>FindHook</code>
               </link> -
OSGi Framework Service Find Hook Service.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.hooks.service.ListenerHook">
                  <code>ListenerHook</code>
               </link> -
OSGi Framework Service Listener Hook Service.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.hooks.service.ListenerHook.ListenerInfo">
                  <code>ListenerHook.ListenerInfo</code>
               </link> -
Information about a Service Listener.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section xreflabel="EventHook" role="class" xml:id="org.osgi.framework.hooks.service.EventHook">
      <title>public interface EventHook</title>
      <para>
OSGi Framework Service Event Hook Service.

 </para>
      <para>
 Bundles registering this service will be called during framework service
 (register, modify, and unregister service) operations.</para>
      <formalpara role="parameter">
         <title>Deprecated</title>
         <para>As of 1.1. Replaced by <link linkend="org.osgi.framework.hooks.service.EventListenerHook">EventListenerHook</link>.</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section xreflabel="event(ServiceEvent,Collection)" role="method" xml:id="org.osgi.framework.hooks.service.EventHook.event-ServiceEvent-Collection-">
         <title>public void event(ServiceEvent event, Collection&lt;BundleContext&gt; contexts)</title>
         <formalpara role="parameter">
            <title>event</title>
            <para>The service event to be delivered.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>contexts</title>
            <para>A collection of Bundle Contexts for bundles which have
        listeners to which the specified event will be delivered. The
        implementation of this method may remove bundle contexts from the
        collection to prevent the event from being delivered to the
        associated bundles. The collection supports all the optional
        <code>Collection</code> operations except <code>add</code> and
        <code>addAll</code>. Attempting to add to the collection will result in
        an <code>UnsupportedOperationException</code>. The collection is not
        synchronized.</para>
         </formalpara>
         <para role="description">
Event hook method. This method is called prior to service event delivery
 when a publishing bundle registers, modifies or unregisters a service.
 This method can filter the bundles which receive the event.
   </para>
      </section>
   </section>
   <section xreflabel="EventListenerHook" role="class" xml:id="org.osgi.framework.hooks.service.EventListenerHook">
      <title>public interface EventListenerHook</title>
      <para>
OSGi Framework Service Event Listener Hook Service.

 </para>
      <para>
 Bundles registering this service will be called during framework service
 (register, modify, and unregister service) operations.</para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.1</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section xreflabel="event(ServiceEvent,Map)" role="method" xml:id="org.osgi.framework.hooks.service.EventListenerHook.event-ServiceEvent-Map-">
         <title>public void event(ServiceEvent event, Map&lt;BundleContext, Collection&lt;ListenerHook.ListenerInfo&gt;&gt; listeners)</title>
         <formalpara role="parameter">
            <title>event</title>
            <para>The service event to be delivered.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>listeners</title>
            <para>A map of Bundle Contexts to a collection of Listener
        Infos for the bundle's listeners to which the specified event will
        be delivered. The implementation of this method may remove bundle
        contexts from the map and listener infos from the collection
        values to prevent the event from being delivered to the associated
        listeners. The map supports all the optional <code>Map</code>
        operations except <code>put</code> and <code>putAll</code>. Attempting to
        add to the map will result in an
        <code>UnsupportedOperationException</code>. The collection values in
        the map supports all the optional <code>Collection</code> operations
        except <code>add</code> and <code>addAll</code>. Attempting to add to a
        collection will result in an <code>UnsupportedOperationException</code>
        . The map and the collections are not synchronized.</para>
         </formalpara>
         <para role="description">
Event listener hook method. This method is called prior to service event
 delivery when a publishing bundle registers, modifies or unregisters a
 service. This method can filter the listeners which receive the event.
   </para>
      </section>
   </section>
   <section xreflabel="FindHook" role="class" xml:id="org.osgi.framework.hooks.service.FindHook">
      <title>public interface FindHook</title>
      <para>
OSGi Framework Service Find Hook Service.

 </para>
      <para>
 Bundles registering this service will be called during framework service find
 (get service references) operations.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section xreflabel="find(BundleContext,String,String,boolean,Collection)" role="method" xml:id="org.osgi.framework.hooks.service.FindHook.find-BundleContext-String-String-boolean-Collection-">
         <title>public void find(BundleContext context, String name, String filter, boolean allServices, Collection&lt;ServiceReference&lt;?&gt;&gt; references)</title>
         <formalpara role="parameter">
            <title>context</title>
            <para>The bundle context of the bundle performing the find
        operation.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>name</title>
            <para>The class name of the services to find or <code>null</code> to
        find all services.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>filter</title>
            <para>The filter criteria of the services to find or <code>null</code>
        for no filter criteria.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>allServices</title>
            <para>
               <code>true</code> if the find operation is the result of a
        call to
        <link linkend="org.osgi.framework.BundleContext.getAllServiceReferences-String-String-">BundleContext.getAllServiceReferences(String, String)</link>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>references</title>
            <para>A collection of Service References to be returned as a
        result of the find operation. The implementation of this method
        may remove service references from the collection to prevent the
        references from being returned to the bundle performing the find
        operation. The collection supports all the optional
        <code>Collection</code> operations except <code>add</code> and
        <code>addAll</code>. Attempting to add to the collection will result in
        an <code>UnsupportedOperationException</code>. The collection is not
        synchronized.</para>
         </formalpara>
         <para role="description">
Find hook method. This method is called during the service find operation
 (for example, <link linkend="org.osgi.framework.BundleContext.getServiceReferences-String-String-">BundleContext.getServiceReferences(String, String)</link>
 ). This method can filter the result of the find operation.
   </para>
      </section>
   </section>
   <section xreflabel="ListenerHook" role="class" xml:id="org.osgi.framework.hooks.service.ListenerHook">
      <title>public interface ListenerHook</title>
      <para>
OSGi Framework Service Listener Hook Service.

 </para>
      <para>
 Bundles registering this service will be called during service listener
 addition and removal.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section xreflabel="added(Collection)" role="method" xml:id="org.osgi.framework.hooks.service.ListenerHook.added-Collection-">
         <title>public void added(Collection&lt;ListenerHook.ListenerInfo&gt; listeners)</title>
         <formalpara role="parameter">
            <title>listeners</title>
            <para>A collection of <link linkend="org.osgi.framework.hooks.service.ListenerHook.ListenerInfo">ListenerInfo</link>s for newly added
        service listeners which are now listening to service events.
        Attempting to add to or remove from the collection will result in
        an <code>UnsupportedOperationException</code>. The collection is not
        synchronized.</para>
         </formalpara>
         <para role="description">
Added listeners hook method. This method is called to provide the hook
 implementation with information on newly added service listeners. This
 method will be called as service listeners are added while this hook is
 registered. Also, immediately after registration of this hook, this
 method will be called to provide the current collection of service
 listeners which had been added prior to the hook being registered.
   </para>
      </section>
      <section xreflabel="removed(Collection)" role="method" xml:id="org.osgi.framework.hooks.service.ListenerHook.removed-Collection-">
         <title>public void removed(Collection&lt;ListenerHook.ListenerInfo&gt; listeners)</title>
         <formalpara role="parameter">
            <title>listeners</title>
            <para>A collection of <link linkend="org.osgi.framework.hooks.service.ListenerHook.ListenerInfo">ListenerInfo</link>s for newly removed
        service listeners which are no longer listening to service events.
        Attempting to add to or remove from the collection will result in
        an <code>UnsupportedOperationException</code>. The collection is not
        synchronized.</para>
         </formalpara>
         <para role="description">
Removed listeners hook method. This method is called to provide the hook
 implementation with information on newly removed service listeners. This
 method will be called as service listeners are removed while this hook is
 registered.
   </para>
      </section>
   </section>
   <section xreflabel="ListenerHook.ListenerInfo" role="class" xml:id="org.osgi.framework.hooks.service.ListenerHook.ListenerInfo">
      <title>public static interface ListenerHook.ListenerInfo</title>
      <para>
Information about a Service Listener. This interface describes the bundle
 which added the Service Listener and the filter with which it was added.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section xreflabel="equals(Object)" role="method" xml:id="org.osgi.framework.hooks.service.ListenerHook.ListenerInfo.equals-Object-">
         <title>public boolean equals(Object obj)</title>
         <formalpara role="parameter">
            <title>obj</title>
            <para>The object to compare against this <code>ListenerInfo</code>.</para>
         </formalpara>
         <para role="description">
Compares this <code>ListenerInfo</code> to another <code>ListenerInfo</code>.
 Two <code>ListenerInfo</code>s are equals if they refer to the same
 listener for a given addition and removal life cycle. If the same
 listener is added again, it must have a different
 <code>ListenerInfo</code> which is not equal to this <code>ListenerInfo</code>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the other object is a <code>ListenerInfo</code>
         object and both objects refer to the same listener for a
         given addition and removal life cycle.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getBundleContext()" role="method" xml:id="org.osgi.framework.hooks.service.ListenerHook.ListenerInfo.getBundleContext--">
         <title>public BundleContext getBundleContext()</title>
         <para role="description">
Return the context of the bundle which added the listener.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The context of the bundle which added the listener.</para>
         </formalpara>
      </section>
      <section xreflabel="getFilter()" role="method" xml:id="org.osgi.framework.hooks.service.ListenerHook.ListenerInfo.getFilter--">
         <title>public String getFilter()</title>
         <para role="description">
Return the filter string with which the listener was added.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The filter string with which the listener was added. This may
         be <code>null</code> if the listener was added without a filter.</para>
         </formalpara>
      </section>
      <section xreflabel="hashCode()" role="method" xml:id="org.osgi.framework.hooks.service.ListenerHook.ListenerInfo.hashCode--">
         <title>public int hashCode()</title>
         <para role="description">
Returns the hash code for this <code>ListenerInfo</code>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The hash code of this <code>ListenerInfo</code>.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="isRemoved()" role="method" xml:id="org.osgi.framework.hooks.service.ListenerHook.ListenerInfo.isRemoved--">
         <title>public boolean isRemoved()</title>
         <para role="description">
Return the state of the listener for this addition and removal life
 cycle. Initially this method will return <code>false</code> indicating the
 listener has been added but has not been removed. After the listener
 has been removed, this method must always return <code>true</code>.

 </para>
         <para>
 There is an extremely rare case in which removed notification to
 <link linkend="org.osgi.framework.hooks.service.ListenerHook">ListenerHook</link>s can be made before added notification if two
 threads are racing to add and remove the same service listener.
 Because <link linkend="org.osgi.framework.hooks.service.ListenerHook">ListenerHook</link>s are called synchronously during service
 listener addition and removal, the Framework cannot guarantee
 in-order delivery of added and removed notification for a given
 service listener. This method can be used to detect this rare
 occurrence.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>false</code> if the listener has not been removed,
         <code>true</code> otherwise.</para>
         </formalpara>
      </section>
   </section>
</section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="framework.servicehooks-whiteboard.pattern.ref"><title>Whiteboard
      Pattern</title><biblioid class="uri"><link xlink:href="https://docs.osgi.org/whitepaper/whiteboard-pattern/"/></biblioid></bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter label="56" revision="$Id: 04796ca288d726dbe46b605ead299a12cc4d1652 $" version="5.0" xml:id="framework.weavinghooks" xml:base="056/framework.weavinghooks.xml">
  <title>Weaving Hook Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.framework.hooks.weaving-version" linkend="org.osgi.framework.hooks.weaving"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>Bytecode weaving is a popular technique that transforms class files
    to provide additional functionality. This is a powerful technique that,
    when used with care, can significantly reduce the coding effort for
    mundane programming chores.</para>

    <para>This specification provides a means for a handler bundle to
    intercept any bundle class loading calls in the framework, transform the
    byte codes, and add new dynamic imports. A means for observing the final
    weaving results, both before and after they take effect, is also
    provided.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Ordering</emphasis> - Allow a weaver to weave a
          bundle before it is loaded and used.</para>
        </listitem>

        <listitem>
          <para><emphasis>Dynamic Imports</emphasis> - Support additional
          imports.</para>
        </listitem>

        <listitem>
          <para><emphasis>Strategy</emphasis> - Support both Static and
          Dynamic Weaving strategies.</para>
        </listitem>

        <listitem>
          <para><emphasis>No Metadata</emphasis> - Allow standard bundles,
          without any specific metadata, to be woven.</para>
        </listitem>

        <listitem>
          <para><emphasis>Java API</emphasis> - Use the existing Java byte
          code transformation APIs where possible.</para>
        </listitem>

        <listitem>
          <para><emphasis>Multiple</emphasis> - Allow for multiple weavers per
          bundle in a defined order.</para>
        </listitem>

        <listitem>
          <para><emphasis>Observation</emphasis> - Allow woven class state
          transitions to be observed.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Weaving Hook</emphasis> - A service registered by a
          bundle that wants to weave other bundles.</para>
        </listitem>

        <listitem>
          <para><emphasis>Woven Class</emphasis> - An object representing the
          class to be woven.</para>
        </listitem>

        <listitem>
          <para><emphasis>Woven Class Listener</emphasis> - A service
          registered by a bundle that wants to observe woven class state
          transitions.</para>
        </listitem>
      </itemizedlist>

      <figure>
        <title>Byte Code Weaving</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.437in" contentwidth="4.959in" fileref="weavinghooks-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section>
    <title>Usage</title>

    <section>
      <title>Tracing</title>

      <para>For tracing purposes, a bundle can weave a trace entry and exit
      message around each method. This can be done with byte code weaving by
      inserting a call to a service at the beginning and end of a method. In
      this example, a service is created that has two methods:</para>

      <itemizedlist>
        <listitem>
          <para><code>trace(Bundle)</code> - Byte code weave the given bundle
          with trace entry and exit methods.</para>
        </listitem>

        <listitem>
          <para><code>untrace(Bundle)</code> - Remove any weavings.</para>
        </listitem>
      </itemizedlist>

      <para>The strategy chosen here is simple. The weaver registers a Weaving
      Hook service so it receives all class loads. Any such class load is
      checked against a set of bundles that needs tracing, any class from a
      traced bundle is then woven with the trace information. If a bundle is
      to be traced, the set is updated and the bundle is refreshed to ensure
      all classes are loaded anew so the tracing code can be woven in.</para>

      <programlisting>public class TracingWeaver implements WeavingHook {
    final Set&lt;Bundle&gt; bundles = new HashSet&lt;Bundle&gt;();
    final List&lt;String&gt; imports = Arrays.asList(
        "com.acme.trace;version=\"[1,2)\"");
    BundleContext context;</programlisting>

      <para>The <code>weave</code> method is the service method of the Weaving
      Hook service. It receives a <code>WovenClass</code> object that provides
      the information about the class to be woven. In this case, the
      <code>bundles</code> field contains the bundles to be woven, so this is
      checked first. If the to-be-loaded class is in one of the traced
      bundles, the byte codes are changed to provide trace information.
      Otherwise the no change is made.</para>

      <para>In general, weaving code will require new imports for the
      to-be-woven bundle. These imports can be added by adding Dynamic Import
      Package clauses to the list received from the <xref linkend="org.osgi.framework.hooks.weaving.WovenClass.getDynamicImports--" xrefstyle="hyperlink"/> method. This is a list of <code>String</code>
      objects, the syntax of each string is equal to a clause in the
      DynamicImport-Package header. See <xref linkend="framework.module.dynamicimportpackage"/> for the proper
      syntax.</para>

      <programlisting>    public void weave(WovenClass classInfo) {
        BundleWiring bw = classInfo.getBundleWiring();
        Bundle b = bw.getBundle();
        if (bundles.contains(b)) {
            byte [] woven = weaveTracing(classInfo.getBytes());
            if (!classInfo.getDynamicImports().containsAll(imports))
                classInfo.getDynamicImports().addAll(imports);
            classInfo.setBytes(woven);
        }
    }</programlisting>

      <para>The following <code>trace</code> method is called when a bundle
      must be traced. It ignores the request if the bundle is already traced.
      Otherwise, it will add the bundle to the set of traced bundles and
      refresh the bundle.</para>

      <programlisting>    public void trace(Bundle b) {
        if (bundles.add(b))
            refresh(b);
    }</programlisting>

      <para>The <code>untrace</code> method is the reverse:</para>

      <programlisting>    public void untrace(Bundle b) {
        if (bundles.remove(b))
            refresh(b);
    }</programlisting>

      <para>The refresh method uses the Bundle Wiring API to refresh a bundle.
      Refreshing a bundle will throw away its class loader so that all used
      classes are reloaded when needed.</para>

      <programlisting>    private void refresh(Bundle b) {
        Bundle fwb = context.getBundle(0);
        FrameworkWiring fw = fwb.adapt(FrameworkWiring.class);
        fw.refreshBundles(Arrays.asList(b));
    }</programlisting>

      <para>The trace method that does the final weaving is left as an
      exercise to the reader:</para>

      <programlisting>    byte[] weaveTracing(byte[] bytes) {
        ..
    }
}</programlisting>
    </section>

    <section>
      <title>Isolation</title>

      <para>The <xref linkend="framework.resolverhooks"/> allows bundles to be
      separated into various regions isolated by sharing policies. The dynamic
      imports added in the tracing example will need to be taken into account
      by the sharing policies of regions containing bundles whose classes were
      woven in order for the bundles to resolve. This can be accomplished
      using a Woven Class Listener. Using a Weaving Hook would not be
      appropriate since there is no guarantee that a Weaving Hook observes the
      final list of dynamic imports.</para>

      <para>The region registers a Woven Class Listener service so it receives
      notifications of Woven Class state transitions. The sharing policy of
      the region containing the bundle whose class was woven is updated with
      the dynamic imports, if any. This action occurs while the Woven Class is
      in the <xref linkend="org.osgi.framework.hooks.weaving.WovenClass.TRANSFORMED" xrefstyle="hyperlink"/> state to ensure the region is prepared to accept
      the imports before the bundle wiring is updated upon entering the <xref linkend="org.osgi.framework.hooks.weaving.WovenClass.DEFINED" xrefstyle="hyperlink"/> state. The region is initialized with the set of
      bundles composing it and a static sharing policy consisting of
      namespaces mapped to sets of filters indicating the allowed
      capabilities.</para>

      <programlisting>public class Region implements WovenClassListener, ResolverHook {
    final Set&lt;Bundle&gt; bundles;
    final Map&lt;String, Set&lt;Filter&gt;&gt; policy;</programlisting>

      <para>The <code>modified</code> method is the service method of the
      Woven Class Listener service. It receives a Woven Class object that
      provides the information about the woven class that underwent a state
      transition. If the current state is <xref linkend="org.osgi.framework.hooks.weaving.WovenClass.TRANSFORMED" xrefstyle="hyperlink"/>, and the associated bundle is part of the
      region, the sharing policy is updated with the additional dynamic
      imports, if any.</para>

      <programlisting>    public void modified(WovenClass wovenClass) {
        if ((wovenClass.getState() &amp; WovenClass.TRANSFORMED) == 0)
            return;
        Bundle bundle = wovenClass.getBundleWiring().getBundle();
        if (!bundles.contains(bundle))
           return;
        Set&lt;Filter&gt; filters = policy.get(PackageNamespace.PACKAGE_NAMESPACE);
        for (String dynamicImport : wovenClass.getDynamicImports())
            filters.add(toFilter(dynamicImport));
    }</programlisting>

      <para>The region also implements <code>ResolverHook</code>. When the
      <code>filterMatches</code> method is called, the requirement is
      inspected to see if its matching capabilities are allowed into the
      region. If not, the list of candidates is cleared.</para>

      <programlisting>    public void filterMatches(BundleRequirement requirement,
            Collection&lt;BundleCapability&gt; candidates) {
        Bundle bundle = requirement.getRevision().getBundle();
        if (!bundles.contains(bundle))
            return;
        String namespace = requirement.getNamespace();
        if (!policy.containsKey(namespace))
            return;
        Map&lt;String, String&gt; directives = requirement.getDirectives();
        String filter = directives.get(
            PackageNamespace.REQUIREMENT_FILTER_DIRECTIVE);
        Set&lt;Filter&gt; filters = policy.get(namespace);
        if (!filters.contains(toFilter(filter)))
            candidates.clear();
    }</programlisting>

      <para>The <code>toFilter</code> method responsible for converting the
      requirement filters and dynamic import package clauses into a Filter is
      left as an exercise to the reader.</para>

      <programlisting>    private Filter toFilter(String s) {
        ...
    }
}</programlisting>
    </section>
  </section>

  <section>
    <title>Weaving Hook</title>

    <para>The Weaving Hook service is a <xref linkend="framework.weavinghooks-whiteboard.pattern.ref"/> service. Any
    party that wants to participate in weaving classes can register such a
    service. The framework obtains the Weaving Hook services and calls their
    <xref linkend="org.osgi.framework.hooks.weaving.WeavingHook.weave-WovenClass-" xrefstyle="hyperlink"/> method for each class that must be loaded. The
    Weaving Hook services must be called in the service ranking order. See
    <xref linkend="framework.service.servicerankingorder"/>.</para>

    <para>The Weaving Hook <code>weave</code> method is called with a <xref linkend="org.osgi.framework.hooks.weaving.WovenClass" xrefstyle="hyperlink"/> object that represents the class to be woven. This
    class is similar to the Java <code>ClassFileTransformer</code> class but
    adds bundle wiring information and can be made available in environments
    prior to Java 5. The methods must all be called in privileged blocks. See
    <xref linkend="framework.lifecycle.privilegedcallbacks"/>.</para>

    <para>The <code>WovenClass</code> object provides access to:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.framework.hooks.weaving.WovenClass.getClassName--" xrefstyle="hyperlink"/> - The name of the class being loaded,</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.framework.hooks.weaving.WovenClass.getBundleWiring--" xrefstyle="hyperlink"/> - The bundle wiring, which provides access to
        the bundle, the bundle class loaders and the capabilities.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.framework.hooks.weaving.WovenClass.getProtectionDomain--" xrefstyle="hyperlink"/> - The protection domain it is being defined
        in, and</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.framework.hooks.weaving.WovenClass.getBytes--" xrefstyle="hyperlink"/> - The class bytes to be defined.</para>
      </listitem>
    </itemizedlist>

    <para>A Weaving Hook service can use the <code>WovenClass</code> object to
    decide to weave or not to weave. This decision can be based on the bundle
    wiring, the class name, the protection domain, or the bytes. For example,
    the following code checks if the class comes from a specific
    bundle:</para>

    <programlisting>if (wovenClass.getBundleWiring().getBundle().equals(mybundle))
  ...</programlisting>

    <para>If the Weaving Hook service decides to weave the class, it must
    calculate new bytes for the provided Woven Class, these bytes can be set
    with the <xref linkend="org.osgi.framework.hooks.weaving.WovenClass.setBytes-byte---" xrefstyle="hyperlink"/> method. This implies that ordering is relevant.
    Weaving Hook services that are lower in ranking (called later) will weave
    any of the changes of higher ranking Weaving Hook services. Not all
    combinations of Weaving Hook services will therefore work as
    expected.</para>

    <para>Weaving a class can create new dependencies that are unknown to the
    woven class. In the trace example, the entry and exit traces require
    access to the tracing subsystem, a dependency the original class did not
    have. The <code>WovenClass</code> object allows these extra imports to be
    added as new dynamic import package clauses. The current set of dynamic
    imports for the Woven Class is available from the <code>WovenClass</code>
    <xref linkend="org.osgi.framework.hooks.weaving.WovenClass.getDynamicImports--" xrefstyle="hyperlink"/> method. This method returns a mutable list of
    <code>String</code> during the <code>weave</code> method, the Weaving Hook
    service can add new dynamic import package clauses to this list while the
    <code>weave</code> method is active. The syntax of the strings is defined
    by the DynamicImport-Package header, see <xref linkend="framework.module.dynamicimportpackage"/>. The dynamic imports
    must have a valid syntax, otherwise an Illegal Argument Exception must be
    thrown. These dynamically added dependencies are made visible through the
    <xref linkend="framework.wiring"/> as new requirements. The
    <code>getRevision</code> method of these requirements must return the
    Bundle Revision of the bundle that is woven; that revision will not
    include these synthetic requirements in the
    <code>getDeclaredRequirements</code> method.</para>

    <para>Dynamic imports are the last resort for the framework to find a
    provider when the normal imports fail. The woven class dynamic imports are
    consulted after the dynamic imports specified in the bundle's manifest.
    Frameworks must append all additional dynamic imports in the given order
    but are expected to filter out duplicates for performance reasons.</para>

    <para>The management of the dynamic import is error prone and should be
    handled with care because dynamic imports use wildcards. Wildcards make
    the ordering of the imports important. In the pathological case, a full
    wildcard in the beginning (for example in the manifest) will void any more
    specific clauses that were added by Handlers. Handlers should be as
    specific as possible when adding dynamic import clauses.</para>

    <para>In many cases the additional imports must refer to classes that the
    Handler is already resolved to. In an OSGi framework, the same package can
    be present multiple times. A Handler should therefore ensure that the
    woven bundle gets wired to the correct bundle. One way to achieve this is
    to include the bundle-version and bundle-symbolic-name synthetic
    attributes that are available on every exported package.</para>

    <programlisting>com.acme.weavesupport.core;version=1.2;bundle-version=3.2; «
    bundle-symbolic-name=com.acme.weavesupport</programlisting>

    <para>After calling the last Weaving Hook service, the
    <code>WovenClass</code> object is made <emphasis>complete</emphasis>. The
    framework must make the <code>WovenClass</code> object immutable when it
    is complete. After the Woven Class is complete, the current bytes are then
    used to define the new class. Attempts to modify it, or any of its
    properties, must throw an Exception. After completion, the <xref linkend="org.osgi.framework.hooks.weaving.WovenClass.getBytes--" xrefstyle="hyperlink"/> method must return a copy of the byte array that
    was used to define the class.</para>

    <section>
      <title>Concurrency</title>

      <para>Class loads can occur at any time and Weaving Hook services must
      be able to handle concurrent as well as re-entrant calls to the weave
      method. The framework should not hold any locks when calling the Weaving
      Hook services, and Weaving Hook service implementations must be
      thread-safe. Furthermore Weaving Hook services may be re-entrant, and
      should be careful to avoid cycles when weaving.</para>

      <para>For example when a class is being woven, the Weaving Hook may
      implicitly load a class by having a reference to it or the Weaving Hook
      can explicitly load a class. This new class load will also pass through
      the Weaving Hook service, so care must be taken to avoid infinite
      looping.</para>
    </section>

    <section>
      <title>Error Handling</title>

      <para>Weaving hooks are very low level and care must be taken by the
      Weaving Hook services to not disrupt normal class loading. In the case
      that a weaving hook throws an unexpected exception the framework must do
      the following:</para>

      <orderedlist>
        <listitem>
          <para>If the exception is not a Weaving Exception:</para>

          <itemizedlist>
            <listitem>
              <para>The framework must deny list the weaving hook registration
              and never call that Weaving Hook service again as long as it is
              registered. This Weaving Hook service is considered
              <emphasis>deny listed</emphasis>.</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>A framework event of type <code>ERROR</code> should be
          published that must include the Exception thrown by the Weaving Hook
          service. The source must be the bundle registering the Weaving Hook
          service.</para>
        </listitem>

        <listitem>
          <para>The <code>WovenClass</code> object must be marked as complete.
          All remaining Weaving Hook services must be skipped.</para>
        </listitem>

        <listitem>
          <para>The bundle class loader must throw a
          <code>ClassFormatError</code> with the cause being the exception
          thrown by the Weaving Hook service.</para>
        </listitem>
      </orderedlist>
    </section>
  </section>

  <section xml:id="framework.weavinghooks-wovenclasslistener">
    <title>Woven Class Listener</title>

    <para>The Woven Class Listener service is a <xref linkend="framework.weavinghooks-whiteboard.pattern.ref"/> service. Any
    party that wants to receive notifications of woven class state transitions
    can register such a service. The framework obtains the Woven Class
    Listener services and calls their <xref linkend="org.osgi.framework.hooks.weaving.WovenClassListener.modified-WovenClass-" xrefstyle="hyperlink"/> method whenever a Woven Class undergoes a state
    transition. The framework must not obtain Woven Class Listener services if there
    are no Weaving Hook services registered. In this case, if the party needs to receive
    notifications of woven class state transitions then a no-op Weaving Hook service implementation
    can be registered to ensure Woven Class Listener services are called.</para>

    <para>The Woven Class Listener <code>modified</code> method is called with
    a <xref linkend="org.osgi.framework.hooks.weaving.WovenClass" xrefstyle="hyperlink"/> object that represents the woven class that
    underwent a state transition. The method must be called in a privileged
    block. See <xref linkend="framework.lifecycle.privilegedcallbacks"/>.</para>

    <para>The following diagram depicts the state transitions of a Woven
    Class.</para>

    <figure>
      <title>Woven Class State Diagram</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="2.017in" contentwidth="7.125in" fileref="wovenClass-states.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>Woven Class Listeners are not notified of the <xref linkend="org.osgi.framework.hooks.weaving.WovenClass.TRANSFORMING" xrefstyle="hyperlink"/> state because the Woven Class is mutable and
    listeners are not permitted to mutate the Woven Class. For all states
    observed by Woven Class Listeners, the Woven Class is effectively
    immutable. The first notification received for a given Woven Class is
    either the <xref linkend="org.osgi.framework.hooks.weaving.WovenClass.TRANSFORMED" xrefstyle="hyperlink"/> or <xref linkend="org.osgi.framework.hooks.weaving.WovenClass.TRANSFORMING_FAILED" xrefstyle="hyperlink"/> state. The <xref linkend="org.osgi.framework.hooks.weaving.WovenClass.TRANSFORMED" xrefstyle="hyperlink"/> state occurs after all Weaving Hooks have been
    notified but before the class has been defined or the bundle wiring has
    been updated for any additional dynamic imports. The <xref linkend="org.osgi.framework.hooks.weaving.WovenClass.TRANSFORMING_FAILED" xrefstyle="hyperlink"/> state occurs if any Weaving Hook throws an
    exception. After the <xref linkend="org.osgi.framework.hooks.weaving.WovenClass.TRANSFORMED" xrefstyle="hyperlink"/> state, a Woven Class can transition to either the
    <xref linkend="org.osgi.framework.hooks.weaving.WovenClass.DEFINED" xrefstyle="hyperlink"/> state or the <xref linkend="org.osgi.framework.hooks.weaving.WovenClass.DEFINE_FAILED" xrefstyle="hyperlink"/> state. The <xref linkend="org.osgi.framework.hooks.weaving.WovenClass.DEFINED" xrefstyle="hyperlink"/> state occurs when the class was defined
    successfully and after the bundle wiring has been updated. The <xref linkend="org.osgi.framework.hooks.weaving.WovenClass.DEFINE_FAILED" xrefstyle="hyperlink"/> state occurs if a class definition error
    occurred.</para>

    <para><xref linkend="framework.weavinghooks-woven.class.state.table"/>
    describes the states of a Woven Class in more detail.</para>

    <table xml:id="framework.weavinghooks-woven.class.state.table">
      <title>Woven Class State Table</title>

      <tgroup cols="2">
        <colspec colnum="1" colwidth="1.5*"/>

        <colspec colnum="2" colwidth="3*"/>

        <thead>
          <row>
            <entry>State</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><para><xref linkend="org.osgi.framework.hooks.weaving.WovenClass.TRANSFORMING" xrefstyle="hyperlink"/></para></entry>

            <entry><para>A bundle class load request was
            made.</para><itemizedlist>
                <listitem>
                  <para>Weaving is incomplete.</para>
                </listitem>

                <listitem>
                  <para>The class is undefined.</para>
                </listitem>

                <listitem>
                  <para>The Woven Class is mutable.</para>
                </listitem>

                <listitem>
                  <para>Weaving Hooks are notified but Woven Class Listeners
                  are not.</para>
                </listitem>
              </itemizedlist></entry>
          </row>

          <row>
            <entry><para><xref linkend="org.osgi.framework.hooks.weaving.WovenClass.TRANSFORMED" xrefstyle="hyperlink"/></para></entry>

            <entry><para>All Weaving Hooks have been
            notified.</para><itemizedlist>
                <listitem>
                  <para>Weaving is complete.</para>
                </listitem>

                <listitem>
                  <para>The class is undefined.</para>
                </listitem>

                <listitem>
                  <para>The Woven Class is effectively immutable.</para>
                </listitem>

                <listitem>
                  <para>Woven Class Listeners are notified.</para>
                </listitem>
              </itemizedlist></entry>
          </row>

          <row>
            <entry><para><xref linkend="org.osgi.framework.hooks.weaving.WovenClass.TRANSFORMING_FAILED" xrefstyle="hyperlink"/></para></entry>

            <entry><para>A Weaving Hook threw an
            exception.</para><itemizedlist>
                <listitem>
                  <para>Weaving is incomplete.</para>
                </listitem>

                <listitem>
                  <para>The class is undefined.</para>
                </listitem>

                <listitem>
                  <para>The Woven Class is effectively immutable.</para>
                </listitem>

                <listitem>
                  <para>Woven Class Listeners are notified.</para>
                </listitem>
              </itemizedlist></entry>
          </row>

          <row>
            <entry><para><xref linkend="org.osgi.framework.hooks.weaving.WovenClass.DEFINED" xrefstyle="hyperlink"/></para></entry>

            <entry><para>All Woven Class Listeners have been notified. The
            class has been defined.</para><itemizedlist>
                <listitem>
                  <para>Weaving is complete.</para>
                </listitem>

                <listitem>
                  <para>The class is defined.</para>
                </listitem>

                <listitem>
                  <para>The Woven Class is effectively immutable.</para>
                </listitem>

                <listitem>
                  <para>Woven Class Listeners are notified.</para>
                </listitem>
              </itemizedlist></entry>
          </row>

          <row>
            <entry><para><xref linkend="org.osgi.framework.hooks.weaving.WovenClass.DEFINE_FAILED" xrefstyle="hyperlink"/></para></entry>

            <entry><para>All Weaving Hooks have been notified. A class
            definition failure occurred.</para><itemizedlist>
                <listitem>
                  <para>Weaving is complete.</para>
                </listitem>

                <listitem>
                  <para>The class is undefined.</para>
                </listitem>

                <listitem>
                  <para>The Woven Class is effectively immutable.</para>
                </listitem>

                <listitem>
                  <para>Woven Class Listeners are notified.</para>
                </listitem>
              </itemizedlist></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <section>
      <title>Concurrency</title>

      <para>Class loads can occur at any time, and Woven Class Listeners must
      be able to handle concurrent calls to the <code>modified</code> method.
      The framework should not hold any locks when calling Woven Class
      Listeners, and Woven Class Listener implementations must be thread-safe.
      Woven Class Listeners must be synchronously called by the framework when
      a Woven Class completes a state transition. The woven class processing
      will not proceed until all Woven Class Listeners are done.</para>
    </section>

    <section>
      <title>Error Handling</title>

      <para>Woven Class Listeners must not cause the weaving process to fail.
      If a Woven Class Listener throws an exception, the framework should log
      the exception but otherwise ignore it.</para>
    </section>
  </section>

  <section>
    <title>Security</title>

    <section>
      <title>Weaving Hooks</title>

      <para>All hooks described in this specification are highly complex
      facilities that require great care in their implementation to maintain
      the Framework invariants. It is therefore important that in a secure
      system the permission to register these hooks is only given to
      privileged bundles.</para>

      <para>In this case, the user of the hook services is the framework.
      Therefore, there is never a need to provide:</para>

      <itemizedlist>
        <listitem>
          <para><code>ServicePermission[..WeavingHook,GET]</code></para>
        </listitem>
      </itemizedlist>

      <para>Implementers of these hooks must have:</para>

      <itemizedlist>
        <listitem>
          <para><code>ServicePermission[..WeavingHook,REGISTER]</code> for
          Weaving Hook services.</para>
        </listitem>
      </itemizedlist>

      <para>In addition, a Weaving Hook must have Admin Permission with the
      <xref linkend="org.osgi.framework.AdminPermission.WEAVE" xrefstyle="hyperlink"/> action to be able to use the methods on the
      <code>WovenClass</code> object that mutate the state like <xref linkend="org.osgi.framework.hooks.weaving.WovenClass.setBytes-byte---" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.framework.hooks.weaving.WovenClass.getBytes--" xrefstyle="hyperlink"/>, and the mutating methods on the list returned
      by <xref linkend="org.osgi.framework.hooks.weaving.WovenClass.getDynamicImports--" xrefstyle="hyperlink"/>. Moreover, a Weaving Hook must have Package
      Permission with the <code>IMPORT</code> action in order to add or
      replace dynamic imports.</para>
    </section>

    <section>
      <title>Woven Bundles</title>

      <para>The Framework must grant implied <code>PackagePermission[somePkg,
      IMPORT]</code> permissions to bundles whose classes are being woven with
      additional dynamic imports, assuming the weaver has a matching package
      import permission. The permission check for the weaver must occur during
      any call to the list that results in the addition or setting of a
      dynamic import. If the check fails, a SecurityException must be thrown.
      If it succeeds, the implied permission must be granted to the woven
      bundle immediately before defining the class.</para>
    </section>

    <section>
      <title>Woven Class Listeners</title>

      <para>Implementers of these listeners must have:</para>

      <itemizedlist>
        <listitem>
          <para><code>ServicePermission[..WovenClassListener,REGISTER]</code>
          for Woven Class Listener services.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section xreflabel="org.osgi.framework.hooks.weaving" version="5" role="package" xml:id="org.osgi.framework.hooks.weaving" xml:base="056/../../../generated/javadoc/docbook/org.osgi.framework.hooks.weaving.xml">
   <title>org.osgi.framework.hooks.weaving</title>
   <info>
      <releaseinfo xml:id="org.osgi.framework.hooks.weaving-version">Version 1.1</releaseinfo>
      <edition xml:id="org.osgi.framework.hooks.weaving-version.number">1.1</edition>
   </info>
   <para>
Framework Weaving Hooks Package Version 1.1.

 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest.
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.framework.hooks.weaving; version="[1.1,2.0)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.hooks.weaving.WeavingException">
                  <code>WeavingException</code>
               </link> -
A weaving exception used to indicate that the class load should be failed but
 the weaving hook must not be deny listed by the framework.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.hooks.weaving.WeavingHook">
                  <code>WeavingHook</code>
               </link> -
OSGi Framework Weaving Hook Service.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.hooks.weaving.WovenClass">
                  <code>WovenClass</code>
               </link> -
A class being woven.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.hooks.weaving.WovenClassListener">
                  <code>WovenClassListener</code>
               </link> -
Woven Class Listener Service.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section xreflabel="WeavingException" role="class" xml:id="org.osgi.framework.hooks.weaving.WeavingException">
      <title>public class WeavingException<?line-break?> extends RuntimeException</title>
      <para>
A weaving exception used to indicate that the class load should be failed but
 the weaving hook must not be deny listed by the framework.
 </para>
      <para>
 This exception conforms to the general purpose exception chaining mechanism.</para>
      <section xreflabel="WeavingException(String,Throwable)" role="method" xml:id="org.osgi.framework.hooks.weaving.WeavingException.WeavingException-String-Throwable-">
         <title>public  WeavingException(String msg, Throwable cause)</title>
         <formalpara role="parameter">
            <title>msg</title>
            <para>The associated message.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>cause</title>
            <para>The cause of this exception.</para>
         </formalpara>
         <para role="description">
Creates a <code>WeavingException</code> with the specified message and
 exception cause.
   </para>
      </section>
      <section xreflabel="WeavingException(String)" role="method" xml:id="org.osgi.framework.hooks.weaving.WeavingException.WeavingException-String-">
         <title>public  WeavingException(String msg)</title>
         <formalpara role="parameter">
            <title>msg</title>
            <para>The message.</para>
         </formalpara>
         <para role="description">
Creates a <code>WeavingException</code> with the specified message.
   </para>
      </section>
   </section>
   <section xreflabel="WeavingHook" role="class" xml:id="org.osgi.framework.hooks.weaving.WeavingHook">
      <title>public interface WeavingHook</title>
      <para>
OSGi Framework Weaving Hook Service.

 </para>
      <para>
 Bundles registering this service will be called during framework class
 loading operations. Weaving hook services are called when a class is being
 loaded by the framework and have an opportunity to transform the class file
 bytes that represents the class being loaded. Weaving hooks may also ask the
 framework to wire in additional dynamic imports to the bundle.

 </para>
      <para>
 When a class is being loaded, the framework will create a <link linkend="org.osgi.framework.hooks.weaving.WovenClass">WovenClass</link>
 object for the class and pass it to each registered weaving hook service for
 possible modification. The first weaving hook called will see the original
 class file bytes. Subsequently called weaving hooks will see the class file
 bytes as modified by previously called weaving hooks.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section xreflabel="weave(WovenClass)" role="method" xml:id="org.osgi.framework.hooks.weaving.WeavingHook.weave-WovenClass-">
         <title>public void weave(WovenClass wovenClass)</title>
         <formalpara role="parameter">
            <title>wovenClass</title>
            <para>The <link linkend="org.osgi.framework.hooks.weaving.WovenClass">WovenClass</link> object that represents the data
            that will be used to define the class.</para>
         </formalpara>
         <para role="description">
Weaving hook method.
 </para>
         <para>
 This method can modify the specified woven class object to weave the
 class being defined.
 </para>
         <para>
 If this method throws any exception, the framework must log the exception
 and fail the class load in progress. This weaving hook service must be
 deny listed by the framework and must not be called again. The deny
 listing of this weaving hook service must expire when this weaving hook
 service is unregistered. However, this method can throw a
 <link linkend="org.osgi.framework.hooks.weaving.WeavingException">WeavingException</link> to deliberately fail the class load in progress
 without being deny listed by the framework.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>WeavingException</code>– If this weaving hook wants to deliberately fail
             the class load in progress without being deny listed by the
             framework</para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="WovenClass" role="class" xml:id="org.osgi.framework.hooks.weaving.WovenClass">
      <title>public interface WovenClass</title>
      <para>
A class being woven.

 This object represents a class being woven and is passed to each
 <link linkend="org.osgi.framework.hooks.weaving.WeavingHook">WeavingHook</link> for possible modification. It allows access to the most
 recently transformed class file bytes and to any additional packages that
 should be added to the bundle as dynamic imports.

 </para>
      <para>
 Upon entering one of the terminal states, this object becomes effectively
 immutable.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section xreflabel="DEFINE_FAILED" role="field" xml:id="org.osgi.framework.hooks.weaving.WovenClass.DEFINE_FAILED">
         <title>public static final int DEFINE_FAILED = 16</title>
         <para>
The woven class failed to define.
 </para>
         <para>
 The woven class is in this state when a failure occurs while defining the
 class. The woven class cannot be further transformed or defined. This is
 a terminal state. Upon entering this state, this object is effectively
 immutable.</para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section xreflabel="DEFINED" role="field" xml:id="org.osgi.framework.hooks.weaving.WovenClass.DEFINED">
         <title>public static final int DEFINED = 4</title>
         <para>
The woven class has been defined.
 </para>
         <para>
 The woven class is in this state after the class is defined. The woven
 class cannot be further transformed. This is a terminal state. Upon
 entering this state, this object is effectively immutable, the
 <link linkend="org.osgi.framework.hooks.weaving.WovenClass.getBundleWiring--">bundle wiring</link> has been updated with the
 <link linkend="org.osgi.framework.hooks.weaving.WovenClass.getDynamicImports--">dynamic import requirements</link> and the class
 has been <link linkend="org.osgi.framework.hooks.weaving.WovenClass.getDefinedClass--">defined</link>.</para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section xreflabel="TRANSFORMED" role="field" xml:id="org.osgi.framework.hooks.weaving.WovenClass.TRANSFORMED">
         <title>public static final int TRANSFORMED = 2</title>
         <para>
The woven class has been transformed.

 </para>
         <para>
 The woven class is in this state after <link linkend="org.osgi.framework.hooks.weaving.WeavingHook">weaving hooks</link>
 have been called and before the class is defined. The woven class cannot
 be further transformed. The woven class is in this state while defining
 the class. If a failure occurs while defining the class, the state
 transitions to <link linkend="org.osgi.framework.hooks.weaving.WovenClass.DEFINE_FAILED">DEFINE_FAILED</link>. Otherwise, after the class has
 been defined, the state transitions to <link linkend="org.osgi.framework.hooks.weaving.WovenClass.DEFINED">DEFINED</link>.</para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section xreflabel="TRANSFORMING" role="field" xml:id="org.osgi.framework.hooks.weaving.WovenClass.TRANSFORMING">
         <title>public static final int TRANSFORMING = 1</title>
         <para>
The woven class is being transformed.

 </para>
         <para>
 The woven class is in this state while <link linkend="org.osgi.framework.hooks.weaving.WeavingHook">weaving hooks</link>
 are being called. The woven class is mutable so the <link linkend="org.osgi.framework.hooks.weaving.WovenClass.getBytes--">class bytes</link> may be <link linkend="org.osgi.framework.hooks.weaving.WovenClass.setBytes-byte---">modified</link> and
 <link linkend="org.osgi.framework.hooks.weaving.WovenClass.getDynamicImports--">dynamic imports</link> may be added. If a weaving
 hook throws an exception the state transitions to
 <link linkend="org.osgi.framework.hooks.weaving.WovenClass.TRANSFORMING_FAILED">TRANSFORMING_FAILED</link>. Otherwise, after the last weaving hook has
 been successfully called, the state transitions to <link linkend="org.osgi.framework.hooks.weaving.WovenClass.TRANSFORMED">TRANSFORMED</link>.</para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section xreflabel="TRANSFORMING_FAILED" role="field" xml:id="org.osgi.framework.hooks.weaving.WovenClass.TRANSFORMING_FAILED">
         <title>public static final int TRANSFORMING_FAILED = 8</title>
         <para>
The woven class failed to transform.
 </para>
         <para>
 The woven class is in this state if a <link linkend="org.osgi.framework.hooks.weaving.WeavingHook">weaving hook</link>
 threw an exception. The woven class cannot be further transformed or
 defined. This is a terminal state. Upon entering this state, this object
 is effectively immutable.</para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section xreflabel="getBundleWiring()" role="method" xml:id="org.osgi.framework.hooks.weaving.WovenClass.getBundleWiring--">
         <title>public BundleWiring getBundleWiring()</title>
         <para role="description">
Returns the bundle wiring whose class loader will define the woven class.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The bundle wiring whose class loader will define the woven class.</para>
         </formalpara>
      </section>
      <section xreflabel="getBytes()" role="method" xml:id="org.osgi.framework.hooks.weaving.WovenClass.getBytes--">
         <title>public byte[] getBytes()</title>
         <para role="description">
Returns the class file bytes to be used to define the
 <link linkend="org.osgi.framework.hooks.weaving.WovenClass.getClassName--">named</link> class.

 </para>
         <para>
 While in the <link linkend="org.osgi.framework.hooks.weaving.WovenClass.TRANSFORMING">TRANSFORMING</link> state, this method returns a reference
 to the class files byte array contained in this object. After leaving the
 <link linkend="org.osgi.framework.hooks.weaving.WovenClass.TRANSFORMING">TRANSFORMING</link> state, this woven class can no longer be
 transformed and a copy of the class file byte array is returned.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The bytes to be used to define the
         <link linkend="org.osgi.framework.hooks.weaving.WovenClass.getClassName--">named</link> class.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have
         <code>AdminPermission[bundle,WEAVE]</code> and the Java runtime
         environment supports permissions.</para>
         </formalpara>
      </section>
      <section xreflabel="getClassName()" role="method" xml:id="org.osgi.framework.hooks.weaving.WovenClass.getClassName--">
         <title>public String getClassName()</title>
         <para role="description">
Returns the fully qualified name of the class being woven.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The fully qualified name of the class being woven.</para>
         </formalpara>
      </section>
      <section xreflabel="getDefinedClass()" role="method" xml:id="org.osgi.framework.hooks.weaving.WovenClass.getDefinedClass--">
         <title>public Class&lt;?&gt; getDefinedClass()</title>
         <para role="description">
Returns the class defined by this woven class. During weaving, this
 method will return <code>null</code>. Once weaving is
 <link linkend="org.osgi.framework.hooks.weaving.WovenClass.isWeavingComplete--">complete</link>, this method will return the class
 object if this woven class was used to define the class.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The class associated with this woven class, or <code>null</code> if
         weaving is not complete, the class definition failed or this
         woven class was not used to define the class.</para>
         </formalpara>
      </section>
      <section xreflabel="getDynamicImports()" role="method" xml:id="org.osgi.framework.hooks.weaving.WovenClass.getDynamicImports--">
         <title>public List&lt;String&gt; getDynamicImports()</title>
         <para role="description">
Returns the list of dynamic import package descriptions to add to the
 <link linkend="org.osgi.framework.hooks.weaving.WovenClass.getBundleWiring--">bundle wiring</link> for this woven class. Changes
 made to the returned list will be visible to later <link linkend="org.osgi.framework.hooks.weaving.WeavingHook">weaving hooks</link> called with this object. The returned list must not be
 modified outside invocations of the <link linkend="org.osgi.framework.hooks.weaving.WeavingHook.weave-WovenClass-">weave</link> method by the framework.

 </para>
         <para>
 After leaving the <link linkend="org.osgi.framework.hooks.weaving.WovenClass.TRANSFORMING">TRANSFORMING</link> state, this woven class can no
 longer be transformed and the returned list will be unmodifiable.

 </para>
         <para>
 If the Java runtime environment supports permissions, any modification to
 the returned list requires <code>AdminPermission[bundle,WEAVE]</code>.
 Additionally, any add or set modification requires
 <code>PackagePermission[package,IMPORT]</code>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A list containing zero or more dynamic import package
         descriptions to add to the bundle wiring for this woven class.
         This list must throw <code>IllegalArgumentException</code> if a
         malformed dynamic import package description is added.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>Core Specification, Dynamic Import Package, for the syntax of a dynamic import package description.</code>
            </para>
         </formalpara>
      </section>
      <section xreflabel="getProtectionDomain()" role="method" xml:id="org.osgi.framework.hooks.weaving.WovenClass.getProtectionDomain--">
         <title>public ProtectionDomain getProtectionDomain()</title>
         <para role="description">
Returns the protection domain to which the woven class will be assigned
 when it is defined.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The protection domain to which the woven class will be assigned
         when it is defined, or <code>null</code> if no protection domain will
         be assigned.</para>
         </formalpara>
      </section>
      <section xreflabel="getState()" role="method" xml:id="org.osgi.framework.hooks.weaving.WovenClass.getState--">
         <title>public int getState()</title>
         <para role="description">
Returns the current state of this woven class.
 </para>
         <para>
 A woven class can be in only one state at any time.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Either <link linkend="org.osgi.framework.hooks.weaving.WovenClass.TRANSFORMING">TRANSFORMING</link>, <link linkend="org.osgi.framework.hooks.weaving.WovenClass.TRANSFORMED">TRANSFORMED</link>,
         <link linkend="org.osgi.framework.hooks.weaving.WovenClass.DEFINED">DEFINED</link>, <link linkend="org.osgi.framework.hooks.weaving.WovenClass.TRANSFORMING_FAILED">TRANSFORMING_FAILED</link> or
         <link linkend="org.osgi.framework.hooks.weaving.WovenClass.DEFINE_FAILED">DEFINE_FAILED</link>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section xreflabel="isWeavingComplete()" role="method" xml:id="org.osgi.framework.hooks.weaving.WovenClass.isWeavingComplete--">
         <title>public boolean isWeavingComplete()</title>
         <para role="description">
Returns whether weaving is complete in this woven class. Weaving is
 complete after the class is defined.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if <link linkend="org.osgi.framework.hooks.weaving.WovenClass.getState--">state</link> is <link linkend="org.osgi.framework.hooks.weaving.WovenClass.DEFINED">DEFINED</link>,
         <link linkend="org.osgi.framework.hooks.weaving.WovenClass.TRANSFORMING_FAILED">TRANSFORMING_FAILED</link> or <link linkend="org.osgi.framework.hooks.weaving.WovenClass.DEFINE_FAILED">DEFINE_FAILED</link>;
         <code>false</code> otherwise.</para>
         </formalpara>
      </section>
      <section xreflabel="setBytes(byte[])" role="method" xml:id="org.osgi.framework.hooks.weaving.WovenClass.setBytes-byte---">
         <title>public void setBytes(byte[] newBytes)</title>
         <formalpara role="parameter">
            <title>newBytes</title>
            <para>The new classfile that will be used to define the
        <link linkend="org.osgi.framework.hooks.weaving.WovenClass.getClassName--">named</link> class. The specified array
        is retained by this object and the caller must not modify the
        specified array.</para>
         </formalpara>
         <para role="description">
Set the class file bytes to be used to define the
 <link linkend="org.osgi.framework.hooks.weaving.WovenClass.getClassName--">named</link> class. This method must not be
 called outside invocations of the <link linkend="org.osgi.framework.hooks.weaving.WeavingHook.weave-WovenClass-">weave</link> method by the framework.

 </para>
         <para>
 While in the <link linkend="org.osgi.framework.hooks.weaving.WovenClass.TRANSFORMING">TRANSFORMING</link> state, this method replaces the
 reference to the array contained in this object with the specified array.
 After leaving the <link linkend="org.osgi.framework.hooks.weaving.WovenClass.TRANSFORMING">TRANSFORMING</link> state, this woven class can no
 longer be transformed and this method will throw an
 IllegalStateException.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>NullPointerException</code>– If newBytes is <code>null</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If state is <link linkend="org.osgi.framework.hooks.weaving.WovenClass.TRANSFORMED">TRANSFORMED</link>,
         <link linkend="org.osgi.framework.hooks.weaving.WovenClass.DEFINED">DEFINED</link>, <link linkend="org.osgi.framework.hooks.weaving.WovenClass.TRANSFORMING_FAILED">TRANSFORMING_FAILED</link> or
         <link linkend="org.osgi.framework.hooks.weaving.WovenClass.DEFINE_FAILED">DEFINE_FAILED</link>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have
         <code>AdminPermission[bundle,WEAVE]</code> and the Java runtime
         environment supports permissions.</para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="WovenClassListener" role="class" xml:id="org.osgi.framework.hooks.weaving.WovenClassListener">
      <title>public interface WovenClassListener</title>
      <para>
Woven Class Listener Service.

 </para>
      <para>
 Bundles registering this service will receive notifications whenever a
 <link linkend="org.osgi.framework.hooks.weaving.WovenClass">woven class</link> completes a <link linkend="org.osgi.framework.hooks.weaving.WovenClass.getState--">state</link> transition. Woven Class Listeners are not able to modify the woven
 class in contrast with <link linkend="org.osgi.framework.hooks.weaving.WeavingHook">weaving hooks</link>.

 </para>
      <para>
 Receiving a woven class in the <link linkend="org.osgi.framework.hooks.weaving.WovenClass.TRANSFORMED">TRANSFORMED</link>
 state allows listeners to observe the modified <link linkend="org.osgi.framework.hooks.weaving.WovenClass.getBytes--">byte codes</link> before the class has been <link linkend="org.osgi.framework.hooks.weaving.WovenClass.DEFINED">DEFINED</link> as
 well as the additional <link linkend="org.osgi.framework.hooks.weaving.WovenClass.getDynamicImports--">dynamic imports</link>
 before the <link linkend="org.osgi.framework.hooks.weaving.WovenClass.getBundleWiring--">bundle wiring</link> has been
 updated.

 </para>
      <para>
 Woven class listeners are synchronously <link linkend="org.osgi.framework.hooks.weaving.WovenClassListener.modified-WovenClass-">called</link>
 when a woven class completes a state transition. The woven class processing
 will not proceed until all woven class listeners are done.

 </para>
      <para>
 If the Java runtime environment supports permissions, the caller must have
 <code>ServicePermission[WovenClassListener,REGISTER]</code> in order to register a
 listener.</para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.1</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section xreflabel="modified(WovenClass)" role="method" xml:id="org.osgi.framework.hooks.weaving.WovenClassListener.modified-WovenClass-">
         <title>public void modified(WovenClass wovenClass)</title>
         <formalpara role="parameter">
            <title>wovenClass</title>
            <para>The woven class that completed a state transition.</para>
         </formalpara>
         <para role="description">
Receives notification that a <link linkend="org.osgi.framework.hooks.weaving.WovenClass">woven class</link> has completed
 a state transition.

 </para>
         <para>
 The listener will be notified when a woven class has entered the
 <link linkend="org.osgi.framework.hooks.weaving.WovenClass.TRANSFORMED">TRANSFORMED</link>, <link linkend="org.osgi.framework.hooks.weaving.WovenClass.DEFINED">DEFINED</link>, <link linkend="org.osgi.framework.hooks.weaving.WovenClass.TRANSFORMING_FAILED">TRANSFORMING_FAILED</link> and
 <link linkend="org.osgi.framework.hooks.weaving.WovenClass.DEFINE_FAILED">DEFINE_FAILED</link> states.

 </para>
         <para>
 If this method throws any exception, the Framework must log the exception
 but otherwise ignore it.</para>
      </section>
   </section>
</section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="framework.weavinghooks-whiteboard.pattern.ref"><title>Whiteboard
      Pattern</title><biblioid class="uri"><link xlink:href="https://docs.osgi.org/whitepaper/whiteboard-pattern/"/></biblioid></bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter label="57" revision="$Id: 5ed881bc660eb7ea8ee7ecb52e14feb6e30ca92b $" version="5.0" xml:id="framework.dto" xml:base="057/framework.dto.xml">
  <title>Data Transfer Objects Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.dto-version" linkend="org.osgi.dto"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>The OSGi API is rich and introspective supporting the local
    management of bundles, services and other items. Since the API has a lot
    of behavior and is not designed for serialization, any management model
    must design its own representation of the relevant OSGi objects for
    communication with remote management systems. We see this in the
    Management Model Specification for JMX™ Technology, the Dmt Admin Service
    Specification and Residential Device Management Tree Specification: the
    Management Model Specification for JMX™ Technology must define the MBeans
    and the Residential Device Management Tree Specification must define the
    tree representation.</para>

    <para>The OSGi API continues to evolve and at each update of the OSGi API,
    the management models will all need to update their representations of the
    OSGi objects. Having standard, simple, easy to serialize and deserialize
    objects which represent the relevant OSGi objects will make it easier for
    the management model to keep up with changes in the OSGi API. Therefore,
    this specification defines Data Transfer Objects for OSGi in general and
    well as specific Data Transfer Objects for the Core specification. Other
    OSGi specifications may be updated over time to define Data Transfer
    Objects specific to their domain.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Easy Serialization/Deserialization</emphasis> - Must
          be easily serializable. That is, no special
          serialization/deserialization logic must be required. Serialization
          must be possible simply by introspection and object graphs must be a
          tree.</para>
        </listitem>

        <listitem>
          <para><emphasis>No Behavior</emphasis> - Must have no behavior. That
          is, no methods other than the default public constructor.</para>
        </listitem>

        <listitem>
          <para><emphasis>Public</emphasis> - Must have only public fields.
          That is, no private implementation detail.</para>
        </listitem>

        <listitem>
          <para><emphasis>Limited Field Types</emphasis> - Must only use a
          limited selection of field types.</para>
        </listitem>

        <listitem>
          <para><emphasis>Extendable</emphasis> - May extend other Data
          Transfer Object types.</para>
        </listitem>

        <listitem>
          <para><emphasis>Snapshot</emphasis> - Does not track changes to
          represented runtime object.</para>
        </listitem>

        <listitem>
          <para><emphasis>Not Thread Safe</emphasis> - External
          synchronization is needed.</para>
        </listitem>

        <listitem>
          <para><emphasis>Instantiation</emphasis> - A means is provided to
          create Data Transfer Objects for the runtime objects they
          represent.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Data Transfer Object (DTO)</emphasis> - An object
          for carrying data between processes. A Data Transfer Object does not
          have any behavior. See <xref linkend="framework.dto.references-dto"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Runtime Object</emphasis> - A runtime object being
          represented by a Data Transfer Object. The runtime object can have
          complex behavior.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section>
    <title>Data Transfer Object</title>

    <para>A Data Transfer Object is used to represent the state of a related
    runtime object in a form suitable for easy transfer to some receiver. The
    receiver can be in the same Java VM but is more likely in another process
    or on another system that is remote. All Data Transfer Objects are easily
    serializable having only public fields of a limited set of type. These
    types are:</para>

    <para><itemizedlist>
        <listitem>
          <para>Primitive types</para>
        </listitem>

        <listitem>
          <para>Wrapper classes for the primitive types</para>
        </listitem>

        <listitem>
          <para><code>String</code></para>
        </listitem>

        <listitem>
          <para>enum</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.framework.Version" xrefstyle="hyperlink"/></para>
        </listitem>

        <listitem>
          <para>Data Transfer Objects</para>
        </listitem>

        <listitem>
          <para><code>List</code></para>
        </listitem>

        <listitem>
          <para><code>Set</code></para>
        </listitem>

        <listitem>
          <para><code>Map</code></para>
        </listitem>

        <listitem>
          <para>array</para>
        </listitem>
      </itemizedlist></para>

    <para>The List, Set, Map and array aggregates must only hold objects of
    the listed types. The types for Map keys are limited to primitive wrapper
    classes, <code>String</code>, enums, and <code>Version</code>.</para>

    <para>Data Transfer Objects are public classes with no methods, other than
    the compiler supplied default constructor, having only public fields
    limited to the easily serializable types mentioned above. The <xref linkend="org.osgi.dto" xrefstyle="hyperlink"/> package defines the basic
    rules and the abstract base <xref linkend="org.osgi.dto.DTO" xrefstyle="hyperlink"/> class which Data Transfer Objects must
    extend.</para>

    <para>A Data Transfer Object is a representation of a runtime object at
    the point in time the Data Transfer Object was created. Data Transfer
    Objects do not track state changes in the represented runtime object.
    Since Data Transfer Objects are simply fields with no method behavior,
    modifications to Data Transfer Object are inherently not thread safe. Care
    must be taken to safely publish Data Transfer Objects for use by other
    threads as well as proper synchronization if a Data Transfer Object is
    mutated by one of the threads.</para>

    <para>The object graph from a Data Transfer Object must be a tree to
    simplify serialization and deserialization.</para>

    <section>
      <title>Naming Conventions</title>

      <para>Data Transfer Objects should follow a naming convention for the
      package containing the Data Transfer Object as well as the Data Transfer
      Object type. For the package name, we start with the package name
      containing the runtime type for which the Data Transfer Object is a
      representation. A <code>dto</code> segment is suffixed to the package
      name. For example, a Data Transfer Object representing a runtime type in
      the <code>org.osgi.service.foo</code> package will be in the Data
      Transfer Object package name is
      <code>org.osgi.service.foo.dto</code>.</para>

      <para>The name of the Data Transfer Object type should be the name of
      the runtime type for which the Data Transfer Object is a representation
      followed by <code>DTO</code>. So for a type <code>Widget</code>, the
      Data Transfer Object for that type should be <code>WidgetDTO</code>.
      Sometimes the entity for which the Data Transfer Object provides a
      representation does not exists as a runtime type. In this case, the name
      of entity with a <code>DTO</code> suffix should be used. For example,
      <code>EntityDTO</code>.</para>

      <para>Putting both the package and type Data Transfer Object naming
      conventions together, the fully qualified name for the Data Transfer
      Object representing the runtime type
      <code>org.osgi.service.foo.Widget</code> would be
      <code>org.osgi.service.foo.dto.WidgetDTO</code>.</para>
    </section>
  </section>

  <section>
    <title>Core Data Transfer Objects</title>

    <para>Data Transfer Objects are defined for several important Core
    specification objects including <code>Bundle</code>, the Framework, and
    <code>ServiceReference</code> as well as the Resource API types, Start
    Level API types and Bundle Wiring API types.</para>

    <section>
      <title>Framework Data Transfer Objects</title>

      <para>A <xref linkend="org.osgi.framework.dto.BundleDTO" xrefstyle="hyperlink"/> represents information about a single bundle
      such as the id of the bundle, the current state of the bundle and the
      symbolic name and version of the bundle.</para>

      <para>A <xref linkend="org.osgi.framework.dto.ServiceReferenceDTO" xrefstyle="hyperlink"/> represents information about a single registered
      service such as the service properties, the bundle which registered the
      service and the bundles using the service.</para>

      <para>A <xref linkend="org.osgi.framework.dto.FrameworkDTO" xrefstyle="hyperlink"/> represents information about the Framework such
      as the list of installed bundles, the registered services and the launch
      properties of the framework.</para>
    </section>

    <section>
      <title>Resource API Data Transfer Objects</title>

      <para><xref linkend="org.osgi.resource.dto.CapabilityDTO" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.resource.dto.RequirementDTO" xrefstyle="hyperlink"/>,
      <xref linkend="org.osgi.resource.dto.ResourceDTO" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.resource.dto.WiringDTO" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.resource.dto.WireDTO" xrefstyle="hyperlink"/>
      represent the capabilities and requirements wiring information of the
      Resource API. The following figure shows the effective relationship
      between these Data Transfer Object types. Since the graph of Data
      Transfer Objects must be a tree, some references are indirect.</para>

      <figure>
        <title>Resource API Data Transfer Objects</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.437in" contentwidth="4.959in" fileref="resourcedto-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Bundle Wiring API Data Transfer Objects</title>

      <para><xref linkend="org.osgi.framework.wiring.dto.BundleRevisionDTO" xrefstyle="hyperlink"/>, <xref linkend="org.osgi.framework.wiring.dto.BundleWiringDTO" xrefstyle="hyperlink"/>, and <xref linkend="org.osgi.framework.wiring.dto.BundleWireDTO" xrefstyle="hyperlink"/> represent the capabilities and requirements
      wiring information of the Bundle Wiring API. The following figure shows
      the effective relationship between these Data Transfer Object types.
      Since the graph of Data Transfer Objects must be a tree, some references
      are indirect.</para>

      <figure>
        <title>Bundle Wiring API Data Transfer Objects</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="5.437in" contentwidth="4.959in" fileref="wiringdto-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para><xref linkend="org.osgi.framework.wiring.dto.FrameworkWiringDTO" xrefstyle="hyperlink"/> represents the complete capabilities and
      requirements wiring information for all the bundles in the
      framework.</para>
    </section>

    <section>
      <title>Start Level API Data Transfer Objects</title>

      <para>A <xref linkend="org.osgi.framework.startlevel.dto.BundleStartLevelDTO" xrefstyle="hyperlink"/> represents information about the start level
      information of a bundle such as the assigned start level, the activation
      policy used and the whether the bundle is persistently started.</para>

      <para>A <xref linkend="org.osgi.framework.startlevel.dto.FrameworkStartLevelDTO" xrefstyle="hyperlink"/> provides the start level information about the
      Framework such as the active start level and the initial bundle start
      level assigned to newly installed bundles.</para>
    </section>
  </section>

  <section xml:id="framework.dto-obtaining-dtos">
    <title>Obtaining Core Data Transfer Objects</title>

    <para>The <xref linkend="org.osgi.framework.Bundle.adapt-Class-" xrefstyle="hyperlink"/> method allows the Bundle to be adapted to
    different types. The <code>adapt</code> method is used to obtain the Core
    Data Transfer Objects. For example, the <code>adapt</code> method can be
    used to adapt a Bundle object to the current <code>BundleDTO</code>
    object. The adapt method can be used as follows:</para>

    <programlisting>// DTO for the bundle
BundleDTO bundleDTO = bundle.adapt(BundleDTO.class);

// DTO for the current bundle wiring
BundleWiringDTO bundleWiringDTO = bundle.adapt(BundleWiringDTO.class);

// DTO for the current bundle revision
BundleRevisionDTO bundleRevisionDTO = bundle.adapt(BundleRevisionDTO.class);</programlisting>

    <para>The following table shows the Core Data Transfer Objects that can be
    obtained from a Bundle via the <code>adapt</code> method.</para>

    <table>
      <title>Data Transfer Objects that can be adapted from Bundle</title>

      <tgroup cols="2">
        <colspec colnum="1"/>

        <colspec colnum="2" colwidth="2*"/>

        <thead>
          <row>
            <entry>Class</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><para><xref linkend="org.osgi.framework.dto.BundleDTO" xrefstyle="hyperlink"/></para></entry>

            <entry><para>The Bundle Data Transfer Object for the
            bundle.</para></entry>
          </row>

          <row>
            <entry><para><xref linkend="org.osgi.framework.dto.ServiceReferenceDTO" xrefstyle="hyperlink"/><code>[]</code></para></entry>

            <entry><para>An array of Service Reference Data Transfer Objects
            for the registered services of the bundle. If the bundle has no
            registered services, the result is an empty array. If the bundle
            does not have a valid bundle context, the result is
            <code>null</code>.</para></entry>
          </row>

          <row>
            <entry><para><xref linkend="org.osgi.framework.wiring.dto.BundleRevisionDTO" xrefstyle="hyperlink"/></para></entry>

            <entry><para>The Bundle Revision Data Transfer Object for the
            bundle. If the bundle is uninstalled or otherwise does not have a
            bundle revision, the result is <code>null</code>.</para></entry>
          </row>

          <row>
            <entry><para><xref linkend="org.osgi.framework.wiring.dto.BundleRevisionDTO" xrefstyle="hyperlink"/><code>[]</code></para></entry>

            <entry><para>The Bundle Revision Data Transfer Objects for the
            bundle. The first revision is the current revision. If the bundle
            is uninstalled, the result is <code>null</code>.</para></entry>
          </row>

          <row>
            <entry><para><xref linkend="org.osgi.framework.wiring.dto.BundleWiringDTO" xrefstyle="hyperlink"/></para></entry>

            <entry><para>The Bundle Wiring Data Transfer Object for the
            bundle. If the bundle is unresolved or otherwise does not have a
            bundle wiring, the result is <code>null</code>.</para></entry>
          </row>

          <row>
            <entry><para><xref linkend="org.osgi.framework.wiring.dto.BundleWiringDTO" xrefstyle="hyperlink"/><code>[]</code></para></entry>

            <entry><para>The Bundle Wiring Data Transfer Objects for the
            bundle. The first wiring is the current wiring. If the bundle is
            uninstalled, the result is <code>null</code>.</para></entry>
          </row>

          <row>
            <entry><para><xref linkend="org.osgi.framework.startlevel.dto.BundleStartLevelDTO" xrefstyle="hyperlink"/></para></entry>

            <entry><para>The Bundle Start Level Data Transfer Object for the
            bundle. If the bundle is uninstalled, the result is
            <code>null</code>.</para></entry>
          </row>

          <row>
            <entry><para><xref linkend="org.osgi.framework.startlevel.dto.FrameworkStartLevelDTO" xrefstyle="hyperlink"/></para></entry>

            <entry><para>The Framework Start Level Data Transfer Object if the
            bundle is the System Bundle. If the bundle is not the System
            Bundle, the result is <code>null</code>.</para></entry>
          </row>

          <row>
            <entry><para><xref linkend="org.osgi.framework.dto.FrameworkDTO" xrefstyle="hyperlink"/></para></entry>

            <entry><para>The Framework Data Transfer Object if the bundle is
            the System Bundle. If the bundle is not the System Bundle, the
            result is <code>null</code>.</para></entry>
          </row>

          <row>
            <entry><para><xref linkend="org.osgi.framework.wiring.dto.FrameworkWiringDTO" xrefstyle="hyperlink"/></para></entry>

            <entry><para>The Framework Wiring Data Transfer Object if the
            bundle is the System Bundle. If the bundle is not the System
            Bundle, the result is <code>null</code>.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>The <xref linkend="org.osgi.framework.ServiceReference.adapt-Class-" xrefstyle="hyperlink"/> method allows the Service Reference to be adapted
    to different types. The <code>adapt</code> method is used to obtain the
    Core Data Transfer Objects. For example, the <code>adapt</code> method can
    be used to adapt a Service Reference object to the current
    <code>ServiceReferenceDTO</code> object. The adapt method can be used as
    follows:</para>

    <programlisting>// DTO for the service reference
ServiceReferenceDTO referenceDTO = reference.adapt(ServiceReferenceDTO.class);</programlisting>

    <para>The following table shows the Core Data Transfer Objects that can be
    obtained from a Service Reference via the <code>adapt</code>
    method.</para>

    <table>
      <title>Data Transfer Objects that can be adapted from
      ServiceReference</title>

      <tgroup cols="2">
        <colspec colnum="1"/>

        <colspec colnum="2" colwidth="2*"/>

        <thead>
          <row>
            <entry>Class</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><para><xref linkend="org.osgi.framework.dto.ServiceReferenceDTO" xrefstyle="hyperlink"/></para></entry>

            <entry><para>A Service Reference Data Transfer Object for the
            Service Reference.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section>
    <title>Security</title>

    <para>Data Transfer Objects have no behavior by definition and thus no
    permissions are applicable to their use. To obtain Data Transfer Objects
    from a Bundle or ServiceReference object via the <code>adapt</code>
    method, <code>AdaptPermission[&lt;dtotype&gt;,ADAPT]</code> is required
    for the desired Data Transfer Object type.</para>
  </section>

  <section xreflabel="org.osgi.dto" version="5" role="package" xml:id="org.osgi.dto" xml:base="057/../../../generated/javadoc/docbook/org.osgi.dto.xml">
   <title>org.osgi.dto</title>
   <info>
      <releaseinfo xml:id="org.osgi.dto-version">Version 1.1</releaseinfo>
      <edition xml:id="org.osgi.dto-version.number">1.1</edition>
   </info>
   <para>
OSGi Data Transfer Object Package Version 1.1.
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.dto; version="[1.1,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.dto; version="[1.1,1.2)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.dto.DTO">
                  <code>DTO</code>
               </link> -
Super type for Data Transfer Objects.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section xreflabel="DTO" role="class" xml:id="org.osgi.dto.DTO">
      <title>public abstract class DTO</title>
      <para>
Super type for Data Transfer Objects.
 </para>
      <para>
 A Data Transfer Object (DTO) is easily serializable having only public fields
 of primitive types and their wrapper classes, String, enums, Version, and
 DTOs. List, Set, Map, and array aggregates may also be used. The aggregates
 must only hold objects of the listed types or aggregates. The types for Map
 keys are limited to primitive wrapper classes, String, enums, and Version.
 </para>
      <para>
 The object graph from a Data Transfer Object must be a tree to simplify
 serialization and deserialization.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <section xreflabel="DTO()" role="method" xml:id="org.osgi.dto.DTO.DTO--">
         <title>public  DTO()</title>
         <para/>
      </section>
      <section xreflabel="toString()" role="method" xml:id="org.osgi.dto.DTO.toString--">
         <title>public String toString()</title>
         <para role="description">
Return a string representation of this DTO suitable for use when
 debugging.
 </para>
         <para>
 The format of the string representation is not specified and subject to
 change.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A string representation of this DTO suitable for use when
         debugging.</para>
         </formalpara>
         <para/>
      </section>
   </section>
</section>

  <section xreflabel="org.osgi.framework.dto" version="5" role="package" xml:id="org.osgi.framework.dto" xml:base="057/../../../generated/javadoc/docbook/org.osgi.framework.dto.xml">
   <title>org.osgi.framework.dto</title>
   <info>
      <releaseinfo xml:id="org.osgi.framework.dto-version">Version 1.8</releaseinfo>
      <edition xml:id="org.osgi.framework.dto-version.number">1.8</edition>
   </info>
   <para>
OSGi Data Transfer Object Framework Package Version 1.8.

 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.

 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.framework.dto; version="[1.8,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.framework.dto; version="[1.8,1.9)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.dto.BundleDTO">
                  <code>BundleDTO</code>
               </link> -
Data Transfer Object for a Bundle.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.dto.FrameworkDTO">
                  <code>FrameworkDTO</code>
               </link> -
Data Transfer Object for a Framework.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.dto.ServiceReferenceDTO">
                  <code>ServiceReferenceDTO</code>
               </link> -
Data Transfer Object for a ServiceReference.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section xreflabel="BundleDTO" role="class" xml:id="org.osgi.framework.dto.BundleDTO">
      <title>public class BundleDTO<?line-break?> extends DTO</title>
      <para>
Data Transfer Object for a Bundle.

 </para>
      <para>
 A Bundle can be adapted to provide a <code>BundleDTO</code> for the Bundle.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <section xreflabel="id" role="field" xml:id="org.osgi.framework.dto.BundleDTO.id">
         <title>public long id</title>
         <para>
The bundle's unique identifier.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Bundle.getBundleId--">Bundle.getBundleId()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="lastModified" role="field" xml:id="org.osgi.framework.dto.BundleDTO.lastModified">
         <title>public long lastModified</title>
         <para>
The time when the bundle was last modified.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Bundle.getLastModified--">Bundle.getLastModified()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="state" role="field" xml:id="org.osgi.framework.dto.BundleDTO.state">
         <title>public int state</title>
         <para>
The bundle's state.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Bundle.getState--">Bundle.getState()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="symbolicName" role="field" xml:id="org.osgi.framework.dto.BundleDTO.symbolicName">
         <title>public String symbolicName</title>
         <para>
The bundle's symbolic name.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Bundle.getSymbolicName--">Bundle.getSymbolicName()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="version" role="field" xml:id="org.osgi.framework.dto.BundleDTO.version">
         <title>public String version</title>
         <para>
The bundle's version.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Bundle.getVersion--">Bundle.getVersion()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="BundleDTO()" role="method" xml:id="org.osgi.framework.dto.BundleDTO.BundleDTO--">
         <title>public  BundleDTO()</title>
         <para/>
      </section>
   </section>
   <section xreflabel="FrameworkDTO" role="class" xml:id="org.osgi.framework.dto.FrameworkDTO">
      <title>public class FrameworkDTO<?line-break?> extends DTO</title>
      <para>
Data Transfer Object for a Framework.

 </para>
      <para>
 The System Bundle can be adapted to provide a <code>FrameworkDTO</code> for the
 framework of the system bundle. A <code>FrameworkDTO</code> obtained from a
 framework will contain only the launch properties of the framework. These
 properties will not include the System properties.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <section xreflabel="bundles" role="field" xml:id="org.osgi.framework.dto.FrameworkDTO.bundles">
         <title>public List&lt;BundleDTO&gt; bundles</title>
         <para>
The bundles that are installed in the framework.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.BundleContext.getBundles--">BundleContext.getBundles()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="properties" role="field" xml:id="org.osgi.framework.dto.FrameworkDTO.properties">
         <title>public Map&lt;String, Object&gt; properties</title>
         <para>
The launch properties of the framework.

 The value type must be a numerical type, Boolean, String, DTO or an array
 of any of the former.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.BundleContext.getProperty-String-">BundleContext.getProperty(String)</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="services" role="field" xml:id="org.osgi.framework.dto.FrameworkDTO.services">
         <title>public List&lt;ServiceReferenceDTO&gt; services</title>
         <para>
The services that are registered in the framework.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.BundleContext.getServiceReferences-String-String-">BundleContext.getServiceReferences(String, String)</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="FrameworkDTO()" role="method" xml:id="org.osgi.framework.dto.FrameworkDTO.FrameworkDTO--">
         <title>public  FrameworkDTO()</title>
         <para/>
      </section>
   </section>
   <section xreflabel="ServiceReferenceDTO" role="class" xml:id="org.osgi.framework.dto.ServiceReferenceDTO">
      <title>public class ServiceReferenceDTO<?line-break?> extends DTO</title>
      <para>
Data Transfer Object for a ServiceReference.
 </para>
      <para>
         <code>ServiceReferenceDTO</code>s for all registered services can be obtained from
 a <link linkend="org.osgi.framework.dto.FrameworkDTO">FrameworkDTO</link>. A <link linkend="org.osgi.framework.ServiceReference">ServiceReference</link> can be adapted to a
 <code>ServiceReferenceDTO</code>. A started Bundle can be adapted to provide a
 <code>ServiceReferenceDTO[]</code> of the services registered by the Bundle. A
 <code>ServiceReferenceDTO</code> obtained from a framework must convert service
 property values which are not valid value types for DTOs to type
 <code>String</code> using <code>String.valueOf(Object)</code>.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <section xreflabel="bundle" role="field" xml:id="org.osgi.framework.dto.ServiceReferenceDTO.bundle">
         <title>public long bundle</title>
         <para>
The id of the bundle that registered the service.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.ServiceReference.getBundle--">ServiceReference.getBundle()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="id" role="field" xml:id="org.osgi.framework.dto.ServiceReferenceDTO.id">
         <title>public long id</title>
         <para>
The id of the service.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Constants.SERVICE_ID">Constants.SERVICE_ID</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="properties" role="field" xml:id="org.osgi.framework.dto.ServiceReferenceDTO.properties">
         <title>public Map&lt;String, Object&gt; properties</title>
         <para>
The properties for the service.

 The value type must be a numerical type, Boolean, String, DTO or an array
 of any of the former.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.ServiceReference.getProperty-String-">ServiceReference.getProperty(String)</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="usingBundles" role="field" xml:id="org.osgi.framework.dto.ServiceReferenceDTO.usingBundles">
         <title>public long[] usingBundles</title>
         <para>
The ids of the bundles that are using the service.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.ServiceReference.getUsingBundles--">ServiceReference.getUsingBundles()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="ServiceReferenceDTO()" role="method" xml:id="org.osgi.framework.dto.ServiceReferenceDTO.ServiceReferenceDTO--">
         <title>public  ServiceReferenceDTO()</title>
         <para/>
      </section>
   </section>
</section>

  <section xreflabel="org.osgi.framework.startlevel.dto" version="5" role="package" xml:id="org.osgi.framework.startlevel.dto" xml:base="057/../../../generated/javadoc/docbook/org.osgi.framework.startlevel.dto.xml">
   <title>org.osgi.framework.startlevel.dto</title>
   <info>
      <releaseinfo xml:id="org.osgi.framework.startlevel.dto-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.framework.startlevel.dto-version.number">1.0</edition>
   </info>
   <para>
OSGi Data Transfer Object Framework Start Level Package Version 1.0.

 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.

 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.framework.startlevel.dto; version="[1.0,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.framework.startlevel.dto; version="[1.0,1.1)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.startlevel.dto.BundleStartLevelDTO">
                  <code>BundleStartLevelDTO</code>
               </link> -
Data Transfer Object for a BundleStartLevel.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.startlevel.dto.FrameworkStartLevelDTO">
                  <code>FrameworkStartLevelDTO</code>
               </link> -
Data Transfer Object for a FrameworkStartLevel.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section xreflabel="BundleStartLevelDTO" role="class" xml:id="org.osgi.framework.startlevel.dto.BundleStartLevelDTO">
      <title>public class BundleStartLevelDTO<?line-break?> extends DTO</title>
      <para>
Data Transfer Object for a BundleStartLevel.

 </para>
      <para>
 An installed Bundle can be adapted to provide a <code>BundleStartLevelDTO</code>
 for the Bundle.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <section xreflabel="activationPolicyUsed" role="field" xml:id="org.osgi.framework.startlevel.dto.BundleStartLevelDTO.activationPolicyUsed">
         <title>public boolean activationPolicyUsed</title>
         <para>
The bundle's autostart setting indicates that the activation policy
 declared in the bundle manifest must be used.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.startlevel.BundleStartLevel.isActivationPolicyUsed--">BundleStartLevel.isActivationPolicyUsed()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="bundle" role="field" xml:id="org.osgi.framework.startlevel.dto.BundleStartLevelDTO.bundle">
         <title>public long bundle</title>
         <para>
The id of the bundle associated with this start level.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.BundleReference.getBundle--">BundleStartLevel.getBundle()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="persistentlyStarted" role="field" xml:id="org.osgi.framework.startlevel.dto.BundleStartLevelDTO.persistentlyStarted">
         <title>public boolean persistentlyStarted</title>
         <para>
The bundle's autostart setting indicates it must be started.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.startlevel.BundleStartLevel.isPersistentlyStarted--">BundleStartLevel.isPersistentlyStarted()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="startLevel" role="field" xml:id="org.osgi.framework.startlevel.dto.BundleStartLevelDTO.startLevel">
         <title>public int startLevel</title>
         <para>
The assigned start level value for the bundle.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.startlevel.BundleStartLevel.getStartLevel--">BundleStartLevel.getStartLevel()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="BundleStartLevelDTO()" role="method" xml:id="org.osgi.framework.startlevel.dto.BundleStartLevelDTO.BundleStartLevelDTO--">
         <title>public  BundleStartLevelDTO()</title>
         <para/>
      </section>
   </section>
   <section xreflabel="FrameworkStartLevelDTO" role="class" xml:id="org.osgi.framework.startlevel.dto.FrameworkStartLevelDTO">
      <title>public class FrameworkStartLevelDTO<?line-break?> extends DTO</title>
      <para>
Data Transfer Object for a FrameworkStartLevel.

 </para>
      <para>
 The System Bundle can be adapted to provide a <code>FrameworkStartLevelDTO</code>
 for the framework of the Bundle.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <section xreflabel="initialBundleStartLevel" role="field" xml:id="org.osgi.framework.startlevel.dto.FrameworkStartLevelDTO.initialBundleStartLevel">
         <title>public int initialBundleStartLevel</title>
         <para>
The initial start level value that is assigned to a bundle when it is
 first installed.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.startlevel.FrameworkStartLevel.getInitialBundleStartLevel--">FrameworkStartLevel.getInitialBundleStartLevel()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="startLevel" role="field" xml:id="org.osgi.framework.startlevel.dto.FrameworkStartLevelDTO.startLevel">
         <title>public int startLevel</title>
         <para>
The active start level value for the framework.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.startlevel.FrameworkStartLevel.getStartLevel--">FrameworkStartLevel.getStartLevel()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="FrameworkStartLevelDTO()" role="method" xml:id="org.osgi.framework.startlevel.dto.FrameworkStartLevelDTO.FrameworkStartLevelDTO--">
         <title>public  FrameworkStartLevelDTO()</title>
         <para/>
      </section>
   </section>
</section>

  <section xreflabel="org.osgi.framework.wiring.dto" version="5" role="package" xml:id="org.osgi.framework.wiring.dto" xml:base="057/../../../generated/javadoc/docbook/org.osgi.framework.wiring.dto.xml">
   <title>org.osgi.framework.wiring.dto</title>
   <info>
      <releaseinfo xml:id="org.osgi.framework.wiring.dto-version">Version 1.3</releaseinfo>
      <edition xml:id="org.osgi.framework.wiring.dto-version.number">1.3</edition>
   </info>
   <para>
OSGi Data Transfer Object Framework Wiring Package Version 1.3.
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.framework.wiring.dto; version="[1.3,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.framework.wiring.dto; version="[1.3,1.4)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.wiring.dto.BundleRevisionDTO">
                  <code>BundleRevisionDTO</code>
               </link> -
Data Transfer Object for a BundleRevision.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.wiring.dto.BundleWireDTO">
                  <code>BundleWireDTO</code>
               </link> -
Data Transfer Object for a BundleWire.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.wiring.dto.BundleWiringDTO">
                  <code>BundleWiringDTO</code>
               </link> -
Data Transfer Object for a BundleWiring graph.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.wiring.dto.BundleWiringDTO.NodeDTO">
                  <code>BundleWiringDTO.NodeDTO</code>
               </link> -
Data Transfer Object for a BundleWiring node.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.wiring.dto.FrameworkWiringDTO">
                  <code>FrameworkWiringDTO</code>
               </link> -
Data Transfer Object for the wiring graph of the framework.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section xreflabel="BundleRevisionDTO" role="class" xml:id="org.osgi.framework.wiring.dto.BundleRevisionDTO">
      <title>public class BundleRevisionDTO<?line-break?> extends ResourceDTO</title>
      <para>
Data Transfer Object for a BundleRevision.

 </para>
      <para>
 An installed Bundle can be adapted to provide a <code>BundleRevisionDTO</code> for
 the current revision of the Bundle. <code>BundleRevisionDTO</code> objects for all
 in use revisions of the Bundle can be obtained by adapting the bundle to
 <code>BundleRevisionDTO[]</code>.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <section xreflabel="bundle" role="field" xml:id="org.osgi.framework.wiring.dto.BundleRevisionDTO.bundle">
         <title>public long bundle</title>
         <para>
The id of the bundle associated with the bundle revision.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.BundleReference.getBundle--">BundleRevision.getBundle()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="symbolicName" role="field" xml:id="org.osgi.framework.wiring.dto.BundleRevisionDTO.symbolicName">
         <title>public String symbolicName</title>
         <para>
The symbolic name of the bundle revision.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.wiring.BundleRevision.getSymbolicName--">BundleRevision.getSymbolicName()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="type" role="field" xml:id="org.osgi.framework.wiring.dto.BundleRevisionDTO.type">
         <title>public int type</title>
         <para>
The type of the bundle revision.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.wiring.BundleRevision.getTypes--">BundleRevision.getTypes()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="version" role="field" xml:id="org.osgi.framework.wiring.dto.BundleRevisionDTO.version">
         <title>public String version</title>
         <para>
The version of the bundle revision.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.wiring.BundleRevision.getVersion--">BundleRevision.getVersion()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="BundleRevisionDTO()" role="method" xml:id="org.osgi.framework.wiring.dto.BundleRevisionDTO.BundleRevisionDTO--">
         <title>public  BundleRevisionDTO()</title>
         <para/>
      </section>
   </section>
   <section xreflabel="BundleWireDTO" role="class" xml:id="org.osgi.framework.wiring.dto.BundleWireDTO">
      <title>public class BundleWireDTO<?line-break?> extends WireDTO</title>
      <para>
Data Transfer Object for a BundleWire.

 </para>
      <para>
         <code>BundleWireDTO</code>s are referenced <link linkend="org.osgi.framework.wiring.dto.BundleWiringDTO.NodeDTO">BundleWiringDTO.NodeDTO</link>s.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <section xreflabel="providerWiring" role="field" xml:id="org.osgi.framework.wiring.dto.BundleWireDTO.providerWiring">
         <title>public int providerWiring</title>
         <para>
The identifier of the provider wiring for the bundle wire.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.resource.dto.WiringDTO.id">WiringDTO.id</link>, <link linkend="org.osgi.framework.wiring.BundleWire.getProviderWiring--">BundleWire.getProviderWiring()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="requirerWiring" role="field" xml:id="org.osgi.framework.wiring.dto.BundleWireDTO.requirerWiring">
         <title>public int requirerWiring</title>
         <para>
The identifier of the requiring wiring for the bundle wire.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.resource.dto.WiringDTO.id">WiringDTO.id</link>, <link linkend="org.osgi.framework.wiring.BundleWire.getRequirerWiring--">BundleWire.getRequirerWiring()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="BundleWireDTO()" role="method" xml:id="org.osgi.framework.wiring.dto.BundleWireDTO.BundleWireDTO--">
         <title>public  BundleWireDTO()</title>
         <para/>
      </section>
   </section>
   <section xreflabel="BundleWiringDTO" role="class" xml:id="org.osgi.framework.wiring.dto.BundleWiringDTO">
      <title>public class BundleWiringDTO<?line-break?> extends DTO</title>
      <para>
Data Transfer Object for a BundleWiring graph.

 </para>
      <para>
 An installed Bundle can be adapted to provide a <code>BundleWiringDTO</code> for
 the current wiring Bundle. <code>BundleWiringDTO</code> objects for all in use
 wirings of the Bundle can be obtained by adapting the bundle to
 <code>BundleWiringDTO[]</code>.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <section xreflabel="bundle" role="field" xml:id="org.osgi.framework.wiring.dto.BundleWiringDTO.bundle">
         <title>public long bundle</title>
         <para>
The id of the bundle associated with the bundle wiring graph.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.BundleReference.getBundle--">BundleWiring.getBundle()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="nodes" role="field" xml:id="org.osgi.framework.wiring.dto.BundleWiringDTO.nodes">
         <title>public Set&lt;BundleWiringDTO.NodeDTO&gt; nodes</title>
         <para>
The set of wiring nodes referenced by the wiring graph.

 </para>
         <para>
 All wiring nodes referenced by wiring node identifiers in the wiring
 graph are contained in this set.</para>
      </section>
      <section xreflabel="resources" role="field" xml:id="org.osgi.framework.wiring.dto.BundleWiringDTO.resources">
         <title>public Set&lt;BundleRevisionDTO&gt; resources</title>
         <para>
The set of resources referenced by the wiring graph.

 </para>
         <para>
 All resources referenced by resource identifiers in the wiring graph are
 contained in this set.</para>
      </section>
      <section xreflabel="root" role="field" xml:id="org.osgi.framework.wiring.dto.BundleWiringDTO.root">
         <title>public int root</title>
         <para>
The identifier of the root wiring node of the bundle wiring graph.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.resource.dto.WiringDTO.id">WiringDTO.id</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="BundleWiringDTO()" role="method" xml:id="org.osgi.framework.wiring.dto.BundleWiringDTO.BundleWiringDTO--">
         <title>public  BundleWiringDTO()</title>
         <para/>
      </section>
   </section>
   <section xreflabel="BundleWiringDTO.NodeDTO" role="class" xml:id="org.osgi.framework.wiring.dto.BundleWiringDTO.NodeDTO">
      <title>public static class BundleWiringDTO.NodeDTO<?line-break?> extends WiringDTO</title>
      <para>
Data Transfer Object for a BundleWiring node.

 </para>
      <para>
 The <link linkend="org.osgi.resource.dto.WiringDTO.providedWires">providedWires</link> field must contain an
 array of <link linkend="org.osgi.framework.wiring.dto.BundleWireDTO">BundleWireDTO</link>s. The <link linkend="org.osgi.resource.dto.WiringDTO.requiredWires">requiredWires</link> field must contain an array of <link linkend="org.osgi.framework.wiring.dto.BundleWireDTO">BundleWireDTO</link>s.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <section xreflabel="current" role="field" xml:id="org.osgi.framework.wiring.dto.BundleWiringDTO.NodeDTO.current">
         <title>public boolean current</title>
         <para>
The current state of the bundle wiring. The bundle wiring's current
 setting indicates that the bundle wiring is the current bundle wiring
 for the bundle.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.wiring.BundleWiring.isCurrent--">BundleWiring.isCurrent()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="inUse" role="field" xml:id="org.osgi.framework.wiring.dto.BundleWiringDTO.NodeDTO.inUse">
         <title>public boolean inUse</title>
         <para>
The bundle wiring's in use setting indicates that the bundle wiring
 is in use.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.wiring.BundleWiring.isInUse--">BundleWiring.isInUse()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="NodeDTO()" role="method" xml:id="org.osgi.framework.wiring.dto.BundleWiringDTO.NodeDTO.NodeDTO--">
         <title>public  NodeDTO()</title>
         <para/>
      </section>
   </section>
   <section xreflabel="FrameworkWiringDTO" role="class" xml:id="org.osgi.framework.wiring.dto.FrameworkWiringDTO">
      <title>public class FrameworkWiringDTO<?line-break?> extends DTO</title>
      <para>
Data Transfer Object for the wiring graph of the framework.
 </para>
      <para>
 The system bundle can be adapted to provide the <code>FrameworkWiringDTO</code>.
 Only the system bundle can be adapted to a <code>FrameworkWiringDTO</code> object</para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.3</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <section xreflabel="resources" role="field" xml:id="org.osgi.framework.wiring.dto.FrameworkWiringDTO.resources">
         <title>public Set&lt;BundleRevisionDTO&gt; resources</title>
         <para>
The set of resources referenced by the wiring graph of the framework.
 </para>
         <para>
 All resources referenced by resource identifiers in the wiring graph are
 contained in this set.</para>
      </section>
      <section xreflabel="wirings" role="field" xml:id="org.osgi.framework.wiring.dto.FrameworkWiringDTO.wirings">
         <title>public Set&lt;BundleWiringDTO.NodeDTO&gt; wirings</title>
         <para>
The set of wiring nodes referenced by the wiring graph of the framework.
 </para>
         <para>
 All wiring nodes referenced by wiring node identifiers in the wiring
 graph are contained in this set.</para>
      </section>
      <section xreflabel="FrameworkWiringDTO()" role="method" xml:id="org.osgi.framework.wiring.dto.FrameworkWiringDTO.FrameworkWiringDTO--">
         <title>public  FrameworkWiringDTO()</title>
         <para/>
      </section>
   </section>
</section>

  <section xreflabel="org.osgi.resource.dto" version="5" role="package" xml:id="org.osgi.resource.dto" xml:base="057/../../../generated/javadoc/docbook/org.osgi.resource.dto.xml">
   <title>org.osgi.resource.dto</title>
   <info>
      <releaseinfo xml:id="org.osgi.resource.dto-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.resource.dto-version.number">1.0</edition>
   </info>
   <para>
OSGi Data Transfer Object Resource Package Version 1.0.

 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.

 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.resource.dto; version="[1.0,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.resource.dto; version="[1.0,1.1)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.resource.dto.CapabilityDTO">
                  <code>CapabilityDTO</code>
               </link> -
Data Transfer Object for a Capability.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.resource.dto.CapabilityRefDTO">
                  <code>CapabilityRefDTO</code>
               </link> -
Data Transfer Object for a reference to a Capability.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.resource.dto.RequirementDTO">
                  <code>RequirementDTO</code>
               </link> -
Data Transfer Object for a Requirement.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.resource.dto.RequirementRefDTO">
                  <code>RequirementRefDTO</code>
               </link> -
Data Transfer Object for a reference to a Requirement.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.resource.dto.ResourceDTO">
                  <code>ResourceDTO</code>
               </link> -
Data Transfer Object for a Resource.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.resource.dto.WireDTO">
                  <code>WireDTO</code>
               </link> -
Data Transfer Object for a Wire.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.resource.dto.WiringDTO">
                  <code>WiringDTO</code>
               </link> -
Data Transfer Object for a Wiring node.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section xreflabel="CapabilityDTO" role="class" xml:id="org.osgi.resource.dto.CapabilityDTO">
      <title>public class CapabilityDTO<?line-break?> extends DTO</title>
      <para>
Data Transfer Object for a Capability.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <section xreflabel="attributes" role="field" xml:id="org.osgi.resource.dto.CapabilityDTO.attributes">
         <title>public Map&lt;String, Object&gt; attributes</title>
         <para>
The attributes for the capability.

 </para>
         <para>
 The value type must be a numerical type, Boolean, String, DTO or an array
 of any of the former.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.resource.Capability.getAttributes--">Capability.getAttributes()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="directives" role="field" xml:id="org.osgi.resource.dto.CapabilityDTO.directives">
         <title>public Map&lt;String, String&gt; directives</title>
         <para>
The directives for the capability.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.resource.Capability.getDirectives--">Capability.getDirectives()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="id" role="field" xml:id="org.osgi.resource.dto.CapabilityDTO.id">
         <title>public int id</title>
         <para>
The unique identifier of the capability.

 </para>
         <para>
 This identifier is transiently assigned and may vary across restarts.</para>
      </section>
      <section xreflabel="namespace" role="field" xml:id="org.osgi.resource.dto.CapabilityDTO.namespace">
         <title>public String namespace</title>
         <para>
The namespace for the capability.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.resource.Capability.getNamespace--">Capability.getNamespace()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="resource" role="field" xml:id="org.osgi.resource.dto.CapabilityDTO.resource">
         <title>public int resource</title>
         <para>
The identifier of the resource declaring the capability.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.resource.dto.ResourceDTO.id">ResourceDTO.id</link>, <link linkend="org.osgi.resource.Capability.getResource--">Capability.getResource()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="CapabilityDTO()" role="method" xml:id="org.osgi.resource.dto.CapabilityDTO.CapabilityDTO--">
         <title>public  CapabilityDTO()</title>
         <para/>
      </section>
   </section>
   <section xreflabel="CapabilityRefDTO" role="class" xml:id="org.osgi.resource.dto.CapabilityRefDTO">
      <title>public class CapabilityRefDTO<?line-break?> extends DTO</title>
      <para>
Data Transfer Object for a reference to a Capability.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <section xreflabel="capability" role="field" xml:id="org.osgi.resource.dto.CapabilityRefDTO.capability">
         <title>public int capability</title>
         <para>
The identifier of the capability in the resource.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.resource.dto.CapabilityDTO.id">CapabilityDTO.id</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="resource" role="field" xml:id="org.osgi.resource.dto.CapabilityRefDTO.resource">
         <title>public int resource</title>
         <para>
The identifier of the resource declaring the capability.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.resource.dto.ResourceDTO.id">ResourceDTO.id</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="CapabilityRefDTO()" role="method" xml:id="org.osgi.resource.dto.CapabilityRefDTO.CapabilityRefDTO--">
         <title>public  CapabilityRefDTO()</title>
         <para/>
      </section>
   </section>
   <section xreflabel="RequirementDTO" role="class" xml:id="org.osgi.resource.dto.RequirementDTO">
      <title>public class RequirementDTO<?line-break?> extends DTO</title>
      <para>
Data Transfer Object for a Requirement.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <section xreflabel="attributes" role="field" xml:id="org.osgi.resource.dto.RequirementDTO.attributes">
         <title>public Map&lt;String, Object&gt; attributes</title>
         <para>
The attributes for the requirement.

 </para>
         <para>
 The value type must be a numerical type, Boolean, String, DTO or an array
 of any of the former.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.resource.Requirement.getAttributes--">Requirement.getAttributes()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="directives" role="field" xml:id="org.osgi.resource.dto.RequirementDTO.directives">
         <title>public Map&lt;String, String&gt; directives</title>
         <para>
The directives for the requirement.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.resource.Requirement.getDirectives--">Requirement.getDirectives()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="id" role="field" xml:id="org.osgi.resource.dto.RequirementDTO.id">
         <title>public int id</title>
         <para>
The unique identifier of the requirement.

 </para>
         <para>
 This identifier is transiently assigned and may vary across restarts.</para>
      </section>
      <section xreflabel="namespace" role="field" xml:id="org.osgi.resource.dto.RequirementDTO.namespace">
         <title>public String namespace</title>
         <para>
The namespace for the requirement.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.resource.Requirement.getNamespace--">Requirement.getNamespace()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="resource" role="field" xml:id="org.osgi.resource.dto.RequirementDTO.resource">
         <title>public int resource</title>
         <para>
The identifier of the resource declaring the requirement.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.resource.dto.ResourceDTO.id">ResourceDTO.id</link>, <link linkend="org.osgi.resource.Requirement.getResource--">Requirement.getResource()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="RequirementDTO()" role="method" xml:id="org.osgi.resource.dto.RequirementDTO.RequirementDTO--">
         <title>public  RequirementDTO()</title>
         <para/>
      </section>
   </section>
   <section xreflabel="RequirementRefDTO" role="class" xml:id="org.osgi.resource.dto.RequirementRefDTO">
      <title>public class RequirementRefDTO<?line-break?> extends DTO</title>
      <para>
Data Transfer Object for a reference to a Requirement.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <section xreflabel="requirement" role="field" xml:id="org.osgi.resource.dto.RequirementRefDTO.requirement">
         <title>public int requirement</title>
         <para>
The identifier of the requirement in the resource.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.resource.dto.RequirementDTO.id">RequirementDTO.id</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="resource" role="field" xml:id="org.osgi.resource.dto.RequirementRefDTO.resource">
         <title>public int resource</title>
         <para>
The identifier of the resource declaring the requirement.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.resource.dto.ResourceDTO.id">ResourceDTO.id</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="RequirementRefDTO()" role="method" xml:id="org.osgi.resource.dto.RequirementRefDTO.RequirementRefDTO--">
         <title>public  RequirementRefDTO()</title>
         <para/>
      </section>
   </section>
   <section xreflabel="ResourceDTO" role="class" xml:id="org.osgi.resource.dto.ResourceDTO">
      <title>public class ResourceDTO<?line-break?> extends DTO</title>
      <para>
Data Transfer Object for a Resource.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <section xreflabel="capabilities" role="field" xml:id="org.osgi.resource.dto.ResourceDTO.capabilities">
         <title>public List&lt;CapabilityDTO&gt; capabilities</title>
         <para>
The capabilities of the resource.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.resource.Resource.getCapabilities-String-">Resource.getCapabilities(String)</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="id" role="field" xml:id="org.osgi.resource.dto.ResourceDTO.id">
         <title>public int id</title>
         <para>
The unique identifier of the resource.

 </para>
         <para>
 This identifier is transiently assigned and may vary across restarts.</para>
      </section>
      <section xreflabel="requirements" role="field" xml:id="org.osgi.resource.dto.ResourceDTO.requirements">
         <title>public List&lt;RequirementDTO&gt; requirements</title>
         <para>
The requirements of the resource.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.resource.Resource.getRequirements-String-">Resource.getRequirements(String)</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="ResourceDTO()" role="method" xml:id="org.osgi.resource.dto.ResourceDTO.ResourceDTO--">
         <title>public  ResourceDTO()</title>
         <para/>
      </section>
   </section>
   <section xreflabel="WireDTO" role="class" xml:id="org.osgi.resource.dto.WireDTO">
      <title>public class WireDTO<?line-break?> extends DTO</title>
      <para>
Data Transfer Object for a Wire.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <section xreflabel="capability" role="field" xml:id="org.osgi.resource.dto.WireDTO.capability">
         <title>public CapabilityRefDTO capability</title>
         <para>
Reference to the Capability for the wire.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.resource.Wire.getCapability--">Wire.getCapability()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="provider" role="field" xml:id="org.osgi.resource.dto.WireDTO.provider">
         <title>public int provider</title>
         <para>
The identifier of the provider resource for the wire.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.resource.dto.ResourceDTO.id">ResourceDTO.id</link>, <link linkend="org.osgi.resource.Wire.getProvider--">Wire.getProvider()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="requirement" role="field" xml:id="org.osgi.resource.dto.WireDTO.requirement">
         <title>public RequirementRefDTO requirement</title>
         <para>
Reference to the Requirement for the wire.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.resource.Wire.getRequirement--">Wire.getRequirement()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="requirer" role="field" xml:id="org.osgi.resource.dto.WireDTO.requirer">
         <title>public int requirer</title>
         <para>
The identifier of the requiring resource for the wire.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.resource.dto.ResourceDTO.id">ResourceDTO.id</link>, <link linkend="org.osgi.resource.Wire.getRequirer--">Wire.getRequirer()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="WireDTO()" role="method" xml:id="org.osgi.resource.dto.WireDTO.WireDTO--">
         <title>public  WireDTO()</title>
         <para/>
      </section>
   </section>
   <section xreflabel="WiringDTO" role="class" xml:id="org.osgi.resource.dto.WiringDTO">
      <title>public class WiringDTO<?line-break?> extends DTO</title>
      <para>
Data Transfer Object for a Wiring node.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Not Thread-safe </para>
      </formalpara>
      <section xreflabel="capabilities" role="field" xml:id="org.osgi.resource.dto.WiringDTO.capabilities">
         <title>public List&lt;CapabilityRefDTO&gt; capabilities</title>
         <para>
The references to the capabilities for the wiring node.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.resource.Wiring.getResourceCapabilities-String-">Wiring.getResourceCapabilities(String)</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="id" role="field" xml:id="org.osgi.resource.dto.WiringDTO.id">
         <title>public int id</title>
         <para>
The unique identifier of the wiring node.

 </para>
         <para>
 This identifier is transiently assigned and may vary across restarts.</para>
      </section>
      <section xreflabel="providedWires" role="field" xml:id="org.osgi.resource.dto.WiringDTO.providedWires">
         <title>public List&lt;WireDTO&gt; providedWires</title>
         <para>
The provided wires for the wiring node.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.resource.Wiring.getProvidedResourceWires-String-">Wiring.getProvidedResourceWires(String)</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="requiredWires" role="field" xml:id="org.osgi.resource.dto.WiringDTO.requiredWires">
         <title>public List&lt;WireDTO&gt; requiredWires</title>
         <para>
The required wires for the wiring node.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.resource.Wiring.getRequiredResourceWires-String-">Wiring.getRequiredResourceWires(String)</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="requirements" role="field" xml:id="org.osgi.resource.dto.WiringDTO.requirements">
         <title>public List&lt;RequirementRefDTO&gt; requirements</title>
         <para>
The references to the requirements for the wiring node.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.resource.Wiring.getResourceRequirements-String-">Wiring.getResourceRequirements(String)</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="resource" role="field" xml:id="org.osgi.resource.dto.WiringDTO.resource">
         <title>public int resource</title>
         <para>
The identifier of the resource associated with the wiring node.
   </para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.resource.dto.ResourceDTO.id">ResourceDTO.id</link>, <link linkend="org.osgi.resource.Wiring.getResource--">Wiring.getResource()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="WiringDTO()" role="method" xml:id="org.osgi.resource.dto.WiringDTO.WiringDTO--">
         <title>public  WiringDTO()</title>
         <para/>
      </section>
   </section>
</section>

  <section xml:id="framework.dto.references">
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="framework.dto.references-dto"><title>Data Transfer
      Object</title><biblioid class="uri"><link xlink:href="https://en.wikipedia.org/wiki/Data_transfer_object"/></biblioid></bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter xmlns:ns5="http://www.w3.org/1999/xhtml" xmlns:ns4="http://www.w3.org/2000/svg" xmlns:ns3="http://www.w3.org/1998/Math/MathML" label="58" revision="$Id: 4d41a2a3d6cae896b238a47a22e7f82d3534925c $" version="5.0" xml:id="service.resolver" xml:base="058/service.resolver.xml">
  <title>Resolver Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.resolver-version" linkend="org.osgi.service.resolver"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>Today very few applications are self contained, the predominant
    development model is that applications are built from (external)
    components, which are often open source. Application developers add
    business logic, glue code, and assemble the diverse components into a
    resource that provides the desired capabilities when installed in an
    environment. Designing the assembly has long been a manual and error prone
    process, partly due to the complexity of external dependencies. Although
    the direct dependencies are often given, the largest number of
    dependencies are usually the transitive dependencies: the dependencies of
    the dependencies. Modern applications can end up with hundreds to
    thousands of external dependencies. Numbers that make tooling
    inevitable.</para>

    <para>The OSGi framework is the first specification that provides a
    foundation for automating a significant part of this assembly process. The
    Requirement-Capability model defined in <xref linkend="framework.resource"/> provides a dependency model that allows
    resources to express dependencies, constraints, and capabilities. If a
    resource's constraints are met it provides capabilities that can satisfy
    further requirements. The OSGi dependency model is fully generic and is
    not limited to bundles. Resources can be bundles but also certificates,
    plugged in devices, etc.</para>

    <para>Resolving transitive dependencies is a non-trivial process that
    requires careful design to achieve the required performance since the
    underlying problem is NP-complete. OSGi frameworks have always included
    such resolvers but these were built into the frameworks. They were not
    usable outside the framework for tooling, for example automatically
    finding the dependencies of a bundle that needs to be installed.</para>

    <para>The number of dependencies is rapidly reaching a threshold where
    manual methods no longer can provide reliable results. This specification
    therefore provides the <emphasis>Resolver service</emphasis>, a service
    that can be the base for provisioning, deployment, build, and diagnostic
    tooling. The service can take a requirement and resolve it to a wiring of
    resources. For example, with cloud computing a new requirement can be
    translated into a new OSGi framework instance being started on a node and
    provisioned with the set of bundles that satisfy the given requirement.
    The OSGi Resolver service is intended be a corner stone of such an
    auto-provisioning tool.</para>

    <para>However, the OSGi Resolver service is not limited to these higher
    end schemes. Build tools can use the Resolver to find components for the
    build path and/or run time environment and predict the results of
    installing a set of bundles on a target environment. The OSGi Resolver
    service is an essential part of a software model where applications are
    built out of independent components.</para>

    <para>This specification is based on the concepts and API defined in the
    <xref linkend="framework.resource"/>, <xref linkend="framework.wiring"/>,
    and the <xref linkend="framework.module"/>. These specifications are
    required reading for understanding this specification. This specification
    is for highly specialized use, it is not intended to be used in
    applications, the Resolver API is a low level service intended for system
    developers with deep knowledge of the OSGi module layer.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Transitive</emphasis> - From a requirement, find a
          consistent set of resources that satisfy that requirement.</para>
        </listitem>

        <listitem>
          <para><emphasis>Diagnostics</emphasis> - Provide diagnostic
          information when no resolution can be found.</para>
        </listitem>

        <listitem>
          <para><emphasis>Scoped Repositories</emphasis> - Allow the
          environment to control the repositories to use.</para>
        </listitem>

        <listitem>
          <para><emphasis>Build Tools</emphasis> - Must be useful in
          establishing build and run time class paths.</para>
        </listitem>

        <listitem>
          <para><emphasis>Provisioning</emphasis> - Must be useful to find a
          set of bundles that can be installed in a system without running
          into unresolved dependencies.</para>
        </listitem>

        <listitem>
          <para><emphasis>OSGi</emphasis> - Provide the semantics of all the
          OSGi namespaces, including the uses constraints.</para>
        </listitem>

        <listitem>
          <para><emphasis>API</emphasis> - The API for the Resolver must
          provide the base for the Framework Bundle Wiring API.</para>
        </listitem>

        <listitem>
          <para><emphasis>Performant</emphasis> - Enable highly performant
          implementations.</para>
        </listitem>

        <listitem>
          <para><emphasis>Frameworks</emphasis> - Allow Frameworks to provide
          their resolver as a service.</para>
        </listitem>

        <listitem>
          <para><emphasis>Scalable</emphasis> - Allow access to, and use of,
          very large repositories.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="i3331037">
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Environment</emphasis> - A container or framework
          that can install resources and uses a Resolver to wire these
          resources.</para>
        </listitem>

        <listitem>
          <para><emphasis>Resolve Context</emphasis> - An interface
          implemented by the management agent to provide the context of the
          resolution.</para>
        </listitem>

        <listitem>
          <para><emphasis>Wiring</emphasis> - Represents the state of a
          resource's wires, requirements, and capabilities in an
          environment.</para>
        </listitem>

        <listitem>
          <para><emphasis>Resolver</emphasis> - A service that can find a set
          of wires that can be applied to an existing wiring state where a set
          of initial resources have all their mandatory requirements
          satisfied.</para>
        </listitem>

        <listitem>
          <para><emphasis>Wire</emphasis> - Links requirement to a
          capability.</para>
        </listitem>

        <listitem>
          <para><emphasis>Resource</emphasis> -An artifact with requirements
          that need to be provisioned and resolved to provide its
          capabilities.</para>
        </listitem>

        <listitem>
          <para><emphasis>Requirement</emphasis> - A necessity for a given
          resource before it can provide its capabilities; expressed as a
          filter expression on the attributes of a capability in a given
          namespace.</para>
        </listitem>

        <listitem>
          <para><emphasis>Capability</emphasis> - A set of attributes and
          directives defined by a namespace, describes what a resource
          provides when resolved.</para>
        </listitem>

        <listitem>
          <para><emphasis>Hosted Capability</emphasis> - Pairs a resource with
          a capability to model hosting capabilities in another
          resource.</para>
        </listitem>

        <listitem>
          <para><emphasis>Namespace</emphasis> - The type for a capability and
          requirement.</para>
        </listitem>

        <listitem>
          <para><emphasis>Resolution</emphasis> - The result of a resolve
          operation.</para>
        </listitem>
      </itemizedlist>

      <figure pgwide="1">
        <title>Class and Service overview</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.743in" contentwidth="7.000in" fileref="resolver-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Synopsis</title>

      <para>The Resolver service can find a complete and consistent set of
      transitive dependencies starting with an initial set of mandatory and
      optional resources. Such a set can be used to install resources in the
      environment from local or remote repositories. To use the Resolver
      service, the client must provide a <xref linkend="org.osgi.service.resolver.ResolveContext" xrefstyle="hyperlink"/> object. This complex object represents the
      context of a resolution; it provides the initial resources (optional and
      mandatory), defines a number of namespaces specific policies, and
      provides the state of the environment.</para>

      <para>A resolution can be based on an existing wiring in the
      environment, for example the current framework state. For the framework,
      the Resolve Context can find this existing state via the <xref linkend="framework.wiring"/>. The Resolver must then satisfy all the
      requirements of the mandatory resources. The Resolver must always ask
      the Resolve Context to find additional capabilities for the unsatisfied
      requirements. A capability is always associated with a resource, which
      is subsequently associated with additional requirements. The final
      resolution must contain a set of resources that include the initial set
      of mandatory resources, has no unsatisfied mandatory requirements, and
      is consistent with the implied constraints. Otherwise it fails.</para>

      <para>The Requirement-Capability model is fully generic but provides
      special semantics through the use of namespaces. The Resolver must
      implement the standard OSGi namespaces as described in <xref linkend="framework.wiring"/>, which includes the <code>uses</code>
      constraints. Part of the semantics of the OSGi namespaces are delegated
      to the Resolve Context so that it can implement different policies.
      Singletons, ordering of capabilities, and matching are the
      responsibility of the Resolve Context; the Resolver never matches a
      requirement to a capability.</para>

      <para>Requirements have an <code>effective</code> directive that
      indicates in what situations the requirement must be resolved. Also
      here, the Resolve Context decides if a particular requirement is
      effective or not. Only effective requirements are wired in the
      resolution.</para>

      <para>Since capabilities are declared by resources that have additional
      requirements, the Resolver must create a set of resources where all
      transitive requirements are satisfied or fail with a Resolution
      Exception. This Resolution Exception can provide additional details why
      the resolution failed, if possible.</para>

      <para>At the end of a successful resolve operation the Resolver returns
      a <code>Map&lt;Resource,List&lt;Wire&gt;&gt;</code>. These wires are a
      delta on the existing state, if any. The wires can then be used to
      provision missing resources or to provide diagnostic feedback.</para>
    </section>
  </section>

  <section>
    <title>The Resolve Context</title>

    <para>Provisioning is the process of providing a framework with the
    necessary resources to allow it to operate according to set goals. In OSGi
    terms, this consists of installing bundles and ensuring that the
    configuration is set up correctly. With OSGi, bundles explicitly describe
    their capabilities and requirements as manifest headers. This can range
    from Export-Package (a capability) to a generic Provide-Capability
    header.</para>

    <para>OSGi Frameworks have a <emphasis>resolving</emphasis> stage that
    ensures requirements are satisfied before a bundle is allowed to provide
    code to the shared space. As long as the requirements are not met, the
    bundle remains in the <code>INSTALLED</code> state and is thus prohibited
    from contributing capabilities. Once all the mandatory requirements are
    met, the bundle becomes <code>RESOLVED</code>. That is, a framework
    combines two decisions when it resolves bundles:</para>

    <itemizedlist>
      <listitem>
        <para>Find a resolution based on the existing set of installed
        bundles.</para>
      </listitem>

      <listitem>
        <para>Move the bundles that have all their mandatory requirements
        satisfied to the <code>RESOLVED</code> state.</para>
      </listitem>
    </itemizedlist>

    <para>The <emphasis>Resolver service</emphasis> separates these two stages
    and thus allows a third party, the <emphasis>management agent</emphasis>,
    to define the <emphasis>environment</emphasis> of the resolution. A
    management agent can interact with the Resolver service while it is
    searching for a resolution because the Resolver service calls back the
    management agent through a <xref linkend="org.osgi.service.resolver.ResolveContext" xrefstyle="hyperlink"/>
    object. The Resolver service will therefore allow the management agent to
    handle more scenarios, better diagnostics, etc.</para>

    <para>The Resolve Context is provided by the management agent, it is an
    abstract base class and must therefore be extended. It is a non-trivial
    class to implement since it is tightly coupled to the rules of the
    environment; it represents the policies of the management agent for that
    environment. For OSGi framework resolvers, the Resolve Context must
    understand and implement a part of the OSGi framework namespaces.</para>

    <para>With the Resolver service, a management agent can try out
    resolutions before any bundle can see the result of such a resolution but
    it can also include extra bundles or other resources on demand. The
    Resolver service will also allow resolutions to be calculated for other
    frameworks.</para>

    <para>For example, a management agent could use a Resolver service to find
    missing dependencies and install them on demand from a local directory
    with bundles. Such a Provisioner could have the following skeleton:</para>

    <programlisting>public class Provisioner {
  File                 bundles   = ...;
  Map&lt;String,Resource&gt; resources = ...;
  Resolver             resolver  = ...;
  BundleContext        context   = ...;

  public void install(String location) {
    Resource resource = resources.get( location );
    if ( resource == null ) error(...);

    try {
       ResolveContextImpl rc = ...
       rc.addMandatory( resource );
      Set&lt;Resource&gt; provision = resolver.resolve( rc ).keySet();

      for ( Resource rb : provision ) {
        String location = getLocation( rb );

        Bundle bundle = context.installBundle( location );
            if ( !isFragment( bundle ) )
            bundle.start();
      }
    } catch(ResolutionException re) {
      ... // diagnostics
    } catch(BundleException be) {
      ... // diagnostics
    }
  }
}</programlisting>

    <section>
      <title>Mandatory and Optional Resources</title>

      <para>The Resolve Context provides all the parameters for the resolve
      operation, the Resolver does not maintain any state between invocations.
      The Resolve Context must therefore provide the mandatory and optional
      resources, which are essentially the input parameters to the resolve
      operation. The resolver must find a solution that includes at least the
      initial mandatory resources and should include the optional
      resources.</para>
    </section>

    <section xml:id="i3344409">
      <title>Finding Capabilities</title>

      <para>The Resolve Context's <xref linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-" xrefstyle="hyperlink"/> method must be implemented in such a way that it
      returns an ordered list of capabilities. The Resolver will treat the
      order of the capabilities as preferences, the first element is more
      preferred than a later element. The Resolver cannot guarantee that the
      wiring obeys this preference since there can be other constraints.
      However, a Resolver must use this preference order for simple cases and
      try to use it in more constrained situations.</para>

      <para>The Resolver does not make any assumptions, this means that the
      <xref linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-" xrefstyle="hyperlink"/> method must do all the matching. Even though the
      Resolver gets the mandatory and optional resources it will not search
      these for capabilities to satisfy requirements. If the <xref linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-" xrefstyle="hyperlink"/> method does not search these resources then
      their capabilities will not be used. The same is true for the existing
      wiring state used.</para>

      <para>Since this section describes the Resolver with respect to a
      provisioning agent, the set of resources is not limited to the installed
      set. That is, normally when a framework is resolved the Resolver only
      has to include installed resources. However, for a provisioning agent it
      is possible to retrieve external resources. The <xref linkend="service.resolver-ref.service.repository"/> provides access to
      resource repositories but a management agent is free to find
      capabilities by any alternative means.</para>

      <para>For resolving an OSGi framework the specifications outlines a
      number of heuristics that guide the order of wiring bundles and
      packages:</para>

      <orderedlist>
        <listitem>
          <para>A resource that is already resolved, that is, it is already
          wired</para>
        </listitem>

        <listitem>
          <para>The highest version</para>
        </listitem>

        <listitem>
          <para>The lowest bundle id</para>
        </listitem>
      </orderedlist>

      <para>The Resolver can, and likely will, use the returned list to
      maintain its internal state during the resolve operation while trying
      out different potential solutions. It can add and remove capabilities at
      will. The returned list must therefore be mutable and not reused, after
      it is returned; it becomes owned by the Resolver. However, the Resolver
      can call back later with the <xref linkend="org.osgi.service.resolver.ResolveContext.insertHostedCapability-List-HostedCapability-" xrefstyle="hyperlink"/> method, giving back the returned list as the
      first parameter, see <xref linkend="i3344346"/>.</para>

      <para>For example, assume that all possible resources in the previous
      example can be gotten with the <code>getSortedResources</code> method in
      the preferred resource order. This list contains all installed resources
      as well as any potentially installable resources. This list is sorted
      once on the given ordering criteria, this only has to be done once and
      not for each <xref linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-" xrefstyle="hyperlink"/> method invocation. The following code, which
      does not order by capability versions, could then be a simple skeleton
      for the <xref linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-" xrefstyle="hyperlink"/> method on the <code>ResolveContextImpl</code>
      inner class:</para>

      <programlisting>public List&lt;Capability&gt; findProviders(Requirement requirement ) {
  List&lt;Capability&gt; result = new ArrayList&lt;Capability&gt;();

  for ( Resource r : getSortedResources() )
    for ( Capability c : r.getCapabilities( null ) )
      if ( match( requirement, c ) )
          result.add( c );

  return result;
}</programlisting>
    </section>

    <section>
      <title>Matching</title>

      <para>The <xref linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-" xrefstyle="hyperlink"/> method is responsible for only returning the
      capabilities that the management agent wants to be considered by the
      Resolver. Since the Resolver must never match any requirements to
      capabilities it allows the management agent to fully control the
      matching. However, in an OSGi environment the following matching
      behavior is expected:</para>

      <itemizedlist>
        <listitem>
          <para>Requirements and capabilities must be in the same
          namespace.</para>
        </listitem>

        <listitem>
          <para>Only requirements and capabilities that have no
          <code>effective</code> directive or have the directive set to
          <code>resolve</code> should be considered.</para>
        </listitem>

        <listitem>
          <para>The requirement's filter must match the capability's
          attributes.</para>
        </listitem>

        <listitem>
          <para>If the namespace is an <code>osgi.wiring.*</code> namespace
          then the <code>mandatory</code> directive on the capability must be
          supported. Mandatory attributes are defined with a
          <code>mandatory</code> directive on a capability, they contain a
          list of attribute names. Each of these attributes must be used in
          the filter. Since the filter must be constructed from the
          corresponding manifest header it is sufficient to search the filter
          string with a regular expression that detects the usage of an
          attribute name.</para>
        </listitem>
      </itemizedlist>

      <para>The following example shows a skeleton <code>match</code> method
      that provides OSGi semantics:</para>

      <programlisting>boolean match(Requirement r, Capability c){
  if ( !r.getNamespace().equals( c.getNamespace() ) )
    return false;

  String effective = c.getDirectives().get("effective");
  if ( !(effective == null || effective.equals( "resolve") ) )
    return false;

  String f = r.getDirectives().get( "filter" );
  if ( f  != null ) {
    Filter filter = context.createFilter( f );
    if ( !filter.matches( c.getAttributes() ) )
      return false;
  }

  if ( !c.getNamespace().startsWith( "osgi.wiring." ) )
    return true;

  String mandatory = c.getDirectives().get("mandatory");
  if ( mandatory == null)
    return true;

  List&lt;String&gt; attrs =
    Arrays.asList( mandatory.toLowerCase().split( "\\s*,\\s*") );

  Matcher m = FILTER_ASSERT_PATTERN.matcher( f == null ? "": f );
  while( m.find() )
    attrs.remove(m.group(1)); // the attribute name

  return mandatory.isEmpty();
}</programlisting>
    </section>

    <section>
      <title>Repositories</title>

      <para>Resolving to provision a framework is different than a framework
      resolving itself. During provisioning remote repositories can be
      consulted to find external resources while the framework only resolves a
      limited set (the installed bundles). These repositories generally
      contain magnitudes more bundles than what is installed in a
      framework.</para>

      <para>Repositories do not implement any namespace specific semantics and
      therefore do not understand any directives. Repositories only verify the
      requirement's filter (if any) against the capability's attributes. The
      Resolver expects the Resolve Context to do the namespace specific
      matching. The <xref linkend="service.resolver-ref.service.repository"/>
      provides the details for a service that abstracts a
      Requirement-Capability aware repository.</para>

      <para>With such a repository service the <xref linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-" xrefstyle="hyperlink"/> method can be implemented as follows:</para>

      <programlisting>List&lt;Repository&gt; repositories = new CopyOnWriteArrayList&lt;Repository&gt;();

void addRepository(  Repository repository) { repositories.add(repository);}
void removeRepository(Repository repository){ repositories.remove(repository);}

public List&lt;Capability&gt; findProviders( Requirement requirement) {
  List&lt;Capability&gt; result = new ArrayList&lt;Capability&gt;();

  // previous findProviders that searches the initial resources

  for ( Repository repository : repositories ) {
     Collection&lt;Capability&gt; capabilities = repository.findProviders(
            Collections.singleton( requirement ) ).get( requirement);
     for ( Capability c : capabilities )
       if ( match( requirement, c ) )
           result.add( c );
  }
  return result;
}</programlisting>
    </section>

    <section>
      <title>Existing Wiring State</title>

      <para>The Resolver service always creates a list of wires that should be
      added to an existing state. To get the existing state, the <xref linkend="org.osgi.service.resolver.ResolveContext" xrefstyle="hyperlink"/> interface specifies the <xref linkend="org.osgi.service.resolver.ResolveContext.getWirings--" xrefstyle="hyperlink"/> method. This method must return the existing
      state as a <code>Map&lt;Resource,Wiring&gt;</code>. A
      <code>Wiring</code> is an object that reflects the wired state of a
      resource in the environment. From this object, all declared and hosted
      capabilities and requirements can be found, including their wires if
      any. The Resolver needs this existing state to create a consistent
      resolution. For example, uses constraints require access to the existing
      state.</para>

      <para>The Resolver service API is based on the generic
      Requirement-Capability model. This API is implemented by the OSGi
      framework to reflect its internal wiring, see <xref linkend="framework.wiring"/>. When the Resolver service is used for an
      OSGi framework then the Resolve Context can provide the existing wiring
      state based on the Framework Wiring API. The interfaces used in the
      <code>org.osgi.framework.wiring</code> package all extend their
      counterpart in the <code>org.osgi.resource</code> package (the generic
      model). For example, the <code>BundleCapability</code> interface extends
      the <code>Capability</code> interface.</para>

      <para>The framework wiring API models all the power and complexities of
      the OSGi framework. One of those aspects is <emphasis>removal
      pending</emphasis>. Each installed bundle is represented by one or more
      bundle revisions. Each bundle revision is a <code>Resource</code> object
      but only one is the current bundle revision. During a resolve operation
      a framework can actually wire to the current bundle revision but is not
      forbidden to also select the pending removal bundle revisions. The
      Resolve Context must therefore decide if it provides only the current
      bundle revisions or all. The best policy solution in this case is to
      always refresh after a (batch) of install operations and only resolve
      when there are no pending-removal bundle revisions. However, certain
      management agents attempt to manage a system that is in this half-way
      state and will then be required to include the pending-removal
      revisions.</para>

      <para>The following example code shows a possible implementation of the
      <xref linkend="org.osgi.service.resolver.ResolveContext.getWirings--" xrefstyle="hyperlink"/> method. It only uses the current wiring and
      ignores removal pending bundle revisions:</para>

      <programlisting>public Map&lt;Resource,Wiring&gt; getWirings(){
    Map&lt;Resource,Wiring&gt; wirings = new HashMap&lt;Resource,Wiring&gt;();

   for ( Bundle b : context.getBundles() ) {
     BundleRevision revision = b.adapt( BundleRevision.class);
     if ( revision != null ) {
       Wiring wiring = revision.getWiring();
       if ( wiring != null )
           wirings.put( revision, wiring );
     }
   }
   return wirings;
}</programlisting>

      <para>A wiring for a resource may also have a subset of required wires
      which substitute capabilities provided by the resource or one of its
      attached fragment resources. The <xref linkend="org.osgi.service.resolver.ResolveContext.getSubstitutionWires-Wiring-" xrefstyle="hyperlink"/> method is called by the resolver in order to
      find the wires that substitute capabilities of the wiring. For example,
      when a wiring provides a <code>osgi.wiring.bundle</code> capability that
      is used to resolve one or more <code>osgi.wiring.bundle</code>
      requirements. In this case the resolver needs to discover which
      capabilities have been substituted in order to ensure a consistent class
      space (see <xref linkend="framework.module.requiringbundles"/>). In
      order to get the capabilities which have been substituted, the resolver
      asks the resolve context to return the substitution wires for the
      wiring.</para>

      <para>Note that the default implementation of this method searches all
      the <code>osgi.wiring.package</code> capabilities which are declared as
      provided by the resource associated with the wiring and fragment
      resources wired to the wiring with the <code>osgi.wiring.host</code>
      namespace. The provided capabilities are compared against the required
      package wires to determine which wires are substitution wires.
      Subclasses of ResolveContext should provide a more efficient
      implementation of this method.</para>
    </section>

    <section>
      <title>Effective</title>

      <para>The Resolver service is designed to work with OSGi frameworks but
      the scope is broader; its design allows many alternative usages. The
      <code>effective</code> directive on the capabilities and requirements is
      meant to allow requirements and capabilities to be effective in
      different phases. The default is <code>resolve</code>, the value for an
      OSGi framework resolving process. Bundles and other OSGi defined
      artifacts must declare their capabilities and requirements in the
      <code>resolve</code> effective time to be considered by an OSGi
      resolver.</para>

      <para>However, Resolvers can use the <code>effective</code> directive to
      run the Resolver at other times than the standard OSGi framework
      resolve. For example, it could be possible to define an <emphasis>active
      time</emphasis> to resolve the service dependencies.</para>

      <para>For this reason, the Resolver is designed to be agnostic for this
      directive, it will always ask the <xref linkend="org.osgi.service.resolver.ResolveContext" xrefstyle="hyperlink"/> if a requirement is effective. It does this with
      the <xref linkend="org.osgi.service.resolver.ResolveContext.isEffective-Requirement-" xrefstyle="hyperlink"/> method. Since the Resolver service never matches
      requirements to capabilities it is also up to the Resolve Context to
      decide how to treat the <code>effective</code> directive. For an OSGi
      resolve operation, capabilities should also have an effective time value
      of <code>resolve</code> (or not set since <code>resolve</code> is the
      default).</para>

      <para>To make requirements effective during the resolving of bundles it
      will be necessary to implement the <xref linkend="org.osgi.service.resolver.ResolveContext.isEffective-Requirement-" xrefstyle="hyperlink"/> method similar to:</para>

      <programlisting>public boolean isEffective( Requirement requirement) {
  String e = requirement.getDirectives().get( "effective");
  return e==null || "resolve".equals( e );
}</programlisting>
    </section>

    <section xml:id="i3344346">
      <title>Insert Hosted Capabilities</title>

      <para>One of the complex aspects of resolving for an OSGi framework is
      handling fragments. For fragments, the declared capabilities are going
      to be hosted by their hosts. The <code>Requirement</code> and
      <code>Capability</code> objects have a <code>getResource</code> method
      that returns the associated resource. For hosted capabilities and
      requirements this must be the hosting resource and for others the
      declaring resource.</para>

      <para>The <xref linkend="org.osgi.service.resolver.HostedCapability" xrefstyle="hyperlink"/> interface defines the interface for allowing the
      hosting resource to be returned instead of the declaring resource. Since
      the Resolver service creates these Hosted Capabilities the Resolver
      needs a way to add them to the lists of capabilities returned from <xref linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-" xrefstyle="hyperlink"/>. The Resolver service cannot add them itself
      since this list has a preference order, the Resolver service must
      therefore ask the Resolve Context to insert this new capability to allow
      the Resolve Context to maintain the desired order.</para>

      <para>The Resolve Context must therefore implement an <xref linkend="org.osgi.service.resolver.ResolveContext.insertHostedCapability-List-HostedCapability-" xrefstyle="hyperlink"/> method. The given list must have been returned
      earlier from a <xref linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-" xrefstyle="hyperlink"/> method invocation. The Resolve Context must find
      the appropriate position to insert the <xref linkend="org.osgi.service.resolver.HostedCapability" xrefstyle="hyperlink"/> object, insert it, and return the index of the
      inserted object.</para>

      <para>It is the responsibility of the Resolve Context to find the proper
      position. In <xref linkend="i3344409"/> it was discussed how the <xref linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-" xrefstyle="hyperlink"/> method must return an ordered list. The <xref linkend="org.osgi.service.resolver.ResolveContext.insertHostedCapability-List-HostedCapability-" xrefstyle="hyperlink"/> has that same responsibility.</para>

      <para>The following example shows how the Hosted Capability is inserted
      based on the index of the hosted resource's index in the sorted list of
      resources the management agent maintained. The example iterates through
      the capabilities and compares the index of sorted resources to indicate
      preference. If it finds a capability from a resource that was later in
      the list of sorted resources then it inserts it at that position. A real
      implementation should also take the version of the capability into
      account.</para>

      <programlisting>public int insertHostedCapability(
    List&lt;Capability&gt; caps, HostedCapability hc ) {

    List&lt;Resource&gt; resources = getSortedResources();
    int index = resources.indexOf( hc.getResource() );

    for ( int i =0; i &lt; caps.size(); i++ ) {
        Capability c = caps.get( i );
        int otherIndex = resources.indexOf( c.getResource() );
        if ( otherIndex &gt; index ) {
            caps.add( i, hc );
            return i;
        }
    }
    caps.add( hc );
    return caps.size()-1;
}</programlisting>
    </section>

    <section xml:id="i3347565">
      <title>Fragments</title>

      <para>Fragments are resources that have an <code>osgi.wiring.host</code>
      requirement that must match a capability from one or more host bundles.
      However, for example an Export-Package in a fragment must be merged with
      its attached hosts. These capabilities and requirements from namespaces
      that appear as if they come from the host bundle are called
      <emphasis>hosted</emphasis>.</para>

      <para>When resolving a set of resources it must be possible to pull in
      any available fragments which may attach to the resource. Since
      fragments are not required by the host bundle, there will be no resource
      requiring the fragment bundles. However, fragments will require their
      hosts. A Resolver should attach any fragments available in a resolution
      to suitable hosts.</para>

      <para>In order to discover additional fragments which may be attached to
      the resources in a resolution the <xref linkend="org.osgi.service.resolver.ResolveContext.findRelatedResources-Resource-" xrefstyle="hyperlink"/> method is called by the resolver . The resolver
      attempts to also resolve the related resources during the current
      resolve operation. Failing to resolve one of the related resources must
      not result in a resolution exception unless the related resource is also
      considered a mandatory resource.</para>

      <para>A resolve context may consider a fragment to be a related resource
      for the hosts it can attach to. In order for the resolver to pull the
      fragments into the resolve operation the resolve context is asked to
      return the related resources of each host bundle which is to be
      resolved. The resolve context may decide if the fragments of the host
      needs to be resolved along with the host. Note that fragments are used
      as an example of a related resource. The resolve context is free to use
      any type of resource as a related resource.</para>

      <para>Fragments can of course also be found by the normal finding of
      capabilities.</para>
    </section>

    <section>
      <title>Singleton Capabilities</title>

      <para>A resource can be marked as a <emphasis>singleton</emphasis>. A
      singleton resource has the <code>singleton</code> directive set to true
      on the <code>osgi.identity</code> capability. A singleton resource
      <emphasis>conflicts</emphasis> with another singleton resource
      if:</para>

      <itemizedlist>
        <listitem>
          <para>They have the same <code>osgi.identity</code>, and</para>
        </listitem>

        <listitem>
          <para>They have the same <code>type</code>, and</para>
        </listitem>

        <listitem>
          <para>They have a different or identical version.</para>
        </listitem>
      </itemizedlist>

      <para>This constraint is not enforced by the Resolver service to give
      more flexibility to management agents. The Resolve Context must ensure
      that it does not return capabilities from conflicting singleton
      resources from the <xref linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-" xrefstyle="hyperlink"/> method. When the Resolver is used with a limited
      set of resources then it is possible to enumerate all singletons ahead
      of time and use permutations. However, when repositories are used an
      incremental method works better because the scope is so much
      larger.</para>

      <para>When the <xref linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-" xrefstyle="hyperlink"/> method is called for a requirement that selects
      a capability declared in a singleton then it is likely that repositories
      will return multiple versions of this singleton including the resource
      with the highest available version for conflicting resources. It is
      therefore possible to maintain a white list of singletons
      incrementally.</para>

      <para>Once the <xref linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-" xrefstyle="hyperlink"/> method has created a result list, it is possible
      to prune this list of conflicting singletons. This can be an incremental
      process, the first time a singleton is encountered in such a list of
      capabilities the highest version can be <emphasis>selected</emphasis> as
      the singleton. Other singletons that are in that list or come in other
      invocations of <xref linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-" xrefstyle="hyperlink"/> can then no longer provide capabilities. For
      example:</para>

      <programlisting>    Map&lt;String,Resource&gt; allowlist = new HashMap&lt;String,Resource&gt;();

    void prune( List&lt;Capability&gt; list ) {
        Map&lt;String,Resource&gt; singletons = new HashMap&lt;String,Resource&gt;();

        for ( Capability c : list) {
            Resource r = c.getResource();
            Version now = getVersion( r );
            String identity = getIdentity( r );

            if ( isSingleton( r ) &amp;&amp; !allowlist.containsKey(identity ) ) {
                Resource selected = singletons.get( identity );
                if ( selected == null )
                    singletons.put( identity, r );
                else {
                    Version old = getVersion( selected );
                    if ( now.compareTo( old )&gt; 0 )
                        singletons.put( identity, r );
                }
            }
      }

      this.allowlist.putAll( singletons );

        for ( Iterator&lt;Capability&gt; i=list.iterator(); i.hasNext();) {
            Capability c = i.next();
            Resource r = c.getResource();
            String identity = getIdentity( r );
            Resource selected = this.allowlist.get( identity );
            if ( selected != null &amp;&amp; !selected.equals( r ))
                i.remove();
        }
  }</programlisting>
    </section>

    <section>
      <title>Diagnostics</title>

      <para>The Resolver service throws a <xref linkend="org.osgi.service.resolver.ResolutionException" xrefstyle="hyperlink"/> when the <code>resolve</code> operation cannot
      find a solution. This Exception provides the standard human readable
      message. However, there is also the <xref linkend="org.osgi.service.resolver.ResolutionException.getUnresolvedRequirements--" xrefstyle="hyperlink"/> method. With this method it is possible to find
      what requirements could not be matched. Though this is very useful in
      many cases it must be realized that resolving is a complicated process.
      It is not possible to establish the exact set of missing requirements
      because any unresolved resolution can have many, different, sets of
      unresolved requirements. This is an intrinsic part of the resolution
      problem. There is also no guarantee that providing capabilities that
      satisfy these requirements will give a successful resolution. There
      could still be other constraints that cannot be satisfied. In general,
      the Resolve Context can already detect any unresolved mandatory
      requirements when it cannot find a matching capability in the <xref linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-" xrefstyle="hyperlink"/> method.</para>

      <para>That said, the <xref linkend="org.osgi.service.resolver.ResolutionException.getUnresolvedRequirements--" xrefstyle="hyperlink"/> can often point to a potential solution.</para>
    </section>

    <section>
      <title>Cancel</title>

      <para>Some resolution operations can be long running, and therefore a
      resolve context may want to cancel the currently running resolve
      operation. The resolver must register a single runnable callback with
      the resolve context that is associated with the currently running
      resolve operation. The <xref linkend="org.osgi.service.resolver.ResolveContext.onCancel-Runnable-" xrefstyle="hyperlink"/> method must be invoked by the resolver
      implementation before any other method on the resolve context is
      invoked. The resolve context invokes the callback to cancel the
      currently running resolve operation that appears to be running endlessly
      or at risk of running out of resources. The resolve context may give up
      on the resolve operation or attempt to try another resolve operation
      with a smaller set of resources which may allow the resolve operation to
      complete normally.</para>
    </section>

    <section>
      <title>Complexity</title>

      <para>Implementing a Resolve Context is a non-trivial task that requires
      extensive knowledge of the OSGi framework, especially the module layer.
      Though this section contains numerous code examples, they are not
      sufficient to implement a real Resolve Context since this would require
      too much code for a specification.</para>
    </section>
  </section>

  <section>
    <title>Resolver Service</title>

    <para>The <emphasis>Resolver</emphasis> service is an interface to a
    generic constraint solver based on the
    <emphasis>Require-Capability</emphasis> model defined in <xref linkend="framework.resource"/>. This model defines a constraint-solving
    language that is used by the Framework, see <xref linkend="framework.module"/>, to create the mesh of class loaders.
    However, the Resolver service has been designed to be useful in solving
    other types of constraint problems.</para>

    <para>The task of the Resolver is to find a
    <emphasis>resolution</emphasis>. The resolve method returns a
    <emphasis>delta</emphasis> on an <emphasis>existing wiring
    state</emphasis>. The total of existing wiring state and the applied delta
    is the resolution. The delta is a set of wires between requirements and
    capabilities.</para>

    <section>
      <title>Variables</title>

      <para>The <xref linkend="org.osgi.service.resolver.Resolver.resolve-ResolveContext-" xrefstyle="hyperlink"/> method uses a Resolve Context to provide the
      context and parameters of the resolution. During the resolution process
      the Resolver service can callback the Resolve Context to retrieve the
      following information:</para>

      <informaltable>
        <tgroup cols="3">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="5*"/>

          <colspec colnum="3" colwidth="6*"/>

          <tbody>
            <row>
              <entry><emphasis>R</emphasis><subscript>m</subscript></entry>

              <entry><code>Collection&lt;Resource&gt;</code></entry>

              <entry><xref linkend="org.osgi.service.resolver.ResolveContext.getMandatoryResources--" xrefstyle="hyperlink"/></entry>
            </row>

            <row>
              <entry><emphasis>R</emphasis><subscript>o</subscript></entry>

              <entry><code>Collection&lt;Resource&gt;</code></entry>

              <entry><xref linkend="org.osgi.service.resolver.ResolveContext.getOptionalResources--" xrefstyle="hyperlink"/></entry>
            </row>

            <row>
              <entry><emphasis>C</emphasis><subscript>env</subscript></entry>

              <entry><code>Map&lt;Requirement,List&lt;Capability&gt;&gt;</code></entry>

              <entry>Combined answers from the <xref linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-" xrefstyle="hyperlink"/> method</entry>
            </row>

            <row>
              <entry><emphasis>Q</emphasis><subscript>eff</subscript></entry>

              <entry><code>Collection&lt;Requirement&gt;</code></entry>

              <entry>Set of effective requirements as defined by the <xref linkend="org.osgi.service.resolver.ResolveContext.isEffective-Requirement-" xrefstyle="hyperlink"/> method</entry>
            </row>

            <row>
              <entry>X</entry>

              <entry><code>Map&lt;Resource,Wiring&gt;</code></entry>

              <entry>An existing Wiring state, <xref linkend="org.osgi.service.resolver.ResolveContext.getWirings--" xrefstyle="hyperlink"/></entry>
            </row>

            <row>
              <entry>S</entry>

              <entry><code>Map&lt;Wiring,List&lt;Wire&gt;&gt;</code></entry>

              <entry>The substitution wires of an existing Wiring state, <xref linkend="org.osgi.service.resolver.ResolveContext.getSubstitutionWires-Wiring-" xrefstyle="hyperlink"/></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>The Resolver service returns the following:</para>

      <informaltable>
        <tgroup cols="3">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="5*"/>

          <colspec colnum="3" colwidth="6*"/>

          <tbody>
            <row>
              <entry><emphasis>D</emphasis></entry>

              <entry><code>Map&lt;Resource,List&lt;Wire&gt;&gt;</code></entry>

              <entry>The resolution, a delta on the existing state</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>The <xref linkend="org.osgi.service.resolver.Resolver.resolve-ResolveContext-" xrefstyle="hyperlink"/> method returns a resolution <code>D</code> that
      is a delta on the existing Wiring state <code>X</code>. It is up to the
      Resolve Context to ensure that the delta <code>D</code> is installed. In
      for example the OSGi framework the framework hooks can be used to guide
      the framework's resolving process.</para>
    </section>

    <section>
      <title>Resolving</title>

      <para>The goal of the Resolver is to provide a set of wires between a
      set of <emphasis>resolved</emphasis> resources. A resource is resolved
      when all its <emphasis>mandatory</emphasis> and
      <emphasis>effective</emphasis> requirements are satisfied by
      capabilities from resolved resources. A Resolver must not return wires
      between resources that have unsatisfied mandatory requirements.</para>

      <para>A <emphasis>mandatory</emphasis> requirement has a
      <code>resolution</code> directive that is not set or that is set to
      <code>mandatory</code>. The <emphasis>effectiveness</emphasis> of a
      requirement is defined by the Resolve Context, a Resolver service must
      call the <xref linkend="org.osgi.service.resolver.ResolveContext.isEffective-Requirement-" xrefstyle="hyperlink"/> method to establish if a requirement is
      effective for a given resolve operation. A Resolver must never create a
      wire from a requirement that is not effective.</para>

      <para>To find a resolution, the Resolver must use the Resolve Context to
      find <emphasis>candidate</emphasis> capabilities for the requirements
      declared in the resources that it needs to resolve. A candidate
      capability is a capability that <emphasis>satisfies</emphasis> the
      requirement. From the perspective of the Resolver service, a requirement
      is satisfied by a capability when that capability is returned from the
      <xref linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-" xrefstyle="hyperlink"/> method. A Resolver has no alternative way to
      find out if a requirement is satisfied by a capability and must
      therefore not make any assumptions about matching. Any matching rules
      like for example the <code>osgi.wiring.*</code> <code>mandatory</code>
      directive must be implemented by the Resolve Context. A Resolve Context
      must always return the same capabilities during a resolving operation
      when given the same requirement.</para>

      <para>Since the resolver cannot match requirements and capabilities the
      Resolve Context must return capabilities for all possible resources,
      this must include:</para>

      <itemizedlist>
        <listitem>
          <para>The given mandatory resources <emphasis>R</emphasis>
          <subscript>m</subscript></para>
        </listitem>

        <listitem>
          <para>The given optional resources <emphasis>R</emphasis>
          <subscript>o</subscript></para>
        </listitem>

        <listitem>
          <para>The existing Wiring state X</para>
        </listitem>
      </itemizedlist>

      <para>It can include additional resources that were indirectly returned
      through the <xref linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-" xrefstyle="hyperlink"/> method.</para>

      <para>The existing wiring X and its substitution wires S provides an
      existing set of constraints that the Resolver service must abide by. It
      can get this state with the <xref linkend="org.osgi.service.resolver.ResolveContext.getWirings--" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.service.resolver.ResolveContext.getSubstitutionWires-Wiring-" xrefstyle="hyperlink"/> methods. The purpose of the existing state is to
      ensure that any wires are compatible with existing wiring. For an OSGi
      framework it is crucial that the uses constraints are maintained for the
      resolution, see <xref linkend="framework.module"/>.</para>

      <para>The Resolver service can wire new requirements to existing
      capabilities but it can never create wires for an existing requirement
      from the existing wiring unless the resolve process is for a dynamic
      resolve, see <xref linkend="i3347566"/>.</para>

      <para>If the Resolver service attaches a hosted resource like a
      fragment, and thereby needs to add new <xref linkend="org.osgi.service.resolver.HostedCapability" xrefstyle="hyperlink"/> objects to a previously returned list from <xref linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-" xrefstyle="hyperlink"/> then it must call the Resolve Context's <xref linkend="org.osgi.service.resolver.ResolveContext.insertHostedCapability-List-HostedCapability-" xrefstyle="hyperlink"/> method.</para>

      <para>Fragments can be attached to resolved resources or to resources
      that declare the capabilities returned from <xref linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-" xrefstyle="hyperlink"/>, that is,
      <emphasis>C</emphasis><subscript>env</subscript>. Additional resources
      are also pulled into the resolve operation by invoking the <xref linkend="org.osgi.service.resolver.ResolveContext.findRelatedResources-Resource-" xrefstyle="hyperlink"/> method on the resolve context. As part of the
      related resources the resolve context can include fragments to be
      considered as part of the resolve operation. This allows the available
      fragments to be resolved when the host is being resolved.</para>

      <para>This specification does not define the detailed rules and
      constraints associated with resolving; these rules are defined in their
      namespaces. An OSGi Resolver service must support at least all
      namespaces defined in <xref linkend="framework.namespaces"/> except for
      the following directives:</para>

      <itemizedlist>
        <listitem>
          <para><code>mandatory</code> - Mandatory attributes on the
          <code>osgi.wiring.*</code> namespaces must be implemented by the
          Resolve Context. The Resolve Context should not return capabilities
          from <xref linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-" xrefstyle="hyperlink"/> unless the rules of the OSGi
          <code>mandatory</code> directive are followed.</para>
        </listitem>

        <listitem>
          <para><code>singleton</code> - Singletons are not implemented by the
          Resolver, the Resolve Context must not return capabilities from
          <xref linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-" xrefstyle="hyperlink"/> from conflicting singleton resources.</para>
        </listitem>

        <listitem>
          <para><code>effective</code> - The Resolve Context decides what
          requirements are effective in the <xref linkend="org.osgi.service.resolver.ResolveContext.isEffective-Requirement-" xrefstyle="hyperlink"/> method.</para>
        </listitem>
      </itemizedlist>

      <para>A Resolver service must support the uses constraints and any
      applicable rule defined in the <xref linkend="framework.module"/> for
      the <code>osgi.wiring.*</code> namespaces.</para>

      <para>The Resolver must return a delta wiring to the existing state
      (potentially empty) or throw an Exception. The resolution:</para>

      <itemizedlist>
        <listitem>
          <para>Must contain all mandatory resources
          <emphasis>R</emphasis><subscript>m</subscript> as provided by <xref linkend="org.osgi.service.resolver.ResolveContext.getMandatoryResources--" xrefstyle="hyperlink"/>.</para>
        </listitem>

        <listitem>
          <para>Must have all resources resolved.</para>
        </listitem>

        <listitem>
          <para>Must have no wired capabilities that are declared or hosted in
          resources that are not resolved.</para>
        </listitem>

        <listitem>
          <para>Should include optional resources
          <emphasis>R</emphasis><subscript>o</subscript> as provided by <xref linkend="org.osgi.service.resolver.ResolveContext.getOptionalResources--" xrefstyle="hyperlink"/>.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="i3347566">
      <title>Dynamic Resolving</title>

      <para>The <xref linkend="org.osgi.service.resolver.Resolver.resolveDynamic-ResolveContext-Wiring-Requirement-" xrefstyle="hyperlink"/> method is used to resolve a dynamic requirement
      for an existing host wiring. For example, this method can be used to
      resolve dynamic package imports as specified by the
      <code>DynamicImport-Package</code> manifest header. This method may
      resolve additional resources in order to resolve the dynamic
      requirement. Dynamic resolving must return a resolution <code>D</code>
      that is a delta on the existing Wiring state <code>X</code> or throw a
      <xref linkend="org.osgi.service.resolver.ResolutionException" xrefstyle="hyperlink"/> if the dynamic requirement cannot be
      resolved.</para>

      <para>The delta must contain the host resource of the host wiring as a
      key. The list of wires for the host resource entry will contain a single
      wire that resolves the dynamic requirement to a valid capability. The
      delta wiring may also contain additional resources that are necessary to
      resolve the dynamic requirement.</para>

      <para>To find a dynamic resolution <code>D</code>, the Resolver must use
      the Resolve Context in the same way as normal resolving except the
      Resolve Context is not asked for mandatory or optional resources as
      provided by <xref linkend="org.osgi.service.resolver.ResolveContext.getMandatoryResources--" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.service.resolver.ResolveContext.getOptionalResources--" xrefstyle="hyperlink"/>. The Resolve Context is asked to find providers
      for the dynamic requirement as provided by <xref linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-" xrefstyle="hyperlink"/>.</para>

      <para>The Resolver assumes the following about the host wiring and the
      dynamic requirement:</para>

      <itemizedlist>
        <listitem>
          <para>The requirement uses the <code>osgi.wiring.package</code>
          namespace.</para>
        </listitem>

        <listitem>
          <para>The requirement has a <code>resolution</code> directive of
          <code>dynamic</code>.</para>
        </listitem>

        <listitem>
          <para>The requirement is hosted by the host wiring.</para>
        </listitem>

        <listitem>
          <para>A requirement that has a <code>cardinality</code> directive of
          <code>single</code> is not used by an existing required wire of the
          host wiring.</para>
        </listitem>
      </itemizedlist>

      <para>The Resolver is not required to validate these assumptions. If
      these assumptions are not true then the result of the dynamic resolution
      is not specified.</para>

      <para>The Resolver uses the dynamic requirement to call <xref linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-" xrefstyle="hyperlink"/> in order to find valid matching capabilities. In
      order for a matching capability to be considered as valid it must
      satisfy the following rules:</para>

      <itemizedlist>
        <listitem>
          <para>The capability must use the <code>osgi.wiring.package</code>
          namespace.</para>
        </listitem>

        <listitem>
          <para>The wiring must not provide an
          <code>osgi.wiring.package</code> capability that has the same
          package name as the matching capability. In other words, the
          resolved bundle must not already export the package name.</para>
        </listitem>

        <listitem>
          <para>The wiring must not have a required wire that wires to an
          <code>osgi.wiring.package</code> capability that has the same
          package name as the matching capability. In other words, the
          resolved bundle must not already import the package name.</para>
        </listitem>
      </itemizedlist>

      <para>The Resolver assumes the matching capabilities are valid. If
      invalid capabilities are returned by the Resolve Context then the result
      of the dynamic resolution is not specified.</para>

      <para>At this point the dynamic resolution continues on as a normal
      resolution where the host wiring resource is considered a mandatory
      resource and the dynamic requirement is considered a mandatory
      requirement. The resources providing the matching capabilities to the
      dynamic requirement are then resolved as in a normal resolution
      operation.</para>
    </section>

    <section>
      <title>Resolution Exception</title>

      <para>If the Resolver cannot find a solution or it runs into problems
      then it must throw a Resolution Exception, which is a Runtime
      Exception.</para>

      <para>The <xref linkend="org.osgi.service.resolver.ResolutionException" xrefstyle="hyperlink"/> provides the <xref linkend="org.osgi.service.resolver.ResolutionException.getUnresolvedRequirements--" xrefstyle="hyperlink"/> method. If the resolution failed then it is
      possible that this was caused because it failed to find matches for
      certain requirements. The information in this method can be very helpful
      to find a solution that will work, however, there are a number of
      caveats.</para>

      <para>Resolving is an NP-complete problem. For these problems there
      exists no algorithm that can infer a solution from the desired outcome.
      Therefore, the Resolver tries a potential solution and if that solution
      does not match the constraints it will backtrack and attempt another
      solution. An unavoidable aspect of such solutions is that it is
      impossible to pin-point a single failure point if the algorithm fails to
      find a solution, in general the algorithm gives up after having
      exhausted its search space. However, during its search it might have
      been very close to a solution, for example it only missed a single
      requirement, but its final failure missed many requirements.</para>

      <para>The implication is that the reported missing requirements neither
      give a guarantee for a resolution when satisfied nor indicate that this
      is the smallest set of missing requirements.</para>

      <para>Therefore, <xref linkend="org.osgi.service.resolver.ResolutionException.getUnresolvedRequirements--" xrefstyle="hyperlink"/> is intended for human consumption and not for
      automated solutions.</para>
    </section>
  </section>

  <section xml:id="i3331809">
    <title>Security</title>

    <section>
      <title>Resolving</title>

      <para>The Resolver service is a pure function that has no state. The
      Resolve Context maintains the state and is therefore the actor that
      requires most permissions. In general, it will require access to the
      Wiring API and Repositories.</para>

      <para>Since the Resolver requires no external access it does not have to
      be a trusted service. Resolve Contexts that support security must ensure
      that the callbacks are executed in a privileged block.</para>
    </section>

    <section>
      <title>Minimum Implementation Permissions</title>

      <programlisting>PackagePermission[org.osgi.service.resolver,IMPORT]
ServicePermission[...Resolver, REGISTER ]</programlisting>
    </section>

    <section>
      <title>Minimum Using Permissions</title>

      <programlisting>PackagePermission[org.osgi.service.repository,IMPORT]
PackagePermission[org.osgi.service.resolver,IMPORT]
PackagePermission[org.osgi.resource,IMPORT]
PackagePermission[org.osgi.framework.wiring,IMPORT]
PackagePermission[org.osgi.framework.namespaces,IMPORT]
ServicePermission[...Resolver, GET ]
... likely needs AdaptPermissions and ServicePermission[...Repository,GET]</programlisting>
    </section>
  </section>

  <section xreflabel="org.osgi.service.resolver" version="5" role="package" xml:id="org.osgi.service.resolver" xml:base="058/../../../generated/javadoc/docbook/org.osgi.service.resolver.xml">
   <title>org.osgi.service.resolver</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.resolver-version">Version 1.1</releaseinfo>
      <edition xml:id="org.osgi.service.resolver-version.number">1.1</edition>
   </info>
   <para>
Resolver Service Package Version 1.1.
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.resolver; version="[1.1,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.resolver; version="[1.1,1.2)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.resolver.HostedCapability">
                  <code>HostedCapability</code>
               </link> -
A capability hosted by a resource.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.resolver.ResolutionException">
                  <code>ResolutionException</code>
               </link> -
Indicates failure to resolve a set of requirements.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.resolver.ResolveContext">
                  <code>ResolveContext</code>
               </link> -
A resolve context provides resources, options and constraints to the
 potential solution of a <link linkend="org.osgi.service.resolver.Resolver.resolve-ResolveContext-">resolve</link>
 operation.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.resolver.Resolver">
                  <code>Resolver</code>
               </link> -
A resolver service resolves the specified resources in the context supplied
 by the caller.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section xreflabel="HostedCapability" role="class" xml:id="org.osgi.service.resolver.HostedCapability">
      <title>public interface HostedCapability<?line-break?> extends Capability</title>
      <para>
A capability hosted by a resource.

 </para>
      <para>
 A HostedCapability is a Capability where the <link linkend="org.osgi.service.resolver.HostedCapability.getResource--">getResource()</link> method
 returns a Resource that hosts this Capability instead of declaring it. This
 is necessary for cases where the declaring Resource of a Capability does not
 match the runtime state. For example, this is the case for fragments attached
 to a host. Most fragment declared capabilities and requirements become hosted
 by the host resource. Since a fragment can attach to multiple hosts, a single
 capability can actually be hosted multiple times.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section xreflabel="getDeclaredCapability()" role="method" xml:id="org.osgi.service.resolver.HostedCapability.getDeclaredCapability--">
         <title>public Capability getDeclaredCapability()</title>
         <para role="description">
Return the Capability hosted by the Resource.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The Capability hosted by the Resource.</para>
         </formalpara>
      </section>
      <section xreflabel="getResource()" role="method" xml:id="org.osgi.service.resolver.HostedCapability.getResource--">
         <title>public Resource getResource()</title>
         <para role="description">
Return the Resource that hosts this Capability.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The Resource that hosts this Capability.</para>
         </formalpara>
         <para/>
      </section>
   </section>
   <section xreflabel="ResolutionException" role="class" xml:id="org.osgi.service.resolver.ResolutionException">
      <title>public class ResolutionException<?line-break?> extends Exception</title>
      <para>
Indicates failure to resolve a set of requirements.

 </para>
      <para>
 If a resolution failure is caused by a missing mandatory dependency a
 resolver may include any requirements it has considered in the resolution
 exception. Clients may access this set of dependencies via the
 <link linkend="org.osgi.service.resolver.ResolutionException.getUnresolvedRequirements--">getUnresolvedRequirements()</link> method.

 </para>
      <para>
 Resolver implementations may extend this class to provide extra state
 information about the reason for the resolution failure.</para>
      <section xreflabel="ResolutionException(String,Throwable,Collection)" role="method" xml:id="org.osgi.service.resolver.ResolutionException.ResolutionException-String-Throwable-Collection-">
         <title>public  ResolutionException(String message, Throwable cause, Collection&lt;Requirement&gt; unresolvedRequirements)</title>
         <formalpara role="parameter">
            <title>message</title>
            <para>The message.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>cause</title>
            <para>The cause of this exception.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>unresolvedRequirements</title>
            <para>The unresolved mandatory requirements from
        mandatory resources or <code>null</code> if no unresolved requirements
        information is provided.</para>
         </formalpara>
         <para role="description">
Create a <code>ResolutionException</code> with the specified message, cause
 and unresolved requirements.
   </para>
      </section>
      <section xreflabel="ResolutionException(String)" role="method" xml:id="org.osgi.service.resolver.ResolutionException.ResolutionException-String-">
         <title>public  ResolutionException(String message)</title>
         <formalpara role="parameter">
            <title>message</title>
            <para>The message.</para>
         </formalpara>
         <para role="description">
Create a <code>ResolutionException</code> with the specified message.
   </para>
      </section>
      <section xreflabel="ResolutionException(Throwable)" role="method" xml:id="org.osgi.service.resolver.ResolutionException.ResolutionException-Throwable-">
         <title>public  ResolutionException(Throwable cause)</title>
         <formalpara role="parameter">
            <title>cause</title>
            <para>The cause of this exception.</para>
         </formalpara>
         <para role="description">
Create a <code>ResolutionException</code> with the specified cause.
   </para>
      </section>
      <section xreflabel="getUnresolvedRequirements()" role="method" xml:id="org.osgi.service.resolver.ResolutionException.getUnresolvedRequirements--">
         <title>public Collection&lt;Requirement&gt; getUnresolvedRequirements()</title>
         <para role="description">
Return the unresolved requirements, if any, for this exception.

 </para>
         <para>
 The unresolved requirements are provided for informational purposes and
 the specific set of unresolved requirements that are provided after a
 resolve failure is not defined.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A collection of the unresolved requirements for this exception.
         The returned collection may be empty if no unresolved
         requirements information is available.</para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="ResolveContext" role="class" xml:id="org.osgi.service.resolver.ResolveContext">
      <title>public abstract class ResolveContext</title>
      <para>
A resolve context provides resources, options and constraints to the
 potential solution of a <link linkend="org.osgi.service.resolver.Resolver.resolve-ResolveContext-">resolve</link>
 operation.
 </para>
      <para>
 Resolve Contexts:
 </para>
      <itemizedlist>
         <listitem>
            <para>Specify the mandatory and optional resources to resolve. The mandatory
 and optional resources must be consistent and correct. For example, they must
 not violate the singleton policy of the implementer.</para>
         </listitem>
         <listitem>
            <para>Provide <link linkend="org.osgi.resource.Capability">capabilities</link> that the Resolver can use to
 satisfy <link linkend="org.osgi.resource.Requirement">requirements</link> via the
 <link linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-">findProviders(Requirement)</link> method</para>
         </listitem>
         <listitem>
            <para>Constrain solutions via the <link linkend="org.osgi.service.resolver.ResolveContext.getWirings--">getWirings()</link> method. A wiring
 consists of a map of existing <link linkend="org.osgi.resource.Resource">resources</link> to <link linkend="org.osgi.resource.Wiring">wiring</link>.</para>
         </listitem>
         <listitem>
            <para>Filter requirements that are part of a resolve operation via the
 <link linkend="org.osgi.service.resolver.ResolveContext.isEffective-Requirement-">isEffective(Requirement)</link>.</para>
         </listitem>
      </itemizedlist>
      <para>
 A resolver may call the methods on the resolve context any number of times
 during a resolve operation using any thread. Implementors should ensure that
 this class is properly thread safe.
 </para>
      <para>
 Except for <link linkend="org.osgi.service.resolver.ResolveContext.insertHostedCapability-List-HostedCapability-">insertHostedCapability(List, HostedCapability)</link> and
 <link linkend="org.osgi.service.resolver.ResolveContext.onCancel-Runnable-">onCancel(Runnable)</link>, the resolve context methods must be
 <emphasis>idempotent</emphasis>. This means that resources must have constant capabilities
 and requirements and the resolve context must return a consistent set of
 capabilities, wires and effective requirements.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section xreflabel="ResolveContext()" role="method" xml:id="org.osgi.service.resolver.ResolveContext.ResolveContext--">
         <title>public  ResolveContext()</title>
         <para/>
      </section>
      <section xreflabel="findProviders(Requirement)" role="method" xml:id="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-">
         <title>public abstract List&lt;Capability&gt; findProviders(Requirement requirement)</title>
         <formalpara role="parameter">
            <title>requirement</title>
            <para>The requirement that a resolver is attempting to
        satisfy. Must not be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Find Capabilities that match the given Requirement.
 </para>
         <para>
 The returned list contains <link linkend="org.osgi.resource.Capability">Capability</link> objects where the Resource
 must be the declared Resource of the Capability. The Resolver can then
 add additional <link linkend="org.osgi.service.resolver.HostedCapability">HostedCapability</link> objects with the
 <link linkend="org.osgi.service.resolver.ResolveContext.insertHostedCapability-List-HostedCapability-">insertHostedCapability(List, HostedCapability)</link> method when it,
 for example, attaches fragments. Those <link linkend="org.osgi.service.resolver.HostedCapability">HostedCapability</link> objects
 will then use the host's Resource which likely differs from the declared
 Resource of the corresponding Capability.

 </para>
         <para>
 The returned list is in priority order such that the Capabilities with a
 lower index have a preference over those with a higher index. The
 resolver must use the
 <link linkend="org.osgi.service.resolver.ResolveContext.insertHostedCapability-List-HostedCapability-">insertHostedCapability(List, HostedCapability)</link> method to add
 additional Capabilities to maintain priority order. In general, this is
 necessary when the Resolver uses Capabilities declared in a Resource but
 that must originate from an attached host.

 </para>
         <para>
 Each returned Capability must match the given Requirement. This means
 that the filter in the Requirement must match as well as any namespace
 specific directives. For example, the mandatory attributes for the
 <code>osgi.wiring.package</code> namespace.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A list of <link linkend="org.osgi.resource.Capability">Capability</link> objects that match the specified
         requirement.</para>
         </formalpara>
      </section>
      <section xreflabel="findRelatedResources(Resource)" role="method" xml:id="org.osgi.service.resolver.ResolveContext.findRelatedResources-Resource-">
         <title>public Collection&lt;Resource&gt; findRelatedResources(Resource resource)</title>
         <formalpara role="parameter">
            <title>resource</title>
            <para>The Resource that a resolver is attempting to find
            related resources for. Must not be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Find resources that are related to the given resource.
 </para>
         <para>
 The resolver attempts to resolve related resources during the current
 resolve operation. Failing to resolve one of the related resources will
 not result in a resolution exception unless the related resource is also
 a <link linkend="org.osgi.service.resolver.ResolveContext.getMandatoryResources--">mandatory</link> resource.
 </para>
         <para>
 The resolve context is asked to return related resources for each
 resource that is pulled into a resolve operation. This includes the
 <link linkend="org.osgi.service.resolver.ResolveContext.getMandatoryResources--">mandatory</link> and
 <link linkend="org.osgi.service.resolver.ResolveContext.getOptionalResources--">optional</link> resources and each related
 resource returned by this method.
 </para>
         <para>
 For example, a fragment can be considered a related resource for a host
 bundle. When a host is being resolved the resolve context will be asked
 if any related resources should be added to the resolve operation. The
 resolve context may decide that the potential fragments of the host
 should be resolved along with the host.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A collection of the resources that the resolver should attempt to
         resolve for this resolve context. May be empty if there are no
         related resources. The returned collection may be unmodifiable.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section xreflabel="getMandatoryResources()" role="method" xml:id="org.osgi.service.resolver.ResolveContext.getMandatoryResources--">
         <title>public Collection&lt;Resource&gt; getMandatoryResources()</title>
         <para role="description">
Return the resources that must be resolved for this resolve context.

 </para>
         <para>
 The default implementation returns an empty collection.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A collection of the resources that must be resolved for this
         resolve context. May be empty if there are no mandatory
         resources. The returned collection may be unmodifiable.</para>
         </formalpara>
      </section>
      <section xreflabel="getOptionalResources()" role="method" xml:id="org.osgi.service.resolver.ResolveContext.getOptionalResources--">
         <title>public Collection&lt;Resource&gt; getOptionalResources()</title>
         <para role="description">
Return the resources that the resolver should attempt to resolve for this
 resolve context. Inability to resolve one of the specified resources will
 not result in a resolution exception.

 </para>
         <para>
 The default implementation returns an empty collection.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A collection of the resources that the resolver should attempt to
         resolve for this resolve context. May be empty if there are no
         optional resources. The returned collection may be unmodifiable.</para>
         </formalpara>
      </section>
      <section xreflabel="getSubstitutionWires(Wiring)" role="method" xml:id="org.osgi.service.resolver.ResolveContext.getSubstitutionWires-Wiring-">
         <title>public List&lt;Wire&gt; getSubstitutionWires(Wiring wiring)</title>
         <formalpara role="parameter">
            <title>wiring</title>
            <para>the wiring to get the substitution wires for. Must not be
            <code>null</code>.</para>
         </formalpara>
         <para role="description">
Returns the subset of <link linkend="org.osgi.resource.Wiring.getRequiredResourceWires-String-">required</link> wires that provide wires to <link linkend="org.osgi.resource.Capability">capabilities</link>
 which substitute capabilities of the wiring. For example, when a
 <link linkend="org.osgi.framework.namespace.PackageNamespace">package</link> name is both provided and required by
 the same resource. If the package requirement is resolved to a capability
 provided by a different wiring then the package capability is considered
 to be substituted.
 </para>
         <para>
 The resolver asks the resolve context to return substitution wires for
 each wiring that <link linkend="org.osgi.resource.Wiring.getResourceCapabilities-String-">provides</link>
 a <link linkend="org.osgi.framework.namespace.BundleNamespace">bundle</link> namespace capability that is used to
 resolve one or more bundle requirements.
 </para>
         <para>
 Note that this method searches all the <link linkend="org.osgi.framework.namespace.PackageNamespace">package</link>
 capabilities declared as <link linkend="org.osgi.resource.Resource.getCapabilities-String-">provided</link> by the resource associated with the wiring and fragment
 resources wired to the wiring with the <link linkend="org.osgi.framework.namespace.HostNamespace">host</link>
 namespace. The provided package names are compared against the
 <link linkend="org.osgi.resource.Wiring.getRequiredResourceWires-String-">required</link> package wires to
 determine which wires are substitution wires. Subclasses of
 <code>ResolveContext</code> should provide a more efficient
 implementation of this method.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A list containing a snapshot of the substitution <link linkend="org.osgi.resource.Wire">Wire</link>s
         for the <link linkend="org.osgi.resource.Requirement">requirements</link> of the wiring, or an
         empty list if the wiring has no substitution wires. The list
         contains the wires in the order they are found in the
         <link linkend="org.osgi.resource.Wiring.getRequiredResourceWires-String-">required</link> wires of
         the wiring.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section xreflabel="getWirings()" role="method" xml:id="org.osgi.service.resolver.ResolveContext.getWirings--">
         <title>public abstract Map&lt;Resource, Wiring&gt; getWirings()</title>
         <para role="description">
Returns the wirings for existing resolved resources.

 </para>
         <para>
 For example, if this resolve context is for an OSGi framework, then the
 result would contain all the currently resolved bundles with each
 bundle's current wiring.

 </para>
         <para>
 Multiple calls to this method for this resolve context must return the
 same result.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The wirings for existing resolved resources. The returned map is
         unmodifiable.</para>
         </formalpara>
      </section>
      <section xreflabel="insertHostedCapability(List,HostedCapability)" role="method" xml:id="org.osgi.service.resolver.ResolveContext.insertHostedCapability-List-HostedCapability-">
         <title>public abstract int insertHostedCapability(List&lt;Capability&gt; capabilities, HostedCapability hostedCapability)</title>
         <formalpara role="parameter">
            <title>capabilities</title>
            <para>The list returned from
        <link linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-">findProviders(Requirement)</link>. Must not be <code>null</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>hostedCapability</title>
            <para>The HostedCapability to insert in the specified
        list. Must not be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Add a <link linkend="org.osgi.service.resolver.HostedCapability">HostedCapability</link> to the list of capabilities returned from
 <link linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-">findProviders(Requirement)</link>.

 </para>
         <para>
 This method is used by the <link linkend="org.osgi.service.resolver.Resolver">Resolver</link> to add Capabilities that are
 hosted by another Resource to the list of Capabilities returned from
 <link linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-">findProviders(Requirement)</link>. This function is necessary to allow
 fragments to attach to hosts, thereby changing the origin of a
 Capability. This method must insert the specified HostedCapability in a
 place that makes the list maintain the preference order. It must return
 the index in the list of the inserted <link linkend="org.osgi.service.resolver.HostedCapability">HostedCapability</link>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The index in the list of the inserted HostedCapability.</para>
         </formalpara>
      </section>
      <section xreflabel="isEffective(Requirement)" role="method" xml:id="org.osgi.service.resolver.ResolveContext.isEffective-Requirement-">
         <title>public abstract boolean isEffective(Requirement requirement)</title>
         <formalpara role="parameter">
            <title>requirement</title>
            <para>The Requirement to test. Must not be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Test if a given requirement should be wired in the resolve operation. If
 this method returns <code>false</code>, then the resolver should ignore this
 requirement during the resolve operation.

 </para>
         <para>
 The primary use case for this is to test the <code>effective</code> directive
 on the requirement, though implementations are free to use any effective
 test.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if the requirement should be considered as part of
         the resolve operation.</para>
         </formalpara>
      </section>
      <section xreflabel="onCancel(Runnable)" role="method" xml:id="org.osgi.service.resolver.ResolveContext.onCancel-Runnable-">
         <title>public void onCancel(Runnable callback)</title>
         <formalpara role="parameter">
            <title>callback</title>
            <para>the callback to execute in order to cancel the resolve
            operation. Must not be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Registers a callback with the resolve context that is associated with the
 currently running resolve operation. The callback can be executed in
 order to cancel the currently running resolve operation.
 </para>
         <para>
 When a resolve operation begins, the resolver must call this method once
 and only once for the duration of the resolve operation and that call
 must happen before calling any other method on this resolve context. If
 the specified callback is executed then the resolver must cancel the
 currently running resolve operation and throw a
 <link linkend="org.osgi.service.resolver.ResolutionException">ResolutionException</link> with a cause of type
 CancellationException.
 </para>
         <para>
 The callback allows a resolve context to cancel a long running resolve
 operation that appears to be running endlessly or at risk of running out
 of resources. The resolve context may then decide to give up on resolve
 operation or attempt to try another resolve operation with a smaller set
 of resources which may allow the resolve operation to complete normally.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– if the resolver attempts to register more
             than one callback for a resolve operation</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="Resolver" role="class" xml:id="org.osgi.service.resolver.Resolver">
      <title>public interface Resolver</title>
      <para>
A resolver service resolves the specified resources in the context supplied
 by the caller.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section xreflabel="resolve(ResolveContext)" role="method" xml:id="org.osgi.service.resolver.Resolver.resolve-ResolveContext-">
         <title>public Map&lt;Resource, List&lt;Wire&gt;&gt; resolve(ResolveContext context) throws ResolutionException</title>
         <formalpara role="parameter">
            <title>context</title>
            <para>The resolve context for the resolve operation. Must not be
        <code>null</code>.</para>
         </formalpara>
         <para role="description">
Resolve the specified resolve context and return any new resources and
 wires to the caller.

 </para>
         <para>
 The resolver considers two groups of resources:
 </para>
         <itemizedlist>
            <listitem>
               <para>Mandatory - any resource in the
 <link linkend="org.osgi.service.resolver.ResolveContext.getMandatoryResources--">mandatory group</link> must be
 resolved. A failure to satisfy any mandatory requirement for these
 resources will result in throwing a <link linkend="org.osgi.service.resolver.ResolutionException">ResolutionException</link>
               </para>
            </listitem>
            <listitem>
               <para>Optional - any resource in the
 <link linkend="org.osgi.service.resolver.ResolveContext.getOptionalResources--">optional group</link> may be
 resolved. A failure to satisfy a mandatory requirement for a resource in
 this group will not fail the overall resolution but no resources or wires
 will be returned for that resource.</para>
            </listitem>
         </itemizedlist>
         <para>
 The resolve method returns the delta between the start state defined by
 <link linkend="org.osgi.service.resolver.ResolveContext.getWirings--">ResolveContext.getWirings()</link> and the end resolved state. That is,
 only new resources and wires are included.

 </para>
         <para>
 The behavior of the resolver is not defined if the specified resolve
 context supplies inconsistent information.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The new resources and wires required to satisfy the specified
         resolve context. The returned map is the property of the caller
         and can be modified by the caller.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>ResolutionException</code>– If the resolution cannot be satisfied.</para>
         </formalpara>
      </section>
      <section xreflabel="resolveDynamic(ResolveContext,Wiring,Requirement)" role="method" xml:id="org.osgi.service.resolver.Resolver.resolveDynamic-ResolveContext-Wiring-Requirement-">
         <title>public Map&lt;Resource, List&lt;Wire&gt;&gt; resolveDynamic(ResolveContext context, Wiring hostWiring, Requirement dynamicRequirement) throws ResolutionException</title>
         <formalpara role="parameter">
            <title>context</title>
            <para>The resolve context for the resolve operation. Must not be
            <code>null</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>hostWiring</title>
            <para>The wiring with the dynamic
            <link linkend="org.osgi.resource.Wiring.getResourceRequirements-String-">requirement</link>.
            Must not be <code>null</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>dynamicRequirement</title>
            <para>The dynamic requirement. Must not be
            <code>null</code>.</para>
         </formalpara>
         <para role="description">
Resolves a given requirement dynamically for the given host wiring using
 the given resolve context and return any new resources and wires to the
 caller.
 </para>
         <para>
 The requirement must be a <link linkend="org.osgi.resource.Wiring.getResourceRequirements-String-">requirement</link> of the wiring and must use the
 <link linkend="org.osgi.framework.namespace.PackageNamespace.PACKAGE_NAMESPACE">package</link> namespace with a
 <link linkend="org.osgi.resource.Namespace.REQUIREMENT_RESOLUTION_DIRECTIVE">resolution</link> of type
 <link linkend="org.osgi.framework.namespace.PackageNamespace.RESOLUTION_DYNAMIC">dynamic</link>.
 </para>
         <para>
 The resolve context is not asked for
 <link linkend="org.osgi.service.resolver.ResolveContext.getMandatoryResources--">mandatory</link> resources or for
 <link linkend="org.osgi.service.resolver.ResolveContext.getMandatoryResources--">optional</link> resources. The
 resolve context is asked to
 <link linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-">find providers</link> for the
 given requirement. The matching <link linkend="org.osgi.framework.namespace.PackageNamespace.PACKAGE_NAMESPACE">package</link> capabilities returned by the resolve context must not have a
 <link linkend="org.osgi.framework.namespace.PackageNamespace.PACKAGE_NAMESPACE">osgi.wiring.package</link> attribute
 equal to a <link linkend="org.osgi.framework.namespace.PackageNamespace.PACKAGE_NAMESPACE">package</link> capability
 already <link linkend="org.osgi.resource.Wiring.getRequiredResourceWires-String-">wired to</link> by the
 wiring or equal a <link linkend="org.osgi.framework.namespace.PackageNamespace.PACKAGE_NAMESPACE">package</link>
 capability <link linkend="org.osgi.resource.Wiring.getResourceCapabilities-String-">provided</link> by the
 wiring. The resolve context may be requested to
 <link linkend="org.osgi.service.resolver.ResolveContext.findProviders-Requirement-">find providers</link> for
 other requirements in order to resolve the resources that provide the
 matching capabilities to the given requirement.
 </para>
         <para>
 If the requirement <link linkend="org.osgi.resource.Namespace.REQUIREMENT_CARDINALITY_DIRECTIVE">cardinality</link> is not <link linkend="org.osgi.resource.Namespace.CARDINALITY_MULTIPLE">multiple</link> then
 no new wire must be created if the
 <link linkend="org.osgi.resource.Wiring.getRequiredResourceWires-String-">wires</link> of the wiring
 already contain a wire that uses the <link linkend="org.osgi.resource.Wire.getRequirement--">requirement</link>
         </para>
         <para>
 This operation may resolve additional resources in order to resolve the
 dynamic requirement. The returned map will contain entries for each
 resource that got resolved in addition to the specified wiring
 <link linkend="org.osgi.resource.Wiring.getResource--">resource</link>. The wire list for the wiring
 resource will only contain one wire which is for the dynamic requirement.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The new resources and wires required to satisfy the specified
         dynamic requirement. The returned map is the property of the
         caller and can be modified by the caller. If no new wires were
         created then a ResolutionException is thrown.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>ResolutionException</code>– if the dynamic requirement cannot be resolved</para>
         </formalpara>
      </section>
   </section>
</section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="service.resolver-ref.service.repository"><title>Repository
      Service Specification</title>OSGi Compendium, Chapter 132 Repository
      Service Specification</bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter xmlns:ns5="http://www.w3.org/1999/xhtml" xmlns:ns4="http://www.w3.org/2000/svg" xmlns:ns3="http://www.w3.org/1998/Math/MathML" label="59" revision="$Id: aa9c2518f100d100d1c0fc6736247e5ea826ba5d $" version="5.0" xml:id="service.condition" xml:base="059/service.condition.xml">
  <title>Condition Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.condition-version" linkend="org.osgi.service.condition"/></releaseinfo>
  </info>

  <section xml:id="service.condition.introduction">
    <title>Introduction</title>

    <para>In dynamic systems, such as OSGi, one of the more challenging
    problems can be to define when a system or part of it is ready to do some
    work. The answer can change depending on the individual perspective. The
    developer of a web server might say, the system is ready when the server
    starts listening on port 80. An application developer however would define
    the system as ready, when the database connection is up and all servlets
    are registered. Taking the application developers view, the web server
    should start listening on port 80 when the application is ready and not
    beforehand.</para>

    <para>The <xref linkend="framework.service" xrefstyle="template:%t"/>
    already provides all the necessary tools to register any service as an
    indicator for when a system is ready. The Condition Service Specification
    simply provides a specified service to signal such conditions. With this,
    other specifications and users have a known service to listen for such
    conditions.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Condition</emphasis> - Represents a particular state
          of the runtime.</para>
        </listitem>

        <listitem>
          <para><emphasis>Target</emphasis> - A filter used to match a
          required condition.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="service.condition.entities">
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Condition</emphasis> - A service used to represent a
          state at runtime.</para>
        </listitem>

        <listitem>
          <para><emphasis>True Condition</emphasis> - A condition registered
          by the Framework with a well known name which is always available
          from the moment of Framework initialization.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section xml:id="service.condition.operation">
    <title>Condition Service</title>

    <para><xref linkend="org.osgi.framework.startlevel.BundleStartLevel" xrefstyle="hyperlink"/> can be used to control the order in which bundles
    are activated when the Framework is launched. In some scenarios it can be
    helpful to have certain bundles activate before other bundles so that the
    necessary services provided by the previously activated bundles are ready
    before the later activated bundles start. However, such solutions have
    drawbacks in a dynamic system because dependencies can appear and
    disappear at any time. Also, there is no guarantee that when a bundle
    finishes activation, that it has registered all the services that it ever
    will for the lifetime of its active state.</para>

    <para>A better solution is to model ordering as a dependency. Once
    something is a service dependency, an injection framework, such as
    Declarative Services or CDI Integration, can defer component activation
    until the dependency is available. With a proper dependency, when the
    dependency disappears any components that depend on it will be deactivated
    automatically. Such a system will tend to automatically initialize and
    tear down components in the correct order.</para>

    <para>The <xref linkend="framework.service" xrefstyle="template:%t"/>
    provides an expressive tool for describing the aspects of a service
    through its service properties, see <xref linkend="framework.service.serviceproperties"/>, and for selecting and
    matching available services with the service filter, see <xref linkend="i2671413"/>. Dependency injection frameworks, such as Declarative
    Services and CDI Integration, use the expressive nature of the service
    layer by allowing a target option for dependencies. The target specifies a
    filter that is used to assert the properties provided by a specific
    dependency.</para>

    <para>The notion of a target for a dependency is very powerful and allows
    for additional control over when a component can be activated. With
    Declarative Services and CDI Integration, a dependency target can be
    specified via configuration. This gives the deployer of the system power
    to select specific services for dependencies and therefore control over
    what conditions are necessary for a component to be activated.</para>

    <para>Translating ordering dependencies to service dependencies is often
    straightforward to do, but some scenarios make it more challenging. For
    example, a component may depend upon a system wide state in order to be
    fully functional. This type of problem can be common when using the
    whiteboard pattern. An example of a whiteboard pattern is the previously
    mentioned web server. A servlet implementation is only required to
    register itself as a <emphasis>Servlet</emphasis> service and that servlet
    can start receiving requests from the web server implementation. However
    in some scenarios, a deployer may want to ensure that one or more specific
    servlets are registered before allowing the web server to begin processing
    requests. By default the web server does not need any servlets to be
    active, but a deployer may want to ensure at least one servlet is
    available. For this example, a deployer wants both <emphasis>Servlet
    1</emphasis> and <emphasis>Servlet 2</emphasis> to be available.</para>

    <figure pgwide="1">
      <title>Service Activation with a normal Whiteboard</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="normal-whiteboard-sequence.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>Using Declarative Services, one could incorrectly try the following
    to achieve this:</para>

    <programlisting>// THIS WILL NEVER WORK
@Reference(target="(&amp;(servlet=1)(servlet=2))")
volatile List&lt;Servlet&gt; servlets;</programlisting>

    <para>This does not work because no individual servlet service will
    satisfy both properties. The result is that the list of servlet services
    will remain empty for the system and the web server will not start.
    Condition services provide a mechanism for declaring and controlling what
    conditions are necessary to enable a component. For example, with the
    listener whiteboard implementation the following condition service
    requirement could be specified:</para>

    <programlisting>@Reference(target="(osgi.condition.id=true)")
Condition requiredCondition;</programlisting>

    <para>This component requires the <xref linkend="service.condition-true.condition" xrefstyle="template:%t"/> which
    is always available at runtime. This allows the component to activate as
    soon as all of its other requirements are met. In addition, a deployer can
    now use configuration to change the target of the required condition. For
    example, the target could be changed to reference a condition that
    represents when all the servlets required by the deployer are available at
    runtime. For example, the following condition target could be used:</para>

    <programlisting xml:id="service.condition.into.example">(osgi.condition.id=application)</programlisting>

    <figure pgwide="1">
      <title>Service Activation with Condition</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="2.743in" contentwidth="7.000in" fileref="condition-sequence.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>Conditions can also be enabled based on the availability of other
    conditions. This allows for more powerful aggregation of conditions for a
    system.</para>

    <para>The Condition that indicates that the servlets are ready could be
    implemented as follows:</para>

    <programlisting>@Component(property="osgi.condition.id=application")
public class ApplicationCondition implements Condition {
    @Reference(target="(servlet=1)")
    private Servlet servlet1;
    @Reference(target="(servlet=2)")
    private Servlet servlet2;
}</programlisting>

    <para>Please note, that the example Condition implementation above is just
    a simplified construct. When a service is registered, all service
    listeners are called in some sequence. This means, that the example
    Condition implementation above may observe the availability of a servlet
    service before other parties that are also interested in servlet services,
    such as the web server. Thus the registration of the Condition service
    should happen asynchronously, and perhaps even after a slight delay, so
    the framework has a chance to notify all service listeners regarding the
    relevant service.</para>

    <section xml:id="service.condition-true.condition">
      <title>True Condition</title>

      <para>The Framework will always register a default True Condition that
      all bundles can rely on being always available. The default True
      Condition will be registered during Framework initialization as the
      Framework registers framework services. It is registered with the <xref linkend="org.osgi.service.condition.Condition.CONDITION_ID" xrefstyle="hyperlink"/> property set to the value of <xref linkend="org.osgi.service.condition.Condition.CONDITION_ID_TRUE" xrefstyle="hyperlink"/>.</para>
    </section>
  </section>

  <section xml:id="service.condition.security">
    <title>Security</title>

    <section>
      <title>Conditions</title>

      <para>A Condition service has no function outside of providing a marker
      service to indicate a particular state and is therefore not required to
      be a trusted service.</para>
    </section>

    <section>
      <title>Minimum Implementation Permissions</title>

      <para>To implement and register a Condition service, a bundle must have
      the following permissions.</para>

      <programlisting>PackagePermission[org.osgi.service.condition,IMPORT]
ServicePermission[org.osgi.service.condition.Condition, REGISTER ]</programlisting>
    </section>

    <section>
      <title>Minimum Using Permissions</title>

      <para>No permissions are necessary to get a Condition service. Service
      Permission with the <code>GET</code> action for the Condition service
      must be granted by the framework, see <xref linkend="framework.security.impliedpermissions"/>. Note that the
      <code>org.osgi.service.condition</code> package does not necessarily
      need to be imported for a bundle to be able to get a Condition service
      unless the bundle actually has a runtime reference to the <xref linkend="org.osgi.service.condition.Condition" xrefstyle="hyperlink"/>
      type.</para>
    </section>
  </section>

  <section xreflabel="org.osgi.service.condition" version="5" role="package" xml:id="org.osgi.service.condition" xml:base="059/../../../generated/javadoc/docbook/org.osgi.service.condition.xml">
   <title>org.osgi.service.condition</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.condition-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.service.condition-version.number">1.0</edition>
   </info>
   <para>
Condition Service Package Version 1.0.
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.condition; version="[1.0,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.condition; version="[1.0,1.1)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.condition.Condition">
                  <code>Condition</code>
               </link> -
Condition Service interface.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section xreflabel="Condition" role="class" xml:id="org.osgi.service.condition.Condition">
      <title>public interface Condition</title>
      <para>
Condition Service interface.
 </para>
      <para>
 In dynamic systems, such as OSGi, one of the more challenging problems can be
 to define when a system or part of it is ready to do work. The answer can
 change depending on the individual perspective. The developer of a web server
 might say, the system is ready when the server starts listening on port 80.
 An application developer however would define the system as ready when the
 database connection is up and all servlets are registered. Taking the
 application developers view, the web server should start listening on port 80
 when the application is ready and not beforehand.
 </para>
      <para>
 The <code>Condition</code> service interface is a marker interface designed to
 address this issue. Its role is to provide a dependency that can be tracked.
 It acts as a defined signal to other services.
 </para>
      <para>
 A <code>Condition</code> service must be registered with the
 <link linkend="org.osgi.service.condition.Condition.CONDITION_ID">Condition.CONDITION_ID</link> service property.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section xreflabel="CONDITION_ID" role="field" xml:id="org.osgi.service.condition.Condition.CONDITION_ID">
         <title>public static final String CONDITION_ID = "osgi.condition.id"</title>
         <para>
Service property identifying a condition's unique identifier.
 </para>
         <para>
 Since a <code>Condition</code> service can potentially describe more then one
 condition, the type of this service property is <code>String+</code>.</para>
      </section>
      <section xreflabel="CONDITION_ID_TRUE" role="field" xml:id="org.osgi.service.condition.Condition.CONDITION_ID_TRUE">
         <title>public static final String CONDITION_ID_TRUE = "true"</title>
         <para>
The unique identifier for the default True condition.
 </para>
         <para>
 The default True condition is registered by the framework during
 framework initialization and therefore can always be relied upon.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.condition.Condition.CONDITION_ID">Condition.CONDITION_ID</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="INSTANCE" role="field" xml:id="org.osgi.service.condition.Condition.INSTANCE">
         <title>public static final Condition INSTANCE</title>
         <para>
A condition instance that can be used to register <code>Condition</code>
 services.
 </para>
         <para>
 This can be helpful to avoid a bundle having to implement this interface
 to register a <code>Condition</code> service</para>
      </section>
   </section>
</section>
</chapter>

  <chapter label="60" revision="$Id: 528d4a43cea824496348829f2c95f3b40663dc88 $" version="5.0" xml:id="framework.connect" xml:base="060/framework.connect.xml">
  <title>Connect Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.framework.connect-version" linkend="org.osgi.framework.connect"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>The Service Layer provides a dynamic, concise and consistent
    programming model for Java developers, simplifying the development
    and deployment of services by de-coupling the service's specification
    (Java interface) from its implementations. This model allows developers
    to bind to services only using their interface specifications.
    The selection of a specific implementation, optimized for a specific need
    or from a specific vendor, can thus be deferred to runtime.</para>

    <para>In order to use this powerful tool, developers are required to build
    on top of the Life Cycle and Module Layer of the OSGi Framework. Anything
    built on top of the Service Layer must follow the rules of the
    Life Cycle and Module Layers as well as the Service Layer. The Module
    Layer has rules for sharing Java packages between bundles or
    hiding packages from other bundles.  The Life Cycle Layer provides an API
    to manage bundles in the Module Layer.</para>

    <para>The Module and Life Cycle Layers assume the Framework is in control
    of the actual deployment unit (bundle) which is deployed as a Java archive (JAR) file.
    The Module Layer then provides the access for reading content and meta-data from the bundle and loading
    classes from the bundle. This can make it difficult to use classes or services that are already present in the running
    environment, for example, from the class path or anything else whose class space is managed outside of
    the framework.  Without the Connect specification, content that lives outside the control of the
    Framework cannot easily benefit from the rich Service Layer because there is no way to represent the outside
    content as bundles inside the Framework.</para>

    <para>This specification defines a Connect Framework Factory to create and launch an OSGi
    Framework instance that can connect bundles in the Framework with content managed outside of the Framework
    itself. For example, to provide things like resource loading, class loading, bundle entry content
    and bundle manifest headers. Among other things, this allows for bundles to exist and be installed
    into the Framework from the flat class path, the module path (Java Platform Module System), a jlink
    image, or a native image. Such bundles may have some limitations with respect to class loading
    and isolation because they may not follow the rules of the OSGi Module Layer.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>OSGi Service Registry</emphasis> - It must be possible to use the
          OSGi Service Registry in environments that do not have the full OSGi Module Layer.</para>
        </listitem>

        <listitem>
          <para><emphasis>OSGi Dependency Model</emphasis> - It must be possible to use
          the requirements and capabilities model OSGi provides in environments that
          do not have the full OSGi Module Layer. </para>
        </listitem>

        <listitem>
          <para><emphasis>OSGi Extender Pattern</emphasis> - It must be possible to support
          the OSGi Extender Pattern in environments that do not have the full OSGi Module
          Layer. For example, Declarative Services.</para>
        </listitem>

        <listitem>
          <para><emphasis>OSGi Technologies</emphasis> - It must be possible to support
          other OSGi technologies and specifications such as Configuration Admin,
          Metatype Service, Log Service etc. in environments that do not have the full
          OSGi Module Layer.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Connect Content</emphasis> - Provides a Framework access to content from outside the Framework
          that can be used to represent an installed bundle in the Framework.  A connect content provides things like a
          class loader for the bundle, access to entries in a bundle, and the bundle manifest headers.</para>
        </listitem>

        <listitem>
          <para><emphasis>Connect Module</emphasis> - Provides the current connect content available for a bundle installed
          in the Framework.  If the connect content for a bundle is constant then the connect module may return the
          same connect content for the lifetime of the Framework.</para>
        </listitem>

        <listitem>
          <para><emphasis>Module Connector</emphasis> - Hooks into the initialization of the Framework and connects
          bundles installed in the Framework with connect module instances.</para>
        </listitem>

        <listitem>
          <para><emphasis>Connect Framework Factory</emphasis> - A factory, similar to the FrameworkFactory, that is used
          to create Framework instances that use a module connector.</para>
        </listitem>

        <listitem>
          <para><emphasis>Connect Bundle</emphasis> - A bundle installed in the Framework that is connected to a
          connect module and has its content provided by a connect content.</para>
        </listitem>
      </itemizedlist>
      <figure pgwide="1">
        <title>Connect Class Diagram</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="7.000in" contentwidth="6.125in" fileref="connect-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>A launcher is in control of discovering and loading the connect framework factory implementation and the module connector implementation.
      The launcher is then able to use the connect framework factory to create a Framework instance that uses the module connector instance.
      When a connect bundle is installed it will be connected to a single connect module. Each bundle revision for the connect bundle is furthermore
      connected with a single connect content.</para>
    </section>
  </section>

  <section>
    <title>Module Connector</title>
    <para>This section outlines how a <emphasis>launcher</emphasis> can launch
    a Framework implementation with an implementation of a <xref linkend="org.osgi.framework.connect.ModuleConnector" xrefstyle="hyperlink"/>, regardless of the
    implementation type of the framework. This allows a launcher to embed an
    OSGi framework without having to provide code that differs between
    different implementations.
    </para>
<section>
      <title>Launching a Framework</title>

      <para>A Framework implementation that supports the Connect specification must provide a
      <emphasis>factory</emphasis> class. A factory class is an indirection to
      create a framework implementation object. The implementation factory
      class must implement the <xref linkend="org.osgi.framework.connect.ConnectFrameworkFactory" xrefstyle="hyperlink"/> interface. The launcher can use the following
      ways to get this class name:</para>

      <itemizedlist>
        <listitem>
          <para>Service Provider Configuration model, see <xref linkend="framework.connect.service.provider"/>,</para>
        </listitem>

        <listitem>
          <para>Get it from some configuration and use
          <code>Class.forName</code>, or</para>
        </listitem>

        <listitem>
          <para>Hardcode the name.</para>
        </listitem>
      </itemizedlist>

      <para>The <xref linkend="org.osgi.framework.connect.ConnectFrameworkFactory" xrefstyle="hyperlink"/> interface has a single method: <xref linkend="org.osgi.framework.connect.ConnectFrameworkFactory.newFramework-Map-ModuleConnector-" xrefstyle="hyperlink"/>. The map provides the sole configuration
      properties for the framework object. The <xref linkend="org.osgi.framework.connect.ModuleConnector" xrefstyle="hyperlink"/> implementation provides the OSGi Framework with the support
      to connect bundles with <xref linkend="org.osgi.framework.connect.ConnectModule" xrefstyle="hyperlink"/> instances.
      The result of this method is a
      <emphasis>framework object</emphasis>, this object implements the <xref linkend="org.osgi.framework.launch.Framework" xrefstyle="hyperlink"/>
      interface. See <xref linkend="framework.lifecycle-frameworks"/> for details
      on the <xref linkend="org.osgi.framework.launch.Framework" xrefstyle="hyperlink"/> interface.</para>

      <para>The following code shows how a Framework can be launched with a module connector.</para>

      <programlisting>Framework launch(ModuleConnector moduleConnector)
            throws Exception {
    Map&lt;String, String&gt; p = new HashMap();
    p.put( "org.osgi.framework.storage",
            System.getProperty("user.home")
        +   File.separator+"osgi");

    ServiceLoader&lt;ConnectFrameworkFactory&gt; sl =
        ServiceLoader.load(ConnectFrameworkFactory.class);

    ConnectFrameworkFactory factory = sl.iterator().next();
    Framework osgiFramework = factory.newFramework(p, moduleConnector);
    osgiFramework.init();
    osgiFramework.start();
    return osgiFramework;
}</programlisting>
    </section>
    <section xml:id="framework.connect.initializing">
      <title>Initializing the Module Connector</title>
      <para>Before a module connector can be used by a <code>Framework</code> instance, the
      <xref linkend="org.osgi.framework.connect.ModuleConnector" xrefstyle="hyperlink"/> must
      be <emphasis>initialized</emphasis>.
      Initialization is caused by the <code>Framework</code> calling the
      <xref linkend="org.osgi.framework.connect.ModuleConnector.initialize-File-Map-" xrefstyle="hyperlink"/>
      method on the module connector.  The module connector <code>initialize</code> method must only be called
      once for the lifetime of the <code>Framework</code> instance.  If the <code>Framework</code> is stopped
      as defined by <xref linkend="framework.lifecycle.stopping"/> and initialized again as defined by
      <xref linkend="framework.lifecycle.initializing"/> the module connector <code>initialize</code> method must
      not be called again.</para>

      <para>If the framework supports persistence then the framework determines the path used for the storage
      area according to the launch property <xref linkend="org.osgi.framework.Constants.FRAMEWORK_STORAGE" xrefstyle="hyperlink"/>.
      Once the framework instance has determined the storage area the <code>ModuleConnector</code> method
      <xref linkend="org.osgi.framework.connect.ModuleConnector.initialize-File-Map-" xrefstyle="hyperlink"/> must be called.
      The file is the storage area used by the Framework and may be <code>null</code>
      if persistence is not supported. This file may be used by the module connector for persistent storage.
      The map is the unmodifiable map of the Framework configuration properties
      that were used to create the new Framework instance with the method <xref linkend="org.osgi.framework.connect.ConnectFrameworkFactory.newFramework-Map-ModuleConnector-" xrefstyle="hyperlink"/></para>
    </section>
    <section xml:id="framework.connect.lifecycle">
      <title>Module Connector Life Cycle</title>

      <para>A module connector may hook into the Framework life cycle by providing
      a <xref linkend="org.osgi.framework.BundleActivator" xrefstyle="hyperlink"/>
      instance. The <code>BundleActivator</code> interface defines methods that the
      Framework invokes when the Framework is initialized and shutdown.</para>
      <section xml:id="framework.connect.starting">
        <title>Start</title>

        <para>When the Framework is initialized the system bundle enters the <xref linkend="org.osgi.framework.Bundle.STARTING" xrefstyle="hyperlink"/> state.
        At this point a valid <xref linkend="org.osgi.framework.BundleContext" xrefstyle="hyperlink"/>
        exists for the Framework. Before invoking extension bundle activators as defined by
        <xref linkend="framework.lifecycle.extension.start"/> the Framework must call
        the <code>ModuleConnector</code> method <xref linkend="org.osgi.framework.connect.ModuleConnector.newBundleActivator--" xrefstyle="hyperlink"/>.
        If the module connector provides a bundle activator then the <xref linkend="org.osgi.framework.BundleActivator.start-BundleContext-" xrefstyle="hyperlink"/> method must be
        called before returning from the <code>Framework</code> <xref linkend="org.osgi.framework.launch.Framework.init--" xrefstyle="hyperlink"/> method and before
        any extension bundle activator <code>start</code> methods are called. Any exception thrown by a
        module connector activator <code>start</code> method must be wrapped in a <code>BundleException</code>
        and broadcast as an <xref linkend="org.osgi.framework.FrameworkEvent.ERROR" xrefstyle="hyperlink"/>.</para>

        <para>The bundle activator allows for the module connector to hook into the life cycle of the Framework
        itself. For example, this allows the module connector to register services, add listeners and install other
        bundles before anything else installed in the Framework can, including extension bundles. With the
        supplied system bundle context a module connector is able to influence the behavior of the Framework
        by registering various Framework hooks like the <xref linkend="org.osgi.framework.hooks.resolver.ResolverHook" xrefstyle="hyperlink"/>. A resolver hook
        is useful for cases where the wiring of a connect bundle must not be allowed to wire to capabilities
        provided by other bundles installed in the Framework.</para>
      </section>
      <section>
        <title>Shutdown</title>

        <para>When the Framework is stopped it will reach start level zero and the Framework checks if there are any
        framework extensions activators to call the <code>stop</code> method on as defined by
        <xref linkend="framework.lifecycle.stopExtension"/>. After calling the <code>stop</code> method
        on the framework extension activators, the framework must call <xref linkend="org.osgi.framework.BundleActivator.stop-BundleContext-" xrefstyle="hyperlink"/>
        on the bundle activator provided by the module connector. Any exception thrown by a
        module connector activator <code>stop</code> method must be wrapped in a <code>BundleException</code> and broadcast as an
        <xref linkend="org.osgi.framework.FrameworkEvent.ERROR" xrefstyle="hyperlink"/>.</para>

        <para>The Framework must guarantee that if the <code>start</code> method has executed successfully for
        module connector activator, that same <code>BundleActivator</code> object must be called on its
        <code>stop</code> method when the Framework is shutdown. After calling the <code>stop</code> method, that
        particular <code>BundleActivator</code> object must never be used again. A module connector activator that
        threw an exception during <code>start</code> must not be called on shutdown.</para>
      </section>
    </section>
    <section xml:id="framework.connect.service.provider">
      <title>Java Service Provider Configuration Support for Connect</title>

      <para>Similar to how a framework factory is obtained in <xref linkend="i3309166"/> the connect framework factory implementation name is
      obtained by reading the content of the configuration resource with the path
      <code>META-INF/services/org.osgi.framework.connect.ConnectFrameworkFactory</code></para>

      <para>For example, if the <code>com.acme.osgi</code> framework has a
      connect factory class <code>com.acme.osgi.connect.Factory</code>, then it should have
      the following resource:</para>

      <programlisting>META-INF/services/org.osgi.framework.connect.ConnectFrameworkFactory</programlisting>

      <para>And the contents should be:</para>

      <programlisting># ACME Impl. for OSGi connect framework factory
com.acme.osgi.connect.Factory</programlisting>
    </section>
  </section>
  <section xml:id="framework.connect.bundle">
    <title>Connect Bundles</title>
    <para>A connect bundle is a <xref linkend="org.osgi.framework.Bundle" xrefstyle="hyperlink"/>
    installed in the framework that is connected to a
    <xref linkend="org.osgi.framework.connect.ConnectModule" xrefstyle="hyperlink"/> by a
    <xref linkend="org.osgi.framework.connect.ModuleConnector" xrefstyle="hyperlink"/>.</para>

    <section xml:id="framework.connect.bundle.install">
      <title>Installing Connect Bundles</title>

      <para>When a bundle is installed, as defined by <xref linkend="i1314099"/>, a bundle location and an optional input stream
      to the content is provided with the <code>BundleContext</code> method <xref linkend="org.osgi.framework.BundleContext.installBundle-String-InputStream-" xrefstyle="hyperlink"/>.
      If a content input stream is provided to the call to <code>installBundle</code> then the Framework
      must use that input stream to read the content of the bundle being installed.
      In this case the Framework assumes that the management agent is not installing a
      connect bundle and wants the content from the provided input stream to be
      installed into the Framework.
      </para>

      <para>When no input stream is provided to the <code>installBundle</code> method the Framework
      must call the <code>ModuleConnector</code> method <xref linkend="org.osgi.framework.connect.ModuleConnector.connect-String-" xrefstyle="hyperlink"/>. The <code>connect</code> method is given the bundle location
      specified in the call to <xref linkend="org.osgi.framework.BundleContext.installBundle-String-InputStream-" xrefstyle="hyperlink"/>. The <code>connect</code> method must do one of the following:</para>

      <itemizedlist>
        <listitem>
          <para>Throw a <code>BundleException</code> if the installation of the bundle is to be prevented.
          In this case the <code>BundleException</code> must be thrown from the <code>installBundle</code>
          method. Any other exception thrown by the <code>connect</code> method must propagate to the caller
          of the <code>installBundle</code> method.</para>
        </listitem>

        <listitem>
          <para>Return an empty <code>Optional</code> indicating that the Framework must create
          the input stream from which to read the bundle by interpreting, in an implementation
          dependent manner, the specified location.</para>
        </listitem>

        <listitem>
          <para>Return a present <code>Optional</code> indicating that the <xref linkend="org.osgi.framework.connect.ConnectModule" xrefstyle="hyperlink"/> present must be connected to the bundle and used to access content of the bundle.</para>
        </listitem>
      </itemizedlist>

      <para>If a <xref linkend="org.osgi.framework.connect.ConnectModule" xrefstyle="hyperlink"/> is found for the specified
      bundle location, then the Framework must call the <code>ConnectModule</code> method
      <xref linkend="org.osgi.framework.connect.ConnectModule.getContent--" xrefstyle="hyperlink"/> to access the
      current <xref linkend="org.osgi.framework.connect.ConnectContent" xrefstyle="hyperlink"/>
      for the bundle. The <code>ConnectContent</code> must be used by the Framework to access content for the bundle's current
      <xref linkend="org.osgi.framework.wiring.BundleRevision" xrefstyle="hyperlink"/>. Any exception thrown by the
      <code>getContent</code> method must be wrapped in a <code>BundleException</code> and result in the
      <code>BundleException</code> being thrown by the <code>installBundle</code> method.</para>
    </section>

    <section>
      <title>Updating Connect Bundles</title>
      <para>When a bundle is updated, as defined by <xref linkend="i3284680"/>, an optional input
      stream to the content is provided with the <code>Bundle</code> method
      <xref linkend="org.osgi.framework.Bundle.update-InputStream-" xrefstyle="hyperlink"/>.
      If the content input stream is provided to the call to <code>update</code> then the Framework
      must use that input stream to read the content of the bundle being updated. In this case
      the Framework assumes the management agent is not updating the bundle to a connect bundle and wants the
      content from the provided input stream to be used to update the bundle. This allows a
      management agent to update a connect bundle to a non-connect bundle.</para>

      <para>When no input stream is provided to the <code>update</code> method the Framework must call
      the <code>ModuleConnector</code> method <xref linkend="org.osgi.framework.connect.ModuleConnector.connect-String-" xrefstyle="hyperlink"/>. The <code>connect</code> method is given the location of the
      bundle being updated. The <code>connect</code> method must do one of the following:</para>

      <itemizedlist>
        <listitem>
          <para>Throw a <code>BundleException</code> if the update of the bundle is to be prevented.
          In this case the <code>BundleException</code> must be thrown from the <code>update</code>
          method. Any other exception thrown by the <code>connect</code> method must propagate to the caller
          of the <code>update</code> method.</para>
        </listitem>

        <listitem>
          <para>Return an empty <code>Optional</code> indicating that the Framework must create the
          input stream from which to read the updated bundle by interpreting, in an implementation
          dependent manner, this bundle's <code>Bundle-UpdateLocation</code> Manifest header, if present,
          or this bundle's original location.</para>
        </listitem>

        <listitem>
          <para>Return a present <code>Optional</code> indicating that the
          <xref linkend="org.osgi.framework.connect.ConnectModule" xrefstyle="hyperlink"/>
          present must be connected to the bundle and used to access content
          of the updated bundle.</para>
        </listitem>
      </itemizedlist>

      <para>If a <xref linkend="org.osgi.framework.connect.ConnectModule" xrefstyle="hyperlink"/> is found for the specified
      bundle location, then the Framework must call the <code>ConnectModule</code> method
      <xref linkend="org.osgi.framework.connect.ConnectModule.getContent--" xrefstyle="hyperlink"/> to access the
      current <xref linkend="org.osgi.framework.connect.ConnectContent" xrefstyle="hyperlink"/>
      for the updated bundle. The <code>ConnectContent</code> must be used by the Framework to access content for the bundle's current
      <xref linkend="org.osgi.framework.wiring.BundleRevision" xrefstyle="hyperlink"/>. Any exception thrown by the
      <code>getContent</code> method must be wrapped in a <code>BundleException</code> and result in the
      <code>BundleException</code> being thrown by the <code>update</code> method.</para>

      <para>When no input stream is provided to the call to <code>update</code> it is possible to update
      a non-connect bundle to a connect bundle. Depending on the dynamic nature of the module
      connector, updating a connect bundle may result in the exact same
      <xref linkend="org.osgi.framework.connect.ConnectContent" xrefstyle="hyperlink"/> being used for
      each updated revision for the bundle. This implies that the same class loader and content entries
      could be used for each updated revision.</para>
    </section>

    <section>
      <title>Connect Content</title>

      <para>The <xref linkend="org.osgi.framework.connect.ConnectContent" xrefstyle="hyperlink"/>
      provides the Framework with all the information and resources necessary to represent a
      <xref linkend="org.osgi.framework.wiring.BundleRevision" xrefstyle="hyperlink"/> for the connect
      bundle installed the Framework.</para>

      <section>
        <title>Opening Connect Content</title>

        <para>Before accessing the <xref linkend="org.osgi.framework.connect.ConnectContent" xrefstyle="hyperlink"/>
        a Framework must first open the <code>ConnectContent</code> with the method
        <xref linkend="org.osgi.framework.connect.ConnectContent.open--" xrefstyle="hyperlink"/>.
        A Framework may open and close the content many times while the content is being used by the Framework.
        For example, to limit the number of resources kept open concurrently by the Framework.  The Framework
        must always ensure that the content is open before calling other methods on the
        <code>ConnectContent</code>. If any exception is thrown by the <code>open</code>
        method as a result of installing or updating a connect bundle then the exception
        must be wrapped in a <code>BundleException</code> and result in the <code>BundleException</code>
        being thrown by the bundle <code>install</code> or <code>update</code> method.</para>
      </section>

      <section>
        <title>Bundle Manifest Headers</title>
        <para>As defined by <xref linkend="i2654895"/> the bundle manifest headers can carry descriptive
        information about the bundle. A connect content may provide the bundle manifest headers
        to be used by the current revision of a bundle. When the framework needs to access a
        connect bundle's headers it must call the <code>ConnectContent</code> method
        <xref linkend="org.osgi.framework.connect.ConnectContent.getHeaders--" xrefstyle="hyperlink"/>.
        If an empty <code>Optional</code> is returned then the Framework must lookup the content entry
        named <code>META-INF/MANIFEST.MF</code> and parse the bundle manifest itself as defined by
        <xref linkend="i2654895"/>.</para>

        <para>If the <code>Optional</code> returned has a map present then the map must be used to provide
        the raw, unlocalized, headers for the bundle.  The headers must be used the same way the raw header
        values would have been used from a parsed <code>META-INF/MANIFEST.MF</code> entry. That is the header
        keys and values that have semantic meaning must be used by the framework for the bundle and the
        key/value pairs must be used for the <code>Dictionary</code> returned by the bundle
        <xref linkend="org.osgi.framework.Bundle.getHeaders--" xrefstyle="hyperlink"/> methods.
        The <xref linkend="org.osgi.framework.wiring.BundleRevision" xrefstyle="hyperlink"/> associated with the
        connect content must also have its capabilities and requirements defined by the contents of the Map.</para>
      </section>

      <section>
        <title>Bundle Class Loader</title>

        <para>Connect content is typically managed and loaded by an entity outside of the Framework itself. This may also
        influence the way classes are defined and loaded for content outside of the Framework's control. For bundle
        revisions that are connected to a <xref linkend="org.osgi.framework.connect.ConnectContent" xrefstyle="hyperlink"/> the framework must call the connect content method
        <xref linkend="org.osgi.framework.connect.ConnectContent.getClassLoader--" xrefstyle="hyperlink"/>
        before creating a Framework managed class loader for the connected bundle.</para>

        <para>If an empty <code>Optional</code> is returned by the connect content <code>getClassLoader</code> method then the
        Framework must create a class loader for the current bundle revision. The class loader created
        by the Framework must follow all the delegation rules defined by <xref linkend="i3174728"/> for a bundle
        class loader and it must implement the <xref linkend="org.osgi.framework.BundleReference" xrefstyle="hyperlink"/>
        interface. All resources found and classes defined by this class loader must have their content read using the
        connect content entries.  This is similar to how a bundle class loader works when the Framework is responsible
        for accessing and reading the bundle content JAR files directly. This framework implementation class loader
        must be returned by the the <code>BundleWiring</code> method <xref linkend="org.osgi.framework.wiring.BundleWiring.getClassLoader--" xrefstyle="hyperlink"/>.</para>

        <para>If the <code>Optional</code> returned by the connect content <code>getClassLoader</code> method has a
        class loader present then that <code>ClassLoader</code> must be used for the class loader of the
        <xref linkend="org.osgi.framework.wiring.BundleWiring" xrefstyle="hyperlink"/>
        that is connected to the connect content.  The <code>ClassLoader</code> provided is not required to implement
        the <xref linkend="org.osgi.framework.BundleReference" xrefstyle="hyperlink"/> interface and is not required
        to follow the delegation rules defined by <xref linkend="i3174728"/>.  If the <code>ClassLoader</code> does
        not implement <code>BundleReference</code> then the Framework must wrap the <code>ClassLoader</code> with
        another <code>ClassLoader</code> that does implement <code>BundleReference</code>. The
        <xref linkend="org.osgi.framework.BundleReference.getBundle--" xrefstyle="hyperlink"/> must return the bundle
        associated with the <code>BundleWiring</code>.  This wrapper loader simply delegates all loading to the
        <code>ClassLoader</code> provided connect content.  A Framework is free to always return a wrapper loader
        for the <code>BundleWiring</code> method <xref linkend="org.osgi.framework.wiring.BundleWiring.getClassLoader--" xrefstyle="hyperlink"/> even when the connect content loader does implement the <code>BundleReference</code> interface.</para>

        <para>A module connector is not required to provide a unique class loader for each <code>ConnectContent</code> instance.
        That is the same class loader can be used as the class loader for multiple <code>ConnectContent</code> instances and therefore
        get used by multiple bundles installed in the framework. If the connect bundle exports packages then the
        <code>ConnectContent</code> class loader will be delegated to by other class loaders managed by the framework.
        In other words, a bundle installed that is not connected with a
        <xref linkend="org.osgi.framework.connect.ConnectModule" xrefstyle="hyperlink"/> may import packages exported by
        connect bundles and the OSGi Module Layer will do the correct delegation of class loads to the connect class loader as defined
        <xref linkend="i3174728"/> for exported packages.</para>

        <para>When a module connector implementation provides class loader implementations that are not the framework
        managed class loader there are limitations with respect to the behavior defined by the sections
        <xref linkend="framework.weavinghooks"/> and <xref linkend="i3270445"/>. Weaving hooks
        as defined by  <xref linkend="framework.weavinghooks"/> will not be notified of the classes defined by the module
        connect class loaders. This implies that the <xref linkend="org.osgi.framework.hooks.weaving.WeavingHook" xrefstyle="hyperlink"/>
        and <xref linkend="org.osgi.framework.hooks.weaving.WovenClassListener" xrefstyle="hyperlink"/> implementations
        will not be called for and will not be able to weave these classes. The activation policy as
        defined by <xref linkend="i3270445"/> also cannot be supported because The Framework will not have the necessary
        hooks into the module connector class loader implementation to cause bundle activation on class load.</para>

      </section>

      <section>
        <title>Connect Content Entries</title>

        <para>A <xref linkend="org.osgi.framework.connect.ConnectContent" xrefstyle="hyperlink"/> instance
        provides access to content entries for a revision of a connect bundle. The connect content entries
        are used by the Framework for the following:</para>

        <itemizedlist>
          <listitem>
            <para>To provide content for the introspective methods on <xref linkend="org.osgi.framework.Bundle" xrefstyle="hyperlink"/>
            and <xref linkend="org.osgi.framework.wiring.BundleWiring" xrefstyle="hyperlink"/>. For example, the
            <xref linkend="org.osgi.framework.Bundle.getEntry-String-" xrefstyle="hyperlink"/>,
            <xref linkend="org.osgi.framework.Bundle.getEntryPaths-String-" xrefstyle="hyperlink"/> and
            <xref linkend="org.osgi.framework.wiring.BundleWiring.findEntries-String-String-int-" xrefstyle="hyperlink"/> method.
            </para>
          </listitem>
          <listitem>
            <para>To provide content for loading classes and resources from the framework managed class loader.
            This is used when the <code>ConnectContent</code> method
            <xref linkend="org.osgi.framework.connect.ConnectContent.getClassLoader--" xrefstyle="hyperlink"/> returns
            an empty <code>Optional</code>.</para>
          </listitem>
        </itemizedlist>

        <para>To introspect all entry path names provided by a <code>ConnectContent</code> instance the method
        <xref linkend="org.osgi.framework.connect.ConnectContent.getEntries--" xrefstyle="hyperlink"/>
        is used by the Framework. The result of the <code>getEntries</code> method is used by the Framework
        to provide results from the <code>Bundle</code>
        <xref linkend="org.osgi.framework.Bundle.getEntryPaths-String-" xrefstyle="hyperlink"/>
        method and the <code>BundleWiring</code>
        <xref linkend="org.osgi.framework.wiring.BundleWiring.findEntries-String-String-int-" xrefstyle="hyperlink"/>
        method.</para>

        <para>To introspect a connect content entry the interface
        <xref linkend="org.osgi.framework.connect.ConnectContent.ConnectEntry" xrefstyle="hyperlink"/>
        is used. A <code>ConnectEntry</code> can be looked up by its path name using the
        <code>ConnectContent</code> method
        <xref linkend="org.osgi.framework.connect.ConnectContent.getEntry-String-" xrefstyle="hyperlink"/>.
        If the entry does not exist then an empty <code>Optional</code> is returned. A present
        <xref linkend="org.osgi.framework.connect.ConnectContent.ConnectEntry" xrefstyle="hyperlink"/>
        can be used by the Framework to provide <code>URL</code> objects that use a Framework specific
        protocol for bundle entries. For example, for the <code>URL</code> instances returned by
        <code>Bundle</code> method
        <xref linkend="org.osgi.framework.Bundle.getEntry-String-" xrefstyle="hyperlink"/>
        and the <code>BundleWiring</code> method
        <xref linkend="org.osgi.framework.wiring.BundleWiring.findEntries-String-String-int-" xrefstyle="hyperlink"/>.
        </para>

        <para>The Framework must ensure that the path value used for calls to <code>ConnectContent</code>
        method <xref linkend="org.osgi.framework.connect.ConnectContent.getEntry-String-" xrefstyle="hyperlink"/>
        do not start with slash ('/'). That is any paths used for calls to <code>Bundle</code> method
        <xref linkend="org.osgi.framework.Bundle.getEntry-String-" xrefstyle="hyperlink"/>
        or <code>BundleWiring</code> method
        <xref linkend="org.osgi.framework.wiring.BundleWiring.findEntries-String-String-int-" xrefstyle="hyperlink"/>
        must have the beginning slash ('/') removed before calling the <code>ConnectContent</code> method
        <xref linkend="org.osgi.framework.connect.ConnectContent.getEntry-String-" xrefstyle="hyperlink"/>.
        </para>
      </section>
      <section>
        <title>Closing Connect Content</title>

        <para>When a <xref linkend="org.osgi.framework.wiring.BundleRevision" xrefstyle="hyperlink"/>
        connected to a <xref linkend="org.osgi.framework.connect.ConnectContent" xrefstyle="hyperlink"/>
        no longer <xref linkend="org.osgi.framework.wiring.BundleWiring.isInUse--" xrefstyle="hyperlink"/>
        then the Framework must call the <code>ConnectContent</code> method
        <xref linkend="org.osgi.framework.connect.ConnectContent.close--" xrefstyle="hyperlink"/> in order
        to close the connect content. The Framework is free to <code>close</code> the <code>ConnectContent</code>
        at any other time during the life time of the Framework, but the Framework must always ensure
        <code>ConnectContent</code> is opened before calling other methods on the <code>ConnectContent</code>.</para>
      </section>
    </section>

    <section>
      <title>Identify Connect Bundles</title>
      <para>A bundle installed in the framework can be identified as a connect bundle by introspection of
      the <link linkend="org.osgi.framework.namespace.IdentityNamespace.CAPABILITY_TAGS_ATTRIBUTE" xrefstyle="hyperlink"><code>tags</code></link> attribute on
      the <link linkend="org.osgi.framework.namespace.IdentityNamespace.IDENTITY_NAMESPACE" xrefstyle="hyperlink"><code>osgi.identity</code></link>
      capability for the current bundle revision. All connect bundle revisions must have a <code>tags</code>
      attribute value that contains the string value <link linkend="org.osgi.framework.connect.ConnectContent.TAG_OSGI_CONNECT"><code>osgi.connect</code></link>.
      For example, the following method determines if a <code>BundleRevision</code> is for a connect bundle:</para>

    <programlisting>boolean isConnect(BundleRevision revision) {
    return revision.getCapabilities("osgi.identity").stream().findFirst().map(c-&gt;{
        List&lt;String&gt; tags = (List&lt;String&gt;) c.getAttributes().get("tags");
        if (tags == null) {
            return false;
        }
        return tags.contains("osgi.connect");
    }).orElse(false);
}</programlisting>

      <para>For resources with the <link linkend="org.osgi.framework.namespace.IdentityNamespace.IDENTITY_NAMESPACE" xrefstyle="hyperlink"><code>osgi.identity</code>
      </link>capability and the attribute <link linkend="org.osgi.framework.namespace.IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE" xrefstyle="hyperlink"><code>type</code></link> value
      of <link linkend="org.osgi.framework.namespace.IdentityNamespace.TYPE_BUNDLE" xrefstyle="hyperlink"><code>osgi.bundle</code></link>, the <code>tags</code> attribute must
      be the same for the <link linkend="org.osgi.framework.namespace.BundleNamespace.BUNDLE_NAMESPACE" xrefstyle="hyperlink"><code>osgi.wiring.bundle</code></link>
      and the <link linkend="org.osgi.framework.namespace.HostNamespace.HOST_NAMESPACE" xrefstyle="hyperlink"><code>osgi.wiring.host</code></link>
      capabilities. The Framework must include the <code>osgi.connect</code> value in the <code>tags</code> attribute for all three capabilities.</para>
    </section>

    <section>
      <title>Launching from Persistent Storage</title>

      <para>The Framework must make a record of which bundles are connected to a
      <xref linkend="org.osgi.framework.connect.ConnectModule" xrefstyle="hyperlink"/>.
      When the Framework is stopped it must persist the state of all the installed bundles,
      including the ones connected to a <code>ConnectModule</code>.  When a new Framework instance
      is created using the persistent storage which recorded the connection to a
      <code>ConnectModule</code>, the Framework must verify that a
      <xref linkend="org.osgi.framework.connect.ModuleConnector" xrefstyle="hyperlink"/> is
      available that can connect the bundle location.</para>

      <para>If there is no <code>ConnectModule</code> present then the bundle installed must
      be discarded by the Framework as if it is not installed and a warning <code>FrameworkEvent</code>
      should be published or a warning should be logged.</para>
    </section>

    <section>
      <title>Extension Bundles</title>

      <para>Extension bundles as defined by the section <xref linkend="framework.module.extensionbundles"/> can
      deliver parts, or fragments, of the Framework implementation. A Framework that supports
      extension bundles will modify its own class loader to append the content of the framework
      extension as defined by <xref linkend="framework.module.extensionClassPath"/>.
      If an extension bundle is also a connect bundle then the framework must not attempt to
      perform the class path modifications of the Framework itself with the extension bundle.
      It is assumed that the <code>ModuleConnector</code> is managing that outside of the Framework.</para>
    </section>
  </section>

  <section>
    <title>Framework Utility Helpers</title>

    <para>The <xref linkend="org.osgi.framework.FrameworkUtil" xrefstyle="hyperlink"/> class
    contains utility methods which may be useful to bundles. For module connector implementations
    the <code>FrameworkUtil</code> method <xref linkend="org.osgi.framework.FrameworkUtil.getBundle-Class-" xrefstyle="hyperlink"/>
    needs additional help from the module connector to figure out the <code>Bundle</code> for a
    specified <code>Class</code>.</para>

    <section>
      <title>Helper Implementations</title>

      <para>A module connector implementation can hook into the <code>FrameworkUtil</code> class
      by providing an implementation of the <xref linkend="org.osgi.framework.connect.FrameworkUtilHelper" xrefstyle="hyperlink"/> interface.
      Implementations of the <code>FrameworkUtilHelper</code> interface provide alternative
      implementations of the methods contained in the <code>FrameworkUtil</code> class.
      The <code>FrameworkUtil</code> method <xref linkend="org.osgi.framework.FrameworkUtil.getBundle-Class-" xrefstyle="hyperlink"/>
      method will fall back to calling the available <code>FrameworkUtilHelper</code>
      <xref linkend="org.osgi.framework.connect.FrameworkUtilHelper.getBundle-Class-" xrefstyle="hyperlink"/> methods
      if the default implementation of the <code>FrameworkUtil</code>
      <xref linkend="org.osgi.framework.FrameworkUtil.getBundle-Class-" xrefstyle="hyperlink"/> method
      cannot figure out the <code>Bundle</code> for the specified <code>Class</code>. This allows a module
      connector implementation to return the <code>Bundle</code> object for classes that a module connector
      class loader defines.
      </para>
    </section>

    <section>
      <title>Java Service Provider Configuration Support for Helpers</title>

      <para>Similar to how a connect framework factory is obtained in <xref linkend="framework.connect.service.provider"/> the <code>FrameworkUtil</code> class discovers helper names
      by reading the content of the configuration resources with the path
      <code>META-INF/services/org.osgi.framework.connect.FrameworkUtilHelper</code></para>

      <para>For example, if the module connector implementation <code>com.acme.osgi.connect.classpath</code> has a
      helper class <code>com.acme.osgi.connect.classpath.AcmeFrameworkUtilHelpler</code>, then it should have
      the following resource:</para>

      <programlisting>META-INF/services/org.osgi.framework.connect.FrameworkUtilHelper</programlisting>

      <para>And the contents should be:</para>

      <programlisting># ACME Impl. for FrameworkUtilHelper
com.acme.osgi.connect.classpath.AcmeFrameworkUtilHelpler</programlisting>

      <para>When the <xref linkend="org.osgi.framework.FrameworkUtil" xrefstyle="hyperlink"/> class
      is initialized it will discover the available <code>FrameworkUtilHelper</code>
      implementations as described in <xref linkend="i3300085"/> to obtain
      an immutable list of
      <xref linkend="org.osgi.framework.connect.FrameworkUtilHelper" xrefstyle="hyperlink"/>
      implementations. The list of helpers cannot change during the lifetime of the
      <code>FrameworkUtil</code> class.</para>
    </section>
  </section>

  <section>
    <title>Example Class Path Connector</title>
    <para>To illustrate how the Connect specification can be used the following is an example
    connector that discovers the JAR files contained on the Java class path and represents them
    as connect content.  This example assumes the module connector implementation
    exists on the class path along with other bundle JARs that it can discover. This example does not show
    how the JAR files are discovered on the running Java class path.</para>

    <programlisting>
public class ClassPathConnector implements ModuleConnector {

    @Override
    public Optional&lt;ConnectModule&gt; connect(String location)
            throws BundleException {
        return getJarFile(location).map((j) -&gt; () -&gt; new ClassPathContent(j));
    }

    private Optional&lt;JarFile&gt; getJarFile(String location) {
        // find a jar file for the specified location from the running class path
        return ...
    }

    static class ClassPathContent implements ConnectContent {
        private final JarFile jar;
        public ClassPathContent(JarFile jar) {
            this.jar = jar;
        }

        @Override
        public Optional&lt;ClassLoader&gt; getClassLoader() {
            // assume this classes class loader can be used by all JARs found
            // on the class path
            return Optional.of(getClass().getClassLoader());
        }

        @Override
        public Iterable&lt;String&gt; getEntries() throws IOException {
            return jar.stream().map((e) -&gt; e.getName()).
                    collect(Collectors.toList());
        }

        @Override
        public Optional&lt;ConnectEntry&gt; getEntry(String path) {
            return Optional.ofNullable(getConnectEntry(path));
        }

        ConnectEntry getConnectEntry(final String path) {
            final ZipEntry entry = jar.getEntry(path);
            return entry == null ? null : new ConnectEntry() {

                @Override
                public String getName() {
                    return path;
                }

                @Override
                public long getContentLength() {
                    return entry.getSize();
                }

                @Override
                public long getLastModified() {
                    return entry.getTime();
                }

                @Override
                public InputStream getInputStream() throws IOException {
                    return jar.getInputStream(entry);
                }
            };
        }

        @Override
        public Optional&lt;Map&lt;String, String&gt;&gt; getHeaders() {
            return Optional.empty();
        }

        @Override
        public void open() throws IOException {}

        @Override
        public void close() throws IOException {}

    }

    @Override
    public void initialize(File storage, Map&lt;String, String&gt; configuration) {}

    @Override
    public Optional&lt;BundleActivator&gt; newBundleActivator() {
        return Optional.empty();
    }
}

    </programlisting>
  </section>

  <section>
    <title>Security</title>
    <para>A <xref linkend="org.osgi.framework.connect.ModuleConnector" xrefstyle="hyperlink"/> implementation
    should be considered part of the Framework implementation when it is used to launch a new Framework. Just
    like Framework implementations can assume to have <code>AllPermission</code> granted, a module
    connector should have <code>AllPermission</code> granted. A module connector will have
    access to the bundle locations. A bundle location can be considered sensitive data that should
    be protected. Module connector implementations should not expose the bundle location strings they obtain
    without a necessary permission check, see
    <xref linkend="org.osgi.framework.Bundle.getLocation--" xrefstyle="hyperlink"/>.</para>
  </section>

  <section xreflabel="org.osgi.framework.connect" version="5" role="package" xml:id="org.osgi.framework.connect" xml:base="060/../../../generated/javadoc/docbook/org.osgi.framework.connect.xml">
   <title>org.osgi.framework.connect</title>
   <info>
      <releaseinfo xml:id="org.osgi.framework.connect-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.framework.connect-version.number">1.0</edition>
   </info>
   <para>
Framework Connect Package Version 1.0.
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest.
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.framework.connect; version="[1.0,2.0)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.connect.ConnectContent">
                  <code>ConnectContent</code>
               </link> -
A <code>ConnectContent</code> provides a <link linkend="org.osgi.framework.launch.Framework">Framework</link> instance access to the
 content of a <link linkend="org.osgi.framework.connect.ConnectModule">ConnectModule</link>.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.connect.ConnectContent.ConnectEntry">
                  <code>ConnectContent.ConnectEntry</code>
               </link> -
Represents the entry of a <code>ConnectContent</code>.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.connect.ConnectFrameworkFactory">
                  <code>ConnectFrameworkFactory</code>
               </link> -
A factory for creating <link linkend="org.osgi.framework.launch.Framework">Framework</link> instances.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.connect.ConnectModule">
                  <code>ConnectModule</code>
               </link> -
A <code>ConnectModule</code> is used by a <link linkend="org.osgi.framework.launch.Framework">Framework</link> instance to access the
 content of the connected bundle.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.connect.FrameworkUtilHelper">
                  <code>FrameworkUtilHelper</code>
               </link> -
A helper for the <link linkend="org.osgi.framework.FrameworkUtil">FrameworkUtil</link> class.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.framework.connect.ModuleConnector">
                  <code>ModuleConnector</code>
               </link> -
A <code>ModuleConnector</code> provides connections to instances of
 <link linkend="org.osgi.framework.connect.ConnectModule">ConnectModule</link> that are used by a <link linkend="org.osgi.framework.launch.Framework">Framework</link> instance to
 connect installed bundles locations with content provided by the
 <code>ModuleConnector</code>.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section xreflabel="ConnectContent" role="class" xml:id="org.osgi.framework.connect.ConnectContent">
      <title>public interface ConnectContent</title>
      <para>
A <code>ConnectContent</code> provides a <link linkend="org.osgi.framework.launch.Framework">Framework</link> instance access to the
 content of a <link linkend="org.osgi.framework.connect.ConnectModule">ConnectModule</link>.
 </para>
      <para>
 A framework may <link linkend="org.osgi.framework.connect.ConnectContent.open--">open</link> and <link linkend="org.osgi.framework.connect.ConnectContent.close--">close</link> the content
 for a <link linkend="org.osgi.framework.connect.ConnectModule">ConnectModule</link> multiple times while the <code>ConnectContent</code>
 is in use by the framework. The framework must close the
 <code>ConnectContent</code> once the <code>ConnectContent</code> is no longer used as
 the content of a current bundle revision or an in use bundle revision.
 </para>
      <para>
 An entry in a <code>ConnectContent</code> is identified by a path name that is a
 solidus (<code>'/' /</code>) separated path. A <code>ConnectContent</code>
 may treat directories as entries. A directory entry path name will end with a
 solidus. A directory entry may be located using a path name that omits the
 trailing solidus.</para>
      <formalpara role="parameter">
         <title>See Also</title>
         <para>
            <link linkend="org.osgi.framework.wiring.BundleRevisions">BundleRevisions</link>
         </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section xreflabel="TAG_OSGI_CONNECT" role="field" xml:id="org.osgi.framework.connect.ConnectContent.TAG_OSGI_CONNECT">
         <title>public static final String TAG_OSGI_CONNECT = "osgi.connect"</title>
         <para>
The <code>osgi.identity</code>
            <link linkend="org.osgi.framework.namespace.IdentityNamespace.CAPABILITY_TAGS_ATTRIBUTE">tags</link> attribute value
 used by the framework to tag connect bundle revisions.
   </para>
      </section>
      <section xreflabel="close()" role="method" xml:id="org.osgi.framework.connect.ConnectContent.close--">
         <title>public void close() throws IOException</title>
         <para role="description">
Closes this <code>ConnectContent</code>.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– If an error occurred closing this
             <code>ConnectContent</code>.</para>
         </formalpara>
      </section>
      <section xreflabel="getClassLoader()" role="method" xml:id="org.osgi.framework.connect.ConnectContent.getClassLoader--">
         <title>public Optional&lt;ClassLoader&gt; getClassLoader()</title>
         <para role="description">
Returns a class loader for this <code>ConnectContent</code>.
 </para>
         <para>
 This method is called by the framework for <link linkend="org.osgi.framework.Bundle.RESOLVED">resolved</link> bundles only and will be called at most once while a bundle is
 resolved. If a bundle associated with a <link linkend="org.osgi.framework.connect.ConnectModule">ConnectModule</link> is
 refreshed and resolved again, the framework will ask the
 <code>ConnectContent</code> for the class loader again. This allows for a
 <code>ConnectContent</code> to reuse or create a new class loader each time
 the bundle revision is resolved.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An <code>Optional</code> containing the class loader for this
         <code>ConnectContent</code>, or an empty <code>Optional</code> if framework
         should handle creating a class loader for the bundle revision
         associated with this <code>ConnectContent</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this <code>ConnectContent</code> has been
             closed.</para>
         </formalpara>
      </section>
      <section xreflabel="getEntries()" role="method" xml:id="org.osgi.framework.connect.ConnectContent.getEntries--">
         <title>public Iterable&lt;String&gt; getEntries() throws IOException</title>
         <para role="description">
Returns the entry names available in this <code>ConnectContent</code>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An <code>Iterable</code> which can supply the available entry names.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– If an error occurs reading this
             <code>ConnectContent</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this <code>ConnectContent</code> has been
             closed.</para>
         </formalpara>
      </section>
      <section xreflabel="getEntry(String)" role="method" xml:id="org.osgi.framework.connect.ConnectContent.getEntry-String-">
         <title>public Optional&lt;ConnectContent.ConnectEntry&gt; getEntry(String path)</title>
         <formalpara role="parameter">
            <title>path</title>
            <para>The path name of the entry.</para>
         </formalpara>
         <para role="description">
Returns the <link linkend="org.osgi.framework.connect.ConnectContent.ConnectEntry">ConnectEntry</link> for the specified path name in this
 content.
 </para>
         <para>
 The empty value is returned if an entry with the
 specified path name does not exist. The path must not start with a
 "/" and is relative to the root of this content. A connect
 entry for a directory will have a path name that ends with a slash ('/').</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An <code>Optional</code> containing the <link linkend="org.osgi.framework.connect.ConnectContent.ConnectEntry">ConnectEntry</link> for the
         specified path, or an empty <code>Optional</code> if no entry for
         specified path can be found.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this <code>ConnectContent</code> has been
             closed.</para>
         </formalpara>
      </section>
      <section xreflabel="getHeaders()" role="method" xml:id="org.osgi.framework.connect.ConnectContent.getHeaders--">
         <title>public Optional&lt;Map&lt;String, String&gt;&gt; getHeaders()</title>
         <para role="description">
Returns the Manifest headers and values of this <code>ConnectContent</code>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An <code>Optional</code> containing the Manifest headers and values
         for this <code>ConnectContent</code>, or an empty <code>Optional</code> if
         the framework should handle parsing the Manifest of the content
         itself.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If this <code>ConnectContent</code> has been
             closed.</para>
         </formalpara>
      </section>
      <section xreflabel="open()" role="method" xml:id="org.osgi.framework.connect.ConnectContent.open--">
         <title>public void open() throws IOException</title>
         <para role="description">
Opens this <code>ConnectContent</code>.
 </para>
         <para>
 The framework will open the content when it needs to access the content
 for a bundle revision associated with this <code>ConnectContent</code>. The
 framework may defer calling this method until requests to access the
 bundle revision content are made.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– If an error occurred opening this
             <code>ConnectContent</code>.</para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="ConnectContent.ConnectEntry" role="class" xml:id="org.osgi.framework.connect.ConnectContent.ConnectEntry">
      <title>public static interface ConnectContent.ConnectEntry</title>
      <para>
Represents the entry of a <code>ConnectContent</code>.
   </para>
      <section xreflabel="getBytes()" role="method" xml:id="org.osgi.framework.connect.ConnectContent.ConnectEntry.getBytes--">
         <title>public byte[] getBytes() throws IOException</title>
         <para role="description">
Returns the content of this entry.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The content of this entry.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– If an error occurs reading the content.</para>
         </formalpara>
      </section>
      <section xreflabel="getContentLength()" role="method" xml:id="org.osgi.framework.connect.ConnectContent.ConnectEntry.getContentLength--">
         <title>public long getContentLength()</title>
         <para role="description">
Returns the content length of this entry.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The content length of the entry, or <code>-1</code> if the content
         length is not known.</para>
         </formalpara>
      </section>
      <section xreflabel="getInputStream()" role="method" xml:id="org.osgi.framework.connect.ConnectContent.ConnectEntry.getInputStream--">
         <title>public InputStream getInputStream() throws IOException</title>
         <para role="description">
Returns an input stream for the content of this entry.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An input stream for the content of this entry.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– If an error occurs reading the content.</para>
         </formalpara>
      </section>
      <section xreflabel="getLastModified()" role="method" xml:id="org.osgi.framework.connect.ConnectContent.ConnectEntry.getLastModified--">
         <title>public long getLastModified()</title>
         <para role="description">
Returns the last modification time of this entry.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The last modification time of this entry measured in
         milliseconds since the epoch (00:00:00 GMT, January 1, 1970).</para>
         </formalpara>
      </section>
      <section xreflabel="getName()" role="method" xml:id="org.osgi.framework.connect.ConnectContent.ConnectEntry.getName--">
         <title>public String getName()</title>
         <para role="description">
Returns the path name of this entry.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The path name of this entry.</para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="ConnectFrameworkFactory" role="class" xml:id="org.osgi.framework.connect.ConnectFrameworkFactory">
      <title>public interface ConnectFrameworkFactory</title>
      <para>
A factory for creating <link linkend="org.osgi.framework.launch.Framework">Framework</link> instances.
 </para>
      <para>
 If a framework supports <link linkend="org.osgi.framework.connect.ModuleConnector">ModuleConnector</link>, then the implementation jar
 must contain the following resource:

 </para>
      <programlisting> /META-INF/services/org.osgi.framework.connect.ConnectFrameworkFactory</programlisting>
      <para>

 This UTF-8 encoded resource must contain the name of the framework
 implementation's ConnectFrameworkFactory implementation class. Space and tab
 characters, including blank lines, in the resource must be ignored. The
 number sign (<code>'#'</code> \u0023) and all characters following it on each
 line are a comment and must be ignored.
 </para>
      <para>
 Launchers can find the name of the ConnectFrameworkFactory implementation
 class in the resource and then load and construct a ConnectFrameworkFactory
 object for the framework implementation. The ConnectFrameworkFactory
 implementation class must have a public, no-argument constructor. Java™
 SE 6 introduced the <code>ServiceLoader</code> class which can create a
 ConnectFrameworkFactory instance from the resource.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section xreflabel="newFramework(Map,ModuleConnector)" role="method" xml:id="org.osgi.framework.connect.ConnectFrameworkFactory.newFramework-Map-ModuleConnector-">
         <title>public Framework newFramework(Map&lt;String, String&gt; configuration, ModuleConnector moduleConnector)</title>
         <formalpara role="parameter">
            <title>configuration</title>
            <para>The framework properties to configure the new
            framework instance. If framework properties are not provided
            by the configuration argument, the created framework instance
            must use some reasonable default configuration appropriate for
            the current VM. For example, the system packages for the
            current execution environment should be properly exported. The
            specified configuration argument may be <code>null</code>. The
            created framework instance must copy any information needed
            from the specified configuration argument since the
            configuration argument can be changed after the framework
            instance has been created.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>moduleConnector</title>
            <para>The module connector that the new framework
            instance will use. The specified module connector argument may
            be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Create a new <link linkend="org.osgi.framework.launch.Framework">Framework</link> instance using the specified
 <link linkend="org.osgi.framework.connect.ModuleConnector">module connector</link>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A new, configured <link linkend="org.osgi.framework.launch.Framework">Framework</link> instance. The framework
         instance must be in the <link linkend="org.osgi.framework.Bundle.INSTALLED">Bundle.INSTALLED</link> state.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller does not have
             <code>AllPermission</code>, and the Java Runtime Environment
             supports permissions.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.connect.ModuleConnector">ModuleConnector</link>
            </para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="ConnectModule" role="class" xml:id="org.osgi.framework.connect.ConnectModule">
      <title>public interface ConnectModule</title>
      <para>
A <code>ConnectModule</code> is used by a <link linkend="org.osgi.framework.launch.Framework">Framework</link> instance to access the
 content of the connected bundle.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section xreflabel="getContent()" role="method" xml:id="org.osgi.framework.connect.ConnectModule.getContent--">
         <title>public ConnectContent getContent() throws IOException</title>
         <para role="description">
Returns the current content of this connect module.
 </para>
         <para>
 The framework must call this method when it needs to access the content
 for the current <link linkend="org.osgi.framework.wiring.BundleRevision">bundle revision</link> of this
 <code>ConnectModule</code>. The framework may defer opening the returned
 <link linkend="org.osgi.framework.connect.ConnectContent">ConnectContent</link> until requests to access the bundle revision
 content are made.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The current <link linkend="org.osgi.framework.connect.ConnectContent">ConnectContent</link> of this <code>ConnectModule</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IOException</code>– If an error occurred getting the content.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.connect.ModuleConnector.connect-String-">ModuleConnector.connect(String)</link>
            </para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="FrameworkUtilHelper" role="class" xml:id="org.osgi.framework.connect.FrameworkUtilHelper">
      <title>public interface FrameworkUtilHelper</title>
      <para>
A helper for the <link linkend="org.osgi.framework.FrameworkUtil">FrameworkUtil</link> class.
 </para>
      <para>
 This helper provides alternative implementations for methods on
 <link linkend="org.osgi.framework.FrameworkUtil">FrameworkUtil</link>.</para>
      <section xreflabel="getBundle(Class)" role="method" xml:id="org.osgi.framework.connect.FrameworkUtilHelper.getBundle-Class-">
         <title>public Optional&lt;Bundle&gt; getBundle(Class&lt;?&gt; classFromBundle)</title>
         <formalpara role="parameter">
            <title>classFromBundle</title>
            <para>A class associated with a bundle.</para>
         </formalpara>
         <para role="description">
Returns the <link linkend="org.osgi.framework.Bundle">Bundle</link> associated with the specified class.
 </para>
         <para>
 This helper method is called by <link linkend="org.osgi.framework.FrameworkUtil.getBundle-Class-">FrameworkUtil.getBundle(Class)</link> if
 the standard implementation of <link linkend="org.osgi.framework.FrameworkUtil">FrameworkUtil</link> is unable to find
 the bundle.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An <code>Optional</code> containing the <link linkend="org.osgi.framework.Bundle">Bundle</link> for the
         specified class, or an empty <code>Optional</code> if the specified
         class is not from a bundle.</para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="ModuleConnector" role="class" xml:id="org.osgi.framework.connect.ModuleConnector">
      <title>public interface ModuleConnector</title>
      <para>
A <code>ModuleConnector</code> provides connections to instances of
 <link linkend="org.osgi.framework.connect.ConnectModule">ConnectModule</link> that are used by a <link linkend="org.osgi.framework.launch.Framework">Framework</link> instance to
 connect installed bundles locations with content provided by the
 <code>ModuleConnector</code>.
 </para>
      <para>
 This allows a <code>ModuleConnector</code> to provide content and classes for a
 connected bundle installed in the <code>Framework</code>. A
 <code>ModuleConnector</code> is provided when
 <link linkend="org.osgi.framework.connect.ConnectFrameworkFactory.newFramework-Map-ModuleConnector-">creating</link> a
 framework instance. Because a <code>ModuleConnector</code> instance can
 participate in the initialization of the <code>Framework</code> and the life cycle
 of a <code>Framework</code> instance the <code>ModuleConnector</code> instance should
 only be used with a single <code>Framework</code> instance at a time.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section xreflabel="connect(String)" role="method" xml:id="org.osgi.framework.connect.ModuleConnector.connect-String-">
         <title>public Optional&lt;ConnectModule&gt; connect(String location) throws BundleException</title>
         <formalpara role="parameter">
            <title>location</title>
            <para>The bundle location used to install a bundle.</para>
         </formalpara>
         <para role="description">
Connects a bundle location with a <link linkend="org.osgi.framework.connect.ConnectModule">ConnectModule</link>.
 </para>
         <para>
 When the result is empty, then the framework must handle reading the
 content of the bundle itself. Otherwise, the returned
 <link linkend="org.osgi.framework.connect.ConnectModule">ConnectModule</link> must be used by the framework to access the content
 of the bundle.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An <code>Optional</code> containing the <link linkend="org.osgi.framework.connect.ConnectModule">ConnectModule</link> for the
         specified bundle location, or an empty <code>Optional</code> if the
         framework must handle reading the content of the bundle itself.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>BundleException</code>– If the location cannot be handled.</para>
         </formalpara>
      </section>
      <section xreflabel="initialize(File,Map)" role="method" xml:id="org.osgi.framework.connect.ModuleConnector.initialize-File-Map-">
         <title>public void initialize(File storage, Map&lt;String, String&gt; configuration)</title>
         <formalpara role="parameter">
            <title>storage</title>
            <para>The persistent storage area used by the <link linkend="org.osgi.framework.launch.Framework">Framework</link>
            or <code>null</code> if the platform does not have file system
            support.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>configuration</title>
            <para>An unmodifiable map of framework configuration
            properties that were used to configure the new framework
            instance.</para>
         </formalpara>
         <para role="description">
Initializes this <code>ModuleConnector</code> with the
 <link linkend="org.osgi.framework.Constants.FRAMEWORK_STORAGE">framework persistent storage</link> file and
 framework properties configured for a <link linkend="org.osgi.framework.launch.Framework">Framework</link> instance.
 </para>
         <para>
 This method is called once by a <link linkend="org.osgi.framework.launch.Framework">Framework</link> instance and is called
 before any other methods on this module connector are called.</para>
      </section>
      <section xreflabel="newBundleActivator()" role="method" xml:id="org.osgi.framework.connect.ModuleConnector.newBundleActivator--">
         <title>public Optional&lt;BundleActivator&gt; newBundleActivator()</title>
         <para role="description">
Creates a new activator for this <code>ModuleConnector</code>.
 </para>
         <para>
 This method is called by the framework during framework
 <link linkend="org.osgi.framework.launch.Framework.init-FrameworkListener...-">initialization</link>. Returning an
 activator allows this <code>ModuleConnector</code> to participate in the
 framework life cycle. If an activator is returned:
 </para>
         <itemizedlist>
            <listitem>
               <para>The framework will call the activator's
 <link linkend="org.osgi.framework.BundleActivator.start-BundleContext-">start</link> method prior to
 activating any extension bundles.</para>
            </listitem>
            <listitem>
               <para>The framework will call the activator's
 <link linkend="org.osgi.framework.BundleActivator.stop-BundleContext-">stop</link> method after
 deactivating any extension bundles.</para>
            </listitem>
         </itemizedlist>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An <code>Optional</code> containing a new <link linkend="org.osgi.framework.BundleActivator">BundleActivator</link> for
         this <code>ModuleConnector</code>, or an empty <code>Optional</code> if no
         <link linkend="org.osgi.framework.BundleActivator">BundleActivator</link> is necessary.</para>
         </formalpara>
      </section>
   </section>
</section>
</chapter>

  <chapter label="101" revision="$Id: 4b8635f116a7a35b875405f36323d44fc64c5c73 $" version="5.0" xml:id="service.log" xml:base="../101/service.log.xml">
  <title>Log Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.log-version" linkend="org.osgi.service.log"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para xml:id="i1492311">The Log Service provides a general purpose message
    logger for the OSGi framework. It consists of several services: a service
    for obtaining Loggers to log information and other services for retrieving
    current or previously recorded log information.</para>

    <para>This specification defines the methods and semantics of interfaces
    which bundle developers can use to log entries and to retrieve log
    entries.</para>

    <para xml:id="i1294527">Bundles can use the Logger Factory to log
    information for the Operator. Other bundles, oriented toward management of
    the environment, can use the <xref linkend="service.log-log.stream.ref"/>
    or Log Reader Service to retrieve Log Entry objects that were recorded
    recently or to receive Log Entry objects as they are logged by other
    bundles.</para>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Logger</emphasis> - An interface that allows a
          bundle to log information, including a message, a level, an
          exception, and a <code>ServiceReference</code> object.</para>
        </listitem>

        <listitem>
          <para><emphasis>LoggerFactory</emphasis> - The service interface
          that allows a bundle to obtain a Logger. A Logger is named and
          associated with a <code>Bundle</code> object.</para>
        </listitem>

        <listitem>
          <para><emphasis>LogService</emphasis> - The legacy service interface
          that allows a bundle to log information, including a message, a
          level, an exception, a <code>ServiceReference</code> object, and a
          <code>Bundle</code> object. The methods of this service are
          deprecated and it is recommended to use LoggerFactory and Loggers
          instead.</para>
        </listitem>

        <listitem>
          <para><emphasis>LogEntry</emphasis> - An interface that allows
          access to a log entry in the log. It includes all the information
          that can be logged through the Logger as well as a time stamp, a
          sequence number, thread information, and location
          information.</para>
        </listitem>

        <listitem>
          <para><emphasis>LogReaderService</emphasis> - A service interface
          that allows access to a list of recent <code>LogEntry</code>
          objects, and allows the registration of a <code>LogListener</code>
          object that receives <code>LogEntry</code> objects as they are
          created.</para>
        </listitem>

        <listitem>
          <para><emphasis>LogListener</emphasis> - The interface for the
          listener to <code>LogEntry</code> objects. Must be registered with
          the Log Reader Service.</para>
        </listitem>

        <listitem>
          <para><emphasis>LoggerContext</emphasis> - An interface that allows
          the configuration of effective logging levels for a Bundle. The
          configuration can be set in Configuration Admin and via method
          calls.</para>
        </listitem>

        <listitem>
          <para><emphasis>LoggerAdmin</emphasis> - A service interface that
          allows for the configuration of logging. The service provides access
          to Logger Context objects.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section>
    <title>The Logger Interface</title>

    <para>The <xref linkend="org.osgi.service.log.Logger" xrefstyle="hyperlink"/> interface allows bundle developers to log messages
    that can be distributed to other bundles, which in turn can forward the
    logged entries to a file system, remote system, or some other destination.
    It is inspired by the ideas used in <xref linkend="service.log-slf4j.ref"/>.</para>

    <figure pgwide="1">
      <title>Logger Class Diagram org.osgi.service.log package</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="4.000in" contentwidth="5.000in" fileref="logservice-classes.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The <code>Logger</code> interface allows the bundle developer
    to:</para>

    <itemizedlist xml:id="i1294532">
      <listitem>
        <para>Specify a message, message parameters, and an exception to be
        logged.</para>
      </listitem>

      <listitem xml:id="i1294533">
        <para>Define the log level representing the severity of the message
        being logged. If the effective log level for the Logger does not imply
        the requested log level, then the logging request is ignored. See
        <xref linkend="service.log-effective.log.level"/>.</para>
      </listitem>

      <listitem>
        <para>Specify the Service associated with the message being
        logged.</para>
      </listitem>

      <listitem>
        <para>Query if a log level is effective.</para>
      </listitem>
    </itemizedlist>

    <para xml:id="i1294534">By obtaining a <xref linkend="org.osgi.service.log.Logger" xrefstyle="hyperlink"/> object from
    the <xref linkend="org.osgi.service.log.LoggerFactory" xrefstyle="hyperlink"/> service, a bundle can start logging messages to
    the Log Service by calling one of the <xref linkend="org.osgi.service.log.Logger" xrefstyle="hyperlink"/>
    methods.</para>

    <para>The <xref linkend="org.osgi.service.log.Logger" xrefstyle="hyperlink"/> interface defines several methods for each of the
    defined <xref linkend="org.osgi.service.log.LogLevel" xrefstyle="hyperlink"/>s.</para>

    <table>
      <title>Log Levels</title>

      <tgroup cols="2">
        <colspec colnum="1" colwidth="1.2*"/>

        <colspec colnum="2" colwidth="5*"/>

        <thead>
          <row>
            <entry>Log Level</entry>

            <entry>Descriptions</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><para><xref linkend="org.osgi.service.log.LogLevel.AUDIT" xrefstyle="hyperlink"/></para></entry>

            <entry><para>This log level is used for information that must
            always be logged.</para></entry>
          </row>

          <row>
            <entry><para><xref linkend="org.osgi.service.log.LogLevel.ERROR" xrefstyle="hyperlink"/></para></entry>

            <entry><para>This log level is used for information about an error
            situation.</para></entry>
          </row>

          <row>
            <entry><para><xref linkend="org.osgi.service.log.LogLevel.WARN" xrefstyle="hyperlink"/></para></entry>

            <entry><para>This log level is used for information about a
            failure or unwanted situation that is not blocking.</para></entry>
          </row>

          <row>
            <entry><para><xref linkend="org.osgi.service.log.LogLevel.INFO" xrefstyle="hyperlink"/></para></entry>

            <entry><para>This log level is used for information about normal
            operation.</para></entry>
          </row>

          <row>
            <entry><para><xref linkend="org.osgi.service.log.LogLevel.DEBUG" xrefstyle="hyperlink"/></para></entry>

            <entry><para>This log level is used for detailed output for
            debugging operations.</para></entry>
          </row>

          <row>
            <entry><para><xref linkend="org.osgi.service.log.LogLevel.TRACE" xrefstyle="hyperlink"/></para></entry>

            <entry><para>This log level is used for large volume of output for
            tracing operations.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para xml:id="i1294535">Many of the <code>Logger</code> methods take a
    message format string and message parameters which are formatted together
    to create the log message. In the format string, use a left curly bracket
    (<code>'{' \u007B</code>) followed by a right curly bracket (<code>'}'
    \u007D</code>) as a place holder for a message parameter:
    <code>"{}"</code>. If you need to use the literal <code>"{}"</code> in the
    formatted message, precede the place holder with a reverse solidus
    (<code>'\' \u005C</code>): <code>"\\{}"</code>. If you need to place a
    backslash before the place holder, precede the reverse solidus with a
    reverse solidus: <code>"\\\\{}"</code>.</para>

    <para>You can also add a Throwable and/or ServiceReference to the
    generated <xref linkend="org.osgi.service.log.LogEntry" xrefstyle="hyperlink"/> by passing them to the logging methods as
    additional arguments to the <code>Logger</code> method. If the last
    argument is a Throwable or a ServiceReference, it is added to the
    generated <xref linkend="org.osgi.service.log.LogEntry" xrefstyle="hyperlink"/> and then, if the next to last argument is a
    ServiceReference or Throwable and not the same type as the last argument,
    it is also added to the generated <xref linkend="org.osgi.service.log.LogEntry" xrefstyle="hyperlink"/>. These
    arguments will not be used as message parameters. For example:</para>

    <programlisting>logger.info("Found service {}.", serviceReference, serviceReference);
logger.warn("Something named {} happened.", name, serviceReference, throwable);
logger.error("Failed.", exception);</programlisting>

    <para>The following example code records error conditions as log
    messages.</para>

    <programlisting>try (InputStream in = Files.newInputStream(myFile)) {
    int b;
    while ((b = in.read()) != -1 ) {
      ...
    }
} catch (IOException e) {
    logger.error("Cannot access file {}", myFile, e);
}</programlisting>

    <para xml:id="i1294536">Notice that in addition to the error message, the
    exception itself is also logged. Providing this information can
    significantly simplify problem determination by the Operator.</para>

    <para>Sometimes message parameters can be expensive to compute, so
    avoiding computation is important if the log level is not effective. This
    can be done using either an <code>if</code> block or a <xref linkend="org.osgi.service.log.LoggerConsumer" xrefstyle="hyperlink"/>. The
    latter is convenient as a lambda expression. For example, both of the
    following examples avoid computation if the log level is not
    effective.</para>

    <programlisting>if (logger.isInfoEnabled()) {
    logger.info("Max {}", Collections.max(processing));
}</programlisting>

    <programlisting>logger.info(l -&gt; l.info("Max {}", Collections.max(processing)));</programlisting>

    <para>The latter example only calls the lambda expression if the log level
    is effective.</para>
  </section>

  <section>
    <title>Obtaining a Logger</title>

    <para><xref linkend="org.osgi.service.log.Logger" xrefstyle="hyperlink"/>
    objects can be obtained from the <xref linkend="org.osgi.service.log.LoggerFactory" xrefstyle="hyperlink"/>
    service. Loggers are named. Logger names should be in the form of a fully
    qualified Java class names with segments separated by full stop (<code>'.'
    \u002E</code>). For example:</para>

    <programlisting>com.foo.Bar</programlisting>

    <para>Logger names form a hierarchy. A logger name is said to be an
    ancestor of another logger name if the logger name followed by a full stop
    ('.' \u002E) is a prefix of the descendant logger name. The root logger
    name (<xref linkend="org.osgi.service.log.Logger.ROOT_LOGGER_NAME" xrefstyle="hyperlink"/>) is the top ancestor of the logger name hierarchy.
    For example:</para>

    <programlisting>com.foo.Bar
com.foo
com
ROOT</programlisting>

    <para>Normally the name of the class which is doing the logging is used as
    the logger name. There are Logger Factory methods which take
    <code>Class</code> objects to simplify this.</para>

    <programlisting>Logger logger = loggerFactory.getLogger(Bar.class);</programlisting>

    <para>The <xref linkend="org.osgi.service.log.LoggerFactory" xrefstyle="hyperlink"/> service can be used to obtain two types of Logger
    objects: <xref linkend="org.osgi.service.log.Logger" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.service.log.FormatterLogger" xrefstyle="hyperlink"/>.
    The <xref linkend="org.osgi.service.log.Logger" xrefstyle="hyperlink"/>
    object uses SLF4J-style (<code>"{}"</code>) place holders for message
    formatting. The <xref linkend="org.osgi.service.log.FormatterLogger" xrefstyle="hyperlink"/> object use printf-style place holders from
    <code>java.util.Formatter</code> for message formatting.</para>

    <programlisting>FormatterLogger logger = loggerFactory.getLogger(Bar.class,
  FormatterLogger.class);
logger.error("Cannot access file %s", myFile);</programlisting>

    <para>Some bundles, such as the Service Component Runtime implementation,
    may need to log on behalf of other bundles. The <xref linkend="org.osgi.service.log.LoggerFactory.getLogger-Bundle-String-Class-" xrefstyle="hyperlink"/> method can be used to obtain a <xref linkend="org.osgi.service.log.Logger" xrefstyle="hyperlink"/> object
    associated with the specified bundle.</para>

    <programlisting>Logger logger = loggerFactory.getLogger(componentBundle,
  componentImplClassName,
  Logger.class);</programlisting>

    <para>As long as the <xref linkend="org.osgi.service.log.LoggerFactory" xrefstyle="hyperlink"/> service, from which the <xref linkend="org.osgi.service.log.Logger" xrefstyle="hyperlink"/> is obtained,
    is active, that is, the <xref linkend="org.osgi.service.log.LoggerFactory" xrefstyle="hyperlink"/> service has not been unregistered, then the <xref linkend="org.osgi.service.log.Logger" xrefstyle="hyperlink"/> is valid and
    can be used to log. However, once the <xref linkend="org.osgi.service.log.LoggerFactory" xrefstyle="hyperlink"/>
    service has been unregistered, then <xref linkend="org.osgi.service.log.Logger" xrefstyle="hyperlink"/> objects
    obtained from the <xref linkend="org.osgi.service.log.LoggerFactory" xrefstyle="hyperlink"/> service must enter a "no-op" state where no log
    level is effective and no logging occurs.</para>
  </section>

  <section>
    <title>Logger Configuration</title>

    <para>A Logger Admin service is defined which allows for the configuration
    of Loggers.</para>

    <figure pgwide="1">
      <title>Log Admin Class Diagram org.osgi.service.log.admin
      package</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="4.000in" contentwidth="5.000in" fileref="logadmin-classes.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The <xref linkend="org.osgi.service.log.admin.LoggerAdmin" xrefstyle="hyperlink"/> service can be used to obtain the <xref linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/>
    for a bundle. Each bundle may have its own named <xref linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/>
    based upon its bundle symbolic name, bundle version, and bundle location.
    There is also a <emphasis>root</emphasis> <xref linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/>
    from which all named <xref linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/>s inherit. The root <xref linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/>
    has no name.</para>

    <para>The <xref linkend="org.osgi.service.log.admin.LoggerAdmin" xrefstyle="hyperlink"/> service is associated with the <xref linkend="org.osgi.service.log.LoggerFactory" xrefstyle="hyperlink"/>
    service it administrates via the <xref linkend="org.osgi.service.log.admin.LoggerAdmin.LOG_SERVICE_ID" xrefstyle="hyperlink"/> service property whose value is a Long containing
    the service.id of the <xref linkend="org.osgi.service.log.LoggerFactory" xrefstyle="hyperlink"/> service.</para>

    <para>A <xref linkend="org.osgi.service.log.Logger" xrefstyle="hyperlink"/> implementation must locate the <xref linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/>
    for the bundle to determine the effective log level of the <xref linkend="org.osgi.service.log.Logger" xrefstyle="hyperlink"/> when a log
    method is called. See <xref linkend="service.log-effective.log.level"/>.
    The best matching name for the <xref linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/>
    is the longest name, which has a non-empty <xref linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/>, according to the following syntax:</para>

    <programlisting>name ::= symbolic-name ( ’|’ version ( ’|’ location )? )?</programlisting>

    <para>The version must be formatted canonically, that is, according to the
    <code>toString()</code> method of the <code>Version</code> class. So the
    <xref linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/> for a bundle is searched for using the following
    names in the given order:</para>

    <programlisting>&lt;symbolic-name&gt;|&lt;version&gt;|&lt;location&gt;
&lt;symbolic-name&gt;|&lt;version&gt;
&lt;symbolic-name&gt;</programlisting>

    <para>The search stops at the first non-empty <xref linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/>. If no non-empty <xref linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/>
    is found using the above search order, the <xref linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/>
    with the symbolic name of the bundle must be used.</para>

    <para>This allows a bundle to have no <xref linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/>
    configured. In this case it will use the root <xref linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/>'s configuration. It also allows a bundle to be
    configured based upon bundle symbolic name, bundle symbolic name and
    bundle version or even bundle symbolic name, bundle version, and bundle
    location. The latter forms may be of interest if there are multiple
    versions of a bundle installed.</para>

    <para><xref linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/>s can be configured using the <xref linkend="org.osgi.service.log.admin.LoggerContext.getLogLevels--" xrefstyle="hyperlink"/> and <xref linkend="org.osgi.service.log.admin.LoggerContext.setLogLevels-Map-" xrefstyle="hyperlink"/> methods of the <xref linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/>. Logger names, including the root logger name
    (<xref linkend="org.osgi.service.log.Logger.ROOT_LOGGER_NAME" xrefstyle="hyperlink"/>), can be configured to a specific log
    level.</para>

    <para>Any change to the configuration of a <xref linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/>
    must be effective immediately for all loggers that would rely upon the
    configuration of the <xref linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/>. Changes to the configuration of a <xref linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/>
    via the <xref linkend="org.osgi.service.log.admin.LoggerContext.setLogLevels-Map-" xrefstyle="hyperlink"/> method are not persisted.</para>

    <section>
      <title>Configuration Admin Integration</title>

      <para>The configured log levels for a <xref linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/> can be set by both the <xref linkend="org.osgi.service.log.admin.LoggerContext.setLogLevels-Map-" xrefstyle="hyperlink"/> method and by configuration information in
      Configuration Admin, if Configuration Admin is present. The configured
      log levels for a <xref linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/> are based upon the last technique used to update
      the configured log levels.</para>

      <para>If Configuration Admin is present, <xref linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/> configuration information in Configuration Admin
      must be used. This allows external <xref linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/> configuration such as via <xref linkend="service.log-configurator.ref"/>. The name of the <xref linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/> is mapped to a Configuration Admin targeted PID
      as follows:</para>

      <itemizedlist>
        <listitem>
          <para>The root <xref linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/>, which has no name, is mapped to the PID
          <xref linkend="org.osgi.service.log.admin.LoggerContext.LOGGER_CONTEXT_PID" xrefstyle="hyperlink"/>.</para>
        </listitem>

        <listitem>
          <para>A named <xref linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/> is mapped to a targeted PID by prefixing the
          <xref linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/>'s name with <xref linkend="org.osgi.service.log.admin.LoggerContext.LOGGER_CONTEXT_PID" xrefstyle="hyperlink"/> followed by vertical line (<code>'|'
          \u007c</code>). For example, the <xref linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/> named <code>com.foo.bar</code> is mapped to
          the targeted PID
          <code>org.osgi.service.log.admin|com.foo.bar</code>.</para>
        </listitem>
      </itemizedlist>

      <para>In the Configuration for the targeted PID, the dictionary keys are
      <xref linkend="org.osgi.service.log.Logger" xrefstyle="hyperlink"/>
      names having a key type of <code>String</code>, and the values are the
      names of the <xref linkend="org.osgi.service.log.LogLevel" xrefstyle="hyperlink"/> values having a value type of
      <code>String</code>. If the Configuration contains any key/value pairs
      whose value is not the name of a <xref linkend="org.osgi.service.log.LogLevel" xrefstyle="hyperlink"/> value,
      that key/value pair must be ignored when setting the configuration into
      the <xref linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/>.</para>

      <para>Any change to the Configuration for a <xref linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/> must be set into the <xref linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/> as soon as possible. Since notification of
      Configuration changes happen asynchronously, it may take a brief period
      of time before Configuration changes can be made effective.</para>

      <para>This section is not meant to require that a Log Service
      implementation must require Configuration Admin. But if Configuration
      Admin is present, the Configurations must be used to set the log levels
      in the mapped <xref linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/>s.</para>
    </section>

    <section xml:id="service.log-effective.log.level">
      <title>Effective Log Level</title>

      <para>Once the <xref linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/> for the logging bundle is determined, the
      effective log level for the <xref linkend="org.osgi.service.log.Logger" xrefstyle="hyperlink"/> is found using the <xref linkend="org.osgi.service.log.admin.LoggerContext.getEffectiveLogLevel-String-" xrefstyle="hyperlink"/> method:</para>

      <orderedlist>
        <listitem>
          <para>If the logger name is configured with a log level, return the
          configured log level.</para>
        </listitem>

        <listitem>
          <para>For each ancestor logger name of the logger name, if the
          ancestor logger name is configured with a log level, return the
          configured log level.</para>
        </listitem>

        <listitem>
          <para>If the <xref linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/> is named, return the result of calling the
          <xref linkend="org.osgi.service.log.admin.LoggerContext.getEffectiveLogLevel-String-" xrefstyle="hyperlink"/> method on the root <xref linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/> with the logger name.</para>
        </listitem>

        <listitem>
          <para>If the <xref linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/> is the root Logger Context, return the
          default log level for the root <xref linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/>.</para>
        </listitem>
      </orderedlist>

      <para>The default log level for the root <xref linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/> can be set by the framework launch property
      <xref linkend="org.osgi.service.log.admin.LoggerContext.LOGGER_CONTEXT_DEFAULT_LOGLEVEL" xrefstyle="hyperlink"/>. The value of this property must be the name of
      the one of the <xref linkend="org.osgi.service.log.LogLevel" xrefstyle="hyperlink"/> values. If not specified, or the specified value
      is not the name of the one of the <xref linkend="org.osgi.service.log.LogLevel" xrefstyle="hyperlink"/> values,
      the default log level of the root <xref linkend="org.osgi.service.log.admin.LoggerContext" xrefstyle="hyperlink"/> is <xref linkend="org.osgi.service.log.LogLevel.WARN" xrefstyle="hyperlink"/>.</para>
    </section>
  </section>

  <section xml:id="i1210758">
    <title>Log Reader Service</title>

    <para>The Log Reader Service maintains a list of <xref linkend="org.osgi.service.log.LogEntry" xrefstyle="hyperlink"/> objects
    called the <emphasis>log</emphasis>. The Log Reader Service is a service
    that bundle developers can use to retrieve information contained in this
    log, and receive notifications about <xref linkend="org.osgi.service.log.LogEntry" xrefstyle="hyperlink"/> objects
    when they are created through the Log Service.</para>

    <para>The size of the log is implementation-specific, and it determines
    how far into the past the log entries go.</para>

    <para>The <xref linkend="org.osgi.service.log.LogReaderService" xrefstyle="hyperlink"/> interface defines the following methods:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.service.log.LogReaderService.getLog--" xrefstyle="hyperlink"/> - This method retrieves past log entries as an
        enumeration with the most recent entry first.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.log.LogReaderService.addLogListener-LogListener-" xrefstyle="hyperlink"/> - This method is used to subscribe to the Log
        Reader Service in order to receive log messages as they occur. Unlike
        the previously recorded log entries, all log messages must be sent to
        subscribers of the Log Reader Service as they are recorded.</para>

        <para>After a subscription to the Log Reader Service has been started,
        the subscriber's <xref linkend="org.osgi.service.log.LogListener.logged-LogEntry-" xrefstyle="hyperlink"/> method must be called with a <xref linkend="org.osgi.service.log.LogEntry" xrefstyle="hyperlink"/> object
        for the message each time a message is logged.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.log.LogReaderService.removeLogListener-LogListener-" xrefstyle="hyperlink"/> - This method is used to unsubscribe the <xref linkend="org.osgi.service.log.LogListener" xrefstyle="hyperlink"/>
        from the Log Reader Service.</para>
      </listitem>
    </itemizedlist>

    <para>The <xref linkend="org.osgi.service.log.LogListener" xrefstyle="hyperlink"/> interface defines the following method:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.service.log.LogListener.logged-LogEntry-" xrefstyle="hyperlink"/> - This method is called for each <xref linkend="org.osgi.service.log.LogEntry" xrefstyle="hyperlink"/> object
        created.</para>
      </listitem>
    </itemizedlist>

    <para>The delivery of <xref linkend="org.osgi.service.log.LogEntry" xrefstyle="hyperlink"/> objects to the <xref linkend="org.osgi.service.log.LogListener" xrefstyle="hyperlink"/> object
    should be done asynchronously.</para>
  </section>

  <section xml:id="i1231250">
    <title>Log Entry Interface</title>

    <para>The <xref linkend="org.osgi.service.log.LogEntry" xrefstyle="hyperlink"/> interface abstracts a log entry. It is a record of
    the information that was passed when an event was logged as well as
    information captured at the time the event was logged. The <xref linkend="org.osgi.service.log.LogEntry" xrefstyle="hyperlink"/> interface
    defines these methods to retrieve this information.</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.service.log.LogEntry.getBundle--" xrefstyle="hyperlink"/> - This method returns the Bundle object
        associated with the <xref linkend="org.osgi.service.log.Logger" xrefstyle="hyperlink"/> used to create the log entry.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.log.LogEntry.getException--" xrefstyle="hyperlink"/> - This method returns the logged exception, if
        any. In some implementations, the returned exception may not be the
        original exception object. To avoid references to a bundle-defined
        exception class, thus preventing an uninstalled bundle from being
        garbage collected, the Log Service may return an exception object of
        an implementation defined Throwable subclass. This object will attempt
        to return as much information as possible, such as the message and
        stack trace, from the original exception object .</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.log.LogEntry.getLoggerName--" xrefstyle="hyperlink"/> - This name of the <xref linkend="org.osgi.service.log.Logger" xrefstyle="hyperlink"/> used to
        create the log entry.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.log.LogEntry.getLogLevel--" xrefstyle="hyperlink"/> - This method returns the <xref linkend="org.osgi.service.log.LogLevel" xrefstyle="hyperlink"/>.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.log.LogEntry.getMessage--" xrefstyle="hyperlink"/> - This method returns the formatted
        message.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.log.LogEntry.getServiceReference--" xrefstyle="hyperlink"/> - This method returns the logged
        <code>ServiceReference</code>, if any.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.log.LogEntry.getTime--" xrefstyle="hyperlink"/> - This method returns the time that the log
        entry was created.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.log.LogEntry.getSequence--" xrefstyle="hyperlink"/> - This method returns a sequence number which
        increases for each created log entry.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.log.LogEntry.getThreadInfo--" xrefstyle="hyperlink"/> - This method returns information about the
        thread that created the log entry.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.log.LogEntry.getLocation--" xrefstyle="hyperlink"/> - This method returns a
        <code>StackTraceElement</code> about the caller that created the log
        entry.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="service.log-mapping.events">
    <title>Mapping of Events</title>

    <para>Implementations of a Log Service must log Framework-generated events
    and map the information to <xref linkend="org.osgi.service.log.LogEntry" xrefstyle="hyperlink"/> objects in a consistent way. Framework events must
    be treated exactly the same as other logged events and distributed to all
    <xref linkend="org.osgi.service.log.LogListener" xrefstyle="hyperlink"/>
    objects that are associated with the Log Reader Service. Additionally, if
    the Event Admin service is present, implementations of a Log Service must
    map <xref linkend="org.osgi.service.log.LogEntry" xrefstyle="hyperlink"/>
    objects to events in Event Admin. The following sections define these
    mappings.</para>

    <section>
      <title>Bundle Events Mapping</title>

      <para>A Bundle Event is mapped to a <xref linkend="org.osgi.service.log.LogEntry" xrefstyle="hyperlink"/> object
      according to the following table.</para>

      <table xml:id="service.log-table.bundle.event.log.entries">
        <title>Mapping of Bundle Events to Log Entries</title>

        <tgroup cols="2">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="3*"/>

          <thead>
            <row>
              <entry>Log Entry method</entry>

              <entry>Information about Bundle Event</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><xref linkend="org.osgi.service.log.LogEntry.getLoggerName--" xrefstyle="hyperlink"/></entry>

              <entry><para>The logger name
              <code>"Events.Bundle.&lt;bsn&gt;"</code> where
              <code>&lt;bsn&gt;</code> is the Bundle Symbolic Name of the
              bundle identified by <xref linkend="org.osgi.service.log.LogEntry.getBundle--" xrefstyle="hyperlink"/>. If <xref linkend="org.osgi.service.log.LogEntry.getBundle--" xrefstyle="hyperlink"/> return <code>null</code>, then the
              logger name is <code>"Events.Bundle"</code>.</para></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.log.LogEntry.getLogLevel--" xrefstyle="hyperlink"/></entry>

              <entry><para><xref linkend="org.osgi.service.log.LogLevel.INFO" xrefstyle="hyperlink"/></para></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.log.LogEntry.getBundle--" xrefstyle="hyperlink"/></entry>

              <entry><para>Identifies the bundle to which the event happened.
              In other words, it identifies the bundle that was installed,
              started, stopped, updated, or uninstalled. This identification
              is obtained by calling <code>getBundle()</code> on the
              <code>BundleEvent</code> object.</para></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.log.LogEntry.getException--" xrefstyle="hyperlink"/></entry>

              <entry><para><code>null</code></para></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.log.LogEntry.getServiceReference--" xrefstyle="hyperlink"/></entry>

              <entry><para><code>null</code></para></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.log.LogEntry.getMessage--" xrefstyle="hyperlink"/></entry>

              <entry><para>The message depends on the event
              type:</para><itemizedlist>
                  <listitem>
                    <para><code>INSTALLED</code> - "BundleEvent
                    INSTALLED"</para>
                  </listitem>

                  <listitem>
                    <para><code>STARTED</code> - "BundleEvent STARTED"</para>
                  </listitem>

                  <listitem>
                    <para><code>STOPPED</code> - "BundleEvent STOPPED"</para>
                  </listitem>

                  <listitem>
                    <para><code>UPDATED</code> - "BundleEvent UPDATED"</para>
                  </listitem>

                  <listitem>
                    <para><code>UNINSTALLED</code> - "BundleEvent
                    UNINSTALLED"</para>
                  </listitem>

                  <listitem>
                    <para><code>RESOLVED</code> - "BundleEvent
                    RESOLVED"</para>
                  </listitem>

                  <listitem>
                    <para><code>UNRESOLVED</code> - "BundleEvent
                    UNRESOLVED"</para>
                  </listitem>

                  <listitem>
                    <para><code>STARTING</code> - "BundleEvent
                    STARTING"</para>
                  </listitem>

                  <listitem>
                    <para><code>STOPPING</code> - "BundleEvent
                    STOPPING"</para>
                  </listitem>

                  <listitem>
                    <para><code>LAZY_ACTIVATION</code> - "BundleEvent
                    LAZY_ACTIVATION"</para>
                  </listitem>
                </itemizedlist></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>Service Events Mapping</title>

      <para>A Service Event is mapped to a <code>LogEntry</code> object
      according to the following table.</para>

      <table>
        <title>Mapping of Service Events to Log Entries</title>

        <tgroup cols="2">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="3*"/>

          <thead>
            <row>
              <entry>Log Entry method</entry>

              <entry>Information about Service Event</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><xref linkend="org.osgi.service.log.LogEntry.getLoggerName--" xrefstyle="hyperlink"/></entry>

              <entry><para>The logger name
              <code>"Events.Service.&lt;bsn&gt;"</code> where
              <code>&lt;bsn&gt;</code> is the Bundle Symbolic Name of the
              bundle identified by <xref linkend="org.osgi.service.log.LogEntry.getBundle--" xrefstyle="hyperlink"/>. If <xref linkend="org.osgi.service.log.LogEntry.getBundle--" xrefstyle="hyperlink"/> return <code>null</code>, then the
              logger name is <code>"Events.Service"</code>.</para></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.log.LogEntry.getLogLevel--" xrefstyle="hyperlink"/></entry>

              <entry><para><xref linkend="org.osgi.service.log.LogLevel.INFO" xrefstyle="hyperlink"/>, except for
              <code>ServiceEvent.MODIFIED</code> events.
              <code>ServiceEvent.MODIFIED</code> events can happen frequently
              and contains relatively little information. They must be logged
              with a level of <xref linkend="org.osgi.service.log.LogLevel.DEBUG" xrefstyle="hyperlink"/>.</para></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.log.LogEntry.getBundle--" xrefstyle="hyperlink"/></entry>

              <entry><para>Identifies the bundle that registered the service
              associated with this event. It is obtained by calling
              <code>getServiceReference().getBundle()</code> on the
              <code>ServiceEvent</code> object.</para></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.log.LogEntry.getException--" xrefstyle="hyperlink"/></entry>

              <entry><para><code>null</code></para></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.log.LogEntry.getServiceReference--" xrefstyle="hyperlink"/></entry>

              <entry><para>Identifies a reference to the service associated
              with the event. It is obtained by calling
              <code>getServiceReference()</code> on the
              <code>ServiceEvent</code> object.</para></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.log.LogEntry.getMessage--" xrefstyle="hyperlink"/></entry>

              <entry><para>This message depends on the actual event type. The
              messages are mapped as follows:</para><itemizedlist>
                  <listitem>
                    <para><code>REGISTERED</code> - "ServiceEvent
                    REGISTERED"</para>
                  </listitem>

                  <listitem>
                    <para><code>MODIFIED</code> - "ServiceEvent
                    MODIFIED"</para>
                  </listitem>

                  <listitem>
                    <para><code>UNREGISTERING</code> - "ServiceEvent
                    UNREGISTERING"</para>
                  </listitem>
                </itemizedlist></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>Framework Events Mapping</title>

      <para>A Framework Event is mapped to a LogEntry object according to the
      following table.</para>

      <table>
        <title>Mapping of Framework Event to Log Entries</title>

        <tgroup cols="2">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="3*"/>

          <thead>
            <row>
              <entry>Log Entry method</entry>

              <entry>Information about Framework Event</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><xref linkend="org.osgi.service.log.LogEntry.getLoggerName--" xrefstyle="hyperlink"/></entry>

              <entry><para>The logger name
              <code>"Events.Framework.&lt;bsn&gt;"</code> where
              <code>&lt;bsn&gt;</code> is the Bundle Symbolic Name of the
              bundle identified by <xref linkend="org.osgi.service.log.LogEntry.getBundle--" xrefstyle="hyperlink"/>. If <xref linkend="org.osgi.service.log.LogEntry.getBundle--" xrefstyle="hyperlink"/> return <code>null</code>, then the
              logger name is <code>"Events.Framework"</code>.</para></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.log.LogEntry.getLogLevel--" xrefstyle="hyperlink"/></entry>

              <entry><para><xref linkend="org.osgi.service.log.LogLevel.INFO" xrefstyle="hyperlink"/>, except for
              <code>FrameworkEvent.ERROR</code> events and
              <code>FrameworkEvent.WARNING</code> events. A
              <code>FrameworkEvent.ERROR</code> event represents an error and
              is logged with a level of <xref linkend="org.osgi.service.log.LogLevel.ERROR" xrefstyle="hyperlink"/> and a
              <code>FrameworkEvent.WARNING</code> event represents a warning
              and is logged with a level of <xref linkend="org.osgi.service.log.LogLevel.WARN" xrefstyle="hyperlink"/>.</para></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.log.LogEntry.getBundle--" xrefstyle="hyperlink"/></entry>

              <entry><para>Identifies the bundle associated with the event.
              This may be the system bundle. It is obtained by calling
              <code>getBundle()</code> on the <code>FrameworkEvent</code>
              object.</para></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.log.LogEntry.getException--" xrefstyle="hyperlink"/></entry>

              <entry><para>Identifies the exception associated with the error.
              This will be null for event types other than
              <code>FrameworkEvent.ERROR</code>. It is obtained by calling
              <code>getThrowable()</code> on the <code>FrameworkEvent</code>
              object.</para></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.log.LogEntry.getServiceReference--" xrefstyle="hyperlink"/></entry>

              <entry><para><code>null</code></para></entry>
            </row>

            <row>
              <entry><xref linkend="org.osgi.service.log.LogEntry.getMessage--" xrefstyle="hyperlink"/></entry>

              <entry><para>This message depends on the actual event type. The
              messages are mapped as follows:</para><itemizedlist>
                  <listitem>
                    <para><code>STARTED</code> - "FrameworkEvent
                    STARTED"</para>
                  </listitem>

                  <listitem>
                    <para><code>ERROR</code> - "FrameworkEvent ERROR"</para>
                  </listitem>

                  <listitem>
                    <para><code>PACKAGES_REFRESHED</code> - "FrameworkEvent
                    PACKAGES REFRESHED"</para>
                  </listitem>

                  <listitem>
                    <para><code>STARTLEVEL_CHANGED</code> - "FrameworkEvent
                    STARTLEVEL CHANGED"</para>
                  </listitem>

                  <listitem>
                    <para><code>WARNING</code> - "FrameworkEvent
                    WARNING"</para>
                  </listitem>

                  <listitem>
                    <para><code>INFO</code> - "FrameworkEvent INFO"</para>
                  </listitem>
                </itemizedlist></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section xml:id="i1479168">
      <title>Log Events</title>

      <para>Log entries must be mapped into events by the Log Service
      implementation and delivered asynchronously to the Event Admin service
      (if present). The following event topics are used based upon the log
      level of the log entry:</para>

      <table>
        <title>Event Topics</title>

        <tgroup cols="2">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="1*"/>

          <thead>
            <row>
              <entry>Event Topic</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><para><code>org/osgi/service/log/LogEntry/LOG_AUDIT</code></para></entry>

              <entry><para>When the log level is <xref linkend="org.osgi.service.log.LogLevel.AUDIT" xrefstyle="hyperlink"/>.</para></entry>
            </row>

            <row>
              <entry><para><code>org/osgi/service/log/LogEntry/LOG_ERROR</code></para></entry>

              <entry><para>When the log level is <xref linkend="org.osgi.service.log.LogLevel.ERROR" xrefstyle="hyperlink"/>.</para></entry>
            </row>

            <row>
              <entry><para><code>org/osgi/service/log/LogEntry/LOG_WARNING</code></para></entry>

              <entry><para>When the log level is <xref linkend="org.osgi.service.log.LogLevel.WARN" xrefstyle="hyperlink"/>.</para></entry>
            </row>

            <row>
              <entry><para><code>org/osgi/service/log/LogEntry/LOG_INFO</code></para></entry>

              <entry><para>When the log level is <xref linkend="org.osgi.service.log.LogLevel.INFO" xrefstyle="hyperlink"/>.</para></entry>
            </row>

            <row>
              <entry><para><code>org/osgi/service/log/LogEntry/LOG_DEBUG</code></para></entry>

              <entry><para>When the log level is <xref linkend="org.osgi.service.log.LogLevel.DEBUG" xrefstyle="hyperlink"/>.</para></entry>
            </row>

            <row>
              <entry><para><code>org/osgi/service/log/LogEntry/LOG_OTHER</code></para></entry>

              <entry><para>When the log level is <xref linkend="org.osgi.service.log.LogLevel.TRACE" xrefstyle="hyperlink"/>.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>The properties of a log event are:</para>

      <itemizedlist>
        <listitem>
          <para><code>bundle.id</code> - (Long) The source bundle's id.</para>
        </listitem>

        <listitem>
          <para><code>bundle.symbolicName</code> - (<code>String</code>) The
          source bundle's symbolic name. Only set if not
          <code>null</code>.</para>
        </listitem>

        <listitem>
          <para><code>bundle</code> - (<code>Bundle</code>) The source
          bundle.</para>
        </listitem>

        <listitem>
          <para><code>log.level</code> - (<code>Integer</code>) The integer
          log level.</para>
        </listitem>

        <listitem>
          <para><code>log.loggername</code> - (<code>String</code>) The logger
          name.</para>
        </listitem>

        <listitem>
          <para><code>log.threadinfo</code> - (<code>String</code>) The thread
          information for the thread creating the log entry.</para>
        </listitem>

        <listitem>
          <para><code>log.loglevel</code> - (<code>LogLevel</code>) The log
          level.</para>
        </listitem>

        <listitem>
          <para><code>message</code> - (<code>String</code>) The log
          message.</para>
        </listitem>

        <listitem>
          <para><code>timestamp</code> - (<code>Long</code>) The log entry's
          timestamp.</para>
        </listitem>

        <listitem>
          <para>log.entry - (<code>LogEntry</code>) The LogEntry
          object.</para>
        </listitem>
      </itemizedlist>

      <para>If the log entry has an associated Exception:</para>

      <itemizedlist>
        <listitem>
          <para><code>exception.class</code> - (<code>String</code>) The
          fully-qualified class name of the attached exception. Only set if
          the <code>getException</code> method returns a non-<code>null</code>
          value.</para>
        </listitem>

        <listitem>
          <para><code>exception.message</code> - (<code>String</code>) The
          message of the attached Exception. Only set if the Exception message
          is not <code>null</code>.</para>
        </listitem>

        <listitem>
          <para><code>exception</code> - (<code>Throwable</code>) The
          Exception returned by the <code>getException</code> method.</para>
        </listitem>
      </itemizedlist>

      <para>If the <code>getServiceReference</code> method returns a non-
      <code>null</code> value:</para>

      <itemizedlist>
        <listitem>
          <para><code>service</code> - (<code>ServiceReference</code>) The
          result of the <code>getServiceReference</code> method.</para>
        </listitem>

        <listitem>
          <para><code>service.id</code> - (<code>Long</code>) The id of the
          service.</para>
        </listitem>

        <listitem>
          <para><code>service.pid</code> - (<code>String</code>) The service's
          persistent identity. Only set if the <code>service.pid</code>
          service property is not <code>null</code>.</para>
        </listitem>

        <listitem>
          <para><code>service.objectClass</code> - (<code>String[]</code>) The
          object class of the service object.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section xml:id="service.log-log.service">
    <title>Log Service</title>

    <para>The members of the <xref linkend="org.osgi.service.log.LogService" xrefstyle="hyperlink"/> interface are deprecated. Its <code>log</code>
    methods can still be used by bundles. These <code>log</code> methods are
    now specified to log to the Logger with the logger name
    <code>"LogService.&lt;bsn&gt;"</code> where <code>&lt;bsn&gt;</code> is
    the Bundle Symbolic Name of the bundle which obtained the <xref linkend="org.osgi.service.log.LogService" xrefstyle="hyperlink"/> object.
    This allows legacy logging to be configured as specified above.
    Furthermore, the integer log level values used with the <code>log</code>
    methods are mapped to the new <xref linkend="org.osgi.service.log.LogLevel" xrefstyle="hyperlink"/>s as
    follows:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.service.log.LogService.LOG_ERROR" xrefstyle="hyperlink"/> is mapped to <xref linkend="org.osgi.service.log.LogLevel.ERROR" xrefstyle="hyperlink"/>.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.log.LogService.LOG_WARNING" xrefstyle="hyperlink"/> is mapped to <xref linkend="org.osgi.service.log.LogLevel.WARN" xrefstyle="hyperlink"/>.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.log.LogService.LOG_INFO" xrefstyle="hyperlink"/> is mapped to <xref linkend="org.osgi.service.log.LogLevel.INFO" xrefstyle="hyperlink"/>.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.service.log.LogService.LOG_DEBUG" xrefstyle="hyperlink"/> is mapped to <xref linkend="org.osgi.service.log.LogLevel.DEBUG" xrefstyle="hyperlink"/>.</para>
      </listitem>

      <listitem>
        <para>Any other value is mapped to <xref linkend="org.osgi.service.log.LogLevel.TRACE" xrefstyle="hyperlink"/>.</para>
      </listitem>
    </itemizedlist>

    <para>The specified integer log level value is stored in the generated
    <xref linkend="org.osgi.service.log.LogEntry" xrefstyle="hyperlink"/> to
    be returned by <xref linkend="org.osgi.service.log.LogEntry.getLevel--" xrefstyle="hyperlink"/>.</para>

    <para>The implementation of this specification must use a single service
    registration using both the <xref linkend="org.osgi.service.log.LogService" xrefstyle="hyperlink"/> and
    <xref linkend="org.osgi.service.log.LoggerFactory" xrefstyle="hyperlink"/>
    service names since both service names represent the same log and since
    the <xref linkend="org.osgi.service.log.LogService" xrefstyle="hyperlink"/> type extends the <xref linkend="org.osgi.service.log.LoggerFactory" xrefstyle="hyperlink"/>
    type.</para>
  </section>

  <section>
    <title>Capabilities</title>

    <para>The bundle providing the <xref linkend="org.osgi.service.log.LoggerFactory" xrefstyle="hyperlink"/> and
    <xref linkend="org.osgi.service.log.LogService" xrefstyle="hyperlink"/>
    service must provide a capability in the <code>osgi.service</code>
    namespace representing this service. This capability must also declare a
    uses constraint for the <xref linkend="org.osgi.service.log" xrefstyle="hyperlink"/> package:</para>

    <para><programlisting>Provide-Capability: osgi.service;
 objectClass:List&lt;String&gt;=
 "org.osgi.service.log.LoggerFactory,org.osgi.service.log.LogService";
 uses:="org.osgi.service.log" </programlisting></para>

    <para>The bundle providing the <xref linkend="org.osgi.service.log.LogReaderService" xrefstyle="hyperlink"/>
    service must provide a capability in the <code>osgi.service</code>
    namespace representing this service. This capability must also declare a
    uses constraint for the <xref linkend="org.osgi.service.log" xrefstyle="hyperlink"/> package:</para>

    <programlisting>Provide-Capability: osgi.service;
 objectClass:List&lt;String&gt;="org.osgi.service.log.LogReaderService";
 uses:="org.osgi.service.log" </programlisting>

    <para>The bundle providing the <xref linkend="org.osgi.service.log.admin.LoggerAdmin" xrefstyle="hyperlink"/>
    service must provide a capability in the <code>osgi.service</code>
    namespace representing this service. This capability must also declare a
    uses constraint for the <xref linkend="org.osgi.service.log.admin" xrefstyle="hyperlink"/> package:</para>

    <programlisting>Provide-Capability: osgi.service;
 objectClass:List&lt;String&gt;="org.osgi.service.log.admin.LoggerAdmin";
 uses:="org.osgi.service.log.admin" </programlisting>

    <para>These capabilities must follow the rules defined for the
    <code>osgi.service</code> Namespace.</para>
  </section>

  <section>
    <title>Security</title>

    <para>The Log Service specification should only be implemented by trusted
    bundles. These bundles require
    <code>ServicePermission[LoggerFactory|LogReaderService|LoggerAdmin|LogService,
    REGISTER]</code> and
    <code>ServicePermission[ConfigurationAdmin|EventAdmin, GET]</code>.</para>

    <para>Virtually all bundles should get
    <code>ServicePermission[LoggerFactory|LogService, GET]</code> so they can
    log.</para>

    <para>Only trusted bundles who must be able to access log entries should
    be assigned <code>ServicePermission[LogReaderService, GET]</code>.</para>

    <para>Only trusted bundles who must be able to change log configuration
    should be assigned <code>ServicePermission[LogAdmin, GET]</code>.</para>
  </section>

  <section xreflabel="org.osgi.service.log" version="5" role="package" xml:id="org.osgi.service.log" xml:base="../../generated/javadoc/docbook/org.osgi.service.log.xml">
   <title>org.osgi.service.log</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.log-version">Version 1.5</releaseinfo>
      <edition xml:id="org.osgi.service.log-version.number">1.5</edition>
   </info>
   <para>
Log Service Package Version 1.5.
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.log; version="[1.5,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.log; version="[1.5,1.6)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.log.FormatterLogger">
                  <code>FormatterLogger</code>
               </link> -
Provides methods for bundles to write messages to the log using printf-style
 format strings.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.log.LogEntry">
                  <code>LogEntry</code>
               </link> -
Provides methods to access the information contained in an individual Log
 Service log entry.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.log.Logger">
                  <code>Logger</code>
               </link> -
Provides methods for bundles to write messages to the log using SLF4J-style
 format strings.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.log.LoggerConsumer">
                  <code>LoggerConsumer</code>
               </link> -
An operation that accepts a <link linkend="org.osgi.service.log.Logger">Logger</link> argument and produces no result.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.log.LoggerFactory">
                  <code>LoggerFactory</code>
               </link> -
Logger Factory service for logging information.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.log.LogLevel">
                  <code>LogLevel</code>
               </link> -
Log Levels.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.log.LogListener">
                  <code>LogListener</code>
               </link> -
Subscribes to <code>LogEntry</code> objects from the <code>LogReaderService</code>.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.log.LogReaderService">
                  <code>LogReaderService</code>
               </link> -
LogReaderService for obtaining logging information.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.log.LogService">
                  <code>LogService</code>
               </link> -
LogService for logging information.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section xreflabel="FormatterLogger" role="class" xml:id="org.osgi.service.log.FormatterLogger">
      <title>public interface FormatterLogger<?line-break?> extends Logger</title>
      <para>
Provides methods for bundles to write messages to the log using printf-style
 format strings.
 </para>
      <para>
 Messages can be formatted by the Logger once the Logger determines the log
 level is enabled. Uses printf-style format strings as described in
 java.util.Formatter.
 </para>
      <para>
 You can also add a <code>Throwable</code> and/or <code>ServiceReference</code> to the
 generated <link linkend="org.osgi.service.log.LogEntry">LogEntry</link> by passing them to the logging methods as
 additional arguments. If the last argument is a <code>Throwable</code> or
 <code>ServiceReference</code>, it is added to the generated <link linkend="org.osgi.service.log.LogEntry">LogEntry</link> and
 then if the next to last argument is a <code>ServiceReference</code> or
 <code>Throwable</code> and not the same type as the last argument, it is also
 added to the generated <link linkend="org.osgi.service.log.LogEntry">LogEntry</link>. These arguments will not be used as
 message arguments. For example:

 </para>
      <programlisting> logger.info("Found service %s.", serviceReference, serviceReference);
 logger.warn("Something named %s happened.", name, serviceReference,
 		throwable);
 logger.error("Failed.", exception);</programlisting>
      <para>
 If an exception occurs formatting the message, the logged message will
 indicate the formatting failure including the format string and the
 arguments.</para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.4</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
   </section>
   <section xreflabel="LogEntry" role="class" xml:id="org.osgi.service.log.LogEntry">
      <title>public interface LogEntry</title>
      <para>
Provides methods to access the information contained in an individual Log
 Service log entry.

 </para>
      <para>
 A <code>LogEntry</code> object may be acquired from the
 <code>LogReaderService.getLog</code> method or by registering a
 <code>LogListener</code> object.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section xreflabel="getBundle()" role="method" xml:id="org.osgi.service.log.LogEntry.getBundle--">
         <title>public Bundle getBundle()</title>
         <para role="description">
Returns the bundle that created this <code>LogEntry</code> object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The bundle that created this <code>LogEntry</code> object;
         <code>null</code> if no bundle is associated with this
         <code>LogEntry</code> object.</para>
         </formalpara>
      </section>
      <section xreflabel="getException()" role="method" xml:id="org.osgi.service.log.LogEntry.getException--">
         <title>public Throwable getException()</title>
         <para role="description">
Returns the exception object associated with this <code>LogEntry</code>
 object.

 </para>
         <para>
 In some implementations, the returned exception may not be the original
 exception. To avoid references to a bundle defined exception class, thus
 preventing an uninstalled bundle from being garbage collected, the Log
 Service may return an exception object of an implementation defined
 Throwable subclass. The returned object will attempt to provide as much
 information as possible from the original exception object such as the
 message and stack trace.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>Throwable</code> object of the exception associated with this
         <code>LogEntry</code>;<code>null</code> if no exception is associated with
         this <code>LogEntry</code> object.</para>
         </formalpara>
      </section>
      <section xreflabel="getLevel()" role="method" xml:id="org.osgi.service.log.LogEntry.getLevel--">
         <title>public int getLevel()</title>
         <para role="description">
Returns the integer level of this <code>LogEntry</code> object.
 </para>
         <para>
 If one of the <code>log</code> methods of <link linkend="org.osgi.service.log.LogService">LogService</link> was used, this is
 the specified integer level. Otherwise, this is the
 ordinal value of the <link linkend="org.osgi.service.log.LogEntry.getLogLevel--">log
 level</link>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Integer level of this <code>LogEntry</code> object.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Deprecated</title>
            <para>Since 1.4. Replaced by <link linkend="org.osgi.service.log.LogEntry.getLogLevel--">getLogLevel()</link>.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="getLocation()" role="method" xml:id="org.osgi.service.log.LogEntry.getLocation--">
         <title>public StackTraceElement getLocation()</title>
         <para role="description">
Returns the location information of the creation of this <code>LogEntry</code>
 object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The location information of the creation of this <code>LogEntry</code>
         object.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.4</para>
         </formalpara>
      </section>
      <section xreflabel="getLoggerName()" role="method" xml:id="org.osgi.service.log.LogEntry.getLoggerName--">
         <title>public String getLoggerName()</title>
         <para role="description">
Returns the name of the <link linkend="org.osgi.service.log.Logger">Logger</link> object used to create this
 <code>LogEntry</code> object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The name of the <link linkend="org.osgi.service.log.Logger">Logger</link> object used to create this
         <code>LogEntry</code> object.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.4</para>
         </formalpara>
      </section>
      <section xreflabel="getLogLevel()" role="method" xml:id="org.osgi.service.log.LogEntry.getLogLevel--">
         <title>public LogLevel getLogLevel()</title>
         <para role="description">
Returns the level of this <code>LogEntry</code> object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The level of this <code>LogEntry</code> object.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.4</para>
         </formalpara>
      </section>
      <section xreflabel="getMessage()" role="method" xml:id="org.osgi.service.log.LogEntry.getMessage--">
         <title>public String getMessage()</title>
         <para role="description">
Returns the formatted message associated with this <code>LogEntry</code>
 object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>String</code> containing the formatted message associated with
         this <code>LogEntry</code> object.</para>
         </formalpara>
      </section>
      <section xreflabel="getSequence()" role="method" xml:id="org.osgi.service.log.LogEntry.getSequence--">
         <title>public long getSequence()</title>
         <para role="description">
Returns the sequence number for this <code>LogEntry</code> object.
 </para>
         <para>
 A unique, non-negative value that is larger than all previously assigned
 values since the log implementation was started. These values are
 transient and are reused upon restart of the log implementation.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The sequence number for this <code>LogEntry</code> object.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.4</para>
         </formalpara>
      </section>
      <section xreflabel="getServiceReference()" role="method" xml:id="org.osgi.service.log.LogEntry.getServiceReference--">
         <title>public ServiceReference&lt;?&gt; getServiceReference()</title>
         <para role="description">
Returns the <code>ServiceReference</code> object for the service associated
 with this <code>LogEntry</code> object.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>ServiceReference</code> object for the service associated with
         this <code>LogEntry</code> object; <code>null</code> if no
         <code>ServiceReference</code> object was provided.</para>
         </formalpara>
      </section>
      <section xreflabel="getThreadInfo()" role="method" xml:id="org.osgi.service.log.LogEntry.getThreadInfo--">
         <title>public String getThreadInfo()</title>
         <para role="description">
Returns a string representing the thread which created this
 <code>LogEntry</code> object.
 </para>
         <para>
 This string must contain the name of the thread and may contain other
 information about the thread.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A string representing the thread which created this
         <code>LogEntry</code> object.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.4</para>
         </formalpara>
      </section>
      <section xreflabel="getTime()" role="method" xml:id="org.osgi.service.log.LogEntry.getTime--">
         <title>public long getTime()</title>
         <para role="description">
Returns the value of <code>currentTimeMillis()</code> at the time this
 <code>LogEntry</code> object was created.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The system time in milliseconds when this <code>LogEntry</code> object
         was created.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <code>System.currentTimeMillis()</code>
            </para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="Logger" role="class" xml:id="org.osgi.service.log.Logger">
      <title>public interface Logger</title>
      <para>
Provides methods for bundles to write messages to the log using SLF4J-style
 format strings.
 </para>
      <para>
 Messages can be formatted by the Logger once the Logger determines the log
 level is enabled. Use a left curly bracket (<code>'{'</code> \u007B)
 followed by a right curly bracket (<code>'}'</code> \u007D) as a place
 holder for an argument: <code>"{}"</code>. If you need to use the literal
 <code>"{}"</code> in the formatted message, precede the place holder with a
 reverse solidus (<code>'\'</code> \u005C): <code>"\{}"</code>. If you need to
 place a backslash before the place holder, precede the reverse solidus with a
 reverse solidus: <code>"\\{}"</code>.
 </para>
      <para>
 You can also add a <code>Throwable</code> and/or <code>ServiceReference</code> to the
 generated <link linkend="org.osgi.service.log.LogEntry">LogEntry</link> by passing them to the logging methods as
 additional arguments. If the last argument is a <code>Throwable</code> or a
 <code>ServiceReference</code>, it is added to the generated <link linkend="org.osgi.service.log.LogEntry">LogEntry</link> and
 then, if the next to last argument is a <code>ServiceReference</code> or
 <code>Throwable</code> and not the same type as the last argument, it is also
 added to the generated <link linkend="org.osgi.service.log.LogEntry">LogEntry</link>. These arguments will not be used as
 message arguments. For example:

 </para>
      <programlisting> logger.info("Found service {}.", serviceReference, serviceReference);
 logger.warn("Something named {} happened.", name, serviceReference,
 		throwable);
 logger.error("Failed.", exception);</programlisting>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.4</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section xreflabel="ROOT_LOGGER_NAME" role="field" xml:id="org.osgi.service.log.Logger.ROOT_LOGGER_NAME">
         <title>public static final String ROOT_LOGGER_NAME = "ROOT"</title>
         <para>
Root Logger Name.
   </para>
      </section>
      <section xreflabel="audit(String)" role="method" xml:id="org.osgi.service.log.Logger.audit-String-">
         <title>public void audit(String message)</title>
         <formalpara role="parameter">
            <title>message</title>
            <para>The message to log.</para>
         </formalpara>
         <para role="description">
Log a message at the <link linkend="org.osgi.service.log.LogLevel.AUDIT">LogLevel.AUDIT</link> level.
   </para>
      </section>
      <section xreflabel="audit(String,Object)" role="method" xml:id="org.osgi.service.log.Logger.audit-String-Object-">
         <title>public void audit(String format, Object arg)</title>
         <formalpara role="parameter">
            <title>format</title>
            <para>The format of the message to log.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>arg</title>
            <para>The argument to format into the message.</para>
         </formalpara>
         <para role="description">
Log a formatted message at the <link linkend="org.osgi.service.log.LogLevel.AUDIT">LogLevel.AUDIT</link> level.
   </para>
      </section>
      <section xreflabel="audit(String,Object,Object)" role="method" xml:id="org.osgi.service.log.Logger.audit-String-Object-Object-">
         <title>public void audit(String format, Object arg1, Object arg2)</title>
         <formalpara role="parameter">
            <title>format</title>
            <para>The format of the message to log.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>arg1</title>
            <para>The first argument to format into the message.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>arg2</title>
            <para>The second argument to format into the message.</para>
         </formalpara>
         <para role="description">
Log a formatted message at the <link linkend="org.osgi.service.log.LogLevel.AUDIT">LogLevel.AUDIT</link> level.
   </para>
      </section>
      <section xreflabel="audit(String,Object...)" role="method" xml:id="org.osgi.service.log.Logger.audit-String-Object...-">
         <title>public void audit(String format, Object... arguments)</title>
         <formalpara role="parameter">
            <title>format</title>
            <para>The format of the message to log.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>arguments</title>
            <para>The arguments to format into the message.</para>
         </formalpara>
         <para role="description">
Log a formatted message at the <link linkend="org.osgi.service.log.LogLevel.AUDIT">LogLevel.AUDIT</link> level.
   </para>
      </section>
      <section xreflabel="debug(String)" role="method" xml:id="org.osgi.service.log.Logger.debug-String-">
         <title>public void debug(String message)</title>
         <formalpara role="parameter">
            <title>message</title>
            <para>The message to log.</para>
         </formalpara>
         <para role="description">
Log a message at the <link linkend="org.osgi.service.log.LogLevel.DEBUG">LogLevel.DEBUG</link> level.
   </para>
      </section>
      <section xreflabel="debug(String,Object)" role="method" xml:id="org.osgi.service.log.Logger.debug-String-Object-">
         <title>public void debug(String format, Object arg)</title>
         <formalpara role="parameter">
            <title>format</title>
            <para>The format of the message to log.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>arg</title>
            <para>The argument to format into the message.</para>
         </formalpara>
         <para role="description">
Log a formatted message at the <link linkend="org.osgi.service.log.LogLevel.DEBUG">LogLevel.DEBUG</link> level.
   </para>
      </section>
      <section xreflabel="debug(String,Object,Object)" role="method" xml:id="org.osgi.service.log.Logger.debug-String-Object-Object-">
         <title>public void debug(String format, Object arg1, Object arg2)</title>
         <formalpara role="parameter">
            <title>format</title>
            <para>The format of the message to log.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>arg1</title>
            <para>The first argument to format into the message.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>arg2</title>
            <para>The second argument to format into the message.</para>
         </formalpara>
         <para role="description">
Log a formatted message at the <link linkend="org.osgi.service.log.LogLevel.DEBUG">LogLevel.DEBUG</link> level.
   </para>
      </section>
      <section xreflabel="debug(String,Object...)" role="method" xml:id="org.osgi.service.log.Logger.debug-String-Object...-">
         <title>public void debug(String format, Object... arguments)</title>
         <formalpara role="parameter">
            <title>format</title>
            <para>The format of the message to log.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>arguments</title>
            <para>The arguments to format into the message.</para>
         </formalpara>
         <para role="description">
Log a formatted message at the <link linkend="org.osgi.service.log.LogLevel.DEBUG">LogLevel.DEBUG</link> level.
   </para>
      </section>
      <section xreflabel="debug(LoggerConsumer)" role="method" xml:id="org.osgi.service.log.Logger.debug-LoggerConsumer-">
         <title>public void debug(LoggerConsumer&lt;E&gt; consumer) throws E</title>
         <formalpara role="parameter">
            <title>Type Parameters</title>
            <para>
               <code>&lt;E extends Exception&gt;</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>consumer</title>
            <para>The operation to perform on this Logger.</para>
         </formalpara>
         <para role="description">
Perform the specified operation if logging enabled for the
 <link linkend="org.osgi.service.log.LogLevel.DEBUG">LogLevel.DEBUG</link> level.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>E</code>– An exception thrown by the operation.</para>
         </formalpara>
      </section>
      <section xreflabel="error(String)" role="method" xml:id="org.osgi.service.log.Logger.error-String-">
         <title>public void error(String message)</title>
         <formalpara role="parameter">
            <title>message</title>
            <para>The message to log.</para>
         </formalpara>
         <para role="description">
Log a message at the <link linkend="org.osgi.service.log.LogLevel.ERROR">LogLevel.ERROR</link> level.
   </para>
      </section>
      <section xreflabel="error(String,Object)" role="method" xml:id="org.osgi.service.log.Logger.error-String-Object-">
         <title>public void error(String format, Object arg)</title>
         <formalpara role="parameter">
            <title>format</title>
            <para>The format of the message to log.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>arg</title>
            <para>The argument to format into the message.</para>
         </formalpara>
         <para role="description">
Log a formatted message at the <link linkend="org.osgi.service.log.LogLevel.ERROR">LogLevel.ERROR</link> level.
   </para>
      </section>
      <section xreflabel="error(String,Object,Object)" role="method" xml:id="org.osgi.service.log.Logger.error-String-Object-Object-">
         <title>public void error(String format, Object arg1, Object arg2)</title>
         <formalpara role="parameter">
            <title>format</title>
            <para>The format of the message to log.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>arg1</title>
            <para>The first argument to format into the message.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>arg2</title>
            <para>The second argument to format into the message.</para>
         </formalpara>
         <para role="description">
Log a formatted message at the <link linkend="org.osgi.service.log.LogLevel.ERROR">LogLevel.ERROR</link> level.
   </para>
      </section>
      <section xreflabel="error(String,Object...)" role="method" xml:id="org.osgi.service.log.Logger.error-String-Object...-">
         <title>public void error(String format, Object... arguments)</title>
         <formalpara role="parameter">
            <title>format</title>
            <para>The format of the message to log.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>arguments</title>
            <para>The arguments to format into the message.</para>
         </formalpara>
         <para role="description">
Log a formatted message at the <link linkend="org.osgi.service.log.LogLevel.ERROR">LogLevel.ERROR</link> level.
   </para>
      </section>
      <section xreflabel="error(LoggerConsumer)" role="method" xml:id="org.osgi.service.log.Logger.error-LoggerConsumer-">
         <title>public void error(LoggerConsumer&lt;E&gt; consumer) throws E</title>
         <formalpara role="parameter">
            <title>Type Parameters</title>
            <para>
               <code>&lt;E extends Exception&gt;</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>consumer</title>
            <para>The operation to perform on this Logger.</para>
         </formalpara>
         <para role="description">
Perform the specified operation if logging enabled for the
 <link linkend="org.osgi.service.log.LogLevel.ERROR">LogLevel.ERROR</link> level.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>E</code>– An exception thrown by the operation.</para>
         </formalpara>
      </section>
      <section xreflabel="getName()" role="method" xml:id="org.osgi.service.log.Logger.getName--">
         <title>public String getName()</title>
         <para role="description">
Return the name of this Logger.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The name of this Logger.</para>
         </formalpara>
      </section>
      <section xreflabel="info(String)" role="method" xml:id="org.osgi.service.log.Logger.info-String-">
         <title>public void info(String message)</title>
         <formalpara role="parameter">
            <title>message</title>
            <para>The message to log.</para>
         </formalpara>
         <para role="description">
Log a message at the <link linkend="org.osgi.service.log.LogLevel.INFO">LogLevel.INFO</link> level.
   </para>
      </section>
      <section xreflabel="info(String,Object)" role="method" xml:id="org.osgi.service.log.Logger.info-String-Object-">
         <title>public void info(String format, Object arg)</title>
         <formalpara role="parameter">
            <title>format</title>
            <para>The format of the message to log.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>arg</title>
            <para>The argument to format into the message.</para>
         </formalpara>
         <para role="description">
Log a formatted message at the <link linkend="org.osgi.service.log.LogLevel.INFO">LogLevel.INFO</link> level.
   </para>
      </section>
      <section xreflabel="info(String,Object,Object)" role="method" xml:id="org.osgi.service.log.Logger.info-String-Object-Object-">
         <title>public void info(String format, Object arg1, Object arg2)</title>
         <formalpara role="parameter">
            <title>format</title>
            <para>The format of the message to log.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>arg1</title>
            <para>The first argument to format into the message.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>arg2</title>
            <para>The second argument to format into the message.</para>
         </formalpara>
         <para role="description">
Log a formatted message at the <link linkend="org.osgi.service.log.LogLevel.INFO">LogLevel.INFO</link> level.
   </para>
      </section>
      <section xreflabel="info(String,Object...)" role="method" xml:id="org.osgi.service.log.Logger.info-String-Object...-">
         <title>public void info(String format, Object... arguments)</title>
         <formalpara role="parameter">
            <title>format</title>
            <para>The format of the message to log.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>arguments</title>
            <para>The arguments to format into the message.</para>
         </formalpara>
         <para role="description">
Log a formatted message at the <link linkend="org.osgi.service.log.LogLevel.INFO">LogLevel.INFO</link> level.
   </para>
      </section>
      <section xreflabel="info(LoggerConsumer)" role="method" xml:id="org.osgi.service.log.Logger.info-LoggerConsumer-">
         <title>public void info(LoggerConsumer&lt;E&gt; consumer) throws E</title>
         <formalpara role="parameter">
            <title>Type Parameters</title>
            <para>
               <code>&lt;E extends Exception&gt;</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>consumer</title>
            <para>The operation to perform on this Logger.</para>
         </formalpara>
         <para role="description">
Perform the specified operation if logging enabled for the
 <link linkend="org.osgi.service.log.LogLevel.INFO">LogLevel.INFO</link> level.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>E</code>– An exception thrown by the operation.</para>
         </formalpara>
      </section>
      <section xreflabel="isDebugEnabled()" role="method" xml:id="org.osgi.service.log.Logger.isDebugEnabled--">
         <title>public boolean isDebugEnabled()</title>
         <para role="description">
Is logging enabled for the <link linkend="org.osgi.service.log.LogLevel.DEBUG">LogLevel.DEBUG</link> level?
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if logging is enabled for the <link linkend="org.osgi.service.log.LogLevel.DEBUG">LogLevel.DEBUG</link>
         level.</para>
         </formalpara>
      </section>
      <section xreflabel="isErrorEnabled()" role="method" xml:id="org.osgi.service.log.Logger.isErrorEnabled--">
         <title>public boolean isErrorEnabled()</title>
         <para role="description">
Is logging enabled for the <link linkend="org.osgi.service.log.LogLevel.ERROR">LogLevel.ERROR</link> level?
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if logging is enabled for the <link linkend="org.osgi.service.log.LogLevel.ERROR">LogLevel.ERROR</link>
         level.</para>
         </formalpara>
      </section>
      <section xreflabel="isInfoEnabled()" role="method" xml:id="org.osgi.service.log.Logger.isInfoEnabled--">
         <title>public boolean isInfoEnabled()</title>
         <para role="description">
Is logging enabled for the <link linkend="org.osgi.service.log.LogLevel.INFO">LogLevel.INFO</link> level?
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if logging is enabled for the <link linkend="org.osgi.service.log.LogLevel.INFO">LogLevel.INFO</link>
         level.</para>
         </formalpara>
      </section>
      <section xreflabel="isTraceEnabled()" role="method" xml:id="org.osgi.service.log.Logger.isTraceEnabled--">
         <title>public boolean isTraceEnabled()</title>
         <para role="description">
Is logging enabled for the <link linkend="org.osgi.service.log.LogLevel.TRACE">LogLevel.TRACE</link> level?
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if logging is enabled for the <link linkend="org.osgi.service.log.LogLevel.TRACE">LogLevel.TRACE</link>
         level.</para>
         </formalpara>
      </section>
      <section xreflabel="isWarnEnabled()" role="method" xml:id="org.osgi.service.log.Logger.isWarnEnabled--">
         <title>public boolean isWarnEnabled()</title>
         <para role="description">
Is logging enabled for the <link linkend="org.osgi.service.log.LogLevel.WARN">LogLevel.WARN</link> level?
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if logging is enabled for the <link linkend="org.osgi.service.log.LogLevel.WARN">LogLevel.WARN</link>
         level.</para>
         </formalpara>
      </section>
      <section xreflabel="trace(String)" role="method" xml:id="org.osgi.service.log.Logger.trace-String-">
         <title>public void trace(String message)</title>
         <formalpara role="parameter">
            <title>message</title>
            <para>The message to log.</para>
         </formalpara>
         <para role="description">
Log a message at the <link linkend="org.osgi.service.log.LogLevel.TRACE">LogLevel.TRACE</link> level.
   </para>
      </section>
      <section xreflabel="trace(String,Object)" role="method" xml:id="org.osgi.service.log.Logger.trace-String-Object-">
         <title>public void trace(String format, Object arg)</title>
         <formalpara role="parameter">
            <title>format</title>
            <para>The format of the message to log.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>arg</title>
            <para>The argument to format into the message.</para>
         </formalpara>
         <para role="description">
Log a formatted message at the <link linkend="org.osgi.service.log.LogLevel.TRACE">LogLevel.TRACE</link> level.
   </para>
      </section>
      <section xreflabel="trace(String,Object,Object)" role="method" xml:id="org.osgi.service.log.Logger.trace-String-Object-Object-">
         <title>public void trace(String format, Object arg1, Object arg2)</title>
         <formalpara role="parameter">
            <title>format</title>
            <para>The format of the message to log.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>arg1</title>
            <para>The first argument to format into the message.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>arg2</title>
            <para>The second argument to format into the message.</para>
         </formalpara>
         <para role="description">
Log a formatted message at the <link linkend="org.osgi.service.log.LogLevel.TRACE">LogLevel.TRACE</link> level.
   </para>
      </section>
      <section xreflabel="trace(String,Object...)" role="method" xml:id="org.osgi.service.log.Logger.trace-String-Object...-">
         <title>public void trace(String format, Object... arguments)</title>
         <formalpara role="parameter">
            <title>format</title>
            <para>The format of the message to log.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>arguments</title>
            <para>The arguments to format into the message.</para>
         </formalpara>
         <para role="description">
Log a formatted message at the <link linkend="org.osgi.service.log.LogLevel.TRACE">LogLevel.TRACE</link> level.
   </para>
      </section>
      <section xreflabel="trace(LoggerConsumer)" role="method" xml:id="org.osgi.service.log.Logger.trace-LoggerConsumer-">
         <title>public void trace(LoggerConsumer&lt;E&gt; consumer) throws E</title>
         <formalpara role="parameter">
            <title>Type Parameters</title>
            <para>
               <code>&lt;E extends Exception&gt;</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>consumer</title>
            <para>The operation to perform on this Logger.</para>
         </formalpara>
         <para role="description">
Perform the specified operation if logging enabled for the
 <link linkend="org.osgi.service.log.LogLevel.TRACE">LogLevel.TRACE</link> level.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>E</code>– An exception thrown by the operation.</para>
         </formalpara>
      </section>
      <section xreflabel="warn(String)" role="method" xml:id="org.osgi.service.log.Logger.warn-String-">
         <title>public void warn(String message)</title>
         <formalpara role="parameter">
            <title>message</title>
            <para>The message to log.</para>
         </formalpara>
         <para role="description">
Log a message at the <link linkend="org.osgi.service.log.LogLevel.WARN">LogLevel.WARN</link> level.
   </para>
      </section>
      <section xreflabel="warn(String,Object)" role="method" xml:id="org.osgi.service.log.Logger.warn-String-Object-">
         <title>public void warn(String format, Object arg)</title>
         <formalpara role="parameter">
            <title>format</title>
            <para>The format of the message to log.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>arg</title>
            <para>The argument to format into the message.</para>
         </formalpara>
         <para role="description">
Log a formatted message at the <link linkend="org.osgi.service.log.LogLevel.WARN">LogLevel.WARN</link> level.
   </para>
      </section>
      <section xreflabel="warn(String,Object,Object)" role="method" xml:id="org.osgi.service.log.Logger.warn-String-Object-Object-">
         <title>public void warn(String format, Object arg1, Object arg2)</title>
         <formalpara role="parameter">
            <title>format</title>
            <para>The format of the message to log.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>arg1</title>
            <para>The first argument to format into the message.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>arg2</title>
            <para>The second argument to format into the message.</para>
         </formalpara>
         <para role="description">
Log a formatted message at the <link linkend="org.osgi.service.log.LogLevel.WARN">LogLevel.WARN</link> level.
   </para>
      </section>
      <section xreflabel="warn(String,Object...)" role="method" xml:id="org.osgi.service.log.Logger.warn-String-Object...-">
         <title>public void warn(String format, Object... arguments)</title>
         <formalpara role="parameter">
            <title>format</title>
            <para>The format of the message to log.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>arguments</title>
            <para>The arguments to format into the message.</para>
         </formalpara>
         <para role="description">
Log a formatted message at the <link linkend="org.osgi.service.log.LogLevel.WARN">LogLevel.WARN</link> level.
   </para>
      </section>
      <section xreflabel="warn(LoggerConsumer)" role="method" xml:id="org.osgi.service.log.Logger.warn-LoggerConsumer-">
         <title>public void warn(LoggerConsumer&lt;E&gt; consumer) throws E</title>
         <formalpara role="parameter">
            <title>Type Parameters</title>
            <para>
               <code>&lt;E extends Exception&gt;</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>consumer</title>
            <para>The operation to perform on this Logger.</para>
         </formalpara>
         <para role="description">
Perform the specified operation if logging enabled for the
 <link linkend="org.osgi.service.log.LogLevel.WARN">LogLevel.WARN</link> level.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>E</code>– An exception thrown by the operation.</para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="LoggerConsumer" role="class" xml:id="org.osgi.service.log.LoggerConsumer">
      <title>public interface LoggerConsumer&lt;E extends Exception&gt;</title>
      <formalpara role="parameter">
         <title>&lt;E&gt;</title>
         <para>The type of the exception that may be thrown.</para>
      </formalpara>
      <para>
An operation that accepts a <link linkend="org.osgi.service.log.Logger">Logger</link> argument and produces no result.
 </para>
      <para>
 This is a functional interface and can be used as the assignment target for a
 lambda expression or method reference.</para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.4</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section xreflabel="accept(Logger)" role="method" xml:id="org.osgi.service.log.LoggerConsumer.accept-Logger-">
         <title>public void accept(Logger l) throws E</title>
         <formalpara role="parameter">
            <title>l</title>
            <para>The <link linkend="org.osgi.service.log.Logger">Logger</link> input to this operation.</para>
         </formalpara>
         <para role="description">
Perform this operation on the specified <link linkend="org.osgi.service.log.Logger">Logger</link>.
   </para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>E</code>– An exception thrown by the operation.</para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="LoggerFactory" role="class" xml:id="org.osgi.service.log.LoggerFactory">
      <title>public interface LoggerFactory</title>
      <para>
Logger Factory service for logging information.
 </para>
      <para>
 Provides methods for bundles to obtain named <link linkend="org.osgi.service.log.Logger">Logger</link>s that can be used
 to write messages to the log.
 </para>
      <para>
 Logger names should be in the form of a fully qualified Java class names with
 segments separated by full stop (<code>'.'</code> \u002E). For example:

 </para>
      <programlisting> com.foo.Bar</programlisting>
      <para>

 Logger names exist in a hierarchy. A logger name is said to be an ancestor of
 another logger name if the logger name followed by a full stop (<code>'.'</code>
 \u002E) is a prefix of the descendant logger name. The
 <link linkend="org.osgi.service.log.Logger.ROOT_LOGGER_NAME">root logger name</link> is the top ancestor of the
 logger name hierarchy. For example:

 </para>
      <programlisting> com.foo.Bar
 com.foo
 com
 ROOT</programlisting>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.4</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section xreflabel="getLogger(String)" role="method" xml:id="org.osgi.service.log.LoggerFactory.getLogger-String-">
         <title>public Logger getLogger(String name)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The name to use for the logger name. Must not be
            <code>null</code>.</para>
         </formalpara>
         <para role="description">
Return the <link linkend="org.osgi.service.log.Logger">Logger</link> named with the specified name.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The <link linkend="org.osgi.service.log.Logger">Logger</link> named with the specified name. If the name
         parameter is equal to <link linkend="org.osgi.service.log.Logger.ROOT_LOGGER_NAME">Logger.ROOT_LOGGER_NAME</link>, then the
         root logger is returned.</para>
         </formalpara>
      </section>
      <section xreflabel="getLogger(Class)" role="method" xml:id="org.osgi.service.log.LoggerFactory.getLogger-Class-">
         <title>public Logger getLogger(Class&lt;?&gt; clazz)</title>
         <formalpara role="parameter">
            <title>clazz</title>
            <para>The class to use for the logger name. Must not be
            <code>null</code>.</para>
         </formalpara>
         <para role="description">
Return the <link linkend="org.osgi.service.log.Logger">Logger</link> named with the specified class.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The <link linkend="org.osgi.service.log.Logger">Logger</link> named with the name of the specified class.</para>
         </formalpara>
      </section>
      <section xreflabel="getLogger(String,Class)" role="method" xml:id="org.osgi.service.log.LoggerFactory.getLogger-String-Class-">
         <title>public L extends Logger getLogger(String name, Class&lt;L&gt; loggerType)</title>
         <formalpara role="parameter">
            <title>Type Parameters</title>
            <para>
               <code>&lt;L extends Logger&gt;</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>&lt;L&gt;</title>
            <para>The Logger type.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>name</title>
            <para>The name to use for the logger name. Must not be
            <code>null</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>loggerType</title>
            <para>The type of Logger. Can be <link linkend="org.osgi.service.log.Logger">Logger</link> or
            <link linkend="org.osgi.service.log.FormatterLogger">FormatterLogger</link>.</para>
         </formalpara>
         <para role="description">
Return the <link linkend="org.osgi.service.log.Logger">Logger</link> of the specified type named with the specified
 name.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The <link linkend="org.osgi.service.log.Logger">Logger</link> or <link linkend="org.osgi.service.log.FormatterLogger">FormatterLogger</link> named with the
         specified name. If the name parameter is equal to
         <link linkend="org.osgi.service.log.Logger.ROOT_LOGGER_NAME">Logger.ROOT_LOGGER_NAME</link>, then the root logger is
         returned.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the specified type is not a supported
             Logger type.</para>
         </formalpara>
      </section>
      <section xreflabel="getLogger(Class,Class)" role="method" xml:id="org.osgi.service.log.LoggerFactory.getLogger-Class-Class-">
         <title>public L extends Logger getLogger(Class&lt;?&gt; clazz, Class&lt;L&gt; loggerType)</title>
         <formalpara role="parameter">
            <title>Type Parameters</title>
            <para>
               <code>&lt;L extends Logger&gt;</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>&lt;L&gt;</title>
            <para>A Logger type.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>clazz</title>
            <para>The class to use for the logger name. Must not be
            <code>null</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>loggerType</title>
            <para>The type of Logger. Can be <link linkend="org.osgi.service.log.Logger">Logger</link> or
            <link linkend="org.osgi.service.log.FormatterLogger">FormatterLogger</link>. Must not be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Return the <link linkend="org.osgi.service.log.Logger">Logger</link> of the specified type named with the specified
 class.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The <link linkend="org.osgi.service.log.Logger">Logger</link> or <link linkend="org.osgi.service.log.FormatterLogger">FormatterLogger</link> named with the name
         of the specified class.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the specified type is not a supported
             Logger type.</para>
         </formalpara>
      </section>
      <section xreflabel="getLogger(Bundle,String,Class)" role="method" xml:id="org.osgi.service.log.LoggerFactory.getLogger-Bundle-String-Class-">
         <title>public L extends Logger getLogger(Bundle bundle, String name, Class&lt;L&gt; loggerType)</title>
         <formalpara role="parameter">
            <title>Type Parameters</title>
            <para>
               <code>&lt;L extends Logger&gt;</code>
            </para>
         </formalpara>
         <formalpara role="parameter">
            <title>&lt;L&gt;</title>
            <para>The Logger type.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>bundle</title>
            <para>The bundle associated with the Logger. Must not be
            <code>null</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>name</title>
            <para>The name to use for the logger name. Must not be
            <code>null</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>loggerType</title>
            <para>The type of Logger. Can be <link linkend="org.osgi.service.log.Logger">Logger</link> or
            <link linkend="org.osgi.service.log.FormatterLogger">FormatterLogger</link>. Must not be <code>null</code>.</para>
         </formalpara>
         <para role="description">
Return the <link linkend="org.osgi.service.log.Logger">Logger</link> of the specified type named with the specified
 name for the specified bundle.
 </para>
         <para>
 This method is not normally used. The other <code>getLogger</code> methods
 return a <link linkend="org.osgi.service.log.Logger">Logger</link> associated with the bundle used to obtain this
 Logger Factory service. This method is used to obtain a <link linkend="org.osgi.service.log.Logger">Logger</link>
 for the specified bundle which may be useful to code which is logging on
 behalf of another bundle.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The <link linkend="org.osgi.service.log.Logger">Logger</link> or <link linkend="org.osgi.service.log.FormatterLogger">FormatterLogger</link> named with the
         specified name for the specified bundle. If the name parameter is
         equal to <link linkend="org.osgi.service.log.Logger.ROOT_LOGGER_NAME">Logger.ROOT_LOGGER_NAME</link>, then the root logger is
         returned.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the specified type is not a supported
             Logger type or the specified Bundle is not a resolved bundle.</para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="LogLevel" role="class" xml:id="org.osgi.service.log.LogLevel">
      <title>enum LogLevel</title>
      <para>
Log Levels.
   </para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.4</para>
      </formalpara>
      <section xreflabel="AUDIT" role="field" xml:id="org.osgi.service.log.LogLevel.AUDIT">
         <title>AUDIT</title>
         <para>
Audit – Information that must always be logged.
   </para>
      </section>
      <section xreflabel="ERROR" role="field" xml:id="org.osgi.service.log.LogLevel.ERROR">
         <title>ERROR</title>
         <para>
Error – Information about an error situation.
   </para>
      </section>
      <section xreflabel="WARN" role="field" xml:id="org.osgi.service.log.LogLevel.WARN">
         <title>WARN</title>
         <para>
Warning – Information about a failure or unwanted situation that is not
 blocking.
   </para>
      </section>
      <section xreflabel="INFO" role="field" xml:id="org.osgi.service.log.LogLevel.INFO">
         <title>INFO</title>
         <para>
Info – Information about normal operation.
   </para>
      </section>
      <section xreflabel="DEBUG" role="field" xml:id="org.osgi.service.log.LogLevel.DEBUG">
         <title>DEBUG</title>
         <para>
Debug – Detailed output for debugging operations.
   </para>
      </section>
      <section xreflabel="TRACE" role="field" xml:id="org.osgi.service.log.LogLevel.TRACE">
         <title>TRACE</title>
         <para>
Trace level – Large volume of output for tracing operations.
   </para>
      </section>
      <section xreflabel="implies(LogLevel)" role="method" xml:id="org.osgi.service.log.LogLevel.implies-LogLevel-">
         <title>public boolean implies(LogLevel other)</title>
         <formalpara role="parameter">
            <title>other</title>
            <para>The other log level.</para>
         </formalpara>
         <para role="description">
Returns whether this log level implies the specified log level.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> If this log level implies the specified log level;
         <code>false</code> otherwise.</para>
         </formalpara>
      </section>
      <section xreflabel="valueOf(String)" role="method" xml:id="org.osgi.service.log.LogLevel.valueOf-String-">
         <title>public static LogLevel valueOf(String name)</title>
         <para/>
      </section>
      <section xreflabel="values()" role="method" xml:id="org.osgi.service.log.LogLevel.values--">
         <title>public static LogLevel[] values()</title>
         <para/>
      </section>
   </section>
   <section xreflabel="LogListener" role="class" xml:id="org.osgi.service.log.LogListener">
      <title>public interface LogListener<?line-break?> extends EventListener</title>
      <para>
Subscribes to <code>LogEntry</code> objects from the <code>LogReaderService</code>.
 </para>
      <para>
 A <code>LogListener</code> object may be registered with the Log Reader Service
 using the <code>LogReaderService.addLogListener</code> method. After the listener
 is registered, the <code>logged</code> method will be called for each
 <code>LogEntry</code> object created. The <code>LogListener</code> object may be
 unregistered by calling the <code>LogReaderService.removeLogListener</code>
 method.
 </para>
      <para>
 Since 1.4, <link linkend="org.osgi.service.log.stream.LogStreamProvider">org.osgi.service.log.stream.LogStreamProvider</link> is the
 preferred way to obtain <link linkend="org.osgi.service.log.LogEntry">LogEntry</link> objects.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section xreflabel="logged(LogEntry)" role="method" xml:id="org.osgi.service.log.LogListener.logged-LogEntry-">
         <title>public void logged(LogEntry entry)</title>
         <formalpara role="parameter">
            <title>entry</title>
            <para>A <link linkend="org.osgi.service.log.LogEntry">LogEntry</link> object containing log information.</para>
         </formalpara>
         <para role="description">
Listener method called for each LogEntry object created.
   </para>
      </section>
   </section>
   <section xreflabel="LogReaderService" role="class" xml:id="org.osgi.service.log.LogReaderService">
      <title>public interface LogReaderService</title>
      <para>
LogReaderService for obtaining logging information.
 </para>
      <para>
 Since 1.4, <link linkend="org.osgi.service.log.stream.LogStreamProvider">org.osgi.service.log.stream.LogStreamProvider</link> is the
 preferred way to obtain <link linkend="org.osgi.service.log.LogEntry">LogEntry</link> objects.
 </para>
      <para>
 The LogReaderService provides two ways to obtain <link linkend="org.osgi.service.log.LogEntry">LogEntry</link> objects:
 </para>
      <itemizedlist>
         <listitem>
            <para>The primary way to retrieve <link linkend="org.osgi.service.log.LogEntry">LogEntry</link> objects is to register a
 <link linkend="org.osgi.service.log.LogListener">LogListener</link> object whose <link linkend="org.osgi.service.log.LogListener.logged-LogEntry-">LogListener.logged(LogEntry)</link> method
 will be called for each entry added to the log.</para>
         </listitem>
         <listitem>
            <para>To obtain past <link linkend="org.osgi.service.log.LogEntry">LogEntry</link> objects, the <link linkend="org.osgi.service.log.LogReaderService.getLog--">getLog()</link> method can
 be called which will return an <code>Enumeration</code> of the <link linkend="org.osgi.service.log.LogEntry">LogEntry</link>
 objects in the log.</para>
         </listitem>
      </itemizedlist>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section xreflabel="addLogListener(LogListener)" role="method" xml:id="org.osgi.service.log.LogReaderService.addLogListener-LogListener-">
         <title>public void addLogListener(LogListener listener)</title>
         <formalpara role="parameter">
            <title>listener</title>
            <para>A <link linkend="org.osgi.service.log.LogListener">LogListener</link> object to register; the
            <link linkend="org.osgi.service.log.LogListener">LogListener</link> object is used to receive <link linkend="org.osgi.service.log.LogEntry">LogEntry</link>
            objects.</para>
         </formalpara>
         <para role="description">
Subscribes to <link linkend="org.osgi.service.log.LogEntry">LogEntry</link> objects.
 </para>
         <para>
 This method registers a <link linkend="org.osgi.service.log.LogListener">LogListener</link> object with the Log Reader
 Service. The <link linkend="org.osgi.service.log.LogListener.logged-LogEntry-">LogListener.logged(LogEntry)</link> method will be called
 for each <link linkend="org.osgi.service.log.LogEntry">LogEntry</link> object placed into the log.
 </para>
         <para>
 When a bundle which registers a <link linkend="org.osgi.service.log.LogListener">LogListener</link> object is stopped or
 otherwise releases the Log Reader Service, the Log Reader Service must
 remove all of the bundle's listeners.
 </para>
         <para>
 If this Log Reader Service's list of listeners already contains a
 listener <code>l</code> such that <code>(l==listener)</code>, this method does
 nothing.
 </para>
         <para>
 Since 1.4, <link linkend="org.osgi.service.log.stream.LogStreamProvider">org.osgi.service.log.stream.LogStreamProvider</link> is the
 preferred way to obtain <link linkend="org.osgi.service.log.LogEntry">LogEntry</link> objects.</para>
      </section>
      <section xreflabel="getLog()" role="method" xml:id="org.osgi.service.log.LogReaderService.getLog--">
         <title>public Enumeration&lt;LogEntry&gt; getLog()</title>
         <para role="description">
Returns an <code>Enumeration</code> of the <link linkend="org.osgi.service.log.LogEntry">LogEntry</link> objects in the
 log.
 </para>
         <para>
 Each element of the enumeration is a <link linkend="org.osgi.service.log.LogEntry">LogEntry</link> object, ordered
 with the most recent entry first. Whether the enumeration is of all
 <link linkend="org.osgi.service.log.LogEntry">LogEntry</link> objects since the Log Service was started or some recent
 past is implementation-specific.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An <code>Enumeration</code> of the <link linkend="org.osgi.service.log.LogEntry">LogEntry</link> objects in the
         log.</para>
         </formalpara>
      </section>
      <section xreflabel="removeLogListener(LogListener)" role="method" xml:id="org.osgi.service.log.LogReaderService.removeLogListener-LogListener-">
         <title>public void removeLogListener(LogListener listener)</title>
         <formalpara role="parameter">
            <title>listener</title>
            <para>A <link linkend="org.osgi.service.log.LogListener">LogListener</link> object to unregister.</para>
         </formalpara>
         <para role="description">
Unsubscribes to <link linkend="org.osgi.service.log.LogEntry">LogEntry</link> objects.
 </para>
         <para>
 This method unregisters a <link linkend="org.osgi.service.log.LogListener">LogListener</link> object from the Log Reader
 Service.
 </para>
         <para>
 If <code>listener</code> is not contained in this Log Reader Service's list of
 listeners, this method does nothing.
 </para>
         <para>
 Since 1.4, <link linkend="org.osgi.service.log.stream.LogStreamProvider">org.osgi.service.log.stream.LogStreamProvider</link> is the
 preferred way to obtain <link linkend="org.osgi.service.log.LogEntry">LogEntry</link> objects.</para>
      </section>
   </section>
   <section xreflabel="LogService" role="class" xml:id="org.osgi.service.log.LogService">
      <title>public interface LogService<?line-break?> extends LoggerFactory</title>
      <para>
LogService for logging information.
 </para>
      <para>
 Replaced by <link linkend="org.osgi.service.log.LoggerFactory">LoggerFactory</link>.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section xreflabel="LOG_DEBUG" role="field" xml:id="org.osgi.service.log.LogService.LOG_DEBUG">
         <title>public static final int LOG_DEBUG = 4</title>
         <para>
A debugging message (Value 4).
 </para>
         <para>
 This log entry is used for problem determination and may be irrelevant to
 anyone but the bundle developer.</para>
         <formalpara role="parameter">
            <title>Deprecated</title>
            <para>Since 1.4. Replaced by <link linkend="org.osgi.service.log.LogLevel.DEBUG">LogLevel.DEBUG</link>.</para>
         </formalpara>
      </section>
      <section xreflabel="LOG_ERROR" role="field" xml:id="org.osgi.service.log.LogService.LOG_ERROR">
         <title>public static final int LOG_ERROR = 1</title>
         <para>
An error message (Value 1).
 </para>
         <para>
 This log entry indicates the bundle or service may not be functional.</para>
         <formalpara role="parameter">
            <title>Deprecated</title>
            <para>Since 1.4. Replaced by <link linkend="org.osgi.service.log.LogLevel.ERROR">LogLevel.ERROR</link>.</para>
         </formalpara>
      </section>
      <section xreflabel="LOG_INFO" role="field" xml:id="org.osgi.service.log.LogService.LOG_INFO">
         <title>public static final int LOG_INFO = 3</title>
         <para>
An informational message (Value 3).
 </para>
         <para>
 This log entry may be the result of any change in the bundle or service
 and does not indicate a problem.</para>
         <formalpara role="parameter">
            <title>Deprecated</title>
            <para>Since 1.4. Replaced by <link linkend="org.osgi.service.log.LogLevel.INFO">LogLevel.INFO</link>.</para>
         </formalpara>
      </section>
      <section xreflabel="LOG_WARNING" role="field" xml:id="org.osgi.service.log.LogService.LOG_WARNING">
         <title>public static final int LOG_WARNING = 2</title>
         <para>
A warning message (Value 2).
 </para>
         <para>
 This log entry indicates a bundle or service is still functioning but may
 experience problems in the future because of the warning condition.</para>
         <formalpara role="parameter">
            <title>Deprecated</title>
            <para>Since 1.4. Replaced by <link linkend="org.osgi.service.log.LogLevel.WARN">LogLevel.WARN</link>.</para>
         </formalpara>
      </section>
      <section xreflabel="log(int,String)" role="method" xml:id="org.osgi.service.log.LogService.log-int-String-">
         <title>public void log(int level, String message)</title>
         <formalpara role="parameter">
            <title>level</title>
            <para>The severity of the message. This should be one of the
            defined log levels but may be any integer that is interpreted
            in a user defined way.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>message</title>
            <para>Human readable string describing the condition or
            <code>null</code>.</para>
         </formalpara>
         <para role="description">
Logs a message.
 </para>
         <para>
 The <code>ServiceReference</code> field and the <code>Throwable</code> field of the
 <code>LogEntry</code> object will be set to <code>null</code>.
 </para>
         <para>
 This method will log to the bundle's <link linkend="org.osgi.service.log.Logger">Logger</link> named
 <code>"LogService.&lt;bsn&gt;"</code> where <code>&lt;bsn&gt;</code> is the Bundle Symbolic
 Name of the bundle.
 </para>
         <para>
 The specified level is mapped to a <link linkend="org.osgi.service.log.LogLevel">LogLevel</link> as follows:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.log.LogService.LOG_ERROR">LOG_ERROR</link> - <link linkend="org.osgi.service.log.LogLevel.ERROR">LogLevel.ERROR</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.log.LogService.LOG_WARNING">LOG_WARNING</link> - <link linkend="org.osgi.service.log.LogLevel.WARN">LogLevel.WARN</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.log.LogService.LOG_INFO">LOG_INFO</link> - <link linkend="org.osgi.service.log.LogLevel.INFO">LogLevel.INFO</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.log.LogService.LOG_DEBUG">LOG_DEBUG</link> - <link linkend="org.osgi.service.log.LogLevel.DEBUG">LogLevel.DEBUG</link>
               </para>
            </listitem>
            <listitem>
               <para>Any other value - <link linkend="org.osgi.service.log.LogLevel.TRACE">LogLevel.TRACE</link>
               </para>
            </listitem>
         </itemizedlist>
         <para>
 In the generated log entry, <link linkend="org.osgi.service.log.LogEntry.getLevel--">LogEntry.getLevel()</link> must return the
 specified level.
   </para>
         <formalpara role="parameter">
            <title>Deprecated</title>
            <para>Since 1.4. Replaced by <link linkend="org.osgi.service.log.Logger">Logger</link>. See
             <link linkend="org.osgi.service.log.LoggerFactory">LoggerFactory</link>.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="log(int,String,Throwable)" role="method" xml:id="org.osgi.service.log.LogService.log-int-String-Throwable-">
         <title>public void log(int level, String message, Throwable exception)</title>
         <formalpara role="parameter">
            <title>level</title>
            <para>The severity of the message. This should be one of the
            defined log levels but may be any integer that is interpreted
            in a user defined way.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>message</title>
            <para>The human readable string describing the condition or
            <code>null</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>exception</title>
            <para>The exception that reflects the condition or
            <code>null</code>.</para>
         </formalpara>
         <para role="description">
Logs a message with an exception.
 </para>
         <para>
 The <code>ServiceReference</code> field of the <code>LogEntry</code> object will be
 set to <code>null</code>.
 </para>
         <para>
 This method will log to the bundle's <link linkend="org.osgi.service.log.Logger">Logger</link> named
 <code>"LogService.&lt;bsn&gt;"</code> where <code>&lt;bsn&gt;</code> is the Bundle Symbolic
 Name of the bundle.
 </para>
         <para>
 The specified level is mapped to a <link linkend="org.osgi.service.log.LogLevel">LogLevel</link> as follows:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.log.LogService.LOG_ERROR">LOG_ERROR</link> - <link linkend="org.osgi.service.log.LogLevel.ERROR">LogLevel.ERROR</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.log.LogService.LOG_WARNING">LOG_WARNING</link> - <link linkend="org.osgi.service.log.LogLevel.WARN">LogLevel.WARN</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.log.LogService.LOG_INFO">LOG_INFO</link> - <link linkend="org.osgi.service.log.LogLevel.INFO">LogLevel.INFO</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.log.LogService.LOG_DEBUG">LOG_DEBUG</link> - <link linkend="org.osgi.service.log.LogLevel.DEBUG">LogLevel.DEBUG</link>
               </para>
            </listitem>
            <listitem>
               <para>Any other value - <link linkend="org.osgi.service.log.LogLevel.TRACE">LogLevel.TRACE</link>
               </para>
            </listitem>
         </itemizedlist>
         <para>
 In the generated log entry, <link linkend="org.osgi.service.log.LogEntry.getLevel--">LogEntry.getLevel()</link> must return the
 specified level.
   </para>
         <formalpara role="parameter">
            <title>Deprecated</title>
            <para>Since 1.4. Replaced by <link linkend="org.osgi.service.log.Logger">Logger</link>. See
             <link linkend="org.osgi.service.log.LoggerFactory">LoggerFactory</link>.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="log(ServiceReference,int,String)" role="method" xml:id="org.osgi.service.log.LogService.log-ServiceReference-int-String-">
         <title>public void log(ServiceReference&lt;?&gt; sr, int level, String message)</title>
         <formalpara role="parameter">
            <title>sr</title>
            <para>The <code>ServiceReference</code> object of the service that this
            message is associated with or <code>null</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>level</title>
            <para>The severity of the message. This should be one of the
            defined log levels but may be any integer that is interpreted
            in a user defined way.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>message</title>
            <para>Human readable string describing the condition or
            <code>null</code>.</para>
         </formalpara>
         <para role="description">
Logs a message associated with a specific <code>ServiceReference</code>
 object.
 </para>
         <para>
 The <code>Throwable</code> field of the <code>LogEntry</code> will be set to
 <code>null</code>.
 </para>
         <para>
 This method will log to the bundle's <link linkend="org.osgi.service.log.Logger">Logger</link> named
 <code>"LogService.&lt;bsn&gt;"</code> where <code>&lt;bsn&gt;</code> is the Bundle Symbolic
 Name of the bundle.
 </para>
         <para>
 The specified level is mapped to a <link linkend="org.osgi.service.log.LogLevel">LogLevel</link> as follows:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.log.LogService.LOG_ERROR">LOG_ERROR</link> - <link linkend="org.osgi.service.log.LogLevel.ERROR">LogLevel.ERROR</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.log.LogService.LOG_WARNING">LOG_WARNING</link> - <link linkend="org.osgi.service.log.LogLevel.WARN">LogLevel.WARN</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.log.LogService.LOG_INFO">LOG_INFO</link> - <link linkend="org.osgi.service.log.LogLevel.INFO">LogLevel.INFO</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.log.LogService.LOG_DEBUG">LOG_DEBUG</link> - <link linkend="org.osgi.service.log.LogLevel.DEBUG">LogLevel.DEBUG</link>
               </para>
            </listitem>
            <listitem>
               <para>Any other value - <link linkend="org.osgi.service.log.LogLevel.TRACE">LogLevel.TRACE</link>
               </para>
            </listitem>
         </itemizedlist>
         <para>
 In the generated log entry, <link linkend="org.osgi.service.log.LogEntry.getLevel--">LogEntry.getLevel()</link> must return the
 specified level.
   </para>
         <formalpara role="parameter">
            <title>Deprecated</title>
            <para>Since 1.4. Replaced by <link linkend="org.osgi.service.log.Logger">Logger</link>. See
             <link linkend="org.osgi.service.log.LoggerFactory">LoggerFactory</link>.</para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="log(ServiceReference,int,String,Throwable)" role="method" xml:id="org.osgi.service.log.LogService.log-ServiceReference-int-String-Throwable-">
         <title>public void log(ServiceReference&lt;?&gt; sr, int level, String message, Throwable exception)</title>
         <formalpara role="parameter">
            <title>sr</title>
            <para>The <code>ServiceReference</code> object of the service that this
            message is associated with.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>level</title>
            <para>The severity of the message. This should be one of the
            defined log levels but may be any integer that is interpreted
            in a user defined way.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>message</title>
            <para>Human readable string describing the condition or
            <code>null</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>exception</title>
            <para>The exception that reflects the condition or
            <code>null</code>.</para>
         </formalpara>
         <para role="description">
Logs a message with an exception associated and a
 <code>ServiceReference</code> object.
 </para>
         <para>
 This method will log to the bundle's <link linkend="org.osgi.service.log.Logger">Logger</link> named
 <code>"LogService.&lt;bsn&gt;"</code> where <code>&lt;bsn&gt;</code> is the Bundle Symbolic
 Name of the bundle.
 </para>
         <para>
 The specified level is mapped to a <link linkend="org.osgi.service.log.LogLevel">LogLevel</link> as follows:
 </para>
         <itemizedlist>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.log.LogService.LOG_ERROR">LOG_ERROR</link> - <link linkend="org.osgi.service.log.LogLevel.ERROR">LogLevel.ERROR</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.log.LogService.LOG_WARNING">LOG_WARNING</link> - <link linkend="org.osgi.service.log.LogLevel.WARN">LogLevel.WARN</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.log.LogService.LOG_INFO">LOG_INFO</link> - <link linkend="org.osgi.service.log.LogLevel.INFO">LogLevel.INFO</link>
               </para>
            </listitem>
            <listitem>
               <para>
                  <link linkend="org.osgi.service.log.LogService.LOG_DEBUG">LOG_DEBUG</link> - <link linkend="org.osgi.service.log.LogLevel.DEBUG">LogLevel.DEBUG</link>
               </para>
            </listitem>
            <listitem>
               <para>Any other value - <link linkend="org.osgi.service.log.LogLevel.TRACE">LogLevel.TRACE</link>
               </para>
            </listitem>
         </itemizedlist>
         <para>
 In the generated log entry, <link linkend="org.osgi.service.log.LogEntry.getLevel--">LogEntry.getLevel()</link> must return the
 specified level.
   </para>
         <formalpara role="parameter">
            <title>Deprecated</title>
            <para>Since 1.4. Replaced by <link linkend="org.osgi.service.log.Logger">Logger</link>. See
             <link linkend="org.osgi.service.log.LoggerFactory">LoggerFactory</link>.</para>
         </formalpara>
         <para/>
      </section>
   </section>
</section>

  <section xreflabel="org.osgi.service.log.admin" version="5" role="package" xml:id="org.osgi.service.log.admin" xml:base="../../generated/javadoc/docbook/org.osgi.service.log.admin.xml">
   <title>org.osgi.service.log.admin</title>
   <info>
      <releaseinfo xml:id="org.osgi.service.log.admin-version">Version 1.0</releaseinfo>
      <edition xml:id="org.osgi.service.log.admin-version.number">1.0</edition>
   </info>
   <para>
Log Admin Package Version 1.0.
 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest. This package has two types of
 users: the consumers that use the API in this package and the providers that
 implement the API in this package.
 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.log.admin; version="[1.0,2.0)"</code>
   </para>
   <para>
 Example import for providers implementing the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.service.log.admin; version="[1.0,1.1)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.service.log.admin.LoggerAdmin">
                  <code>LoggerAdmin</code>
               </link> -
LoggerAdmin service for configuring loggers.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.service.log.admin.LoggerContext">
                  <code>LoggerContext</code>
               </link> -
Logger Context for a bundle.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section xreflabel="LoggerAdmin" role="class" xml:id="org.osgi.service.log.admin.LoggerAdmin">
      <title>public interface LoggerAdmin</title>
      <para>
LoggerAdmin service for configuring loggers.
 </para>
      <para>
 Each bundle may have its own named <link linkend="org.osgi.service.log.admin.LoggerContext">LoggerContext</link> based upon its
 bundle symbolic name, bundle version, and bundle location. There is also a
 root Logger Context from which each named Logger Context inherits. The root
 Logger Context has no name.
 </para>
      <para>
 When a bundle logs, the logger implementation must locate the Logger Context
 for the bundle to determine the
 <link linkend="org.osgi.service.log.admin.LoggerContext.getEffectiveLogLevel-String-">effective log level</link> of the
 logger name. The <emphasis>best matching name</emphasis> for the Logger Context is the
 longest name, which has a non-empty Logger Context, according to this syntax:

 </para>
      <programlisting> name ::= symbolic-name ( '|' version ( '|' location )? )?</programlisting>
      <para>

 The version must be formatted canonically, that is, according to the
 <code>toString()</code> method of the <code>Version</code> class. So the Logger Context
 for a bundle is searched for using the following names in the given order:

 </para>
      <programlisting> &lt;symbolic-name&gt;|&lt;version&gt;|&lt;location&gt;
 &lt;symbolic-name&gt;|&lt;version&gt;
 &lt;symbolic-name&gt;</programlisting>
      <para>

 The search stops at the first <link linkend="org.osgi.service.log.admin.LoggerContext.isEmpty--">non-empty</link>
 Logger Context. If no non-empty Logger Context is found using the above
 search order, the Logger Context with the symbolic name of the bundle must be
 used for the bundle.
   </para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section xreflabel="LOG_SERVICE_ID" role="field" xml:id="org.osgi.service.log.admin.LoggerAdmin.LOG_SERVICE_ID">
         <title>public static final String LOG_SERVICE_ID = "osgi.log.service.id"</title>
         <para>
Logger Admin service property to associate the Logger Admin service with
 a <link linkend="org.osgi.service.log.LoggerFactory">LoggerFactory</link> service.
 </para>
         <para>
 This service property is set to the <code>service.id</code> for the
 <link linkend="org.osgi.service.log.LoggerFactory">LoggerFactory</link> service administered by this Logger Admin.
 </para>
         <para>
 The value of this service property must be of type <code>Long</code>.</para>
      </section>
      <section xreflabel="getLoggerContext(String)" role="method" xml:id="org.osgi.service.log.admin.LoggerAdmin.getLoggerContext-String-">
         <title>public LoggerContext getLoggerContext(String name)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The name of the Logger Context. Can be <code>null</code> to
            specify the root Logger Context.</para>
         </formalpara>
         <para role="description">
Get the Logger Context for the specified name.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The Logger Context for the specified name. The returned Logger
         Context may be <link linkend="org.osgi.service.log.admin.LoggerContext.isEmpty--">empty</link>.</para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="LoggerContext" role="class" xml:id="org.osgi.service.log.admin.LoggerContext">
      <title>public interface LoggerContext</title>
      <para>
Logger Context for a bundle.
 </para>
      <para>
 Any change to the configuration of this Logger Context must be effective
 immediately for all loggers that would rely upon the configuration of this
 Logger Context.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <formalpara role="parameter">
         <title>Provider Type</title>
         <para>Consumers of this API must not implement this type</para>
      </formalpara>
      <section xreflabel="LOGGER_CONTEXT_DEFAULT_LOGLEVEL" role="field" xml:id="org.osgi.service.log.admin.LoggerContext.LOGGER_CONTEXT_DEFAULT_LOGLEVEL">
         <title>public static final String LOGGER_CONTEXT_DEFAULT_LOGLEVEL = "org.osgi.service.log.admin.loglevel"</title>
         <para>
Framework launching property specifying the default log level of the root
 Logger Context.
 </para>
         <para>
 The value of this property must be the name of the one of the
 <link linkend="org.osgi.service.log.LogLevel">LogLevel</link>s.
 </para>
         <para>
 If not specified, or the specified value is not the name of the one of
 the <link linkend="org.osgi.service.log.LogLevel">LogLevel</link>s, the default log level of the root Logger Context
 is <link linkend="org.osgi.service.log.LogLevel.WARN">LogLevel.WARN</link>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.service.log.LogLevel">LogLevel</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="LOGGER_CONTEXT_PID" role="field" xml:id="org.osgi.service.log.admin.LoggerContext.LOGGER_CONTEXT_PID">
         <title>public static final String LOGGER_CONTEXT_PID = "org.osgi.service.log.admin"</title>
         <para>
Logger Context PID.
 </para>
         <para>
 If Configuration Admin is present, Logger Context configuration
 information in Configuration Admin must be used. The name of the Logger
 Context is mapped to a Configuration Admin targeted PID as follows:
 </para>
         <itemizedlist>
            <listitem>
               <para>The root Logger Context, which has no name, is mapped to the PID
 <code>org.osgi.service.log.admin</code>.</para>
            </listitem>
            <listitem>
               <para>A named Logger Context is mapped to a targeted PID by prefixing the
 Logger Context's name with <code>org.osgi.service.log.admin</code> followed by
 vertical line (<code>'|'</code> \u007c). For example, the Logger Context
 named <code>com.foo.bar</code> is mapped to the targeted PID
 <code>org.osgi.service.log.admin|com.foo.bar</code>.</para>
            </listitem>
         </itemizedlist>
      </section>
      <section xreflabel="clear()" role="method" xml:id="org.osgi.service.log.admin.LoggerContext.clear--">
         <title>public void clear()</title>
         <para role="description">
Clear the configuration of this Logger Context.
 </para>
         <para>
 The configured log levels will be cleared.</para>
      </section>
      <section xreflabel="getEffectiveLogLevel(String)" role="method" xml:id="org.osgi.service.log.admin.LoggerContext.getEffectiveLogLevel-String-">
         <title>public LogLevel getEffectiveLogLevel(String name)</title>
         <formalpara role="parameter">
            <title>name</title>
            <para>The logger name.</para>
         </formalpara>
         <para role="description">
Returns the effective log level of the logger name in this Logger
 Context.
 </para>
         <para>
 The effective log level for a logger name is found by the following
 steps:
 </para>
         <orderedlist>
            <listitem>
               <para>If the specified logger name is configured with a log level, return
 the configured log level.</para>
            </listitem>
            <listitem>
               <para>For each ancestor logger name of the specified logger name, if the
 ancestor logger name is configured with a log level, return the
 configured log level.</para>
            </listitem>
            <listitem>
               <para>If this Logger Context is named, return the result of calling this
 method on the root Logger Context with the specified logger name.</para>
            </listitem>
            <listitem>
               <para>If this Logger Context is the root Logger Context, return the
 <link linkend="org.osgi.service.log.admin.LoggerContext.LOGGER_CONTEXT_DEFAULT_LOGLEVEL">default log level of the root
 Logger Context</link>.</para>
            </listitem>
         </orderedlist>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The effective log level of the logger name in this Logger
         Context.</para>
         </formalpara>
      </section>
      <section xreflabel="getLogLevels()" role="method" xml:id="org.osgi.service.log.admin.LoggerContext.getLogLevels--">
         <title>public Map&lt;String, LogLevel&gt; getLogLevels()</title>
         <para role="description">
Returns the configured log levels for this Logger Context.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The configured log levels for this Logger Context. The keys are
         the logger names and the values are the log levels. The returned
         map may be empty if no logger names are configured for this
         Logger Context. The returned map is the property of the caller
         who can modify the map and use it as input to
         <link linkend="org.osgi.service.log.admin.LoggerContext.setLogLevels-Map-">setLogLevels(Map)</link>. The returned map must support all
         optional Map operations.</para>
         </formalpara>
      </section>
      <section xreflabel="getName()" role="method" xml:id="org.osgi.service.log.admin.LoggerContext.getName--">
         <title>public String getName()</title>
         <para role="description">
Returns the name for this Logger Context.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The name for this Logger Context. The root Logger Context has no
         name and returns <code>null</code>.</para>
         </formalpara>
      </section>
      <section xreflabel="isEmpty()" role="method" xml:id="org.osgi.service.log.admin.LoggerContext.isEmpty--">
         <title>public boolean isEmpty()</title>
         <para role="description">
Returns whether the configuration of this Logger Context is empty.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if this Logger Context has no configuration. That
         is, the configured log levels are empty. Otherwise <code>false</code>
         is returned.</para>
         </formalpara>
      </section>
      <section xreflabel="setLogLevels(Map)" role="method" xml:id="org.osgi.service.log.admin.LoggerContext.setLogLevels-Map-">
         <title>public void setLogLevels(Map&lt;String, LogLevel&gt; logLevels)</title>
         <formalpara role="parameter">
            <title>logLevels</title>
            <para>The log levels to configure for this Logger Context. The
            keys are the logger names and the values are the log levels.
            The specified map is the property of the caller and this
            method must not modify or retain the specified map.</para>
         </formalpara>
         <para role="description">
Configure the log levels for this Logger Context.
 </para>
         <para>
 All previous log levels configured for this Logger Context are cleared
 and then the log levels in the specified map are configured.
 </para>
         <para>
 The configured log levels for this Logger Context can be set by both this
 method and by configuration information in Configuration Admin, if
 Configuration Admin is present. The configured log levels for this Logger
 Context are based upon the last technique used to update the configured
 log levels. This method must not modify or set configuration information
 in Configuration Admin.</para>
      </section>
   </section>
</section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="service.log-slf4j.ref"><title>SLF4J</title><biblioid class="uri"><link xlink:href="http://www.slf4j.org"/></biblioid></bibliomixed>

      <bibliomixed xml:id="service.log-configurator.ref"><title>Configurator</title>OSGi
      Compendium, Chapter 150 Configurator Specification</bibliomixed>

      <bibliomixed xml:id="service.log-log.stream.ref"><title>Log Stream
      Provider Service</title>OSGi Compendium, Chapter 158 Log Stream Provider
      Service Specification</bibliomixed>
    </bibliolist>
  </section>
</chapter>

  <chapter label="701" revision="$Id: b7e6f502027bf63e4b75fb1c8d66dfc2e6d03130 $" version="5.0" xml:id="util.tracker" xml:base="../701/util.tracker.xml">
  <title>Tracker Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.util.tracker-version" linkend="org.osgi.util.tracker"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para xml:id="i1708332">The Framework provides a powerful and very dynamic
    programming environment: Bundles are installed, started, stopped, updated,
    and uninstalled without shutting down the Framework. Dependencies between
    bundles are monitored by the Framework, but bundles
    <emphasis>must</emphasis> cooperate in handling these dependencies
    correctly. Two important <emphasis>dynamic</emphasis> aspects of the
    Framework are the service registry and the set of installed
    bundles.</para>

    <para xml:id="i1708335">Bundle developers must be careful not to use
    service objects that have been unregistered and are therefore stale. The
    dynamic nature of the Framework service registry makes it necessary to
    track the service objects as they are registered and unregistered to
    prevent problems. It is easy to overlook race conditions or boundary
    conditions that will lead to random errors. Similar problems exist when
    tracking the set of installed bundles and their state.</para>

    <para xml:id="i1718746">This specification defines two utility classes,
    <code>ServiceTracker</code> and <code>BundleTracker</code>, that make
    tracking services and bundles easier. A <code>ServiceTracker</code> class
    can be customized by implementing the
    <code>ServiceTrackerCustomizer</code> interface or by sub-classing the
    <code>ServiceTracker</code> class. Similarly, a <code>BundleTracker</code>
    class can be customized by sub-classing or implementing the
    <code>BundleTrackerCustomizer</code> interface.</para>

    <para>These utility classes significantly reduce the complexity of
    tracking services in the service registry and the set of installed
    bundles.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Simplify</emphasis> - Make it simple to tracking
          services or bundles.</para>
        </listitem>

        <listitem>
          <para><emphasis>Customizable</emphasis> - Allow a default
          implementation to be customized so that bundle developers can start
          simply and later extend the implementation to meet their
          needs.</para>
        </listitem>

        <listitem>
          <para><emphasis>Small</emphasis> - Every Framework implementation
          should have this utility implemented. It should therefore be very
          small because some Framework implementations target minimal OSGi
          frameworks.</para>
        </listitem>

        <listitem>
          <para><emphasis>Services</emphasis> - Track a set of services,
          optionally filtered, or track a single service.</para>
        </listitem>

        <listitem>
          <para><emphasis>Bundles</emphasis> - Track bundles based on their
          state.</para>
        </listitem>

        <listitem>
          <para><emphasis>Cleanup</emphasis> - Properly clean up when tracking
          is no longer necessary</para>
        </listitem>

        <listitem>
          <para><emphasis>Generified</emphasis> - Generics are used to promote
          type safety.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Operation</title>

      <para>The fundamental tasks of a tracker are:</para>

      <itemizedlist>
        <listitem>
          <para>To create an initial list of <emphasis>targets</emphasis>
          (service or bundle).</para>
        </listitem>

        <listitem>
          <para>To listen to the appropriate events so that the targets are
          properly tracked.</para>
        </listitem>

        <listitem>
          <para>To allow the client to customize the tracking process through
          programmatic selection of the services/bundles to be tracked, as
          well as to perform client code when a service/bundle is added or
          removed.</para>
        </listitem>
      </itemizedlist>

      <para>A <code>ServiceTracker</code> object is populated with a set of
      services that match given search criteria, and then listens to
      <code>ServiceEvent</code> objects which correspond to those services. A
      Bundle Tracker is populated with the set of installed bundles and then
      listens to <code>BundleEvent</code> objects to notify the customizer of
      changes in the state of the bundles.</para>
    </section>

    <section>
      <title>Entities</title>

      <figure>
        <title>Class diagram of org.osgi.util.tracker</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.227in" contentwidth="7.000in" fileref="tracker-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section>
    <title>Tracking</title>

    <para>The OSGi Framework is a dynamic multi-threaded environment. In such
    an environments callbacks can occur on different threads at the same time.
    This dynamism causes many complexities. One of the surprisingly hard
    aspects of this environment is to reliably track services and bundles
    (called <emphasis>targets</emphasis> from now on).</para>

    <para>The complexity is caused by the fact that the
    <code>BundleListener</code> and <code>ServiceListener</code> interfaces
    are only providing access to the <emphasis>changed</emphasis> state, not
    to the existing state when the listener is registered. This leaves the
    programmer with the problem to merge the set of existing targets with the
    changes to the state as signified by the events, without unwantedly
    duplicating a target or missing a remove event that would leave a target
    in the tracked map while it is in reality gone. These problems are caused
    by the multi-threaded nature of OSGi.</para>

    <para>The problem is illustrated with the following (quite popular)
    code:</para>

    <programlisting>// Bad Example! Do not do this!
Bundle[] bundles = context.getBundles();
for ( Bundle bundle : bundles ) {
    map.put(bundle.getLocation(), bundle );
}

context.addBundleListener( new BundleListener() {
    public void bundleChanged(BundleEvent event) {
        Bundle bundle = event.getBundle();
        switch(event.getType()) {
        case BundleEvent.INSTALLED:
            map.put(bundle.getLocation(), bundle );
            break;

        case BundleEvent.UNINSTALLED:
            map.remove(bundle.getLocation());
            break;

        default:
            // ignore
        }
    }
});</programlisting>

    <para>Assume the code runs the first part, getting the existing targets.
    If during this time a targets state changes, for example bundle is
    installed or uninstalled, then the event is missed and the map will miss a
    bundle or it will contain a bundle that is already gone. An easy solution
    seems to be to first register the listener and then get the existing
    targets. This solves the earlier problem but will be introduce other
    problems. In this case, an uninstall event can occur before the bundle has
    been discovered.</para>

    <para>Proper locking can alleviate the problem but it turns out that this
    easily create solutions that are very prone to deadlocks. Solving this
    tracking problem is surprisingly hard. For this reason, the OSGi
    specifications contain a <emphasis>bundle tracker</emphasis> and a
    <emphasis>service tracker</emphasis> that are properly implemented. These
    classes significantly reduce the complexity of the dynamics in an OSGi
    framework.</para>

    <section>
      <title>Usage</title>

      <para>Trackers can be used with the following patterns:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>As-is</emphasis> - Each tracker can be used without
          further customizing. A tracker actively tracks a map of targets and
          this map can be consulted with a number of methods when the
          information is needed. This is especially useful for the Service
          Tracker because it provides convenience methods to wait for services
          to arrive.</para>
        </listitem>

        <listitem>
          <para><emphasis>Callback object</emphasis> - Each tracker provides a
          call back interface that can be implemented by the client
          code.</para>
        </listitem>

        <listitem>
          <para><emphasis>Sub-classing</emphasis> - The trackers are designed
          to be sub-classed. Sub-classes have access to the bundle context and
          only have to override the callback methods they need.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>General API</title>

      <para>A tracker hides the mechanisms in the way the targets are stored
      and evented. From a high level, a tracker maintains a
      <emphasis>map</emphasis> of targets to <emphasis>wrapper</emphasis>
      objects. The wrapper object can be defined by the client, though the
      Bundle Tracker uses the <code>Bundle</code> object and the Service
      Tracker uses the service object as default wrapper. The tracker notifies
      the client of any changes in the state of the target.</para>

      <para>A tracker must be constructed with a Bundle Context. This context
      is used to register listeners and obtain the initial list of targets
      during the call to the <code>open</code> method. At the end of the life
      of a tracker it must be closed to release any remaining objects. It is
      advised to properly close all trackers in the bundle activator's stop
      method.</para>

      <para>A tracker provides a uniform callback interface, which has 3
      different methods.</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Adding</emphasis> - Provide a new object, obtained
          from the store or from an event and return the wrapper or a related
          object. The adding method can decide not to track the target by
          returning a <code>null</code> object. When null is returned, no
          modified or remove methods are further called. However, it is
          possible that the adding method is called again for the same
          target.</para>
        </listitem>

        <listitem>
          <para><emphasis>Modified</emphasis> - The target is modified. For
          example, the service properties have changed or the bundle has
          changed state. This callback provides a mechanism for the client to
          update its internal structures. The callback provides the wrapper
          object.</para>
        </listitem>

        <listitem>
          <para><emphasis>Removing</emphasis> - The target is no longer
          tracked. This callback is provided the wrapper object returned from
          the adding method. This allows for simplified cleanup if the client
          maintains state about the target.</para>
        </listitem>
      </itemizedlist>

      <para>Each tracker is associated with a callback interface, which it
      implements itself. That is, a Service Tracker implements the
      <code>ServiceTrackerCustomizer</code> interface. By implementing this
      customizer, the tracker can also be sub-classed, this can be quite
      useful in many cases. Sub-classing can override only one or two of the
      methods instead of having to implement all methods. When overriding the
      callback methods, it must be ensured that the wrapper object is treated
      accordingly to the base implementation in all methods. For example, the
      Service Tracker's default implementation for the adding method checks
      out the service and therefore the remove method must unget this same
      service. Changing the wrapper object type to something else can
      therefore clash with the default implementations.</para>

      <para>Trackers can provide all the objects that are tracked, return the
      mapped wrapper from the target, and deliver the number of tracked
      targets.</para>
    </section>

    <section>
      <title>Tracking Count</title>

      <para>The tracker also maintains a count that is updated each time that
      an object is added, modified, or removed, that is any change to the
      implied map. This tracking count makes it straightforward to verify that
      a tracker has changed; just store the tracking count and compare it
      later to see if it has changed.</para>
    </section>

    <section>
      <title>Multi Threading</title>

      <para>The dynamic environment of OSGi requires that tracker are thread
      safe. However, the tracker closely interacts with the client through a
      callback interface. The tracker implementation must provide the
      following guarantees:</para>

      <itemizedlist>
        <listitem>
          <para>The tracker code calling a callback must not hold any
          locks</para>
        </listitem>
      </itemizedlist>

      <para>Clients must be aware that their callbacks are reentrant though
      the tracker implementations guarantee that the add/modified/remove
      methods can only called in this order for a specific target. A tracker
      must not call these methods out of order.</para>
    </section>

    <section>
      <title>Synchronous</title>

      <para>Trackers use <emphasis>synchronous</emphasis> listeners; the
      callbacks are called on the same thread as that of the initiating event.
      Care should be taken to not linger in the callback and perform
      non-trivial work. Callbacks should return immediately and move
      substantial work to other threads.</para>
    </section>
  </section>

  <section>
    <title>Service Tracker</title>

    <para>The purpose of a Service Tracker is to track <emphasis>service
    references</emphasis>, that is, the target is the
    <code>ServiceReference</code> object. The Service Tracker uses generics to
    provide a type safe interface. It has two type arguments:</para>

    <itemizedlist>
      <listitem>
        <para><code>S</code> - The service type.</para>
      </listitem>

      <listitem>
        <para><code>T</code> - The type used by the program. <code>T</code>
        can differ from S if the program creates a wrapper around the service
        object, a common pattern.</para>
      </listitem>
    </itemizedlist>

    <para xml:id="i1582460">The <code>ServiceTracker</code> interface defines
    three constructors to create <code>ServiceTracker</code> objects, each
    providing different search criteria:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.util.tracker.ServiceTracker.ServiceTracker-BundleContext-String-ServiceTrackerCustomizer-" xrefstyle="hyperlink"/> - This constructor takes a service interface
        name as the search criterion. The <code>ServiceTracker</code> object
        must then track all services that are registered under the specified
        service interface name.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.util.tracker.ServiceTracker.ServiceTracker-BundleContext-Filter-ServiceTrackerCustomizer-" xrefstyle="hyperlink"/> - This constructor uses a <code>Filter</code>
        object to specify the services to be tracked. The
        <code>ServiceTracker</code> must then track all services that match
        the specified filter.</para>
      </listitem>

      <listitem xml:id="i1582462">
        <para><xref linkend="org.osgi.util.tracker.ServiceTracker.ServiceTracker-BundleContext-ServiceReference-ServiceTrackerCustomizer-" xrefstyle="hyperlink"/> - This constructor takes a
        <code>ServiceReference</code> object as the search criterion. The
        <code>ServiceTracker</code> must then track only the service that
        corresponds to the specified <code>ServiceReference</code>. Using this
        constructor, no more than one service must ever be tracked, because a
        <code>ServiceReference</code> refers to a specific service.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.util.tracker.ServiceTracker.ServiceTracker-BundleContext-Class-ServiceTrackerCustomizer-" xrefstyle="hyperlink"/> - This constructor takes a class as argument.
        The tracker must only track services registered with this name. This
        is in general the most convenient way to use the Service
        Tracker.</para>
      </listitem>
    </itemizedlist>

    <para>Each of the <code>ServiceTracker</code> constructors takes a
    <code>BundleContext</code> object as a parameter. This
    <code>BundleContext</code> object must be used by a
    <code>ServiceTracker</code> object to track, get, and unget
    services.</para>

    <para>A new <code>ServiceTracker</code> object must not begin tracking
    services until its <code>open</code> method is called. There are 2
    versions of the open method:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.util.tracker.ServiceTracker.open--" xrefstyle="hyperlink"/> - This method is identical to
        <code>open(false)</code>. It is provided for backward compatibility
        reasons.</para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.util.tracker.ServiceTracker.open-boolean-" xrefstyle="hyperlink"/> - The tracker must start tracking the services
        as were specified in its constructor. If the boolean parameter is
        <code>true</code>, it must track all services, regardless if they are
        compatible with the bundle that created the Service Tracker or not.
        See <xref linkend="framework.service.multipleversionexportconsiderations"/> for
        a description of the compatibility issues when multiple variations of
        the same package can exist. If the parameter is <code>false</code>,
        the Service Tracker must only track compatible versions.</para>
      </listitem>
    </itemizedlist>

    <section>
      <title>Using a Service Tracker</title>

      <para>Once a <code>ServiceTracker</code> object is opened, it begins
      tracking services immediately. A number of methods are available to the
      bundle developer to monitor the services that are being tracked,
      including the ones that are in the service registry at that time. The
      <code>ServiceTracker</code> class defines these methods:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.util.tracker.ServiceTracker.getService--" xrefstyle="hyperlink"/> - Returns one of the services being tracked
          or <code>null</code> if there are no active services being
          tracked.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.util.tracker.ServiceTracker.getServices--" xrefstyle="hyperlink"/> - Returns an array of all the tracked
          services. The number of tracked services is returned by the
          <code>size</code> method.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.util.tracker.ServiceTracker.getServices-T---" xrefstyle="hyperlink"/> - Like <xref linkend="org.osgi.util.tracker.ServiceTracker.getServices--" xrefstyle="hyperlink"/> but provides a convenient way to get these
          services into a correctly typed array.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.util.tracker.ServiceTracker.getServiceReference--" xrefstyle="hyperlink"/> - Returns a <code>ServiceReference</code>
          object for one of the services being tracked. The service object for
          this service may be returned by calling the
          <code>ServiceTracker</code> object's <code>getService()</code>
          method.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.util.tracker.ServiceTracker.getServiceReferences--" xrefstyle="hyperlink"/> - Returns a list of the
          <code>ServiceReference</code> objects for services being tracked.
          The service object for a specific tracked service may be returned by
          calling the <code>ServiceTracker</code> object's
          <code>getService(ServiceReference)</code> method.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.util.tracker.ServiceTracker.waitForService-long-" xrefstyle="hyperlink"/> - Allows the caller to wait until at least
          one instance of a service is tracked or until the time-out expires.
          If the time-out is zero, the caller must wait until at least one
          instance of a service is tracked. <code>waitForService</code> must
          not used within the <code>BundleActivator</code> methods, as these
          methods are expected to complete in a short period of time. A
          Framework could wait for the start method to complete before
          starting the bundle that registers the service for which the caller
          is waiting, creating a deadlock situation.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.util.tracker.ServiceTracker.remove-ServiceReference-" xrefstyle="hyperlink"/> - This method may be used to remove a
          specific service from being tracked by the
          <code>ServiceTracker</code> object, causing
          <code>removedService</code> to be called for that service.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.util.tracker.ServiceTracker.close--" xrefstyle="hyperlink"/> - This method must remove all services being
          tracked by the <code>ServiceTracker</code> object, causing
          <code>removedService</code> to be called for all tracked
          services.</para>
        </listitem>

        <listitem xml:id="i1582472">
          <para><xref linkend="org.osgi.util.tracker.ServiceTracker.getTrackingCount--" xrefstyle="hyperlink"/> - A Service Tracker can have services added,
          modified, or removed at any moment in time. The
          <code>getTrackingCount</code> method is intended to efficiently
          detect changes in a Service Tracker. Every time the Service Tracker
          is changed, it must increase the tracking count.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.util.tracker.ServiceTracker.isEmpty--" xrefstyle="hyperlink"/> - To detect that the tracker has no tracked
          services.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.util.tracker.ServiceTracker.getTracked--" xrefstyle="hyperlink"/> - Return the tracked objects.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Customizing the Service Tracker class</title>

      <para>The behavior of the <code>ServiceTracker</code> class can be
      customized either by providing a <code>ServiceTrackerCustomizer</code>
      object, implementing the desired behavior when the
      <code>ServiceTracker</code> object is constructed, or by sub-classing
      the <code>ServiceTracker</code> class and overriding the
      <code>ServiceTrackerCustomizer</code> methods.</para>

      <para>The <code>ServiceTrackerCustomizer</code> interface defines these
      methods:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.util.tracker.ServiceTrackerCustomizer.addingService-ServiceReference-" xrefstyle="hyperlink"/> - Called whenever a service is being added
          to the <code>ServiceTracker</code> object.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.util.tracker.ServiceTrackerCustomizer.modifiedService-ServiceReference-T-" xrefstyle="hyperlink"/> - Called whenever a tracked service is
          modified.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.util.tracker.ServiceTrackerCustomizer.removedService-ServiceReference-T-" xrefstyle="hyperlink"/> - Called whenever a tracked service is
          removed from the <code>ServiceTracker</code> object.</para>
        </listitem>
      </itemizedlist>

      <para>When a service is being added to the <code>ServiceTracker</code>
      object or when a tracked service is modified or removed from the
      <code>ServiceTracker</code> object, it must call
      <code>addingService</code>, <code>modifiedService</code>, or
      <code>removedService</code>, respectively, on the
      <code>ServiceTrackerCustomizer</code> object (if specified when the
      <code>ServiceTracker</code> object was created); otherwise it must call
      these methods on itself.</para>

      <para>A bundle developer may customize the action when a service is
      tracked. Another reason for customizing the <code>ServiceTracker</code>
      class is to programmatically select which services are tracked. A filter
      may not sufficiently specify the services that the bundle developer is
      interested in tracking. By implementing <code>addingService</code>, the
      bundle developer can use additional runtime information to determine if
      the service should be tracked. If <code>null</code> is returned by the
      <code>addingService</code> method, the service must not be
      tracked.</para>

      <para>Finally, the bundle developer can return a specialized object from
      <code>addingService</code> that differs from the service object. This
      specialized object could contain the service object and any associated
      information. This returned object is then tracked instead of the service
      object. When the <code>removedService</code> method is called, the
      object that is passed along with the <code>ServiceReference</code>
      object is the one that was returned from the earlier call to the
      <code>addingService</code> method.</para>
    </section>

    <section>
      <title>Customizing Example</title>

      <para>An example of customizing the action taken when a service is
      tracked might be registering a <code>MyServlet</code> object with each
      Http Service that is tracked. This customization could be done by
      sub-classing the <code>ServiceTracker</code> class and overriding the
      <code>addingService</code> and <code>removedService</code> methods as
      follows:</para>

      <programlisting>new ServiceTracker&lt;HttpService,MyServlet&gt;(context,HttpService.class,null){
  public MyServlet addingService( ServiceReference&lt;HttpService&gt;reference) {
     HttpService svc = context.getService(reference);
     MyServlet ms = new MyServlet(scv);   return ms;
  }
  public void removedService( ServiceReference&lt;HttpService&gt;reference,
     MyServlet ms) {
     ms.close();
     context.ungetService(reference);
  }
}</programlisting>

      <para>In this example, the service type is the <code>HttpService</code>
      class and the wrapper type is the servlet.</para>
    </section>
  </section>

  <section>
    <title>Bundle Tracker</title>

    <para>The purpose of the Bundle Tracker is to simplify tracking bundles. A
    popular example where bundles need to be tracked is the
    <emphasis>extender</emphasis> pattern. An extender uses information in
    other bundles to provide its function. For example, a Declarative Services
    implementation reads the component XML file from the bundle to learn of
    the presence of any components in that bundle.</para>

    <para>There are, however, other places where it is necessary to track
    bundles. The Bundle Tracker significantly simplifies this task.</para>

    <section>
      <title>Bundle States</title>

      <para>The state diagram of a Bundle is significantly more complex than
      that of a service. However, the interface is simpler because there is
      only a need to specify for which states the bundle tracker should track
      a service.</para>

      <para>Bundle states are defined as a bit in an integer, allowing the
      specifications of multiple states by setting multiple bits. The Bundle
      Tracker therefore uses a <emphasis>bit mask</emphasis> to specify which
      states are of interest. For example, if a client is interested in active
      and resolved bundles, it is possible to specify the <code>Bundle</code>
      <code>ACTIVE | RESOLVED | STARTING</code> states in the mask.</para>

      <para>The Bundle Tracker tracks bundles whose state matches the mask.
      That is, when a bundle is not tracked it adds that bundle to the tracked
      map when its state matches the mask. If the bundle reaches a new state
      that is not listed in the mask, the bundle will be removed from the
      tracked map. If the state changes but the bundle should still be
      tracked, then the bundle is considered to be modified.</para>
    </section>

    <section>
      <title>Constructor</title>

      <para>The <code>BundleTracker</code> interface defines the following
      constructors to create <code>BundleTracker</code> objects:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.util.tracker.BundleTracker.BundleTracker-BundleContext-int-BundleTrackerCustomizer-" xrefstyle="hyperlink"/> - Create a Bundle Tracker that tracks the
          bundles which state is listed in the mask. The customizer may be
          <code>null</code>, in that case the callbacks can be implemented in
          a subclass.</para>
        </listitem>
      </itemizedlist>

      <para>A new <code>BundleTracker</code> object must not begin tracking
      services until its <code>open</code> method is called.</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.util.tracker.BundleTracker.open--" xrefstyle="hyperlink"/> - Start tracking the bundles, callbacks can
          occur before this method is called.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Using a Bundle Tracker</title>

      <para>Once a <code>BundleTracker</code> object is opened, it begins
      tracking bundles immediately. A number of methods are available to the
      bundle developer to monitor the bundles that are being tracked. The
      <code>BundleTracker</code> class defines the following methods:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.util.tracker.BundleTracker.getBundles--" xrefstyle="hyperlink"/> - Returns an array of all the tracked
          bundles.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.util.tracker.BundleTracker.getObject-Bundle-" xrefstyle="hyperlink"/> - Returns the wrapper object that was
          returned from the <code>addingBundle</code> method.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.util.tracker.BundleTracker.remove-Bundle-" xrefstyle="hyperlink"/> - Removes the bundle from the tracked
          bundles. The <code>removedBundle</code> method is called when the
          bundle is not in the tracked map.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.util.tracker.BundleTracker.size--" xrefstyle="hyperlink"/> - Returns the number of bundles being
          tracked.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.util.tracker.BundleTracker.getTrackingCount--" xrefstyle="hyperlink"/> - A Bundle Tracker can have bundles added,
          modified, or removed at any moment in time. The
          <code>getTrackingCount</code> method is intended to efficiently
          detect changes in a Bundle Tracker. Every time the Bundle Tracker is
          changed, it must increase the tracking count.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.util.tracker.BundleTracker.isEmpty--" xrefstyle="hyperlink"/> - To detect that the tracker has no tracked
          bundles.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.util.tracker.BundleTracker.getTracked--" xrefstyle="hyperlink"/> - Return the tracked objects.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Customizing the Bundle Tracker class</title>

      <para>The behavior of the <code>BundleTracker</code> class can be
      customized either by providing a <code>BundleTrackerCustomizer</code>
      object when the <code>BundleTracker</code> object is constructed, or by
      sub-classing the <code>BundleTracker</code> class and overriding the
      <code>BundleTrackerCustomizer</code> methods on the
      <code>BundleTracker</code> class.</para>

      <para>The <code>BundleTrackerCustomizer</code> interface defines these
      methods:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="org.osgi.util.tracker.BundleTrackerCustomizer.addingBundle-Bundle-BundleEvent-" xrefstyle="hyperlink"/> - Called whenever a bundle is being added to
          the <code>BundleTracker</code> object. This method should return a
          wrapper object, which can be the <code>Bundle</code> object itself.
          If <code>null</code> is returned, the Bundle must not be further
          tracked.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.util.tracker.BundleTrackerCustomizer.modifiedBundle-Bundle-BundleEvent-T-" xrefstyle="hyperlink"/> - Called whenever a tracked bundle is
          modified. The object that is passed is the object returned from the
          <code>addingBundle</code> method, the wrapper object.</para>
        </listitem>

        <listitem>
          <para><xref linkend="org.osgi.util.tracker.BundleTrackerCustomizer.removedBundle-Bundle-BundleEvent-T-" xrefstyle="hyperlink"/> - Called whenever a tracked bundle is
          removed from the <code>BundleTracker</code> object. The passed
          object is the wrapper returned from the <code>addingBundle</code>
          method.</para>
        </listitem>
      </itemizedlist>

      <para>The <code>BundleEvent</code> object in the previous methods can be
      <code>null</code>.</para>

      <para>When a bundle is being added the OSGi Framework, or when a tracked
      bundle is modified or uninstalled from the OSGi Framework, the Bundle
      Tracker must call <code>addingBundle</code>,
      <code>modifiedBundle</code>, or <code>removedBundle</code>,
      respectively, on the <code>BundleTrackerCustomizer</code> object (if
      specified when the <code>BundleTracker</code> object was created);
      otherwise it must call these methods on itself, allowing them to be
      overridden in a subclass.</para>

      <para>The bundle developer can return a specialized object from
      <code>addingBundle</code> that differs from the <code>Bundle</code>
      object. This wrapper object could contain the <code>Bundle</code> object
      and any associated client specific information. This returned object is
      then used as the wrapper instead of the <code>Bundle</code> object. When
      the <code>removedBundle</code> method is called, the wrapper is passed
      as an argument.</para>
    </section>

    <section>
      <title>Extender Model</title>

      <para>The Bundle Tracker allows the implementation of extenders with
      surprisingly little effort. The following example checks a manifest
      header (Http-Mapper) in all active bundles to see if the bundle has
      resources that need to be mapped to the HTTP service. This extender
      enables bundles that have no code, just content.</para>

      <para>This example is implemented with a
      <code>BundleTrackerCustomizer</code> implementation, though sub-classing
      the <code>BundleTracker</code> class is slightly simpler because the
      open/close methods would be inherited, the tracker field is not
      necessary and it is not necessary to provide a dummy implementation of
      <code>modifiedBundle</code> method. However, the Service Tracker example
      already showed how to use inheritance.</para>

      <para>The Extender class must implement the customizer and declare
      fields for the Http Service and a Bundle Tracker.</para>

      <programlisting>public class Extender implements BundleTrackerCustomizer&lt;ExtenderContext&gt;{
    final HttpService                    http;
    final BundleTracker&lt;ExtenderContext&gt; tracker;</programlisting>

      <para>It is necessary to parse the Http-Mapper header. Regular
      expression allow this to be done very concise.</para>

      <programlisting>final static Pattern     HTTPMAPPER =
    Pattern.compile(
        "\\s*([-/\\w.]+)\\s*=\\s*([-/\\w.]+)\\s*");</programlisting>

      <para>The Bundle Tracker requires a specialized constructor. This
      example only works for <emphasis>active</emphasis> bundles. This implies
      that a bundle only provides contents when it is started, enabling an
      administrator to control the availability.</para>

      <programlisting>Extender(BundleContext context, HttpServicehttp) {
    tracker = new BundleTracker&lt;ExtenderContext&gt;(
        context,Bundle.ACTIVE, this );
    this.http = http;
}</programlisting>

      <para>The following method implements the callback from the Bundle
      Tracker when a new bundle is discovered. In this method a specialized
      <code>HttpContext</code> object is created that knows how to retrieve
      its resources from the bundle that was just discovered. This context is
      registered with the Http Service. If no header is found
      <code>null</code> is returned so that non-participating bundles are no
      longer tracked.</para>

      <programlisting>public ExtenderContext addingBundle(Bundlebundle,
    BundleEvent event) {
    String header = bundle.getHeaders()
        .get("Http-Mapper") + "";
    Matcher match = HTTPMAPPER.matcher(header);
    if (match.matches()) {
        try {
            ExtenderContext wrapper =
                new ExtenderContext(bundle, match.group(1));
            http.registerResources(
                match.group(1), // alias
                match.group(2), // resource path
                wrapper         // the http context
            );
            return wrapper;
        } catch (NamespaceException nspe) {
            // error is handled in the fall through
        }
    }
   System.err.println(
      "Invalid header for Http-Mapper: " + header);
   return null;
}</programlisting>

      <para>The <code>modifiedBundle</code> method does not have to be
      implemented because this example is not interested in state changes
      because the only state of interest is the <code>ACTIVE</code> state.
      Therefore, the remaining method left to implement is the
      <code>removedBundle</code> method. If the wrapper object is non-null
      then we need to unregister the alias to prevent collisions in the http
      namespace when the bundle is reinstalled or updated.</para>

      <programlisting>public void removedBundle(
    Bundle bundle, BundleEvent event,
    ExtenderContext wrapper) {
        http.unregister(wrapper.alias);
}</programlisting>

      <para>The remaining methods would be unnecessary if the
      <code>Extender</code> class had extended the <code>BundleTracker</code>
      class. The <code>BundleTrackerCustomizer</code> interface requires a
      dummy implementation of the <code>modifiedBundle</code> method:</para>

      <programlisting>public void modifiedBundle(
    Bundle bundle, BundleEvent event, ExtenderContext object){
    // Nothing to do
}</programlisting>

      <para>It is usually not a good idea to start a tracker in a constructor
      because opening a service tracker will immediately cause a number of
      callbacks for the existing bundles. If the <code>Extender</code> class
      was sub-classed, then this could call back the uninitialized sub class
      methods. It is therefore better to separate the initialization from the
      opening. There is therefore a need for an <code>open</code> and
      <code>close</code> method.</para>

      <programlisting>    public void close() {
        tracker.close();
    }
    public void open() {
        tracker.open();
    }
}</programlisting>

      <para>The previous example uses an <code>HttpContext</code> subclass
      that can retrieve resources from the target bundle:</para>

      <programlisting>public class ExtenderContext implements HttpContext{
    final Bundle bundle;
    final String alias;

    ExtenderContext(Bundle bundle, String alias) {
        this.bundle = bundle;
        this.alias = alias;
    }
    public boolean handleSecurity(
        HttpServletRequest rq, HttpServletResponse rsp) {
        return true;
    }
    public String getMimeType(String name) {
        return null;
    }
    public URL getResource(String name) {
        return bundle.getResource(name);
    }
}</programlisting>
    </section>
  </section>

  <section>
    <title>Security</title>

    <para>A tracker contains a <code>BundleContext</code> instance variable
    that is accessible to the methods in a subclass. A
    <code>BundleContext</code> object should never be given to other bundles
    because it is a <emphasis>capability</emphasis>. The framework makes
    allocations based on the bundle context with respect to security and
    resource management.</para>

    <para>The tracker implementations do not have a method to get the
    <code>BundleContext</code> object, however, subclasses should be careful
    not to provide such a method if the tracker is given to other
    bundles.</para>

    <para>The services that are being tracked are available via a
    <code>ServiceTracker</code>. These services are dependent on the
    <code>BundleContext</code> as well. It is therefore necessary to do a
    careful security analysis when <code>ServiceTracker</code> objects are
    given to other bundles. The same counts for the Bundle Tracker. It is
    strongly advised to not pass trackers to other bundles.</para>

    <section>
      <title>Synchronous Bundle Listener</title>

      <para>The Bundle Tracker uses the synchronous bundle listener because it
      is impossible to provide some of the guarantees the Bundle Tracker
      provides without handling the events synchronously. Synchronous events
      can block the complete system, therefore Synchronous Bundle Listeners
      require <code>AdminPermission[*,LISTENER]</code>. The wildcard * can be
      replaced with a specifier for the bundles that should be visible to the
      Bundle Tracker. See <xref linkend="framework.lifecycle.adminpermission"/> for more
      information.</para>

      <para>Code that calls the <code>open</code> and <code>close</code>
      methods of Bundle Trackers must therefore have the appropriate Admin
      Permission.</para>
    </section>
  </section>

  <section xreflabel="org.osgi.util.tracker" version="5" role="package" xml:id="org.osgi.util.tracker" xml:base="../../generated/javadoc/docbook/org.osgi.util.tracker.xml">
   <title>org.osgi.util.tracker</title>
   <info>
      <releaseinfo xml:id="org.osgi.util.tracker-version">Version 1.5</releaseinfo>
      <edition xml:id="org.osgi.util.tracker-version.number">1.5</edition>
   </info>
   <para>
Tracker Package Version 1.5.

 </para>
   <para>
 Bundles wishing to use this package must list the package in the
 Import-Package header of the bundle's manifest.

 </para>
   <para>
 Example import for consumers using the API in this package:
 </para>
   <para>
      <code>Import-Package: org.osgi.util.tracker; version="[1.5,2.0)"</code>
   </para>
   <section role="summary">
      <title>Summary</title>
      <itemizedlist>
         <listitem>
            <para>
               <link linkend="org.osgi.util.tracker.BundleTracker">
                  <code>BundleTracker</code>
               </link> -
The <code>BundleTracker</code> class simplifies tracking bundles much like the
 <code>ServiceTracker</code> simplifies tracking services.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.util.tracker.BundleTrackerCustomizer">
                  <code>BundleTrackerCustomizer</code>
               </link> -
The <code>BundleTrackerCustomizer</code> interface allows a <code>BundleTracker</code>
 to customize the <code>Bundle</code>s that are tracked.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.util.tracker.ServiceTracker">
                  <code>ServiceTracker</code>
               </link> -
The <code>ServiceTracker</code> class simplifies using services from the
 Framework's service registry.
   </para>
         </listitem>
         <listitem>
            <para>
               <link linkend="org.osgi.util.tracker.ServiceTrackerCustomizer">
                  <code>ServiceTrackerCustomizer</code>
               </link> -
The <code>ServiceTrackerCustomizer</code> interface allows a
 <code>ServiceTracker</code> to customize the service objects that are tracked.
   </para>
         </listitem>
      </itemizedlist>
   </section>
   <section xreflabel="BundleTracker" role="class" xml:id="org.osgi.util.tracker.BundleTracker">
      <title>public class BundleTracker&lt;T&gt;<?line-break?> implements BundleTrackerCustomizer&lt;T&gt;</title>
      <formalpara role="parameter">
         <title>&lt;T&gt;</title>
         <para>The type of the tracked object.</para>
      </formalpara>
      <para>
The <code>BundleTracker</code> class simplifies tracking bundles much like the
 <code>ServiceTracker</code> simplifies tracking services.
 </para>
      <para>
 A <code>BundleTracker</code> is constructed with state criteria and a
 <code>BundleTrackerCustomizer</code> object. A <code>BundleTracker</code> can use the
 <code>BundleTrackerCustomizer</code> to select which bundles are tracked and to
 create a customized object to be tracked with the bundle. The
 <code>BundleTracker</code> can then be opened to begin tracking all bundles whose
 state matches the specified state criteria.
 </para>
      <para>
 The <code>getBundles</code> method can be called to get the <code>Bundle</code> objects
 of the bundles being tracked. The <code>getObject</code> method can be called to
 get the customized object for a tracked bundle.
 </para>
      <para>
 The <code>BundleTracker</code> class is thread-safe. It does not call a
 <code>BundleTrackerCustomizer</code> while holding any locks.
 <code>BundleTrackerCustomizer</code> implementations must also be thread-safe.</para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.4</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section xreflabel="context" role="field" xml:id="org.osgi.util.tracker.BundleTracker.context">
         <title>protected final BundleContext context</title>
         <para>
The Bundle Context used by this <code>BundleTracker</code>.
   </para>
      </section>
      <section xreflabel="BundleTracker(BundleContext,int,BundleTrackerCustomizer)" role="method" xml:id="org.osgi.util.tracker.BundleTracker.BundleTracker-BundleContext-int-BundleTrackerCustomizer-">
         <title>public  BundleTracker(BundleContext context, int stateMask, BundleTrackerCustomizer&lt;T&gt; customizer)</title>
         <formalpara role="parameter">
            <title>context</title>
            <para>The <code>BundleContext</code> against which the tracking is
        done.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>stateMask</title>
            <para>The bit mask of the <code>OR</code>ing of the bundle states
        to be tracked.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>customizer</title>
            <para>The customizer object to call when bundles are added,
        modified, or removed in this <code>BundleTracker</code>. If customizer
        is <code>null</code>, then this <code>BundleTracker</code> will be used as
        the <code>BundleTrackerCustomizer</code> and this <code>BundleTracker</code>
        will call the <code>BundleTrackerCustomizer</code> methods on itself.</para>
         </formalpara>
         <para role="description">
Create a <code>BundleTracker</code> for bundles whose state is present in the
 specified state mask.

 </para>
         <para>
 Bundles whose state is present on the specified state mask will be
 tracked by this <code>BundleTracker</code>.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.framework.Bundle.getState--">Bundle.getState()</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="addingBundle(Bundle,BundleEvent)" role="method" xml:id="org.osgi.util.tracker.BundleTracker.addingBundle-Bundle-BundleEvent-">
         <title>public T addingBundle(Bundle bundle, BundleEvent event)</title>
         <formalpara role="parameter">
            <title>bundle</title>
            <para>The <code>Bundle</code> being added to this
        <code>BundleTracker</code> object.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>event</title>
            <para>The bundle event which caused this customizer method to be
        called or <code>null</code> if there is no bundle event associated with
        the call to this method.</para>
         </formalpara>
         <para role="description">
Default implementation of the
 <code>BundleTrackerCustomizer.addingBundle</code> method.

 </para>
         <para>
 This method is only called when this <code>BundleTracker</code> has been
 constructed with a <code>null BundleTrackerCustomizer</code> argument.

 </para>
         <para>
 This implementation simply returns the specified <code>Bundle</code>.

 </para>
         <para>
 This method can be overridden in a subclass to customize the object to be
 tracked for the bundle being added.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The specified bundle.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.util.tracker.BundleTrackerCustomizer.addingBundle-Bundle-BundleEvent-">BundleTrackerCustomizer.addingBundle(Bundle, BundleEvent)</link>
            </para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="close()" role="method" xml:id="org.osgi.util.tracker.BundleTracker.close--">
         <title>public void close()</title>
         <para role="description">
Close this <code>BundleTracker</code>.

 </para>
         <para>
 This method should be called when this <code>BundleTracker</code> should end
 the tracking of bundles.

 </para>
         <para>
 This implementation calls <link linkend="org.osgi.util.tracker.BundleTracker.getBundles--">getBundles()</link> to get the list of
 tracked bundles to remove.</para>
      </section>
      <section xreflabel="getBundles()" role="method" xml:id="org.osgi.util.tracker.BundleTracker.getBundles--">
         <title>public Bundle[] getBundles()</title>
         <para role="description">
Return an array of <code>Bundle</code>s for all bundles being tracked by this
 <code>BundleTracker</code>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An array of <code>Bundle</code>s or <code>null</code> if no bundles are
         being tracked.</para>
         </formalpara>
      </section>
      <section xreflabel="getObject(Bundle)" role="method" xml:id="org.osgi.util.tracker.BundleTracker.getObject-Bundle-">
         <title>public T getObject(Bundle bundle)</title>
         <formalpara role="parameter">
            <title>bundle</title>
            <para>The <code>Bundle</code> being tracked.</para>
         </formalpara>
         <para role="description">
Returns the customized object for the specified <code>Bundle</code> if the
 specified bundle is being tracked by this <code>BundleTracker</code>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The customized object for the specified <code>Bundle</code> or
         <code>null</code> if the specified <code>Bundle</code> is not being
         tracked.</para>
         </formalpara>
      </section>
      <section xreflabel="getTracked()" role="method" xml:id="org.osgi.util.tracker.BundleTracker.getTracked--">
         <title>public Map&lt;Bundle, T&gt; getTracked()</title>
         <para role="description">
Return a <code>Map</code> with the <code>Bundle</code>s and customized objects for
 all bundles being tracked by this <code>BundleTracker</code>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A <code>Map</code> with the <code>Bundle</code>s and customized objects for
         all services being tracked by this <code>BundleTracker</code>. If no
         bundles are being tracked, then the returned map is empty.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="getTrackingCount()" role="method" xml:id="org.osgi.util.tracker.BundleTracker.getTrackingCount--">
         <title>public int getTrackingCount()</title>
         <para role="description">
Returns the tracking count for this <code>BundleTracker</code>.

 The tracking count is initialized to 0 when this <code>BundleTracker</code> is
 opened. Every time a bundle is added, modified or removed from this
 <code>BundleTracker</code> the tracking count is incremented.

 </para>
         <para>
 The tracking count can be used to determine if this <code>BundleTracker</code>
 has added, modified or removed a bundle by comparing a tracking count
 value previously collected with the current tracking count value. If the
 value has not changed, then no bundle has been added, modified or removed
 from this <code>BundleTracker</code> since the previous tracking count was
 collected.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The tracking count for this <code>BundleTracker</code> or -1 if this
         <code>BundleTracker</code> is not open.</para>
         </formalpara>
      </section>
      <section xreflabel="isEmpty()" role="method" xml:id="org.osgi.util.tracker.BundleTracker.isEmpty--">
         <title>public boolean isEmpty()</title>
         <para role="description">
Return if this <code>BundleTracker</code> is empty.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if this <code>BundleTracker</code> is not tracking any
         bundles.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="modifiedBundle(Bundle,BundleEvent,T)" role="method" xml:id="org.osgi.util.tracker.BundleTracker.modifiedBundle-Bundle-BundleEvent-T-">
         <title>public void modifiedBundle(Bundle bundle, BundleEvent event, T object)</title>
         <formalpara role="parameter">
            <title>bundle</title>
            <para>The <code>Bundle</code> whose state has been modified.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>event</title>
            <para>The bundle event which caused this customizer method to be
        called or <code>null</code> if there is no bundle event associated with
        the call to this method.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>object</title>
            <para>The customized object for the specified Bundle.</para>
         </formalpara>
         <para role="description">
Default implementation of the
 <code>BundleTrackerCustomizer.modifiedBundle</code> method.

 </para>
         <para>
 This method is only called when this <code>BundleTracker</code> has been
 constructed with a <code>null BundleTrackerCustomizer</code> argument.

 </para>
         <para>
 This implementation does nothing.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.util.tracker.BundleTrackerCustomizer.modifiedBundle-Bundle-BundleEvent-T-">BundleTrackerCustomizer.modifiedBundle(Bundle, BundleEvent, Object)</link>
            </para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="open()" role="method" xml:id="org.osgi.util.tracker.BundleTracker.open--">
         <title>public void open()</title>
         <para role="description">
Open this <code>BundleTracker</code> and begin tracking bundles.

 </para>
         <para>
 Bundle which match the state criteria specified when this
 <code>BundleTracker</code> was created are now tracked by this
 <code>BundleTracker</code>.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If the <code>BundleContext</code> with
         which this <code>BundleTracker</code> was created is no longer valid.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>SecurityException</code>– If the caller and this class do not
         have the appropriate
         <code>AdminPermission[context bundle,LISTENER]</code>, and the Java
         Runtime Environment supports permissions.</para>
         </formalpara>
      </section>
      <section xreflabel="remove(Bundle)" role="method" xml:id="org.osgi.util.tracker.BundleTracker.remove-Bundle-">
         <title>public void remove(Bundle bundle)</title>
         <formalpara role="parameter">
            <title>bundle</title>
            <para>The <code>Bundle</code> to be removed.</para>
         </formalpara>
         <para role="description">
Remove a bundle from this <code>BundleTracker</code>.

 The specified bundle will be removed from this <code>BundleTracker</code> . If
 the specified bundle was being tracked then the
 <code>BundleTrackerCustomizer.removedBundle</code> method will be called for
 that bundle.
   </para>
      </section>
      <section xreflabel="removedBundle(Bundle,BundleEvent,T)" role="method" xml:id="org.osgi.util.tracker.BundleTracker.removedBundle-Bundle-BundleEvent-T-">
         <title>public void removedBundle(Bundle bundle, BundleEvent event, T object)</title>
         <formalpara role="parameter">
            <title>bundle</title>
            <para>The <code>Bundle</code> being removed.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>event</title>
            <para>The bundle event which caused this customizer method to be
        called or <code>null</code> if there is no bundle event associated with
        the call to this method.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>object</title>
            <para>The customized object for the specified bundle.</para>
         </formalpara>
         <para role="description">
Default implementation of the
 <code>BundleTrackerCustomizer.removedBundle</code> method.

 </para>
         <para>
 This method is only called when this <code>BundleTracker</code> has been
 constructed with a <code>null BundleTrackerCustomizer</code> argument.

 </para>
         <para>
 This implementation does nothing.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.util.tracker.BundleTrackerCustomizer.removedBundle-Bundle-BundleEvent-T-">BundleTrackerCustomizer.removedBundle(Bundle, BundleEvent, Object)</link>
            </para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="size()" role="method" xml:id="org.osgi.util.tracker.BundleTracker.size--">
         <title>public int size()</title>
         <para role="description">
Return the number of bundles being tracked by this <code>BundleTracker</code>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The number of bundles being tracked.</para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="BundleTrackerCustomizer" role="class" xml:id="org.osgi.util.tracker.BundleTrackerCustomizer">
      <title>public interface BundleTrackerCustomizer&lt;T&gt;</title>
      <formalpara role="parameter">
         <title>&lt;T&gt;</title>
         <para>The type of the tracked object.</para>
      </formalpara>
      <para>
The <code>BundleTrackerCustomizer</code> interface allows a <code>BundleTracker</code>
 to customize the <code>Bundle</code>s that are tracked. A
 <code>BundleTrackerCustomizer</code> is called when a bundle is being added to a
 <code>BundleTracker</code>. The <code>BundleTrackerCustomizer</code> can then return an
 object for the tracked bundle. A <code>BundleTrackerCustomizer</code> is also
 called when a tracked bundle is modified or has been removed from a
 <code>BundleTracker</code>.

 </para>
      <para>
 The methods in this interface may be called as the result of a
 <code>BundleEvent</code> being received by a <code>BundleTracker</code>. Since
 <code>BundleEvent</code>s are received synchronously by the <code>BundleTracker</code>,
 it is highly recommended that implementations of these methods do not alter
 bundle states while being synchronized on any object.

 </para>
      <para>
 The <code>BundleTracker</code> class is thread-safe. It does not call a
 <code>BundleTrackerCustomizer</code> while holding any locks.
 <code>BundleTrackerCustomizer</code> implementations must also be thread-safe.</para>
      <formalpara role="parameter">
         <title>Since</title>
         <para>1.4</para>
      </formalpara>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section xreflabel="addingBundle(Bundle,BundleEvent)" role="method" xml:id="org.osgi.util.tracker.BundleTrackerCustomizer.addingBundle-Bundle-BundleEvent-">
         <title>public T addingBundle(Bundle bundle, BundleEvent event)</title>
         <formalpara role="parameter">
            <title>bundle</title>
            <para>The <code>Bundle</code> being added to the <code>BundleTracker</code>
        .</para>
         </formalpara>
         <formalpara role="parameter">
            <title>event</title>
            <para>The bundle event which caused this customizer method to be
        called or <code>null</code> if there is no bundle event associated with
        the call to this method.</para>
         </formalpara>
         <para role="description">
A bundle is being added to the <code>BundleTracker</code>.

 </para>
         <para>
 This method is called before a bundle which matched the search parameters
 of the <code>BundleTracker</code> is added to the <code>BundleTracker</code>. This
 method should return the object to be tracked for the specified
 <code>Bundle</code>. The returned object is stored in the
 <code>BundleTracker</code> and is available from the
 <link linkend="org.osgi.util.tracker.BundleTracker.getObject-Bundle-">getObject</link> method.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The object to be tracked for the specified <code>Bundle</code> object
         or <code>null</code> if the specified <code>Bundle</code> object should not
         be tracked.</para>
         </formalpara>
      </section>
      <section xreflabel="modifiedBundle(Bundle,BundleEvent,T)" role="method" xml:id="org.osgi.util.tracker.BundleTrackerCustomizer.modifiedBundle-Bundle-BundleEvent-T-">
         <title>public void modifiedBundle(Bundle bundle, BundleEvent event, T object)</title>
         <formalpara role="parameter">
            <title>bundle</title>
            <para>The <code>Bundle</code> whose state has been modified.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>event</title>
            <para>The bundle event which caused this customizer method to be
        called or <code>null</code> if there is no bundle event associated with
        the call to this method.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>object</title>
            <para>The tracked object for the specified bundle.</para>
         </formalpara>
         <para role="description">
A bundle tracked by the <code>BundleTracker</code> has been modified.

 </para>
         <para>
 This method is called when a bundle being tracked by the
 <code>BundleTracker</code> has had its state modified.</para>
      </section>
      <section xreflabel="removedBundle(Bundle,BundleEvent,T)" role="method" xml:id="org.osgi.util.tracker.BundleTrackerCustomizer.removedBundle-Bundle-BundleEvent-T-">
         <title>public void removedBundle(Bundle bundle, BundleEvent event, T object)</title>
         <formalpara role="parameter">
            <title>bundle</title>
            <para>The <code>Bundle</code> that has been removed.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>event</title>
            <para>The bundle event which caused this customizer method to be
        called or <code>null</code> if there is no bundle event associated with
        the call to this method.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>object</title>
            <para>The tracked object for the specified bundle.</para>
         </formalpara>
         <para role="description">
A bundle tracked by the <code>BundleTracker</code> has been removed.

 </para>
         <para>
 This method is called after a bundle is no longer being tracked by the
 <code>BundleTracker</code>.</para>
      </section>
   </section>
   <section xreflabel="ServiceTracker" role="class" xml:id="org.osgi.util.tracker.ServiceTracker">
      <title>public class ServiceTracker&lt;S, T&gt;<?line-break?> implements ServiceTrackerCustomizer&lt;S, T&gt;</title>
      <formalpara role="parameter">
         <title>&lt;S&gt;</title>
         <para>The type of the service being tracked.</para>
      </formalpara>
      <formalpara role="parameter">
         <title>&lt;T&gt;</title>
         <para>The type of the tracked object.</para>
      </formalpara>
      <para>
The <code>ServiceTracker</code> class simplifies using services from the
 Framework's service registry.
 </para>
      <para>
 A <code>ServiceTracker</code> object is constructed with search criteria and a
 <code>ServiceTrackerCustomizer</code> object. A <code>ServiceTracker</code> can use a
 <code>ServiceTrackerCustomizer</code> to customize the service objects to be
 tracked. The <code>ServiceTracker</code> can then be opened to begin tracking all
 services in the Framework's service registry that match the specified search
 criteria. The <code>ServiceTracker</code> correctly handles all of the details of
 listening to <code>ServiceEvent</code>s and getting and ungetting services.
 </para>
      <para>
 The <code>getServiceReferences</code> method can be called to get references to
 the services being tracked. The <code>getService</code> and <code>getServices</code>
 methods can be called to get the service objects for the tracked service.
 </para>
      <para>
 The <code>ServiceTracker</code> class is thread-safe. It does not call a
 <code>ServiceTrackerCustomizer</code> while holding any locks.
 <code>ServiceTrackerCustomizer</code> implementations must also be thread-safe.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section xreflabel="context" role="field" xml:id="org.osgi.util.tracker.ServiceTracker.context">
         <title>protected final BundleContext context</title>
         <para>
The Bundle Context used by this <code>ServiceTracker</code>.
   </para>
      </section>
      <section xreflabel="filter" role="field" xml:id="org.osgi.util.tracker.ServiceTracker.filter">
         <title>protected final Filter filter</title>
         <para>
The Filter used by this <code>ServiceTracker</code> which specifies the search
 criteria for the services to track.
   </para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section xreflabel="ServiceTracker(BundleContext,ServiceReference,ServiceTrackerCustomizer)" role="method" xml:id="org.osgi.util.tracker.ServiceTracker.ServiceTracker-BundleContext-ServiceReference-ServiceTrackerCustomizer-">
         <title>public  ServiceTracker(BundleContext context, ServiceReference&lt;S&gt; reference, ServiceTrackerCustomizer&lt;S, T&gt; customizer)</title>
         <formalpara role="parameter">
            <title>context</title>
            <para>The <code>BundleContext</code> against which the tracking is
        done.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>reference</title>
            <para>The <code>ServiceReference</code> for the service to be
        tracked.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>customizer</title>
            <para>The customizer object to call when services are added,
        modified, or removed in this <code>ServiceTracker</code>. If customizer
        is <code>null</code>, then this <code>ServiceTracker</code> will be used as
        the <code>ServiceTrackerCustomizer</code> and this
        <code>ServiceTracker</code> will call the
        <code>ServiceTrackerCustomizer</code> methods on itself.</para>
         </formalpara>
         <para role="description">
Create a <code>ServiceTracker</code> on the specified <code>ServiceReference</code>
 .

 </para>
         <para>
 The service referenced by the specified <code>ServiceReference</code> will be
 tracked by this <code>ServiceTracker</code>.</para>
      </section>
      <section xreflabel="ServiceTracker(BundleContext,String,ServiceTrackerCustomizer)" role="method" xml:id="org.osgi.util.tracker.ServiceTracker.ServiceTracker-BundleContext-String-ServiceTrackerCustomizer-">
         <title>public  ServiceTracker(BundleContext context, String clazz, ServiceTrackerCustomizer&lt;S, T&gt; customizer)</title>
         <formalpara role="parameter">
            <title>context</title>
            <para>The <code>BundleContext</code> against which the tracking is
        done.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>clazz</title>
            <para>The class name of the services to be tracked.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>customizer</title>
            <para>The customizer object to call when services are added,
        modified, or removed in this <code>ServiceTracker</code>. If customizer
        is <code>null</code>, then this <code>ServiceTracker</code> will be used as
        the <code>ServiceTrackerCustomizer</code> and this
        <code>ServiceTracker</code> will call the
        <code>ServiceTrackerCustomizer</code> methods on itself.</para>
         </formalpara>
         <para role="description">
Create a <code>ServiceTracker</code> on the specified class name.

 </para>
         <para>
 Services registered under the specified class name will be tracked by
 this <code>ServiceTracker</code>.</para>
      </section>
      <section xreflabel="ServiceTracker(BundleContext,Filter,ServiceTrackerCustomizer)" role="method" xml:id="org.osgi.util.tracker.ServiceTracker.ServiceTracker-BundleContext-Filter-ServiceTrackerCustomizer-">
         <title>public  ServiceTracker(BundleContext context, Filter filter, ServiceTrackerCustomizer&lt;S, T&gt; customizer)</title>
         <formalpara role="parameter">
            <title>context</title>
            <para>The <code>BundleContext</code> against which the tracking is
        done.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>filter</title>
            <para>The <code>Filter</code> to select the services to be tracked.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>customizer</title>
            <para>The customizer object to call when services are added,
        modified, or removed in this <code>ServiceTracker</code>. If customizer
        is null, then this <code>ServiceTracker</code> will be used as the
        <code>ServiceTrackerCustomizer</code> and this <code>ServiceTracker</code>
        will call the <code>ServiceTrackerCustomizer</code> methods on itself.</para>
         </formalpara>
         <para role="description">
Create a <code>ServiceTracker</code> on the specified <code>Filter</code> object.

 </para>
         <para>
 Services which match the specified <code>Filter</code> object will be tracked
 by this <code>ServiceTracker</code>.</para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section xreflabel="ServiceTracker(BundleContext,Class,ServiceTrackerCustomizer)" role="method" xml:id="org.osgi.util.tracker.ServiceTracker.ServiceTracker-BundleContext-Class-ServiceTrackerCustomizer-">
         <title>public  ServiceTracker(BundleContext context, Class&lt;S&gt; clazz, ServiceTrackerCustomizer&lt;S, T&gt; customizer)</title>
         <formalpara role="parameter">
            <title>context</title>
            <para>The <code>BundleContext</code> against which the tracking is
        done.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>clazz</title>
            <para>The class of the services to be tracked.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>customizer</title>
            <para>The customizer object to call when services are added,
        modified, or removed in this <code>ServiceTracker</code>. If customizer
        is <code>null</code>, then this <code>ServiceTracker</code> will be used as
        the <code>ServiceTrackerCustomizer</code> and this
        <code>ServiceTracker</code> will call the
        <code>ServiceTrackerCustomizer</code> methods on itself.</para>
         </formalpara>
         <para role="description">
Create a <code>ServiceTracker</code> on the specified class.

 </para>
         <para>
 Services registered under the name of the specified class will be tracked
 by this <code>ServiceTracker</code>.</para>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="addingService(ServiceReference)" role="method" xml:id="org.osgi.util.tracker.ServiceTracker.addingService-ServiceReference-">
         <title>public T addingService(ServiceReference&lt;S&gt; reference)</title>
         <formalpara role="parameter">
            <title>reference</title>
            <para>The reference to the service being added to this
            <code>ServiceTracker</code>.</para>
         </formalpara>
         <para role="description">
Default implementation of the
 <code>ServiceTrackerCustomizer.addingService</code> method.
 </para>
         <para>
 This method is only called when this <code>ServiceTracker</code> has been
 constructed with a <code>null ServiceTrackerCustomizer</code> argument.
 </para>
         <para>
 This implementation returns the result of calling <code>getService</code>, on
 the <code>BundleContext</code> with which this <code>ServiceTracker</code> was
 created, passing the specified <code>ServiceReference</code>.
 </para>
         <para>
 This method can be overridden in a subclass to customize the service
 object to be tracked for the service being added. In that case, take care
 not to rely on the default implementation of
 <link linkend="org.osgi.util.tracker.ServiceTracker.removedService-ServiceReference-T-">removedService</link> to unget
 the service.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The service object to be tracked for the service added to this
         <code>ServiceTracker</code>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.util.tracker.ServiceTrackerCustomizer.addingService-ServiceReference-">ServiceTrackerCustomizer.addingService(ServiceReference)</link>
            </para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="close()" role="method" xml:id="org.osgi.util.tracker.ServiceTracker.close--">
         <title>public void close()</title>
         <para role="description">
Close this <code>ServiceTracker</code>.

 </para>
         <para>
 This method should be called when this <code>ServiceTracker</code> should end
 the tracking of services.

 </para>
         <para>
 This implementation calls <link linkend="org.osgi.util.tracker.ServiceTracker.getServiceReferences--">getServiceReferences()</link> to get the list
 of tracked services to remove.</para>
      </section>
      <section xreflabel="getService(ServiceReference)" role="method" xml:id="org.osgi.util.tracker.ServiceTracker.getService-ServiceReference-">
         <title>public T getService(ServiceReference&lt;S&gt; reference)</title>
         <formalpara role="parameter">
            <title>reference</title>
            <para>The reference to the desired service.</para>
         </formalpara>
         <para role="description">
Returns the service object for the specified <code>ServiceReference</code> if
 the specified referenced service is being tracked by this
 <code>ServiceTracker</code>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A service object or <code>null</code> if the service referenced by the
         specified <code>ServiceReference</code> is not being tracked.</para>
         </formalpara>
      </section>
      <section xreflabel="getService()" role="method" xml:id="org.osgi.util.tracker.ServiceTracker.getService--">
         <title>public T getService()</title>
         <para role="description">
Returns a service object for one of the services being tracked by this
 <code>ServiceTracker</code>.

 </para>
         <para>
 If any services are being tracked, this implementation returns the result
 of calling <code>getService(getServiceReference())</code>.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A service object or <code>null</code> if no services are being
         tracked.</para>
         </formalpara>
      </section>
      <section xreflabel="getServiceReference()" role="method" xml:id="org.osgi.util.tracker.ServiceTracker.getServiceReference--">
         <title>public ServiceReference&lt;S&gt; getServiceReference()</title>
         <para role="description">
Returns a <code>ServiceReference</code> for one of the services being tracked
 by this <code>ServiceTracker</code>.

 </para>
         <para>
 If multiple services are being tracked, the service with the highest
 ranking (as specified in its <code>service.ranking</code> property) is
 returned. If there is a tie in ranking, the service with the lowest
 service id (as specified in its <code>service.id</code> property); that is,
 the service that was registered first is returned. This is the same
 algorithm used by <code>BundleContext.getServiceReference</code>.

 </para>
         <para>
 This implementation calls <link linkend="org.osgi.util.tracker.ServiceTracker.getServiceReferences--">getServiceReferences()</link> to get the list
 of references for the tracked services.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A <code>ServiceReference</code> or <code>null</code> if no services are
         being tracked.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.1</para>
         </formalpara>
      </section>
      <section xreflabel="getServiceReferences()" role="method" xml:id="org.osgi.util.tracker.ServiceTracker.getServiceReferences--">
         <title>public ServiceReference&lt;S&gt;[] getServiceReferences()</title>
         <para role="description">
Return an array of <code>ServiceReference</code>s for all services being
 tracked by this <code>ServiceTracker</code>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Array of <code>ServiceReference</code>s or <code>null</code> if no services
         are being tracked.</para>
         </formalpara>
      </section>
      <section xreflabel="getServices()" role="method" xml:id="org.osgi.util.tracker.ServiceTracker.getServices--">
         <title>public Object[] getServices()</title>
         <para role="description">
Return an array of service objects for all services being tracked by this
 <code>ServiceTracker</code>.

 </para>
         <para>
 This implementation calls <link linkend="org.osgi.util.tracker.ServiceTracker.getServiceReferences--">getServiceReferences()</link> to get the list
 of references for the tracked services and then calls
 <link linkend="org.osgi.util.tracker.ServiceTracker.getService-ServiceReference-">getService(ServiceReference)</link> for each reference to get the
 tracked service object.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An array of service objects or <code>null</code> if no services are
         being tracked.</para>
         </formalpara>
      </section>
      <section xreflabel="getServices(T[])" role="method" xml:id="org.osgi.util.tracker.ServiceTracker.getServices-T---">
         <title>public T[] getServices(T[] array)</title>
         <formalpara role="parameter">
            <title>array</title>
            <para>An array into which the tracked service objects will be
        stored, if the array is large enough.</para>
         </formalpara>
         <para role="description">
Return an array of service objects for all services being tracked by this
 <code>ServiceTracker</code>. The runtime type of the returned array is that of
 the specified array.

 </para>
         <para>
 This implementation calls <link linkend="org.osgi.util.tracker.ServiceTracker.getServiceReferences--">getServiceReferences()</link> to get the list
 of references for the tracked services and then calls
 <link linkend="org.osgi.util.tracker.ServiceTracker.getService-ServiceReference-">getService(ServiceReference)</link> for each reference to get the
 tracked service object.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>An array of service objects being tracked. If the specified array
         is large enough to hold the result, then the specified array is
         returned. If the specified array is longer then necessary to hold
         the result, the array element after the last service object is
         set to <code>null</code>. If the specified array is not large enough
         to hold the result, a new array is created and returned.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="getTracked()" role="method" xml:id="org.osgi.util.tracker.ServiceTracker.getTracked--">
         <title>public SortedMap&lt;ServiceReference&lt;S&gt;, T&gt; getTracked()</title>
         <para role="description">
Return a <code>SortedMap</code> of the <code>ServiceReference</code>s and service
 objects for all services being tracked by this <code>ServiceTracker</code>.
 The map is sorted in reverse natural order of <code>ServiceReference</code>.
 That is, the first entry is the service with the highest ranking and the
 lowest service id.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>A <code>SortedMap</code> with the <code>ServiceReference</code>s and
         service objects for all services being tracked by this
         <code>ServiceTracker</code>. If no services are being tracked, then
         the returned map is empty.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="getTrackingCount()" role="method" xml:id="org.osgi.util.tracker.ServiceTracker.getTrackingCount--">
         <title>public int getTrackingCount()</title>
         <para role="description">
Returns the tracking count for this <code>ServiceTracker</code>.

 The tracking count is initialized to 0 when this <code>ServiceTracker</code>
 is opened. Every time a service is added, modified or removed from this
 <code>ServiceTracker</code>, the tracking count is incremented.

 </para>
         <para>
 The tracking count can be used to determine if this
 <code>ServiceTracker</code> has added, modified or removed a service by
 comparing a tracking count value previously collected with the current
 tracking count value. If the value has not changed, then no service has
 been added, modified or removed from this <code>ServiceTracker</code> since
 the previous tracking count was collected.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The tracking count for this <code>ServiceTracker</code> or -1 if this
         <code>ServiceTracker</code> is not open.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.2</para>
         </formalpara>
      </section>
      <section xreflabel="isEmpty()" role="method" xml:id="org.osgi.util.tracker.ServiceTracker.isEmpty--">
         <title>public boolean isEmpty()</title>
         <para role="description">
Return if this <code>ServiceTracker</code> is empty.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>
               <code>true</code> if this <code>ServiceTracker</code> is not tracking any
         services.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.5</para>
         </formalpara>
      </section>
      <section xreflabel="modifiedService(ServiceReference,T)" role="method" xml:id="org.osgi.util.tracker.ServiceTracker.modifiedService-ServiceReference-T-">
         <title>public void modifiedService(ServiceReference&lt;S&gt; reference, T service)</title>
         <formalpara role="parameter">
            <title>reference</title>
            <para>The reference to modified service.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>service</title>
            <para>The service object for the modified service.</para>
         </formalpara>
         <para role="description">
Default implementation of the
 <code>ServiceTrackerCustomizer.modifiedService</code> method.

 </para>
         <para>
 This method is only called when this <code>ServiceTracker</code> has been
 constructed with a <code>null ServiceTrackerCustomizer</code> argument.

 </para>
         <para>
 This implementation does nothing.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.util.tracker.ServiceTrackerCustomizer.modifiedService-ServiceReference-T-">ServiceTrackerCustomizer.modifiedService(ServiceReference, Object)</link>
            </para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="open()" role="method" xml:id="org.osgi.util.tracker.ServiceTracker.open--">
         <title>public void open()</title>
         <para role="description">
Open this <code>ServiceTracker</code> and begin tracking services.

 </para>
         <para>
 This implementation calls <code>open(false)</code>.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If the <code>BundleContext</code> with
         which this <code>ServiceTracker</code> was created is no longer valid.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.util.tracker.ServiceTracker.open-boolean-">open(boolean)</link>
            </para>
         </formalpara>
      </section>
      <section xreflabel="open(boolean)" role="method" xml:id="org.osgi.util.tracker.ServiceTracker.open-boolean-">
         <title>public void open(boolean trackAllServices)</title>
         <formalpara role="parameter">
            <title>trackAllServices</title>
            <para>If <code>true</code>, then this <code>ServiceTracker</code>
        will track all matching services regardless of class loader
        accessibility. If <code>false</code>, then this <code>ServiceTracker</code>
        will only track matching services which are class loader
        accessible to the bundle whose <code>BundleContext</code> is used by
        this <code>ServiceTracker</code>.</para>
         </formalpara>
         <para role="description">
Open this <code>ServiceTracker</code> and begin tracking services.

 </para>
         <para>
 Services which match the search criteria specified when this
 <code>ServiceTracker</code> was created are now tracked by this
 <code>ServiceTracker</code>.</para>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalStateException</code>– If the <code>BundleContext</code> with
         which this <code>ServiceTracker</code> was created is no longer valid.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Since</title>
            <para>1.3</para>
         </formalpara>
      </section>
      <section xreflabel="remove(ServiceReference)" role="method" xml:id="org.osgi.util.tracker.ServiceTracker.remove-ServiceReference-">
         <title>public void remove(ServiceReference&lt;S&gt; reference)</title>
         <formalpara role="parameter">
            <title>reference</title>
            <para>The reference to the service to be removed.</para>
         </formalpara>
         <para role="description">
Remove a service from this <code>ServiceTracker</code>.

 The specified service will be removed from this <code>ServiceTracker</code>.
 If the specified service was being tracked then the
 <code>ServiceTrackerCustomizer.removedService</code> method will be called for
 that service.
   </para>
      </section>
      <section xreflabel="removedService(ServiceReference,T)" role="method" xml:id="org.osgi.util.tracker.ServiceTracker.removedService-ServiceReference-T-">
         <title>public void removedService(ServiceReference&lt;S&gt; reference, T service)</title>
         <formalpara role="parameter">
            <title>reference</title>
            <para>The reference to removed service.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>service</title>
            <para>The service object for the removed service.</para>
         </formalpara>
         <para role="description">
Default implementation of the
 <code>ServiceTrackerCustomizer.removedService</code> method.
 </para>
         <para>
 This method is only called when this <code>ServiceTracker</code> has been
 constructed with a <code>null ServiceTrackerCustomizer</code> argument.
 </para>
         <para>
 This implementation calls <code>ungetService</code>, on the
 <code>BundleContext</code> with which this <code>ServiceTracker</code> was created,
 passing the specified <code>ServiceReference</code>.
 </para>
         <para>
 This method can be overridden in a subclass. If the default
 implementation of <link linkend="org.osgi.util.tracker.ServiceTracker.addingService-ServiceReference-">addingService</link>
 method was used, this method must unget the service.</para>
         <formalpara role="parameter">
            <title>See Also</title>
            <para>
               <link linkend="org.osgi.util.tracker.ServiceTrackerCustomizer.removedService-ServiceReference-T-">ServiceTrackerCustomizer.removedService(ServiceReference, Object)</link>
            </para>
         </formalpara>
         <para/>
      </section>
      <section xreflabel="size()" role="method" xml:id="org.osgi.util.tracker.ServiceTracker.size--">
         <title>public int size()</title>
         <para role="description">
Return the number of services being tracked by this
 <code>ServiceTracker</code>.
   </para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The number of services being tracked.</para>
         </formalpara>
      </section>
      <section xreflabel="waitForService(long)" role="method" xml:id="org.osgi.util.tracker.ServiceTracker.waitForService-long-">
         <title>public T waitForService(long timeout) throws InterruptedException</title>
         <formalpara role="parameter">
            <title>timeout</title>
            <para>The time interval in milliseconds to wait. If zero, the
        method will wait indefinitely.</para>
         </formalpara>
         <para role="description">
Wait for at least one service to be tracked by this
 <code>ServiceTracker</code>. This method will also return when this
 <code>ServiceTracker</code> is closed.

 </para>
         <para>
 It is strongly recommended that <code>waitForService</code> is not used during
 the calling of the <code>BundleActivator</code> methods.
 <code>BundleActivator</code> methods are expected to complete in a short
 period of time.

 </para>
         <para>
 This implementation calls <link linkend="org.osgi.util.tracker.ServiceTracker.getService--">getService()</link> to determine if a service
 is being tracked.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>Returns the result of <link linkend="org.osgi.util.tracker.ServiceTracker.getService--">getService()</link>.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>InterruptedException</code>– If another thread has interrupted the
         current thread.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>Throws</title>
            <para>
               <code>IllegalArgumentException</code>– If the value of timeout is negative.</para>
         </formalpara>
      </section>
   </section>
   <section xreflabel="ServiceTrackerCustomizer" role="class" xml:id="org.osgi.util.tracker.ServiceTrackerCustomizer">
      <title>public interface ServiceTrackerCustomizer&lt;S, T&gt;</title>
      <formalpara role="parameter">
         <title>&lt;S&gt;</title>
         <para>The type of the service being tracked.</para>
      </formalpara>
      <formalpara role="parameter">
         <title>&lt;T&gt;</title>
         <para>The type of the tracked object.</para>
      </formalpara>
      <para>
The <code>ServiceTrackerCustomizer</code> interface allows a
 <code>ServiceTracker</code> to customize the service objects that are tracked. A
 <code>ServiceTrackerCustomizer</code> is called when a service is being added to a
 <code>ServiceTracker</code>. The <code>ServiceTrackerCustomizer</code> can then return
 an object for the tracked service. A <code>ServiceTrackerCustomizer</code> is also
 called when a tracked service is modified or has been removed from a
 <code>ServiceTracker</code>.

 </para>
      <para>
 The methods in this interface may be called as the result of a
 <code>ServiceEvent</code> being received by a <code>ServiceTracker</code>. Since
 <code>ServiceEvent</code>s are synchronously delivered by the Framework, it is
 highly recommended that implementations of these methods do not register (
 <code>BundleContext.registerService</code>), modify (
 <code>ServiceRegistration.setProperties</code>) or unregister (
 <code>ServiceRegistration.unregister</code>) a service while being synchronized on
 any object.

 </para>
      <para>
 The <code>ServiceTracker</code> class is thread-safe. It does not call a
 <code>ServiceTrackerCustomizer</code> while holding any locks.
 <code>ServiceTrackerCustomizer</code> implementations must also be thread-safe.</para>
      <formalpara role="parameter">
         <title>Concurrency</title>
         <para>Thread-safe </para>
      </formalpara>
      <section xreflabel="addingService(ServiceReference)" role="method" xml:id="org.osgi.util.tracker.ServiceTrackerCustomizer.addingService-ServiceReference-">
         <title>public T addingService(ServiceReference&lt;S&gt; reference)</title>
         <formalpara role="parameter">
            <title>reference</title>
            <para>The reference to the service being added to the
        <code>ServiceTracker</code>.</para>
         </formalpara>
         <para role="description">
A service is being added to the <code>ServiceTracker</code>.

 </para>
         <para>
 This method is called before a service which matched the search
 parameters of the <code>ServiceTracker</code> is added to the
 <code>ServiceTracker</code>. This method should return the service object to
 be tracked for the specified <code>ServiceReference</code>. The returned
 service object is stored in the <code>ServiceTracker</code> and is available
 from the <code>getService</code> and <code>getServices</code> methods.</para>
         <formalpara role="parameter">
            <title>Returns</title>
            <para>The service object to be tracked for the specified referenced
         service or <code>null</code> if the specified referenced service
         should not be tracked.</para>
         </formalpara>
      </section>
      <section xreflabel="modifiedService(ServiceReference,T)" role="method" xml:id="org.osgi.util.tracker.ServiceTrackerCustomizer.modifiedService-ServiceReference-T-">
         <title>public void modifiedService(ServiceReference&lt;S&gt; reference, T service)</title>
         <formalpara role="parameter">
            <title>reference</title>
            <para>The reference to the service that has been modified.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>service</title>
            <para>The service object for the specified referenced service.</para>
         </formalpara>
         <para role="description">
A service tracked by the <code>ServiceTracker</code> has been modified.

 </para>
         <para>
 This method is called when a service being tracked by the
 <code>ServiceTracker</code> has had it properties modified.</para>
      </section>
      <section xreflabel="removedService(ServiceReference,T)" role="method" xml:id="org.osgi.util.tracker.ServiceTrackerCustomizer.removedService-ServiceReference-T-">
         <title>public void removedService(ServiceReference&lt;S&gt; reference, T service)</title>
         <formalpara role="parameter">
            <title>reference</title>
            <para>The reference to the service that has been removed.</para>
         </formalpara>
         <formalpara role="parameter">
            <title>service</title>
            <para>The service object for the specified referenced service.</para>
         </formalpara>
         <para role="description">
A service tracked by the <code>ServiceTracker</code> has been removed.

 </para>
         <para>
 This method is called after a service is no longer being tracked by the
 <code>ServiceTracker</code>.</para>
      </section>
   </section>
</section>
</chapter>
</book>
