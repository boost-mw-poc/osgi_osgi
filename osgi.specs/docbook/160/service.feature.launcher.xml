<?xml version="1.0" encoding="utf-8"?>
<!--
    Copyright (c) Contributors to the Eclipse Foundation
   
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
   
        http://www.apache.org/licenses/LICENSE-2.0
   
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
   
    SPDX-License-Identifier: Apache-2.0 
 -->
<chapter label="160"
         version="5.0" xml:id="service.feature.launcher"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/2000/svg"
         xmlns:ns4="http://www.w3.org/1998/Math/MathML"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Feature Launcher Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.featurelauncher-version"
    linkend="org.osgi.service.featurelauncher"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>The <xref linkend="service.feature"/> defines a model to 
      design and declare Complex Applications and reusable Sub-Components that are
      composed of multiple bundles, configurations and other metadata. These
      models are, however, only descriptive and have no standard mechanism
      for installing them into an OSGi framework.</para>
      
    <para>This specification focuses on turning these Features into a running system,
      by introducing the Feature Launcher and Feature Runtime. The Feature Launcher 
      takes a Feature definition, obtains a framework instance for it and then starts 
      the Feature in that environment. The Feature Runtime extends this capability to
      a running system, enabling one or more Features to be installed, updated, and 
      later removed from a running OSGi framework.</para>
      
    <para>The Launcher and Runtime also interact with the Configuration Admin Service, 
      that is, they provide configuration to the system if it is present in the 
      Feature being launched or installed.</para>
      
    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Dynamic</emphasis> - The Feature Runtime dynamically
          adds, updates and removes Features in a running system.</para>
        </listitem>

        <listitem>
          <para><emphasis>Parameterizable</emphasis> - Feature installation may
          be customised using local parameters if the Feature supports it.</para>
        </listitem>

        <listitem>
          <para><emphasis>Zero code</emphasis> - The Feature Launcher can launch a framework
          containing an installed Feature in an implementation independent way without a 
          user writing any code .</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <para>The following entities are used in this specification:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Feature</emphasis> - A Feature as defined by the
          <xref linkend="service.feature"/></para>
        </listitem>

        <listitem>
          <para><emphasis>Artifact Repository</emphasis> - A means of 
          accessing the installable bytes for bundles in a Feature</para>
        </listitem>

        <listitem>
          <para><emphasis>Feature Launcher</emphasis> - A Feature Launcher
          obtains an OSGi Framework instance and installs a Feature into it.</para>
        </listitem>

        <listitem>
          <para><emphasis>Framework</emphasis> - A running implementation of
          the OSGi core specification.</para>
        </listitem>

        <listitem>
          <para><emphasis>Launch Properties</emphasis> - Framework launching
          properties defined in a Feature.</para>
        </listitem>

        <listitem>
          <para><emphasis>Feature Parameters</emphasis> - Key value pairs that
          can be used to customise the installation of a Feature.</para>
        </listitem>

        <listitem>
          <para><emphasis>Configuration</emphasis> - A configuration 
          for the Configuration Admin service.</para>
        </listitem>

        <listitem>
          <para><emphasis>Feature Runtime</emphasis> - A Feature Runtime is
          an OSGi service capable of installing Features into the running OSGi 
          framework, removing installed Features from the OSGi framework, and 
          updating an installed Feature with a new Feature definition.</para>
        </listitem>

        <listitem>
          <para><emphasis>Installed Feature</emphasis> - A representation of
          a Feature installed by the Feature Runtime.</para>
        </listitem>
        <listitem>
          <para><emphasis>Installed Configuration</emphasis> - A representation of
          a Configuration installed by the Feature Runtime.</para>
        </listitem>
      </itemizedlist>

      <figure pgwide="1">
        <title>Features Entity overview</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="5.100in"
                       contentwidth="6.000in" fileref="feature.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section>
  	<title>Features and Artifact Repositories</title>
  	
  	<para>OSGi Features exist either as JSON documents, or as runtime objects
  	created by the Feature Service API. The primary purpose of a Feature is 
  	to define a list of bundles and configurations that should be installed,
  	however the Feature provides no information about the location of the
  	bundle artifacts. A key challenge with installing a Feature is therefore
  	finding the appropriate artifacts to install.
  	</para>
  	
  	<para>The <xref linkend="org.osgi.service.featurelauncher.ArtifactRepository"
      xrefstyle="hyperlink"/> interface is designed to be implemented by users
      of the Feature Launcher Service to provide a way for the Feature Launcher
      Service to find an installable <code>InputStream</code> of bytes for a
      given bundle artifact using the <xref 
      linkend="org.osgi.service.featurelauncher.ArtifactRepository.getArtifact-ID-"
      xrefstyle="hyperlink"/> method. Artifact Repository implementations are free 
      to use any mechanism for locating the bundle artifact data. If no artifact 
      can be found for the supplied <code>ID</code> then the implementation of 
      the Artifact Repository should return <code>null</code>. If the Artifact 
      Repository throws an exception then this must be logged by the Feature 
      Launcher Service and then treated in the same manner as a <code>null</code>
      return value.</para>
      
    <section xml:id="service.featurelauncher-arf">
      <title>The Artifact Repository Factory</title>
      
      <para>In order to support the <emphasis>Zero Code</emphasis> objective
      of this specification, and to simplify usage for most users, the
      <xref linkend="org.osgi.service.featurelauncher.ArtifactRepositoryFactory"
      xrefstyle="hyperlink"/> provides a factory for commonly used repository
      types.</para>
      
      <section>
        <title>Obtaining an Artifact Repository Factory</title>
      
        <para>The Artifact Repository Factory is useful both for the Feature Launcher
        and the Feature Runtime, and as such it must be easy to access both inside
        and outside an OSGi framework. The Feature Launcher Service implementation 
        must provide an implementation of the Artifact Repository Factory interface. 
        A user of the Artifact Repository Factory service may use the following ways 
        to find an instance.
        </para>
      
        <para>When outside OSGi:</para>
        <itemizedlist>
          <listitem>
            <para>Using the Java ServiceLoader API to find instances of 
            <code>org.osgi.service.featurelauncher.ArtifactRepositoryFactory</code></para>
          </listitem>
          <listitem>
            <para>From configuration, and then using <code>Class.forName</code>,
            <code>getConstructor()</code> and <code>newInstance()</code></para>
          </listitem>
          <listitem>
            <para>By hard coding the implementation and using the <code>new</code>
            operator.</para>
          </listitem>
        </itemizedlist>

        <para>When inside an OSGi framework:</para>
        <itemizedlist>
          <listitem>
            <para>Using the OSGi service registry to find instances of 
            <code>org.osgi.service.featurelauncher.ArtifactRepositoryFactory</code></para>
          </listitem>
          <listitem>
            <para>Using the Java ServiceLoader API and the OSGi Service Loader
            Mediator to find instances of 
            <code>org.osgi.service.featurelauncher.ArtifactRepositoryFactory</code></para>
          </listitem>
          <listitem>
            <para>By hard coding the implementation type and using the <code>new</code>
            operator.</para>
          </listitem>
        </itemizedlist>
      </section>
      <section>
        <title>Local Repositories</title>
        
        <para>A Local Repository is one that exists on a locally accessible file
        system. Note that this does not require that the file system is local,
        and technologies such as NFS or other network file systems would still
        be considered as Local Repositories. The key aspects of a Local
        Repository are that:</para>
        
        <itemizedlist>
          <listitem>
            <para>The root of the repository can be accessed and resolved
            as a <code>java.nio.file.Path</code> or <code>file:</code> URI.</para>
          </listitem>
          <listitem>
            <para>The repository uses the Maven2 Repository Layout</para>
            <remark>Add bibliography link to https://maven.apache.org/repository/layout.html#maven2-repository-layout</remark>
          </listitem>
        </itemizedlist>
        
        <para>An Artifact Repository representing a Local Repository can be 
        created using the <xref 
        linkend="org.osgi.service.featurelauncher.ArtifactRepositoryFactory.createRepository-Path-"
        xrefstyle="hyperlink"/> method, passing in the path to the root of the repository.
        A <code>NullPointerException</code> must be thrown if the path is <code>null</code>
        and an <code>IllegalArgumentException</code> must be thrown if the path does not
        exist, or represents a file which is not a directory.</para>
        
        <para>An Artifact Repository representing a Local Repository can also
        be created using the <xref 
        linkend="org.osgi.service.featurelauncher.ArtifactRepositoryFactory.createRepository-URI-Map-"
        xrefstyle="hyperlink"/> method, passing a URI using the <code>file</code> scheme
        which points to the root of the repository. A <code>NullPointerException</code> 
        must be thrown if the URI is <code>null</code> and an <code>IllegalArgumentException</code> 
        must be thrown if the path does not exist, or represents a file which is not a 
        directory.</para>
        
        <para>Once created this Artifact Repository will search the supplied repository
        for any requested artifact data. Implementations are free to optimise checks using
        repository metadata.</para>
      </section>

      <section>
        <title>Remote Repositories</title>
        
        <para>A Remote Repository is one that exists with an accessible
        <code>http</code> or <code>https</code> endpoint for retrieving artifact data.
        Note that this does not require that the repository is on a remote machine,
        only that the means of accessing data is via <code>HTTP</code> requests.
        The key aspects of a Remote Repository are that:</para>
        
        <itemizedlist>
          <listitem>
            <para>The root of the repository can be accessed and resolved
            as a <code>http</code> or <code>https</code> <code>URI</code></para>
          </listitem>
          <listitem>
            <para>The repository uses the Maven2 Repository Layout</para>
            <remark>Add bibliography link to https://maven.apache.org/repository/layout.html#maven2-repository-layout</remark>
          </listitem>
        </itemizedlist>
        
        <para>An Artifact Repository representing a Remote Repository can be 
        created using the <xref 
        linkend="org.osgi.service.featurelauncher.ArtifactRepositoryFactory.createRepository-URI-Map-"
        xrefstyle="hyperlink"/> method, passing in the uri to the root of the repository.
        A <code>NullPointerException</code> must be thrown if the uri is <code>null</code>
        and an <code>IllegalArgumentException</code> must be thrown if the uri does not
        use the <code>http</code> or <code>https</code> scheme.</para>
        
        <para>In addition to the repository <code>URI</code> the user may pass
        configuration properties in a <code>Map</code>. Implementations may support custom
        configuration properties, but those properties should use Reverse Domain Name keys.
        Keys not using the reverse DNS naming scheme are reserved for OSGi use. Implementations
        must ignore any configuration property keys that they do not recognise. All 
        implementations must support the following properties:</para>
        
        <itemizedlist>
          <listitem>
            <para><xref 
              linkend="org.osgi.service.featurelauncher.FeatureLauncherConstants.REMOTE_ARTIFACT_REPOSITORY_NAME"
              xrefstyle="hyperlink"/> - The name for this repository</para>
          </listitem>
          <listitem>
            <para><xref 
              linkend="org.osgi.service.featurelauncher.FeatureLauncherConstants.REMOTE_ARTIFACT_REPOSITORY_USER"
              xrefstyle="hyperlink"/> - The user name to use for authenticating with this repository</para>
          </listitem>
          <listitem>
            <para><xref 
              linkend="org.osgi.service.featurelauncher.FeatureLauncherConstants.REMOTE_ARTIFACT_REPOSITORY_PASSWORD"
              xrefstyle="hyperlink"/> - The password to use for authenticating with this repository</para>
          </listitem>
          <listitem>
            <para><xref 
              linkend="org.osgi.service.featurelauncher.FeatureLauncherConstants.REMOTE_ARTIFACT_REPOSITORY_BEARER_TOKEN"
              xrefstyle="hyperlink"/> - A bearer token to use when authenticating with this repository</para>
          </listitem>
          <listitem>
            <para><xref 
              linkend="org.osgi.service.featurelauncher.FeatureLauncherConstants.REMOTE_ARTIFACT_REPOSITORY_SNAPSHOTS_ENABLED"
              xrefstyle="hyperlink"/> - A <code>Boolean</code> indicating that SNAPSHOT versions are 
              supported. Defaults to <code>true</code></para>
          </listitem>
          <listitem>
            <para><xref 
              linkend="org.osgi.service.featurelauncher.FeatureLauncherConstants.REMOTE_ARTIFACT_REPOSITORY_RELEASES_ENABLED"
              xrefstyle="hyperlink"/> - A <code>Boolean</code> indicating that release versions are 
              supported. Defaults to <code>true</code></para>
          </listitem>
          <listitem>
            <para><xref 
              linkend="org.osgi.service.featurelauncher.FeatureLauncherConstants.REMOTE_ARTIFACT_REPOSITORY_TRUST_STORE"
              xrefstyle="hyperlink"/> - A trust store to use when validating a server certificate. May be a file
              system path or a <code>data</code> URI.</para>
              <remark>Add bibliography link to https://en.wikipedia.org/wiki/Data_URI_scheme</remark>
          </listitem>
          <listitem>
            <para><xref 
              linkend="org.osgi.service.featurelauncher.FeatureLauncherConstants.REMOTE_ARTIFACT_REPOSITORY_TRUST_STORE_FORMAT"
              xrefstyle="hyperlink"/> - The format of the trust store to use when validating a server certificate.</para>
          </listitem>
          <listitem>
            <para><xref 
              linkend="org.osgi.service.featurelauncher.FeatureLauncherConstants.REMOTE_ARTIFACT_REPOSITORY_TRUST_STORE_PASSWORD"
              xrefstyle="hyperlink"/> - The password to use when validating the trust store integrity.</para>
          </listitem>
        </itemizedlist>
        
        <para>Once created this Artifact Repository will search the supplied repository
        for any requested artifact data. Implementations are free to optimise checks using
        repository metadata.</para>
      </section>
    </section>
  </section>
  
  <section>
  	<title>The Feature Launcher</title>
  	
  	<para>The <xref linkend="org.osgi.service.featurelauncher.FeatureLauncher"
      xrefstyle="hyperlink"/> is the main entry point for creating a running OSGi
      framework containing the bundles and configurations defined in a Feature.
      As such the Feature Launcher is primarily designed for use outside of an
      OSGi framework.</para>
      
    <para>To support usage in a non-OSGi environment implementations of the
    Feature Launcher Service must register the following implementation classes 
    with the Java ServiceLoader API, and any necessary module metadata.</para>
    
    <itemizedlist>
      <listitem>
        <para><code>org.osgi.service.featurelauncher.FeatureLauncher</code></para>
      </listitem>
      <listitem>
        <para><code>org.osgi.service.featurelauncher.ArtifactRepositoryFactory</code></para>
      </listitem>
    </itemizedlist>    
      
    <section>
      <title>Obtaining and configuring a Feature Launcher</title>
      
      <para>A Feature Launcher Service implementation must provide an implementation
      of the Feature Launcher interface. A user of the Feature Launcher service may
      use the following ways to find this class and create an instance:
      </para>
      
      <itemizedlist>
        <listitem>
          <para>Using the Java ServiceLoader API to find instances of 
          <code>org.osgi.service.featurelauncher.FeatureLauncher</code></para>
        </listitem>
        <listitem>
          <para>From configuration, and then using <code>Class.forName</code>,
          <code>getConstructor()</code> and <code>newInstance()</code></para>
        </listitem>
        <listitem>
          <para>By hard coding the implementation type and using the <code>new</code>
          operator.</para>
        </listitem>
      </itemizedlist>
      
      <para>Once instantiated the FeatureLauncher may be configured in a fluent
        manner using the <xref linkend="org.osgi.service.featurelauncher.FeatureLauncher.configure-Map-"
        xrefstyle="hyperlink"/> and <xref 
        linkend="org.osgi.service.featurelauncher.FeatureLauncher.addRepository-ArtifactRepository-"
        xrefstyle="hyperlink"/> methods. Configuration properties for the Feature
        Launcher are implementation specific, and any unrecognised property names
        should be ignored. Artifact Repository instances may be created by the user
        using as described in <xref linkend="service.featurelauncher-arf" 
        xrefstyle="hyperlink"/>, or using custom implementations.</para>
    </section>
  	
  	<section>
  	  <title>Using a Feature Launcher</title>
  	  
  	  <para>Once a configured Feature Launcher instance has been created, one of
  	  the <code>launch</code> methods can be used to launch an OSGi framework 
  	  containing the supplied Feature. Features can either be supplied as a
  	  <code>Reader</code> providing access to the JSON text of a Feature document
  	  or a parsed <xref linkend="org.osgi.service.feature.Feature" xrefstyle="hyperlink"/>.
  	  The Feature Launcher will then return a running <code>Framework</code> instance
  	  representing the launched OSGi framework and the Feature that it contains. If
  	  an error occurs creating the framework, or locating and installing any of the 
  	  feature bundles, then a <xref linkend="org.osgi.service.featurelauncher.LaunchException"
        xrefstyle="hyperlink"/> must be thrown.</para>
  	  
  	  <section xml:id="service.featurelauncher-variable.overrides">
  	    <title>Overriding Feature variables</title>
  	    
  	    <para>Some Feature definitions include variables which can be used to customise
  	    their deployment. These variables are intended to be set at the point where
  	    a Feature is installed, and may contain default values. To enable these 
  	    variables to be overridden there are <code>launch</code> methods which 
  	    permit a <code>Map</code> of variables to be provided. The values in
  	    this map must be one of the types permitted by the <xref linkend="service.feature"/></para>
  	    
  	    <para>If a Feature declares a variable with no default value then this variable
  	    <emphasis>must</emphasis> be provided to the Feature Launcher. If no value is
  	    provided then the Feature Launcher must fail to launch by throwing a
  	    <xref linkend="org.osgi.service.featurelauncher.LaunchException"
        xrefstyle="hyperlink"/></para>
  	  </section>

  	  <section xml:id="service.featurelauncher-framework.props">
  	    <title>Providing Framework Launch Properties</title>
  	    
  	    <para>Framework launch properties are key value pairs which are passed to
  	    the OSGi framework as it is created. They can control many behaviours,
  	    including operations which happen before the framework starts, meaning 
  	    that is not always possible to set them <emphasis>after</emphasis> startup.</para>
  	    
  	    <para>Feature definitions that require particular framework launch properties
  	    can define them using a Feature Extension named <xref 
          linkend="org.osgi.service.featurelauncher.FeatureLauncherConstants.FRAMEWORK_LAUNCHING_PROPERTIES"
          xrefstyle="hyperlink"/>. The Type of this Feature Extension must be 
        <code>TEXT</code>, where each entry is in the form <code>key=value</code>
        All implementations of the Feature Launcher must support this extension,
        and use it to populate the Framework Launch Properties.</para>
  	    
  	    <para>In addition to Framework Launch properties defined inside the Feature,
  	    users of the Feature Launcher can add and override Framework Launch Properties
  	    using one of the <code>launch</code> methods which permit a <code>Map</code> of 
  	    framework properties to be provided. Any key value pairs defined in this map 
  	    must take precedence over those defined in the Feature. A key with a null value
  	    must result in the removal of a key value pair if it is defined in the Feature.</para>
  	  </section>
  	  
  	  <section xml:id="service.featurelauncher-select.framework">
  	    <title>Selecting a framework implementation</title>
  	    
  	    <para>When defining a feature it is not always possible to be framework independent.
  	    Sometimes specific framework APIs, or licensing restrictions, will require that a
  	    particular implementation is used. In this case a Feature Extension named <xref 
          linkend="org.osgi.service.featurelauncher.FeatureLauncherConstants.LAUNCH_FRAMEWORK"
          xrefstyle="hyperlink"/> with <code>Type</code> <code>ARTIFACTS</code> can be used
          to list one or more artifacts representing OSGi framework implementations.
  	    </para>
  	    
  	    <para>The list of artifacts is treated as a preference order, with the first listed
  	    artifact being used if available, and so on, until a framework is found. If a
  	    listed artifact is not an OSGi framework implementation then the Feature Launcher 
  	    must log a warning and continue on to the next artifact in the list. If the
  	    <code>Kind</code> of the feature is <code>MANDATORY</code> and none of
  	    the listed artifacts are available then launching must fail with a <xref 
  	      linkend="org.osgi.service.featurelauncher.LaunchException" xrefstyle="hyperlink"/>.
  	    </para>
  	  </section>
  	</section>
  	
  	<section>
  	  <title>The Feature Launching Process</title>
  	  
  	  <para>The following section defines the process through which the Feature Launcher
  	  must locate, initialize and populate an OSGi framework when launching a feature.
  	  Unless explicitly stated implementations may perform one or more parts of this
  	  process in a different order to that described in the specification.</para>

      <section>
        <title>Locating a framework implementation</title>
        
        <para>Before a framework instance can be created the Feature Launcher must identify
        a suitable implementation using the following search order:</para>
        
        <orderedlist>
          
          <listitem><para>If any provider specific configuration has been given to the
          Feature Launcher implementation then this should be used to identify the framework.</para></listitem>
          
          <listitem><para>If the Feature declares an Extension <xref 
          linkend="org.osgi.service.featurelauncher.FeatureLauncherConstants.LAUNCH_FRAMEWORK"
          xrefstyle="hyperlink"/> then the Feature Launcher implementation must use the
          first listed artifact that can be found in any configured Artifact Repositories,
          as described in <xref linkend="service.featurelauncher-select.framework" xrefstyle="hyperlink"/>.</para>
            <remark>Currently this only fails if the extension is mandatory</remark>
          </listitem>
          
          
          <listitem><para>If no framework implementation is found in the previous steps then the Feature
          Launcher implementation must search the classpath using the Thread Context Class Loader,
          or, if the Thread Context Class Loader is not set, the Class Loader which loaded the 
          caller of the Feature Launcher's <code>launch</code> method. The first
          suitable framework instance located is the instance that will be used.</para></listitem>
          
          <listitem><para>In the event that no suitable OSGi framework can be found by any
          of the previous steps then the Feature Launcher implementation may provide a
          default framework implementation to be used.</para></listitem>
        </orderedlist>
        
        <para>If no suitable OSGi framework implementation can be found then the Feature Launcher
        implementation must throw a <code>LaunchException</code>.</para>
      </section>
      
      <section>
        <title>Creating a Framework instance</title>
        
        <para>Once a suitable framework implementation has been located the Feature Launcher 
        implementation must create and initialize a framework instance. Implementations are
        free to use implementation specific mechanisms for framework implementations that
        they recognise. The result of this initialization must be the same as if the
        Feature Launcher used the <code>org.osgi.framework.launch.FrameworkFactory</code>
        registered by the framework implementation to create the framework instance.</para>
        
        <para>When creating the framework any framework launch properties defined in
        the Feature must be used. These are defined as described in <xref 
          linkend="service.featurelauncher-framework.props" xrefstyle="hyperlink"/> and
        must include any necessary variable replacement as defined by <xref
          linkend="service.featurelauncher-variable.overrides" xrefstyle="hyperlink"/>.</para>
          
        <para>Once instantiated the framework must be initialised appropriately so that it
        has a valid <code>BundleContext</code>. Once initialised the framework is ready for
        the Feature Launcher implementation to begin populating the framework.</para>
      </section>
      <section>
        <title>Installing bundles and configurations</title>
        <para>TODO</para>
      </section>  
  	</section>
<!--   	<para>To launch a Feature, the launcher must find or create a target environment for the 
  	Feature first. For example it can launch an OSGi framework that the Feature should run in.
  	</para>
  	
  	<para>
  	The launcher should deploy all the bundles referenced by the Feature in this Framework. 
  	It must 
  	first install all bundles, then resolve them and finally start all the bundles.
  	The order in which this happens between the bundles is not defined.
  	<remark>Introduce start order in metadata</remark> 
  	</para>
  	
  	<para>
  	Once all bundles are started and all bundle fragments resolved and attached the launcher 
  	should provide the specified configurations to the Configuration Admin Service. 
  	</para>
  	
  	<para>
  	A Feature launcher can be obained using the <xref linkend="org.osgi.service.featurelauncher.LauncherFactory"
  	xrefstyle="hyperlink"/> service. This service can be obtained from the Service registry if running
  	in an OSGi Framework or using the ServiceLoader mechanism otherwise.
  	</para>
  	
  	<programlisting>ServiceLoader&lt;LauncherFactory&gt; sl =
  ServiceLoader.load(LauncherFactory.class);

LauncherFactory factory = sl.iterator().next();
Launcher launcher = factory.newLauncher(
  new URL("file:///home/david/myfeature.json"),
  Collections.emptyMap());
launcher.start();

launcher.waitForStop(0); // Start is asynchronous
  	</programlisting>
  	
  	<para>If a Feature can't be launched <code>waitForStop()</code> will throw a 
  	<xref linkend="org.osgi.service.feature.launcher.LauncherException"
  	xrefstyle="hyperlink"/>.
  	</para>  -->
  </section>

<!--   <section>
  	<title>Handling Bundles</title>
  	<para>All bundles listed in the Feature will first be installed, then resolved
  	and finally started in the Framework chosen by the launcher.</para>
  	
  	<para>Bundle fragments are installed and resolved and attached to their host(s).
  	</para>
  	
  	<para>If a Bundle cannot resolve or start a <code>LauncherException</code> must be
  	thrown.</para>
  </section>

  <section>
  	<title>Handling Configuration</title>
  	<para>If configuration is found in the Feature then it is passed to the Configuration
  	Admin service. If a Feature contains a <code>configuration</code> section but the Configuration
  	Admin service is not found in the running system, the launcher will abort with an 
  	<code>LauncherException</code>.</para>
  </section>

  <section>
  	<title>Specifying Framework Properties</title>
  	<para>Framework Launching Properties can be provided in the Feature through
  	the <code>framework-launching-properties</code> extension.
  	The launcher must ensure that the Framework it provides for the feature has these
  	properties set. If it cannot provide a Framework with the requested Framework properties
  	set it must fail with a <code>LauncherException</code>.</para>
  	
  	<para>For example, to ensure the <code>org.osgi.framework.bsnversion</code> Framework
  	property is set for the Feature, specify the following in the Feature: 
  	<programlisting>  "extensions": {
    "framework-launching-properties": {
      "type": "json",
      "kind": "mandatory",
      "json": {
          "org.osgi.framework.bsnversion": "multiple"
      }
    }
  }</programlisting>  		
  	</para>
  </section>

  <section>
  	<title>Specifying Runtime Preconditions</title>
  	<para>A Feature can specify the preconditions it places on its runtime environment. That is,
  	the Framework used to run the Feature in, must satisfy these constraints. If the Launcher
  	cannot provide a Framework with the specified conditions, it must fail.</para>
  	
  	<para>
  	Preconditions are specified as requirements in the Feature.
  	If no preconditions are specified, the Launcher is free to choose a Java and OSGi implementation
  	of its choice.
  	</para>
  	
  	<para>For example:<programlisting>  "requirements": [
    {
      "namespace": "osgi.ee", 
      "filter":    "(&amp;(osgi.ee=JavaSE)(version=11))"
    }, {
      "namespace": "osgi.wiring.package", 
      "filter":    "(&amp;(osgi.wiring.package=org.osgi.framework)(version=1.10))"    
    }
  ]</programlisting>
  	</para>
  </section>

  <section>
  	<title>Specifying Variables</title>
  	<para>Variables allow for late binding of configuration values and Framework properties.
  	Variables are provided through the <xref linkend="org.osgi.service.feature.launcher.LauncherFactory"
  	xrefstyle="hyperlink"/>:
  	<programlisting>Map&lt;String,Object&gt; variables = new HashMap&lt;&gt;();
variables.put("user.name", "scott");
variables.put("db.driver", "postgresql");
  	
LauncherFactory factory = ... // From Service Registry or Service Loader
Launcher launcher = factory.newLauncher(
  new URL("https://repo.maven.apache.org/maven2/org/foo/Bar/1.0.0/Bar-1.0.0.osgifeature"),
  variables);
  
launcher.start();</programlisting>
  	</para>
  </section>

  <section>
  	<title>Specifying Extension Handlers</title>
  	<para></para>
  	<remark>TODO</remark>
  </section>

  <section>
  	<title>Specifying Post-processors</title>
  	<para></para>
  	<remark>TODO</remark>
  </section>  -->
  
  <!-- Specifying merge conflict handlers -->

  <xi:include href="../../generated/javadoc/docbook/org.osgi.service.featurelauncher.xml"/>


</chapter>



