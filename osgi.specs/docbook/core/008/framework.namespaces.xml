<?xml version="1.0" encoding="utf-8"?>
<!--
    Copyright (c) Contributors to the Eclipse Foundation
   
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
   
        http://www.apache.org/licenses/LICENSE-2.0
   
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
   
    SPDX-License-Identifier: Apache-2.0 
 -->

<chapter label="8" revision="$Id$"
         version="5.0" xml:id="framework.namespaces"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/2000/svg"
         xmlns:ns4="http://www.w3.org/1998/Math/MathML"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Framework Namespaces Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.framework.namespace-version"
    linkend="org.osgi.framework.namespace"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>A key aspect of the OSGi dependency model based on requirements and
    capabilities is the concept of a <emphasis>namespace</emphasis>. A
    Namespace defines the semantics of a Requirement-Capability pair. This
    generic model is defined in <xref linkend="framework.resource"/>. This
    section defines a number of namespaces that are part of the OSGi Core
    specification. The <code>osgi.wiring.*</code> namespaces map to the module
    layer, others are used as foundations for other specifications.</para>

    <para>Namespaces that are mapped from OSGi manifest headers must never be
    specified as generic requirements or capabilities in the manifest. The
    purpose of these namespaces is only to provide the Modularity manifest
    headers in generic form; the framework must translate the specific
    manifest headers defined in the <xref linkend="framework.module"/> to
    their generic form so that requirements and capabilities can be used in a
    uniform way, regardless if they originate from specialized or generic
    manifest headers.</para>

    <para>Each namespace is defined with the following items:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Name</emphasis> - the name of an attribute or
        directive</para>
      </listitem>

      <listitem>
        <para><emphasis>Kind</emphasis> - Defines where the attribute or
        directive can be used</para>

        <itemizedlist>
          <listitem>
            <para><code>CA</code> - Capability Attribute</para>
          </listitem>

          <listitem>
            <para><code>CD</code> - Capability Directive</para>
          </listitem>

          <listitem>
            <para><code>RA</code> - Requirement Attribute</para>
          </listitem>

          <listitem>
            <para><code>RD</code> - Requirement Directive</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para><emphasis>M/O</emphasis> - Mandatory (<code>M</code>) or
        Optional (<code>O</code>).</para>
      </listitem>

      <listitem>
        <para><emphasis>Type</emphasis> - The data Type</para>
      </listitem>

      <listitem>
        <para><emphasis>Syntax</emphasis> - Any syntax rules. The syntax
        refers in general to the syntaxes defined in <xref
        linkend="framework.general.syntax"/> and <xref
        linkend="framework.common.header.syntax"/> and later sections.</para>
      </listitem>
    </itemizedlist>

    <para>Attributes on manifest headers that define capabilities are used as
    matching attributes in the requirement's filter and are available as the
    attributes of a <code>Capability</code> object. Attributes on manifest
    headers that define requirements are translated to a conjunction of
    assertions in the filter that correspond to the semantics of their header.
    That is, these attributes on requiring manifest headers are not visible on
    the <code>Requirement</code> objects as attributes.</para>

    <para>Unless an attribute is specifically overridden, all namespaces
    inherit the attributes and directives of the default namespace as defined
    in <xref linkend="framework.namespaces-default.namespace"/> and in <xref
    linkend="org.osgi.resource.Namespace" xrefstyle="hyperlink"/>.</para>

    <table pgwide="1" xml:id="framework.namespaces-default.namespace">
      <title>Default Namespace</title>

      <tgroup cols="6">
        <colspec colnum="1" colwidth="2*"/>

        <colspec colnum="2" colwidth="1*"/>

        <colspec colnum="3" colwidth="1*"/>

        <colspec colnum="4" colwidth="1.5*"/>

        <colspec colnum="5" colwidth="4*"/>

        <colspec colnum="6" colwidth="6*"/>

        <thead>
          <row>
            <entry>Name</entry>

            <entry>Kind</entry>

            <entry>M/O</entry>

            <entry>Type</entry>

            <entry>Syntax</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>uses</code></entry>

            <entry><code>CD</code></entry>

            <entry><code>O</code></entry>

            <entry><code>String</code></entry>

            <entry><para><code>package-name</code></para><para><code> ( ','
            package-name )*</code></para></entry>

            <entry><para>A list of packages used in calculation class space
            consistency.</para></entry>
          </row>

          <row>
            <entry><code>effective</code></entry>

            <entry><para><code>RD,</code></para><para><code>CD</code></para></entry>

            <entry><code>O</code></entry>

            <entry><code>String</code></entry>

            <entry><code>'resolve' | &lt;any name&gt;</code></entry>

            <entry><para>A name indicating if a resolve operation applies to
            this requirement. Default and only defined value is
            <code>resolve</code>.</para></entry>
          </row>

          <row>
            <entry><code>resolution</code></entry>

            <entry><code>RD</code></entry>

            <entry><code>O</code></entry>

            <entry><code>String</code></entry>

            <entry><code>'mandatory' | 'optional'</code></entry>

            <entry><para>If <code>mandatory</code>, then this requirement must
            be satisfied before the resource is resolved. The default is
            <code>mandatory</code>.</para></entry>
          </row>

          <row>
            <entry><code>filter</code></entry>

            <entry><code>RD</code></entry>

            <entry><code>O</code></entry>

            <entry><code>String</code></entry>

            <entry><code>filter</code></entry>

            <entry><para>The given filter is matched against the capability's
            attributes to satisfy the requirement. A filter is optional, if no
            filter directive is specified the requirement always
            matches.</para></entry>
          </row>

          <row>
            <entry><code>cardinality</code></entry>

            <entry><code>RD</code></entry>

            <entry><code>O</code></entry>

            <entry><code>String</code></entry>

            <entry><code>'multiple' | 'single'</code></entry>

            <entry><para>Allow the requirement to be satisfied by just one
            capability or provide wires to any capability that satisfies the
            requirement.</para></entry>
          </row>

          <row>
            <entry><code>mandatory</code></entry>

            <entry><code>CD</code></entry>

            <entry><code>O</code></entry>

            <entry><code>String</code></entry>

            <entry><code>extended ( ',' extended )*</code></entry>

            <entry><para>List of attribute names that the requirement's filter
            must assert to be equal to the values in the capability's
            attributes. </para> <para>This directive must only be used for the
            <code>osgi.wiring.*</code> namespaces and is forbidden in any
            other namespace.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>Namespaces can have any additional attributes and directives, both
    defined in a namespace as well as ad-hoc. However, none of these
    additional directives or attributes must require different or additional
    matching rules.</para>

    <para>All directives and attributes specified on the OSGi manifest headers
    that are translated to requirements and capabilities are visible in these
    capabilities and requirements, except when they are specifically noted to
    be ignored in the definition of a namespace.</para>
  </section>

  <section xml:id="framework.namespaces.osgi.ee">
    <title>osgi.ee Namespace</title>

    <para>An OSGi Framework must register capabilities for all the execution
    environments the Java VM is known to be backward compatible with. For
    example, if the Java VM provides Java SE 6, then it is backward compatible
    with 1.2, 1.3, 1.4, 1.5, and 1.6. The <code>osgi.ee</code> capability
    defines the provided versions as a comma separated list. For
    example:</para>

    <programlisting>Provide-Capability: «
    osgi.ee; «
        osgi.ee="OSGi/Minimum"; «
        version:List&lt;Version&gt;="1.0,1.1,1.2", «
    osgi.ee; «
        osgi.ee="JavaSE"; «
        version:List&lt;Version&gt;="1.2,1.3,1.4,1.5,1.6"</programlisting>

    <para>Bundles can require the <code>osgi.ee</code> capability if they have
    a dependency on a specific execution environment, for example:</para>

    <programlisting>Require-Capability: «
   osgi.ee;filter:="(&amp;(osgi.ee=JavaSE)(version=1.6))"</programlisting>

    <para>This is useful when the bundle contains class files compiled to
    target a version of the Java VM and thus cannot be loaded by prior
    versions of the Java VM. If a bundle needs to require that specific
    <code>java.*</code> packages are available in the runtime, it should use
    the Import-Package header to require those packages. See <xref
    linkend="framework.module-execution.environment"/>.</para>

    <para>The <code>osgi.ee</code> requirement is not hosted when it is part
    of a Fragment. That is, a requirement from this namespace must be treated
    as part of the Fragment Bundle and must not be hosted.</para>

    <para>The <code>osgi.ee</code> capability is defined in table <xref
    linkend="framework.namespaces-ee.namespace"/> and in the <xref
    linkend="org.osgi.framework.namespace.ExecutionEnvironmentNamespace"
    xrefstyle="hyperlink"/> class.</para>

    <table pgwide="1" xml:id="framework.namespaces-ee.namespace">
      <title>osgi.ee Namespace definition</title>

      <tgroup cols="6">
        <colspec colnum="1" colwidth="2*"/>

        <colspec colnum="2" colwidth="1*"/>

        <colspec colnum="3" colwidth="1*"/>

        <colspec colnum="4" colwidth="2*"/>

        <colspec colnum="5" colwidth="4*"/>

        <colspec colnum="6" colwidth="7*"/>

        <thead>
          <row>
            <entry>Name</entry>

            <entry>Kind</entry>

            <entry>M/O</entry>

            <entry>Type</entry>

            <entry>Syntax</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>osgi.ee</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><code>String</code></entry>

            <entry><code>~(ws|',')+</code></entry>

            <entry><para>The name of the execution environment. The name can
            contain any character except white space (as defined by Java) or
            the comma (<code>',' \u002C</code>) character. </para></entry>
          </row>

          <row>
            <entry><code>version</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><para><code>List</code></para><para><code>&lt;Version&gt;</code></para></entry>

            <entry><code>version ( ',' version )*</code></entry>

            <entry><para>A comma separated list of versions, comparisons must
            be done with version ordering because the version attribute must
            be declared with the <code>List&lt;Version&gt;</code>
            type.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>Provide-Capability headers in the <code>osgi.ee</code> namespace
    must not be used in a bundle's manifest; Require-Capability with this
    namespace is allowed. An <code>osgi.ee</code> requirement is the
    replacement for the Bundle-RequiredExecutionEnvironment header in <xref
    linkend="framework.module.bree"/>.</para>

    <para>The names for the execution environments are not normatively defined
    in this specification except those defined in <xref
    linkend="framework.namespaces-ee.names"/>. A list of well-known
    (non-normative) names are maintained at <xref linkend="i1775657"/>.</para>

    <table xml:id="framework.namespaces-ee.names">
      <title>osgi.ee execution environment names</title>

      <tgroup cols="2">
        <colspec colnum="1" colwidth="1*"/>

        <colspec colnum="2" colwidth="4*"/>

        <thead>
          <row>
            <entry>Name</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>JavaSE</code></entry>

            <entry><para>Should be used for all Java SE execution environments
            since Java 1.2. The name for the Java Runtime Environment has
            changed several times but for all environments the Java SE name
            must be used.</para></entry>
          </row>

          <row>
            <entry><code>JavaSE/compact1</code></entry>

            <entry><para>Java SE Embedded compact1 profile.</para></entry>
          </row>

          <row>
            <entry><code>JavaSE/compact2</code></entry>

            <entry><para>Java SE Embedded compact2 profile.</para></entry>
          </row>

          <row>
            <entry><code>JavaSE/compact3</code></entry>

            <entry><para>Java SE Embedded compact3 profile.</para></entry>
          </row>

          <row>
            <entry><code>OSGi/Minimum</code></entry>

            <entry><para>The OSGi Minimum execution
            environment.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section xml:id="framework.namespaces.osgi.wiring.package">
    <title>osgi.wiring.package Namespace</title>

    <para>The <code>osgi.wiring.package</code> namespace reflects the
    information in the manifest Import-Package, DynamicImport-Package, and
    Export-Package clauses as defined <xref
    linkend="framework.module.importpackage"/>, <xref
    linkend="framework.module.exportpackage"/>, and <xref
    linkend="framework.module.dynamicimportpackage"/>.</para>

    <para>The Import-Package header and DynamicImport-Package headers are
    represented as a Bundle Requirement for each of their clauses. The
    Export-Package header is represented as a Bundle Capability for each
    clause. DynamicImport-Package clauses have a <code>resolution</code>
    directive set to <code>dynamic</code> and can only be wired after the
    bundle has been resolved.</para>

    <para>For example, the following bundles:</para>

    <programlisting>Bundle A:
  Import-Package: p
  DynamicImport-Package: q.*

Bundle B:
  Export-Package: p</programlisting>

    <para>This example is depicted in <xref linkend="i1767123"/>. Package
    <code>p</code> is wired to a Bundle Revision of bundle <code>B</code>
    because it exports package <code>p</code>. The DynamicImport-Package
    clause is not wired but this can change when during run time package s
    refers to a class that cannot be found.</para>

    <figure xml:id="i1767123">
      <title>Example osgi.wiring.package Namespace</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="0.840in"
                     contentwidth="6.199in"
                     fileref="package-namespace-example.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The <code>osgi.wiring.package</code> attributes are defined in <xref
    linkend="framework.namespaces-wiring.package.namespace"/> and in the <xref
    linkend="org.osgi.framework.namespace.PackageNamespace"
    xrefstyle="hyperlink"/> class.</para>

    <table pgwide="1" xml:id="framework.namespaces-wiring.package.namespace">
      <title>osgi.wiring.package Namespace definition</title>

      <tgroup cols="6">
        <colspec colnum="1" colwidth="4*"/>

        <colspec colnum="2" colwidth="1*"/>

        <colspec colnum="3" colwidth="1*"/>

        <colspec colnum="4" colwidth="1.5*"/>

        <colspec colnum="5" colwidth="4*"/>

        <colspec colnum="6" colwidth="7*"/>

        <thead>
          <row>
            <entry>Name</entry>

            <entry>Kind</entry>

            <entry>M/O</entry>

            <entry>Type</entry>

            <entry>Syntax</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>osgi.wiring.package</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><code>String</code></entry>

            <entry><code>package-name</code></entry>

            <entry><para>The name of the package.</para></entry>
          </row>

          <row>
            <entry><code>version</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><code>Version</code></entry>

            <entry><code>version</code></entry>

            <entry><para>A version of the exported package</para></entry>
          </row>

          <row>
            <entry><code>bundle-symbolic-name</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><code>String</code></entry>

            <entry><code>symbolic-name</code></entry>

            <entry><para>The bundle symbolic name of the bundle that exports
            the package</para></entry>
          </row>

          <row>
            <entry><code>bundle-version</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><code>Version</code></entry>

            <entry><code>version</code></entry>

            <entry><para>The bundle version as defined in the Bundle-Version
            header.</para></entry>
          </row>

          <row>
            <entry><code>*</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>O</code></entry>

            <entry><code>String</code></entry>

            <entry><code>*</code></entry>

            <entry><para>Any attributes defined on the Export-Package
            clause</para></entry>
          </row>

          <row>
            <entry><code>resolution</code></entry>

            <entry><code>RD</code></entry>

            <entry><code>O</code></entry>

            <entry><code>String</code></entry>

            <entry><para><code>'dynamic'
            |</code></para><para><code>'mandatory'
            |</code></para><para><code>'optional'</code></para></entry>

            <entry><para>This directive is inherited from the default
            namespace but this namespace adds an additional value
            <code>dynamic</code>.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>The following directives must be ignored when specified on the
    Import-Package, or Export-Package, or DynamicImport-Package manifest
    headers:</para>

    <itemizedlist>
      <listitem>
        <para><code>effective</code></para>
      </listitem>

      <listitem>
        <para><code>cardinality</code></para>
      </listitem>
    </itemizedlist>

    <para>The requirements and capabilities in the
    <code>osgi.wiring.package</code> namespace must never be used in the
    Require-Capability and Provide-Capability headers.</para>
  </section>

  <section xml:id="framework.namespaces.osgi.wiring.bundle">
    <title>osgi.wiring.bundle Namespace</title>

    <para>The <code>osgi.wiring.bundle</code> namespace reflects the
    information in the bundle headers for the purpose of requiring another
    bundle. The Require-Bundle header is a requirement on the capability
    provided by the pair of Bundle-SymbolicName/Bundle-Version headers.
    Requiring this namespace through a Require-Bundle header creates a wire
    from the requiring bundle to the required bundle.</para>

    <para>A bundle must only provide this capability when the
    Bundle-ManifestVersion &gt;= 2. The <code>osgi.wiring.bundle</code>
    attributes are defined in table <xref
    linkend="framework.namespaces-wiring.bundle.namespace"/> and in the <xref
    linkend="org.osgi.framework.namespace.BundleNamespace"
    xrefstyle="hyperlink"/> class.</para>

    <table pgwide="1" xml:id="framework.namespaces-wiring.bundle.namespace">
      <title>osgi.wiring.bundle Namespace definition</title>

      <tgroup cols="6">
        <colspec colnum="1" colwidth="4*"/>

        <colspec colnum="2" colwidth="1*"/>

        <colspec colnum="3" colwidth="1*"/>

        <colspec colnum="4" colwidth="1.5*"/>

        <colspec colnum="5" colwidth="4*"/>

        <colspec colnum="6" colwidth="7*"/>

        <thead>
          <row>
            <entry>Name</entry>

            <entry>Kind</entry>

            <entry>M/O</entry>

            <entry>Type</entry>

            <entry>Syntax</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>osgi.wiring.bundle</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><code>String</code></entry>

            <entry><code>symbolic-name</code></entry>

            <entry><para>The name of the bundle as defined in the
            Bundle-SymbolicName header.</para></entry>
          </row>

          <row>
            <entry><code>bundle-version</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><code>Version</code></entry>

            <entry><code>version</code></entry>

            <entry><para>The version of the bundle as defined in the
            Bundle-Version header.</para></entry>
          </row>

          <row>
            <entry><code>*</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>O</code></entry>

            <entry><code>String</code></entry>

            <entry><code>*</code></entry>

            <entry><para>Any attributes defined on the Bundle-SymbolicName
            header</para></entry>
          </row>

          <row>
            <entry><code>singleton</code></entry>

            <entry><code>CD</code></entry>

            <entry><code>O</code></entry>

            <entry><code>String</code></entry>

            <entry><code>'true' | 'false'</code></entry>

            <entry><para>Indicates if this is a singleton bundle, see <xref
            linkend="framework.module.bsn"/>.</para></entry>
          </row>

          <row>
            <entry><code>visibility</code></entry>

            <entry><code>RD</code></entry>

            <entry><code>O</code></entry>

            <entry><code>String</code></entry>

            <entry><code>'private' | 'reexport'</code></entry>

            <entry><para>See <xref
            linkend="framework.module.requirebundle"/>.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>The effect of the <code>osgi.wiring.bundle</code> namespace is that
    the exported packages of any required bundles become available to the
    requirer as defined in the <xref
    linkend="framework.module.requiringbundles"/>. A Bundle Wire in the
    <code>osgi.wiring.bundle</code> namespace does not imply the availability
    of <code>osgi.wiring.package</code> Bundle Wires that correspond to the
    required bundle's exported packages. If there is a need to know what
    packages will become available then this must be deduced from the
    <code>osgi.wiring.package</code> capabilities of the required
    bundle.</para>

    <para>The following directives must be ignored when specified on the
    Require-Bundle or Bundle-SymbolicName manifest headers:</para>

    <itemizedlist>
      <listitem>
        <para><code>uses</code></para>
      </listitem>

      <listitem>
        <para><code>effective</code></para>
      </listitem>

      <listitem>
        <para><code>cardinality</code></para>
      </listitem>
    </itemizedlist>

    <para>The requirements and capabilities in the
    <code>osgi.wiring.bundle</code> namespace must not be used in the
    Require-Capability and Provide-Capability headers.</para>
  </section>

  <section xml:id="framework.namespaces.osgi.wiring.host">
    <title>osgi.wiring.host Namespace</title>

    <para>The <code>osgi.wiring.host</code> namespace reflects the information
    in the bundle headers for the purpose of fragments. The Fragment-Host
    header is a requirement on the capability that is provided by the pair of
    Bundle-SymbolicName/Bundle-Version headers. Satisfying this requirement
    allows a fragment to attach itself to a host. A bundle must only provide
    this capability when the <code>fragment-attachment</code> directive allows
    fragments to attach and the Bundle-ManifestVersion &gt;= 2.</para>

    <para>The <code>osgi.wiring.host</code> namespace is defined in table
    <xref linkend="framework.namespaces-wiring.host.namespace"/> and in the
    <xref linkend="org.osgi.framework.namespace.HostNamespace"
    xrefstyle="hyperlink"/> class.</para>

    <table pgwide="1" xml:id="framework.namespaces-wiring.host.namespace">
      <title>osgi.wiring.host Namespace definition</title>

      <tgroup cols="6">
        <colspec colnum="1" colwidth="4*"/>

        <colspec colnum="2" colwidth="1*"/>

        <colspec colnum="3" colwidth="1*"/>

        <colspec colnum="4" colwidth="1.5*"/>

        <colspec colnum="5" colwidth="4*"/>

        <colspec colnum="6" colwidth="7*"/>

        <thead>
          <row>
            <entry>Name</entry>

            <entry>Kind</entry>

            <entry>M/O</entry>

            <entry>Type</entry>

            <entry>Syntax</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>osgi.wiring.host</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><code>String</code></entry>

            <entry><code>symbolic-name</code></entry>

            <entry><para>The name of the bundle as defined in the
            Bundle-SymbolicName header.</para></entry>
          </row>

          <row>
            <entry><code>bundle-version</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><code>Version</code></entry>

            <entry><code>version</code></entry>

            <entry><para>The version of the bundle as defined in the
            Bundle-Version header.</para></entry>
          </row>

          <row>
            <entry><code>*</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>O</code></entry>

            <entry><code>String</code></entry>

            <entry><code>*</code></entry>

            <entry><para>Any attributes defined on the Bundle-SymbolicName
            header</para></entry>
          </row>

          <row>
            <entry><code>fragment-attachment</code></entry>

            <entry><code>CD</code></entry>

            <entry><code>O</code></entry>

            <entry><code>String</code></entry>

            <entry><para><code>'always'
            |</code></para><para><code>'resolve-time'
            |</code></para><para><code>'never'</code></para></entry>

            <entry><para>Indicates how, or if, a fragment can attach to this
            host. This capability is defined on the Bundle-SymbolicName header
            with its corresponding <code>fragment-attachment</code> directive.
            See <xref linkend="framework.module.bsn"/>.</para></entry>
          </row>

          <row>
            <entry><code>extension</code></entry>

            <entry><code>RD</code></entry>

            <entry><code>O</code></entry>

            <entry><code>String</code></entry>

            <entry><para><code>'framework'</code></para></entry>

            <entry><para>Indicates if the requiring fragment bundle is a
            framework extension. See <xref
            linkend="framework.module.fragmenthost"/>.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>The effect of the <code>osgi.wiring.host</code> namespace is that
    all declared capabilities and requirements of the fragment, except the
    <code>osgi.wiring.host</code> and <code>osgi.ee</code> requirements and
    the <code>osgi.identity</code> capability, are merged with the host bundle
    as defined in the <xref
    linkend="framework.module.fragmentbundles"/>.</para>

    <para>The following directives must be ignored when specified on the
    Fragment-Host or Bundle-SymbolicName manifest headers:</para>

    <itemizedlist>
      <listitem>
        <para><code>uses</code></para>
      </listitem>

      <listitem>
        <para><code>effective</code></para>
      </listitem>

      <listitem>
        <para><code>cardinality</code></para>
      </listitem>
    </itemizedlist>

    <para>The requirements and capabilities in the
    <code>osgi.wiring.host</code> namespace must not be used in the
    Require-Capability and Provide-Capability headers.</para>
  </section>

  <section xml:id="framework.namespaces.osgi.identity">
    <title>osgi.identity Namespace</title>

    <para>The <code>osgi.identity</code> namespace has a capability that can
    uniquely identify a resource. Its purpose is to identify a type for the
    resource and then provide a name that is unique for that type. That is,
    the type can be <code>osgi.bundle</code> and then the name is a
    Bundle-SymbolicName. For example, for a certificate the type could be x509
    and the name could then its SHA-1 fingerprint. Each must have associated
    rules for the names uses as the identity name. It is required that the
    value of the <code>osgi.identity</code> attribute, plus the value of the
    <code>type</code> attribute, plus the <code>version</code> attribute are a
    unique combination.</para>

    <para>The definition of the <code>osgi.identity</code> namespace is in
    <xref linkend="framework.namespaces-identity.namespace"/> and in the <xref
    linkend="org.osgi.framework.namespace.IdentityNamespace"
    xrefstyle="hyperlink"/> class.</para>

    <table pgwide="1" xml:id="framework.namespaces-identity.namespace">
      <title>osgi.identity Namespace definition</title>

      <tgroup cols="6">
        <colspec colnum="1" colwidth="3*"/>

        <colspec colnum="2" colwidth="1*"/>

        <colspec colnum="3" colwidth="1*"/>

        <colspec colnum="4" colwidth="2*"/>

        <colspec colnum="5" colwidth="4*"/>

        <colspec colnum="6" colwidth="7*"/>

        <thead>
          <row>
            <entry>Name</entry>

            <entry>Kind</entry>

            <entry>M/O</entry>

            <entry>Type</entry>

            <entry>Syntax</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>osgi.identity</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><code>String</code></entry>

            <entry><code>symbolic-name</code></entry>

            <entry><para>The identity of the resource, for an OSGi bundle this
            is the bundle symbolic name as defined in the Bundle-SymbolicName
            header.</para></entry>
          </row>

          <row>
            <entry><code>type</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><code>String</code></entry>

            <entry><para><code>osgi.bundle
            |</code></para><para><code>osgi.fragment
            |</code></para><para><code>'unknown'
            |</code></para><para><code>&lt;any&gt;</code></para></entry>

            <entry><para>The type of the resource</para></entry>
          </row>

          <row>
            <entry><code>version</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><code>Version</code></entry>

            <entry><code>version</code></entry>

            <entry><para>The version of the resource. For an OSGi bundle this
            is as defined in the Bundle-Version header.</para></entry>
          </row>

          <row>
            <entry><code>singleton</code></entry>

            <entry><code>CD</code></entry>

            <entry><code>O</code></entry>

            <entry><code>String</code></entry>

            <entry><code>'true' |'false'</code></entry>

            <entry><para>If this resource is a singleton. The default value is
            <code>false</code>. For an OSGi bundle this is the singleton
            directive as defined in the Bundle-SymbolicName
            header.</para></entry>
          </row>

          <row>
            <entry><code>copyright</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>O</code></entry>

            <entry><code>String</code></entry>

            <entry/>

            <entry><para>A human readable copyright notice as defined for the
            Bundle-Copyright header.</para></entry>
          </row>

          <row>
            <entry><code>description</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>O</code></entry>

            <entry><code>String</code></entry>

            <entry/>

            <entry><para>A human readable description of the resource as
            defined for the Bundle-Description header.</para></entry>
          </row>

          <row>
            <entry><code>documentation</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>O</code></entry>

            <entry><code>String</code></entry>

            <entry><code>&lt;url&gt;</code></entry>

            <entry><para>A URL to where documentation of the resource can be
            found as defined for the Bundle-DocURL header.</para></entry>
          </row>

          <row>
            <entry><code>license</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>O</code></entry>

            <entry><code>String</code></entry>

            <entry><code>&lt;url&gt;</code></entry>

            <entry><para>A URL to the license for this resource. The URL must
            be the name of the license as defined in the Bundle-License
            header.</para></entry>
          </row>

          <row>
            <entry><code>tags</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>O</code></entry>

            <entry><code>List&lt;String&gt;</code></entry>

            <entry><code>extended ( ',' extended )*</code></entry>

            <entry><para>A list of tag names used to identify an aspect of
            this resource that is not otherwise expressed by the capabilities
            of this resource.</para></entry>
          </row>

          <row>
            <entry><code>*</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>O</code></entry>

            <entry><code>String</code></entry>

            <entry><code>*</code></entry>

            <entry><para>Any other attributes for the resource. For an OSGi
            bundle this is includes the attributes defined in the
            Bundle-SymbolicName header.</para></entry>
          </row>

          <row>
            <entry><code>classifier</code></entry>

            <entry><code>RD</code></entry>

            <entry><code>O</code></entry>

            <entry><code>String</code></entry>

            <entry><code>&lt;see text&gt;</code></entry>

            <entry><para>A name for the relation. Though any name is usable, a
            number of names are defined in <xref
            linkend="i1776004"/>.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>Provide-Capability headers in the <code>osgi.identity</code>
    Namespace must not be used in the manifest, Require-Capability with this
    Namespace is allowed.</para>

    <section xml:id="i1776004">
      <title>Related Resources</title>

      <para>A resource can have related resources. For example, a Bundle can
      have Javadoc, source code, link to a source control management system,
      etc. It is assumed that these artifacts are also resources. It is
      therefore necessary that a resource can specify a relation with another
      resource.</para>

      <para>A resource can specify a relation to other resource by declaring
      an optional requirement to that other resource. Such relation
      requirements should be placed in another effective time than resolve to
      not interfere with resolving, for example the effective time
      <code>meta</code>. The requirements should be in to the
      <code>osgi.identity</code> namespace and assert:</para>

      <itemizedlist>
        <listitem>
          <para><code>osgi.identity</code> - The name of the resource.</para>
        </listitem>

        <listitem>
          <para><code>type</code> - The type of the resource.</para>
        </listitem>

        <listitem>
          <para><code>version</code> - The version of the resource.</para>
        </listitem>
      </itemizedlist>

      <para>The requirement must then add a directive <code>classifier</code>
      that defines the related type so that tools like IDEs can find the
      relations by iteration over all the <code>osgi.identity</code>
      requirements that have a <code>classifier</code> directive. In general,
      these requirement should be <code>optional</code> and have a
      <code>cardinality</code> of <code>single</code>.</para>

      <para>The following values are defined for the <code>classifier</code>
      directive:</para>

      <itemizedlist>
        <listitem>
          <para><code>sources</code> - An archive containing the source code
          in the same directory layout as this resource.</para>
        </listitem>

        <listitem>
          <para><code>javadoc</code> - An archive containing the Javadoc in
          the same directory layout as this resource</para>
        </listitem>

        <listitem>
          <para>* - Any other names</para>
        </listitem>
      </itemizedlist>

      <para>For example, a bundle could contain the following requirement
      modeling a relation:</para>

      <programlisting>Require-Capability: «
    osgi.identity; «
        filter:="(&amp;(osgi.identity=org.example.foo-source)(version=1.1))"; «
        effective:=meta; «
        classifier:=sources; «
        resolution:=optional</programlisting>

      <para>The code to retrieve a related resource could look like:</para>

      <programlisting>    Repository repository = ...;

    InputStream getRelated(Resource resource, String classifier) 
        throws IOException {
        for ( Requirement r : resource.getRequirements("osgi.identity")) {
            if ( classifier.equals(r.getDirectives().get("classifier"))){
                Collection&lt;Capability&gt; caps =
                     repository.findProviders(Collections.singleton(r)).get(r);

                if ( caps==null || caps.isEmpty())
                    continue;
                
                Capability c = caps.iterator().next();
                Resource related = c.getResource();
                return ((RepositoryContent)related).getContent();
            }
        }
        return null;
    }</programlisting>
    </section>
  </section>

  <section xml:id="framework.namespaces.osgi.native">
    <title>osgi.native Namespace</title>

    <para>The <code>osgi.native</code> namespace is used to describe the
    native environment in which the Framework is executing. An OSGi Framework
    must provide a capability in the <code>osgi.native</code> namespace that
    represents the native environment in which the Framework is executing. For
    example, the following capability is provided when running a 64-bit VM on
    a Windows 7 machine with the language set to en_US:</para>

    <programlisting>Provide-Capability: «
    osgi.native; «
        osgi.native.osname:List&lt;String&gt;="Windows7,Windows 7,Win7,Win32"; «
        osgi.native.osversion:Version="7.0"; «
        osgi.native.processor:List&lt;String&gt;="x86-64,amd64,em64t,x86_64"; «
        osgi.native.language="en"</programlisting>

    <para>Provide-Capability headers in the <code>osgi.native</code> namespace
    must not be used in a bundle's manifest. Bundles can require an
    <code>osgi.native</code> capability which matches the native environment
    required for the bundle to function properly, for example:</para>

    <programlisting>Require-Capability: «
     osgi.native; «
       filter:=" «
         (&amp; «
           (osgi.native.osname~=win32) «
           (osgi.native.processor~=x86-64) «
           (osgi.native.language~=en) «
         )"</programlisting>

    <para>The <code>osgi.native</code> namespace is not used to specify native
    code paths packaged within a bundle. The <code>Bundle-NativeCode</code>
    header is used to specify native code paths. The OSGi Framework converts a
    <code>Bundle-NativeCode</code> into an <code>osgi.native</code>
    requirement which describes the native environment required to execute
    native code packaged within a Bundle (see <xref
    linkend="framework.module-loading.native.code.libraries"/>). There is no
    need for a bundle to specify both a <code>Bundle-NativeCode</code> header
    and an <code>osgi.native</code> requirement.</para>

    <para>Native code included in a Fragment Bundle gets loaded by the class
    loaders of the Host Bundles the Fragment is attached to, therefore the
    <code>osgi.native</code> requirement is hosted when it is part of a
    Fragment. That is, a requirement from this namespace must be treated as
    part of the Host Bundles the Fragment is attached to.</para>

    <para>The <code>osgi.native</code> capability is defined in table <xref
    linkend="framework.namespaces-native.namespace"/> and in the <xref
    linkend="org.osgi.framework.namespace.NativeNamespace"
    xrefstyle="hyperlink"/> class.</para>

    <table pgwide="1" xml:id="framework.namespaces-native.namespace">
      <title>osgi.native Namespace definition</title>

      <tgroup cols="6">
        <colspec colnum="1" colwidth="4*"/>

        <colspec colnum="2" colwidth="1*"/>

        <colspec colnum="3" colwidth="1*"/>

        <colspec colnum="4" colwidth="2*"/>

        <colspec colnum="5" colwidth="3*"/>

        <colspec colnum="6" colwidth="7*"/>

        <thead>
          <row>
            <entry>Name</entry>

            <entry>Kind</entry>

            <entry>M/O</entry>

            <entry>Type</entry>

            <entry>Syntax</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>osgi.native.osname</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><para><code>List</code></para><para><code>&lt;String&gt;</code></para></entry>

            <entry><para><code>osname</code></para><para><code>( ',' osname
            )*</code></para></entry>

            <entry><para>A comma separated list of canonical os name aliases
            to the <code>org.osgi.framework.os.name</code> launching property
            value (See <xref linkend="framework.module.os-names"/> and <xref
            linkend="i3287541"/>). For example, an
            <code>org.osgi.framework.os.name</code> value of
            <code>Windows95</code> will get a <code>List&lt;String&gt;</code>
            value of <code>Windows95,Windows
            95,Win95,Win32</code></para></entry>
          </row>

          <row>
            <entry><code>osgi.native.osversion</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><para><code>Version</code></para></entry>

            <entry><code>version</code></entry>

            <entry><para>A <code>Version</code> as parsed from the value of
            the <code>org.osgi.framework.os.version</code> launching
            property</para></entry>
          </row>

          <row>
            <entry><code>osgi.native.processor</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><para><code>List</code></para><para><code>&lt;String&gt;</code></para></entry>

            <entry><para><code>processor</code></para><para><code>( ','
            processor )*</code></para></entry>

            <entry><para>A comma separated list of canonical processor aliases
            to the <code>org.osgi.framework.processor</code> launching
            property value (See <xref
            linkend="framework.module.processor-names"/> and <xref
            linkend="i3287541"/>). For example, an
            <code>org.osgi.framework.processor</code> value of
            <code>x86</code> will get a <code>List&lt;String&gt;</code> value
            of <code>x86,pentium,i386,i486,i586,i686</code></para></entry>
          </row>

          <row>
            <entry><code>osgi.native.language</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><para><code>String</code></para></entry>

            <entry/>

            <entry><para>The value of the
            <code>org.osgi.framework.language</code> launching
            property</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>In addition to the attributes defined in <xref
    linkend="framework.namespaces-native.namespace"/> an OSGi Framework must
    populate the <code>osgi.native</code> capability attributes with the
    values included in the Framework launching properties (see <xref
    linkend="framework.lifecycle.launchingproperties"/>). Launching property
    keys that start with <code>osgi.native.</code> are excluded to prevent
    collisions with the defined capability attribute keys.</para>
  </section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="i1775657"><title>Specification
      References</title><biblioid class="uri"><link
      xlink:href="https://docs.osgi.org/reference/"/></biblioid></bibliomixed>
    </bibliolist>
  </section>
</chapter>
