/*
 * Copyright (c) Contributors to the Eclipse Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

/*
 * osgi.tck Gradle build script
 */

interface Injected {
	@Inject ExecOperations getExec()
	@Inject FileSystemOperations getFs()
	@Inject ArchiveOperations getArchive()
}

def jar = tasks.named("jar")

tasks.register("tck") {
	description = "Run all the TCKs."
	group = "verification"
	dependsOn("tck.core", "tck.cmpn")
}

tasks.addRule("Pattern: preptck.<name>: Prepare the TCKs for <name>.") { taskName ->
	if (taskName.startsWith("preptck.")) {
		tasks.create(taskName) {
			def book = taskName - "preptck."
			description = "Prepare the TCKs for ${book}."
			group = "verification"
			def implJarTask = parent.project("osgi.impl").tasks.named("jar")
			def implBuildDir = implJarTask.flatMap({it.destinationDirectory})
			def jarFiles = objects.fileCollection()
			jarFiles.from(fileTree(implBuildDir).include("osgi.impl.core.jar", "osgi.impl.${book}.jar")).builtBy(implJarTask)
			jarFiles.from(layout.getBuildDirectory().file("osgi.tck.${book}.jar")).builtBy(jar)
			inputs.files(jarFiles).withPathSensitivity(PathSensitivity.RELATIVE).withPropertyName("jars")
			def injected = objects.newInstance(Injected)
			def destinationDirectory = layout.getBuildDirectory().dir("osgi.tck.${book}")
			outputs.dir(destinationDirectory).withPropertyName("tckdir")
			def outputFiles = objects.fileTree().from(destinationDirectory)
			doFirst("clean") { t ->
				injected.fs.delete {
					delete(outputFiles)
				}
			}
			doLast("prep") { t ->
				jarFiles.forEach { jarFile ->
					injected.fs.copy {
						from(injected.archive.zipTree(jarFile))
						into(destinationDirectory)
					}
				}
			}
		}
	}
}

tasks.addRule("Pattern: tck.<name>: Run the TCKs for <name>.") { taskName ->
	if (taskName.startsWith("tck.")) {
		def book = taskName - "tck."
		def destinationDirectory = objects.directoryProperty().value(layout.getBuildDirectory().dir("osgi.tck.${book}"))
		def bndjar = destinationDirectory.file("jar/bnd.jar")
		def tcks = bnd.get("build.${book}.tests").tokenize(",")
		def booktask = tasks.create(taskName) {
			description = "Run the TCKs for ${book}."
			group = "verification"
		}
		tcks.forEach { bndName ->
			def tcktask = tasks.create("${taskName}.${bndName}") {
				description = "Run the ${bndName} TCK."
				group = "verification"
				dependsOn(tasks.named("preptck.${book}"))
				def injected = objects.newInstance(Injected)
				doLast("exec") { t ->
					injected.exec.javaexec {
						errorOutput = standardOutput // send stderr to stdout
						workingDir = destinationDirectory.get().getAsFile()
						mainClass = "-jar" // first arg must be the bnd jar
						args(bndjar.get().getAsFile())
						args("--exceptions")
						args("runtests")
						args("--title", bndName)
						args("--reportdir", "reports/${bndName}")
						args("${bndName}.bnd")
					}.assertNormalExitValue()
				}
			}
			booktask.dependsOn(tcktask)
		}
	}
}

// Used by GitHub Actions build to prepare the TCK test matrix
def matrix = tasks.register("matrix") {
	description = "Prepare the TCK test matrix for the GitHub Actions build."
	group = "build"
	def tck_matrix = bnd.get("tck-matrix")
	dependsOn("preptck.core", "preptck.cmpn")
	doLast {
		File output = new File(System.getenv("GITHUB_OUTPUT"))
		output.append("tck-matrix=${tck_matrix}\n", "UTF-8")
	}
}

if (Boolean.parseBoolean(System.getenv("GITHUB_ACTIONS"))) {
	jar.configure {
		finalizedBy(matrix)
	}
}
